/*
 * Exstream Orchestration
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.DataResponseFlowInstance;
import org.openapitools.client.model.DataResponseFlowInstancesAndAssociatedJobs;
import org.openapitools.client.model.DataResponseFlowModelSnapshot;
import org.openapitools.client.model.DataResponseFlowStep;
import org.openapitools.client.model.DataResponseFlowStepFlow;
import org.openapitools.client.model.DataResponseJob;
import org.openapitools.client.model.DataResponseJobDeleteStatus;
import org.openapitools.client.model.DataResponseJsonNode;
import org.openapitools.client.model.DataResponseMapObjectObject;
import org.openapitools.client.model.FlowInstanceCountsFilterRequest;
import org.openapitools.client.model.FlowInstanceFilterRequest;
import org.openapitools.client.model.FlowModelSnapshotFilterRequest;
import org.openapitools.client.model.FlowStepFilterRequest;
import org.openapitools.client.model.GenericResponse;
import org.openapitools.client.model.JobFilterRequest;
import org.openapitools.client.model.ListResponseString;
import org.openapitools.client.model.PageResponseFlowInstance;
import org.openapitools.client.model.PageResponseFlowModelSnapshot;
import org.openapitools.client.model.PageResponseFlowStep;
import org.openapitools.client.model.PageResponseJob;
import org.openapitools.client.model.PageResponseString;
import org.openapitools.client.model.PostSortRunOption;
import org.openapitools.client.model.SimplePageRequest;
import java.util.UUID;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for RuntimeControllerApi
 */
@Disabled
public class RuntimeControllerApiTest {

    private final RuntimeControllerApi api = new RuntimeControllerApi();

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteFlowInstanceTest() throws ApiException {
        String domain = null;
        UUID id = null;
        GenericResponse response = api.deleteFlowInstance(domain, id);
        // TODO: test validations
    }

    /**
     * Delete completed job
     *
     * Delete completed job entry (including all flow instances) in runtime database and correspondent job working directory.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteJobTest() throws ApiException {
        String domain = null;
        UUID id = null;
        Boolean force = null;
        api.deleteJob(domain, id, force);
        // TODO: test validations
    }

    /**
     * Delete completed, canceled or failed jobs
     *
     * Delete completed, canceled or failed job entries (including all flow instances) in runtime database and correspondent job working directories. &lt;br/&gt; Filter example: filter&#x3D;mode:BATCH;statuses:complete,error 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteJobsTest() throws ApiException {
        String domain = null;
        Boolean force = null;
        Boolean syncDelete = null;
        JobFilterRequest jobFilterRequest = null;
        DataResponseJobDeleteStatus response = api.deleteJobs(domain, force, syncDelete, jobFilterRequest);
        // TODO: test validations
    }

    /**
     * Get the customer artifacts in a zip file
     *
     * Get the customer artifacts (1 or more) in a zip file, for the specified customer number (e.g. 1)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCustomerOutputArtifactsTest() throws ApiException {
        String domain = null;
        UUID id = null;
        String customerId = null;
        api.getCustomerOutputArtifacts(domain, id, customerId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDeliveryFileOutputFilesTest() throws ApiException {
        String domain = null;
        UUID id = null;
        SimplePageRequest pageRequest = null;
        PageResponseString response = api.getDeliveryFileOutputFiles(domain, id, pageRequest);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDeliveryFileOutputsTest() throws ApiException {
        String domain = null;
        UUID id = null;
        DataResponseJsonNode response = api.getDeliveryFileOutputs(domain, id);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDeliveryFileOutputs1Test() throws ApiException {
        String domain = null;
        UUID id = null;
        String artifactName = null;
        Object response = api.getDeliveryFileOutputs1(domain, id, artifactName);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getFlowInstanceTest() throws ApiException {
        String domain = null;
        UUID id = null;
        Boolean checkArtifacts = null;
        DataResponseFlowInstance response = api.getFlowInstance(domain, id, checkArtifacts);
        // TODO: test validations
    }

    /**
     * Returns all collection resource ids used by any flow step for a flow instance
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getFlowInstanceCollectionResourcesTest() throws ApiException {
        String domain = null;
        UUID id = null;
        ListResponseString response = api.getFlowInstanceCollectionResources(domain, id);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getFlowInstanceInputTest() throws ApiException {
        String domain = null;
        UUID id = null;
        Boolean download = null;
        Object response = api.getFlowInstanceInput(domain, id, download);
        // TODO: test validations
    }

    /**
     * Get flow instances
     *
     * Get all flow instances (no filter) or all the flow instances matching the filter. &lt;br/&gt;Filter example: filter&#x3D;statuses:complete,error;externalId:specialJob 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getFlowInstancesTest() throws ApiException {
        FlowInstanceFilterRequest filterRequest = null;
        String domain = null;
        PageResponseFlowInstance response = api.getFlowInstances(filterRequest, domain);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getFlowInstancesAndAssociatedJobsTest() throws ApiException {
        String domain = null;
        FlowInstanceFilterRequest flowInstanceFilterRequest = null;
        DataResponseFlowInstancesAndAssociatedJobs response = api.getFlowInstancesAndAssociatedJobs(domain, flowInstanceFilterRequest);
        // TODO: test validations
    }

    /**
     * Get flow instances counts
     *
     * Get counts of flow instances grouped by start date and status. The counts will be automatically grouped by DAY/MONTH/YEAR based on available data.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getFlowInstancesCountsTest() throws ApiException {
        String domain = null;
        FlowInstanceCountsFilterRequest flowInstanceCountsFilterRequest = null;
        DataResponseMapObjectObject response = api.getFlowInstancesCounts(domain, flowInstanceCountsFilterRequest);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getFlowModelSnapshotTest() throws ApiException {
        String domain = null;
        UUID snapshotId = null;
        DataResponseFlowModelSnapshot response = api.getFlowModelSnapshot(domain, snapshotId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getFlowModelSnapshotsTest() throws ApiException {
        String domain = null;
        FlowModelSnapshotFilterRequest filterRequest = null;
        PageResponseFlowModelSnapshot response = api.getFlowModelSnapshots(domain, filterRequest);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getFlowStepTest() throws ApiException {
        String domain = null;
        UUID id = null;
        Boolean checkArtifacts = null;
        DataResponseFlowStep response = api.getFlowStep(domain, id, checkArtifacts);
        // TODO: test validations
    }

    /**
     * Returns all collection resource ids used by the specified flow step
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getFlowStepCollectionResourcesTest() throws ApiException {
        String domain = null;
        UUID id = null;
        ListResponseString response = api.getFlowStepCollectionResources(domain, id);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getFlowStepDeliveryFileTest() throws ApiException {
        String domain = null;
        UUID id = null;
        Boolean download = null;
        Object response = api.getFlowStepDeliveryFile(domain, id, download);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getFlowStepFlowTest() throws ApiException {
        String domain = null;
        UUID id = null;
        DataResponseFlowStepFlow response = api.getFlowStepFlow(domain, id);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getFlowStepMessageFileTest() throws ApiException {
        String domain = null;
        UUID id = null;
        Boolean download = null;
        Object response = api.getFlowStepMessageFile(domain, id, download);
        // TODO: test validations
    }

    /**
     * Get flow steps
     *
     * Get all flow steps in the domain (no filter) or all the flow steps matching the filter. &lt;br/&gt;Filter example: name:FileInput;statuses:complete,error
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getFlowStepsTest() throws ApiException {
        FlowStepFilterRequest filterRequest = null;
        String domain = null;
        Boolean checkArtifacts = null;
        PageResponseFlowStep response = api.getFlowSteps(filterRequest, domain, checkArtifacts);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getJobTest() throws ApiException {
        String domain = null;
        UUID id = null;
        DataResponseJob response = api.getJob(domain, id);
        // TODO: test validations
    }

    /**
     * Get jobs
     *
     * Get all jobs (no filter) or all the jobs matching the filter. &lt;br/&gt;Filter example: filter&#x3D;mode:BATCH;statuses:complete,error 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getJobsTest() throws ApiException {
        JobFilterRequest filterRequest = null;
        String domain = null;
        Boolean fetchDeleted = null;
        PageResponseJob response = api.getJobs(filterRequest, domain, fetchDeleted);
        // TODO: test validations
    }

    /**
     * Continue a held flow instance
     *
     * Release a flow instance in holding state.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void releaseHoldingFlowInstancesTest() throws ApiException {
        String domain = null;
        UUID id = null;
        String response = api.releaseHoldingFlowInstances(domain, id);
        // TODO: test validations
    }

    /**
     * Continue a held flow step
     *
     * Release a flow step in holding state.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void releaseHoldingFlowStepTest() throws ApiException {
        String domain = null;
        UUID id = null;
        String response = api.releaseHoldingFlowStep(domain, id);
        // TODO: test validations
    }

    /**
     * Reprocess job
     *
     * Reprocess the job with the specified id, optionally using the current flow model and/or the current flow context
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void reprocessJobTest() throws ApiException {
        String domain = null;
        UUID id = null;
        Boolean useCurrentFlowModel = null;
        Boolean useCurrentFlowContext = null;
        String response = api.reprocessJob(domain, id, useCurrentFlowModel, useCurrentFlowContext);
        // TODO: test validations
    }

    /**
     * Trigger post-sort run
     *
     * Trigger a post-sort related job
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void startPostSortJobTest() throws ApiException {
        String domain = null;
        PostSortRunOption postSortRunOption = null;
        GenericResponse response = api.startPostSortJob(domain, postSortRunOption);
        // TODO: test validations
    }

    /**
     * Cancel flow instance
     *
     * Stop a running flow instance entry (including all flow steps) in runtime database.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stopFlowInstanceTest() throws ApiException {
        String domain = null;
        UUID id = null;
        String response = api.stopFlowInstance(domain, id);
        // TODO: test validations
    }

    /**
     * Cancel flow step
     *
     * Stop a running flow step in runtime database.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stopFlowStepTest() throws ApiException {
        String domain = null;
        UUID id = null;
        String response = api.stopFlowStep(domain, id);
        // TODO: test validations
    }

    /**
     * Cancel job
     *
     * Stop a running job entry (including all flow instances) in runtime database.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stopJobTest() throws ApiException {
        String domain = null;
        UUID id = null;
        String response = api.stopJob(domain, id);
        // TODO: test validations
    }

}
