/*
 * Exstream Orchestration
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.DataResponseSortingAsset;
import org.openapitools.client.model.GenericResponse;
import org.openapitools.client.model.SortingDataFilterRequest;
import java.util.UUID;
import org.openapitools.client.model.UpdateState1Request;
import org.openapitools.client.model.UpdateStateRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for SortDataControllerApi
 */
@Disabled
public class SortDataControllerApiTest {

    private final SortDataControllerApi api = new SortDataControllerApi();

    /**
     * Delete sorting assets and set the jobs, instances and queued flow steps using those assets to error. The only possible parameters are domain (in the URL) and the mandatory filter
     *
     * Sorting assets using synchronous mode is not included.  The filter value is a semicolon delimited list of key value pairs.  List values separate possible values with commas. These are the only keys possible, please ignore the parameters below this list: | Filter name                    | Filter value description                                                         | |--------------------------------|----------------------------------------------------------------------------------| | flowModelIds                   | Match sorting assets with these flow model ids.                                  | | communicationIds               | Match sorting assets with these communication ids.                               | | queueNames                     | Match sorting assets with these queue names.                                     | | externalIds                    | Match sorting assets with these external ids.                                    | | flowStepIds                    | Match sorting assets with these flow step ids.                                   | | ids                            | Match sorting assets with these sorting asset ids.                               | | jobIds                         | Match sorting assets with these job ids.                                         | | referenceIds                   | Match sorting assets with these reference ids.                                   | | sortSubflows                   | Match sorting assets with these sort sub flows.                                  | | metadata                       | Match sorting assets with these metadata values.                                 | | states                         | Match sorting assets with any of these states. Possible values: processed,waiting,expired,canceled,all| | customersCountFrom             | Match sorting assets having customer count from this number.                     | | customersCountTo               | Match sorting assets having customer count to this number.                       | | creationDateStart              | Match sorting assets created after this date. (yyyy-MM-dd format)                | | creationDateEnd                | Match sorting assets created before this date. (yyyy-MM-dd format)               | | lastModificationDateStart      | Match sorting assets modified after this date. (yyyy-MM-dd format)               | | lastModificationDateEnd        | Match sorting assets modified before this date. (yyyy-MM-dd format)              | Note: For following special characters in strings (applicable for queueNames, externalIds, sortSubflows, metadata) use:  : &amp;rarr; /colon/  ; &amp;rarr; /semi/  \\ &amp;rarr; /bsol/  Example - filter&#x3D;states:expired;queueNames:SortPrep
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteSortDataTest() throws ApiException {
        String domain = null;
        SortingDataFilterRequest sortingDataFilterRequest = null;
        GenericResponse response = api.deleteSortData(domain, sortingDataFilterRequest);
        // TODO: test validations
    }

    /**
     * Delete sorting asset and set the jobs, instances and queued flow steps using those assets to error. The only possible parameters are domain (in the URL) and the sorting asset id (in the URL)
     *
     * Sorting assets using synchronous mode is not included.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteSortData1Test() throws ApiException {
        String domain = null;
        UUID id = null;
        GenericResponse response = api.deleteSortData1(domain, id);
        // TODO: test validations
    }

    /**
     * Get sorting asset. The only possible parameters are domain (in the URL) and the id (in the URL)
     *
     * Sorting assets using synchronous mode is not included.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSortingAssetTest() throws ApiException {
        String domain = null;
        UUID id = null;
        DataResponseSortingAsset response = api.getSortingAsset(domain, id);
        // TODO: test validations
    }

    /**
     * Get content of sorting assets. Possible parameters are domain (in the URL) and the id (in the URL) of the sorting asset.
     *
     * Sorting assets using synchronous mode is not included.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSortingAssetContentTest() throws ApiException {
        String domain = null;
        UUID id = null;
        api.getSortingAssetContent(domain, id);
        // TODO: test validations
    }

    /**
     * List sorting assets. Possible parameters are domain (in the URL) and the optional parameters filter,count,offset and sort
     *
     * Sorting assets using synchronous mode is not included.  The filter value is a semicolon delimited list of key value pairs.  List values separate possible values with commas. These are the only keys possible, please ignore the parameters below this list: | Filter name                    | Filter value description                                                         | |--------------------------------|----------------------------------------------------------------------------------| | flowModelIds                   | Match sorting assets with these flow model ids.                                  | | communicationIds               | Match sorting assets with these communication ids.                               | | queueNames                     | Match sorting assets with these queue names.                                     | | externalIds                    | Match sorting assets with these external ids.                                    | | flowStepIds                    | Match sorting assets with these flow step ids.                                   | | ids                            | Match sorting assets with these sorting asset ids.                               | | jobIds                         | Match sorting assets with these job ids.                                         | | referenceIds                   | Match sorting assets with these reference ids.                                   | | sortSubflows                   | Match sorting assets with these sort sub flows.                                  | | metadata                       | Match sorting assets with these metadata values.                                 | | states                         | Match sorting assets with any of these states. Possible values: processed,waiting,expired,canceled,all| | customersCountFrom             | Match sorting assets having customer count from this number.                     | | customersCountTo               | Match sorting assets having customer count to this number.                       | | creationDateStart              | Match sorting assets created after this date. (yyyy-MM-dd format)                | | creationDateEnd                | Match sorting assets created before this date. (yyyy-MM-dd format)               | | lastModificationDateStart      | Match sorting assets modified after this date. (yyyy-MM-dd format)               | | lastModificationDateEnd        | Match sorting assets modified before this date. (yyyy-MM-dd format)              | Note: For following special characters in strings (applicable for queueNames, externalIds, sortSubflows, metadata) use:  : &amp;rarr; /colon/  ; &amp;rarr; /semi/  \\ &amp;rarr; /bsol/  Example - filter&#x3D;queueNames:SortPrep&amp;count&#x3D;10&amp;offset&#x3D;0
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listSortingAssetsTest() throws ApiException {
        String domain = null;
        SortingDataFilterRequest filterRequest = null;
        GenericResponse response = api.listSortingAssets(domain, filterRequest);
        // TODO: test validations
    }

    /**
     * Update state for all sort assets matching filter criteria. Possible parameters are domain (in the URL), state and the mandatory filter
     *
     * Sorting assets using synchronous mode is not included.  The filter value is a semicolon delimited list of key value pairs.  List values separate possible values with commas. These are the only keys possible, please ignore the parameters below this list: | Filter name                    | Filter value description                                                         | |--------------------------------|----------------------------------------------------------------------------------| | flowModelIds                   | Match sorting assets with these flow model ids.                                  | | communicationIds               | Match sorting assets with these communication ids.                               | | queueNames                     | Match sorting assets with these queue names.                                     | | externalIds                    | Match sorting assets with these external ids.                                    | | flowStepIds                    | Match sorting assets with these flow step ids.                                   | | ids                            | Match sorting assets with these sorting asset ids.                               | | jobIds                         | Match sorting assets with these job ids.                                         | | referenceIds                   | Match sorting assets with these reference ids.                                   | | sortSubflows                   | Match sorting assets with these sort sub flows.                                  | | metadata                       | Match sorting assets with these metadata values.                                 | | states                         | Match sorting assets with any of these states. Possible values: processed,waiting,expired,canceled,all| | customersCountFrom             | Match sorting assets having customer count from this number.                     | | customersCountTo               | Match sorting assets having customer count to this number.                       | | creationDateStart              | Match sorting assets created after this date. (yyyy-MM-dd format)                | | creationDateEnd                | Match sorting assets created before this date. (yyyy-MM-dd format)               | | lastModificationDateStart      | Match sorting assets modified after this date. (yyyy-MM-dd format)               | | lastModificationDateEnd        | Match sorting assets modified before this date. (yyyy-MM-dd format)              | Note: For following special characters in strings (applicable for queueNames, externalIds, sortSubflows, metadata) use:  : &amp;rarr; /colon/  ; &amp;rarr; /semi/  \\ &amp;rarr; /bsol/  Example - state&#x3D;waiting&amp;filter&#x3D;externalIds:Ext001;states:processed
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateStateTest() throws ApiException {
        String domain = null;
        UpdateStateRequest updateStateRequest = null;
        GenericResponse response = api.updateState(domain, updateStateRequest);
        // TODO: test validations
    }

    /**
     * Update state for all sort assets referenced by given id. Possible parameters are domain (in the URL), id (in the URL) and state.
     *
     * Sorting assets using synchronous mode is not included.  Example - state&#x3D;expired
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateState1Test() throws ApiException {
        String domain = null;
        UUID id = null;
        UpdateState1Request updateState1Request = null;
        DataResponseSortingAsset response = api.updateState1(domain, id, updateState1Request);
        // TODO: test validations
    }

}
