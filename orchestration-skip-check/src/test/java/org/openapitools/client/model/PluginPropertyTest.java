/*
 * Exstream Orchestration
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.OptionValue;
import org.openapitools.client.model.PluginDynamicOptions;
import org.openapitools.client.model.PluginMigrationConfig;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for PluginProperty
 */
public class PluginPropertyTest {
    private final PluginProperty model = new PluginProperty();

    /**
     * Model tests for PluginProperty
     */
    @Test
    public void testPluginProperty() {
        // TODO: test PluginProperty
    }

    /**
     * Test the property 'id'
     */
    @Test
    public void idTest() {
        // TODO: test id
    }

    /**
     * Test the property 'label'
     */
    @Test
    public void labelTest() {
        // TODO: test label
    }

    /**
     * Test the property 'defaultValue'
     */
    @Test
    public void defaultValueTest() {
        // TODO: test defaultValue
    }

    /**
     * Test the property 'type'
     */
    @Test
    public void typeTest() {
        // TODO: test type
    }

    /**
     * Test the property 'required'
     */
    @Test
    public void requiredTest() {
        // TODO: test required
    }

    /**
     * Test the property 'disabled'
     */
    @Test
    public void disabledTest() {
        // TODO: test disabled
    }

    /**
     * Test the property 'placeholder'
     */
    @Test
    public void placeholderTest() {
        // TODO: test placeholder
    }

    /**
     * Test the property 'maxLength'
     */
    @Test
    public void maxLengthTest() {
        // TODO: test maxLength
    }

    /**
     * Test the property 'validator'
     */
    @Test
    public void validatorTest() {
        // TODO: test validator
    }

    /**
     * Test the property 'validators'
     */
    @Test
    public void validatorsTest() {
        // TODO: test validators
    }

    /**
     * Test the property 'visible'
     */
    @Test
    public void visibleTest() {
        // TODO: test visible
    }

    /**
     * Test the property 'options'
     */
    @Test
    public void optionsTest() {
        // TODO: test options
    }

    /**
     * Test the property 'minListRows'
     */
    @Test
    public void minListRowsTest() {
        // TODO: test minListRows
    }

    /**
     * Test the property 'maxListRows'
     */
    @Test
    public void maxListRowsTest() {
        // TODO: test maxListRows
    }

    /**
     * Test the property 'instruction'
     */
    @Test
    public void instructionTest() {
        // TODO: test instruction
    }

    /**
     * Test the property 'rows'
     */
    @Test
    public void rowsTest() {
        // TODO: test rows
    }

    /**
     * Test the property 'migration'
     */
    @Test
    public void migrationTest() {
        // TODO: test migration
    }

    /**
     * Test the property 'headers'
     */
    @Test
    public void headersTest() {
        // TODO: test headers
    }

    /**
     * Test the property 'dynamicOptions'
     */
    @Test
    public void dynamicOptionsTest() {
        // TODO: test dynamicOptions
    }

}
