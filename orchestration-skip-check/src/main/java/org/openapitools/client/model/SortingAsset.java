/*
 * Exstream Orchestration
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.UUID;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SortingAsset
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-17T13:55:50.549398439Z[Europe/Lisbon]")
public class SortingAsset {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private UUID id;

  public static final String SERIALIZED_NAME_JOB_ID = "jobId";
  @SerializedName(SERIALIZED_NAME_JOB_ID)
  private UUID jobId;

  public static final String SERIALIZED_NAME_FLOW_STEP_ID = "flowStepId";
  @SerializedName(SERIALIZED_NAME_FLOW_STEP_ID)
  private UUID flowStepId;

  public static final String SERIALIZED_NAME_FLOW_MODEL_ID = "flowModelId";
  @SerializedName(SERIALIZED_NAME_FLOW_MODEL_ID)
  private UUID flowModelId;

  public static final String SERIALIZED_NAME_COMMUNICATION_ID = "communicationId";
  @SerializedName(SERIALIZED_NAME_COMMUNICATION_ID)
  private UUID communicationId;

  public static final String SERIALIZED_NAME_SUBPACKAGE_IDS = "subpackageIds";
  @SerializedName(SERIALIZED_NAME_SUBPACKAGE_IDS)
  private String subpackageIds;

  /**
   * Gets or Sets state
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    PROCESSED("processed"),
    
    WAITING("waiting"),
    
    EXPIRED("expired"),
    
    CANCELED("canceled"),
    
    ALL("all");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private StateEnum state;

  public static final String SERIALIZED_NAME_CREATION_DATE = "creationDate";
  @SerializedName(SERIALIZED_NAME_CREATION_DATE)
  private OffsetDateTime creationDate;

  public static final String SERIALIZED_NAME_LAST_MODIFICATION_DATE = "lastModificationDate";
  @SerializedName(SERIALIZED_NAME_LAST_MODIFICATION_DATE)
  private OffsetDateTime lastModificationDate;

  public static final String SERIALIZED_NAME_QUEUE_NAME = "queueName";
  @SerializedName(SERIALIZED_NAME_QUEUE_NAME)
  private String queueName;

  public static final String SERIALIZED_NAME_METADATA = "metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  private String metadata;

  public static final String SERIALIZED_NAME_ENGINE_INFO = "engineInfo";
  @SerializedName(SERIALIZED_NAME_ENGINE_INFO)
  private String engineInfo;

  public static final String SERIALIZED_NAME_SORT_SUBFLOW = "sortSubflow";
  @SerializedName(SERIALIZED_NAME_SORT_SUBFLOW)
  private String sortSubflow;

  public static final String SERIALIZED_NAME_EXTERNAL_ID = "externalId";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_ID)
  private String externalId;

  public static final String SERIALIZED_NAME_REFERENCE_ID = "referenceId";
  @SerializedName(SERIALIZED_NAME_REFERENCE_ID)
  private UUID referenceId;

  public static final String SERIALIZED_NAME_CUSTOMERS_COUNT = "customersCount";
  @SerializedName(SERIALIZED_NAME_CUSTOMERS_COUNT)
  private Integer customersCount;

  public static final String SERIALIZED_NAME_SUB_PACKAGE_IDS = "subPackageIds";
  @SerializedName(SERIALIZED_NAME_SUB_PACKAGE_IDS)
  private String subPackageIds;

  public SortingAsset() {
  }

  public SortingAsset id(UUID id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nullable
  public UUID getId() {
    return id;
  }

  public void setId(UUID id) {
    this.id = id;
  }


  public SortingAsset jobId(UUID jobId) {
    this.jobId = jobId;
    return this;
  }

   /**
   * Get jobId
   * @return jobId
  **/
  @javax.annotation.Nullable
  public UUID getJobId() {
    return jobId;
  }

  public void setJobId(UUID jobId) {
    this.jobId = jobId;
  }


  public SortingAsset flowStepId(UUID flowStepId) {
    this.flowStepId = flowStepId;
    return this;
  }

   /**
   * Get flowStepId
   * @return flowStepId
  **/
  @javax.annotation.Nullable
  public UUID getFlowStepId() {
    return flowStepId;
  }

  public void setFlowStepId(UUID flowStepId) {
    this.flowStepId = flowStepId;
  }


  public SortingAsset flowModelId(UUID flowModelId) {
    this.flowModelId = flowModelId;
    return this;
  }

   /**
   * Get flowModelId
   * @return flowModelId
  **/
  @javax.annotation.Nullable
  public UUID getFlowModelId() {
    return flowModelId;
  }

  public void setFlowModelId(UUID flowModelId) {
    this.flowModelId = flowModelId;
  }


  public SortingAsset communicationId(UUID communicationId) {
    this.communicationId = communicationId;
    return this;
  }

   /**
   * Get communicationId
   * @return communicationId
  **/
  @javax.annotation.Nullable
  public UUID getCommunicationId() {
    return communicationId;
  }

  public void setCommunicationId(UUID communicationId) {
    this.communicationId = communicationId;
  }


  public SortingAsset subpackageIds(String subpackageIds) {
    this.subpackageIds = subpackageIds;
    return this;
  }

   /**
   * Get subpackageIds
   * @return subpackageIds
  **/
  @javax.annotation.Nullable
  public String getSubpackageIds() {
    return subpackageIds;
  }

  public void setSubpackageIds(String subpackageIds) {
    this.subpackageIds = subpackageIds;
  }


  public SortingAsset state(StateEnum state) {
    this.state = state;
    return this;
  }

   /**
   * Get state
   * @return state
  **/
  @javax.annotation.Nullable
  public StateEnum getState() {
    return state;
  }

  public void setState(StateEnum state) {
    this.state = state;
  }


  public SortingAsset creationDate(OffsetDateTime creationDate) {
    this.creationDate = creationDate;
    return this;
  }

   /**
   * Get creationDate
   * @return creationDate
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getCreationDate() {
    return creationDate;
  }

  public void setCreationDate(OffsetDateTime creationDate) {
    this.creationDate = creationDate;
  }


  public SortingAsset lastModificationDate(OffsetDateTime lastModificationDate) {
    this.lastModificationDate = lastModificationDate;
    return this;
  }

   /**
   * Get lastModificationDate
   * @return lastModificationDate
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getLastModificationDate() {
    return lastModificationDate;
  }

  public void setLastModificationDate(OffsetDateTime lastModificationDate) {
    this.lastModificationDate = lastModificationDate;
  }


  public SortingAsset queueName(String queueName) {
    this.queueName = queueName;
    return this;
  }

   /**
   * Get queueName
   * @return queueName
  **/
  @javax.annotation.Nullable
  public String getQueueName() {
    return queueName;
  }

  public void setQueueName(String queueName) {
    this.queueName = queueName;
  }


  public SortingAsset metadata(String metadata) {
    this.metadata = metadata;
    return this;
  }

   /**
   * Get metadata
   * @return metadata
  **/
  @javax.annotation.Nullable
  public String getMetadata() {
    return metadata;
  }

  public void setMetadata(String metadata) {
    this.metadata = metadata;
  }


  public SortingAsset engineInfo(String engineInfo) {
    this.engineInfo = engineInfo;
    return this;
  }

   /**
   * Get engineInfo
   * @return engineInfo
  **/
  @javax.annotation.Nullable
  public String getEngineInfo() {
    return engineInfo;
  }

  public void setEngineInfo(String engineInfo) {
    this.engineInfo = engineInfo;
  }


  public SortingAsset sortSubflow(String sortSubflow) {
    this.sortSubflow = sortSubflow;
    return this;
  }

   /**
   * Get sortSubflow
   * @return sortSubflow
  **/
  @javax.annotation.Nullable
  public String getSortSubflow() {
    return sortSubflow;
  }

  public void setSortSubflow(String sortSubflow) {
    this.sortSubflow = sortSubflow;
  }


  public SortingAsset externalId(String externalId) {
    this.externalId = externalId;
    return this;
  }

   /**
   * Get externalId
   * @return externalId
  **/
  @javax.annotation.Nullable
  public String getExternalId() {
    return externalId;
  }

  public void setExternalId(String externalId) {
    this.externalId = externalId;
  }


  public SortingAsset referenceId(UUID referenceId) {
    this.referenceId = referenceId;
    return this;
  }

   /**
   * Get referenceId
   * @return referenceId
  **/
  @javax.annotation.Nullable
  public UUID getReferenceId() {
    return referenceId;
  }

  public void setReferenceId(UUID referenceId) {
    this.referenceId = referenceId;
  }


  public SortingAsset customersCount(Integer customersCount) {
    this.customersCount = customersCount;
    return this;
  }

   /**
   * Get customersCount
   * @return customersCount
  **/
  @javax.annotation.Nullable
  public Integer getCustomersCount() {
    return customersCount;
  }

  public void setCustomersCount(Integer customersCount) {
    this.customersCount = customersCount;
  }


  public SortingAsset subPackageIds(String subPackageIds) {
    this.subPackageIds = subPackageIds;
    return this;
  }

   /**
   * Get subPackageIds
   * @return subPackageIds
  **/
  @javax.annotation.Nullable
  public String getSubPackageIds() {
    return subPackageIds;
  }

  public void setSubPackageIds(String subPackageIds) {
    this.subPackageIds = subPackageIds;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SortingAsset sortingAsset = (SortingAsset) o;
    return Objects.equals(this.id, sortingAsset.id) &&
        Objects.equals(this.jobId, sortingAsset.jobId) &&
        Objects.equals(this.flowStepId, sortingAsset.flowStepId) &&
        Objects.equals(this.flowModelId, sortingAsset.flowModelId) &&
        Objects.equals(this.communicationId, sortingAsset.communicationId) &&
        Objects.equals(this.subpackageIds, sortingAsset.subpackageIds) &&
        Objects.equals(this.state, sortingAsset.state) &&
        Objects.equals(this.creationDate, sortingAsset.creationDate) &&
        Objects.equals(this.lastModificationDate, sortingAsset.lastModificationDate) &&
        Objects.equals(this.queueName, sortingAsset.queueName) &&
        Objects.equals(this.metadata, sortingAsset.metadata) &&
        Objects.equals(this.engineInfo, sortingAsset.engineInfo) &&
        Objects.equals(this.sortSubflow, sortingAsset.sortSubflow) &&
        Objects.equals(this.externalId, sortingAsset.externalId) &&
        Objects.equals(this.referenceId, sortingAsset.referenceId) &&
        Objects.equals(this.customersCount, sortingAsset.customersCount) &&
        Objects.equals(this.subPackageIds, sortingAsset.subPackageIds);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, jobId, flowStepId, flowModelId, communicationId, subpackageIds, state, creationDate, lastModificationDate, queueName, metadata, engineInfo, sortSubflow, externalId, referenceId, customersCount, subPackageIds);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SortingAsset {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    jobId: ").append(toIndentedString(jobId)).append("\n");
    sb.append("    flowStepId: ").append(toIndentedString(flowStepId)).append("\n");
    sb.append("    flowModelId: ").append(toIndentedString(flowModelId)).append("\n");
    sb.append("    communicationId: ").append(toIndentedString(communicationId)).append("\n");
    sb.append("    subpackageIds: ").append(toIndentedString(subpackageIds)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    creationDate: ").append(toIndentedString(creationDate)).append("\n");
    sb.append("    lastModificationDate: ").append(toIndentedString(lastModificationDate)).append("\n");
    sb.append("    queueName: ").append(toIndentedString(queueName)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    engineInfo: ").append(toIndentedString(engineInfo)).append("\n");
    sb.append("    sortSubflow: ").append(toIndentedString(sortSubflow)).append("\n");
    sb.append("    externalId: ").append(toIndentedString(externalId)).append("\n");
    sb.append("    referenceId: ").append(toIndentedString(referenceId)).append("\n");
    sb.append("    customersCount: ").append(toIndentedString(customersCount)).append("\n");
    sb.append("    subPackageIds: ").append(toIndentedString(subPackageIds)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("jobId");
    openapiFields.add("flowStepId");
    openapiFields.add("flowModelId");
    openapiFields.add("communicationId");
    openapiFields.add("subpackageIds");
    openapiFields.add("state");
    openapiFields.add("creationDate");
    openapiFields.add("lastModificationDate");
    openapiFields.add("queueName");
    openapiFields.add("metadata");
    openapiFields.add("engineInfo");
    openapiFields.add("sortSubflow");
    openapiFields.add("externalId");
    openapiFields.add("referenceId");
    openapiFields.add("customersCount");
    openapiFields.add("subPackageIds");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to SortingAsset
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SortingAsset.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SortingAsset is not found in the empty JSON string", SortingAsset.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SortingAsset.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SortingAsset` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("jobId") != null && !jsonObj.get("jobId").isJsonNull()) && !jsonObj.get("jobId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `jobId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("jobId").toString()));
      }
      if ((jsonObj.get("flowStepId") != null && !jsonObj.get("flowStepId").isJsonNull()) && !jsonObj.get("flowStepId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `flowStepId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("flowStepId").toString()));
      }
      if ((jsonObj.get("flowModelId") != null && !jsonObj.get("flowModelId").isJsonNull()) && !jsonObj.get("flowModelId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `flowModelId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("flowModelId").toString()));
      }
      if ((jsonObj.get("communicationId") != null && !jsonObj.get("communicationId").isJsonNull()) && !jsonObj.get("communicationId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `communicationId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("communicationId").toString()));
      }
      if ((jsonObj.get("subpackageIds") != null && !jsonObj.get("subpackageIds").isJsonNull()) && !jsonObj.get("subpackageIds").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subpackageIds` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subpackageIds").toString()));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      // validate the optional field `state`
      if (jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) {
        StateEnum.validateJsonElement(jsonObj.get("state"));
      }
      if ((jsonObj.get("queueName") != null && !jsonObj.get("queueName").isJsonNull()) && !jsonObj.get("queueName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `queueName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("queueName").toString()));
      }
      if ((jsonObj.get("metadata") != null && !jsonObj.get("metadata").isJsonNull()) && !jsonObj.get("metadata").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `metadata` to be a primitive type in the JSON string but got `%s`", jsonObj.get("metadata").toString()));
      }
      if ((jsonObj.get("engineInfo") != null && !jsonObj.get("engineInfo").isJsonNull()) && !jsonObj.get("engineInfo").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `engineInfo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("engineInfo").toString()));
      }
      if ((jsonObj.get("sortSubflow") != null && !jsonObj.get("sortSubflow").isJsonNull()) && !jsonObj.get("sortSubflow").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sortSubflow` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sortSubflow").toString()));
      }
      if ((jsonObj.get("externalId") != null && !jsonObj.get("externalId").isJsonNull()) && !jsonObj.get("externalId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `externalId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("externalId").toString()));
      }
      if ((jsonObj.get("referenceId") != null && !jsonObj.get("referenceId").isJsonNull()) && !jsonObj.get("referenceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `referenceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("referenceId").toString()));
      }
      if ((jsonObj.get("subPackageIds") != null && !jsonObj.get("subPackageIds").isJsonNull()) && !jsonObj.get("subPackageIds").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subPackageIds` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subPackageIds").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SortingAsset.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SortingAsset' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SortingAsset> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SortingAsset.class));

       return (TypeAdapter<T>) new TypeAdapter<SortingAsset>() {
           @Override
           public void write(JsonWriter out, SortingAsset value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SortingAsset read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of SortingAsset given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of SortingAsset
  * @throws IOException if the JSON string is invalid with respect to SortingAsset
  */
  public static SortingAsset fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SortingAsset.class);
  }

 /**
  * Convert an instance of SortingAsset to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

