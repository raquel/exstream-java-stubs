/*
 * Exstream Orchestration
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PostSortRunFilter
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-17T13:55:50.549398439Z[Europe/Lisbon]")
public class PostSortRunFilter {
  public static final String SERIALIZED_NAME_IDS = "ids";
  @SerializedName(SERIALIZED_NAME_IDS)
  private List<UUID> ids;

  public static final String SERIALIZED_NAME_JOB_IDS = "jobIds";
  @SerializedName(SERIALIZED_NAME_JOB_IDS)
  private List<UUID> jobIds;

  public static final String SERIALIZED_NAME_FLOW_STEP_IDS = "flowStepIds";
  @SerializedName(SERIALIZED_NAME_FLOW_STEP_IDS)
  private List<UUID> flowStepIds;

  public static final String SERIALIZED_NAME_COMMUNICATION_IDS = "communicationIds";
  @SerializedName(SERIALIZED_NAME_COMMUNICATION_IDS)
  private List<UUID> communicationIds;

  public static final String SERIALIZED_NAME_QUEUE_NAMES = "queueNames";
  @SerializedName(SERIALIZED_NAME_QUEUE_NAMES)
  private List<String> queueNames;

  public static final String SERIALIZED_NAME_CREATION_DATE_START = "creationDateStart";
  @SerializedName(SERIALIZED_NAME_CREATION_DATE_START)
  private String creationDateStart;

  public static final String SERIALIZED_NAME_CREATION_DATE_END = "creationDateEnd";
  @SerializedName(SERIALIZED_NAME_CREATION_DATE_END)
  private String creationDateEnd;

  public static final String SERIALIZED_NAME_EXTERNAL_IDS = "externalIds";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_IDS)
  private List<String> externalIds;

  public PostSortRunFilter() {
  }

  public PostSortRunFilter ids(List<UUID> ids) {
    this.ids = ids;
    return this;
  }

  public PostSortRunFilter addIdsItem(UUID idsItem) {
    if (this.ids == null) {
      this.ids = new ArrayList<>();
    }
    this.ids.add(idsItem);
    return this;
  }

   /**
   * Get ids
   * @return ids
  **/
  @javax.annotation.Nullable
  public List<UUID> getIds() {
    return ids;
  }

  public void setIds(List<UUID> ids) {
    this.ids = ids;
  }


  public PostSortRunFilter jobIds(List<UUID> jobIds) {
    this.jobIds = jobIds;
    return this;
  }

  public PostSortRunFilter addJobIdsItem(UUID jobIdsItem) {
    if (this.jobIds == null) {
      this.jobIds = new ArrayList<>();
    }
    this.jobIds.add(jobIdsItem);
    return this;
  }

   /**
   * Get jobIds
   * @return jobIds
  **/
  @javax.annotation.Nullable
  public List<UUID> getJobIds() {
    return jobIds;
  }

  public void setJobIds(List<UUID> jobIds) {
    this.jobIds = jobIds;
  }


  public PostSortRunFilter flowStepIds(List<UUID> flowStepIds) {
    this.flowStepIds = flowStepIds;
    return this;
  }

  public PostSortRunFilter addFlowStepIdsItem(UUID flowStepIdsItem) {
    if (this.flowStepIds == null) {
      this.flowStepIds = new ArrayList<>();
    }
    this.flowStepIds.add(flowStepIdsItem);
    return this;
  }

   /**
   * Get flowStepIds
   * @return flowStepIds
  **/
  @javax.annotation.Nullable
  public List<UUID> getFlowStepIds() {
    return flowStepIds;
  }

  public void setFlowStepIds(List<UUID> flowStepIds) {
    this.flowStepIds = flowStepIds;
  }


  public PostSortRunFilter communicationIds(List<UUID> communicationIds) {
    this.communicationIds = communicationIds;
    return this;
  }

  public PostSortRunFilter addCommunicationIdsItem(UUID communicationIdsItem) {
    if (this.communicationIds == null) {
      this.communicationIds = new ArrayList<>();
    }
    this.communicationIds.add(communicationIdsItem);
    return this;
  }

   /**
   * Get communicationIds
   * @return communicationIds
  **/
  @javax.annotation.Nullable
  public List<UUID> getCommunicationIds() {
    return communicationIds;
  }

  public void setCommunicationIds(List<UUID> communicationIds) {
    this.communicationIds = communicationIds;
  }


  public PostSortRunFilter queueNames(List<String> queueNames) {
    this.queueNames = queueNames;
    return this;
  }

  public PostSortRunFilter addQueueNamesItem(String queueNamesItem) {
    if (this.queueNames == null) {
      this.queueNames = new ArrayList<>();
    }
    this.queueNames.add(queueNamesItem);
    return this;
  }

   /**
   * Get queueNames
   * @return queueNames
  **/
  @javax.annotation.Nullable
  public List<String> getQueueNames() {
    return queueNames;
  }

  public void setQueueNames(List<String> queueNames) {
    this.queueNames = queueNames;
  }


  public PostSortRunFilter creationDateStart(String creationDateStart) {
    this.creationDateStart = creationDateStart;
    return this;
  }

   /**
   * Get creationDateStart
   * @return creationDateStart
  **/
  @javax.annotation.Nullable
  public String getCreationDateStart() {
    return creationDateStart;
  }

  public void setCreationDateStart(String creationDateStart) {
    this.creationDateStart = creationDateStart;
  }


  public PostSortRunFilter creationDateEnd(String creationDateEnd) {
    this.creationDateEnd = creationDateEnd;
    return this;
  }

   /**
   * Get creationDateEnd
   * @return creationDateEnd
  **/
  @javax.annotation.Nullable
  public String getCreationDateEnd() {
    return creationDateEnd;
  }

  public void setCreationDateEnd(String creationDateEnd) {
    this.creationDateEnd = creationDateEnd;
  }


  public PostSortRunFilter externalIds(List<String> externalIds) {
    this.externalIds = externalIds;
    return this;
  }

  public PostSortRunFilter addExternalIdsItem(String externalIdsItem) {
    if (this.externalIds == null) {
      this.externalIds = new ArrayList<>();
    }
    this.externalIds.add(externalIdsItem);
    return this;
  }

   /**
   * Get externalIds
   * @return externalIds
  **/
  @javax.annotation.Nullable
  public List<String> getExternalIds() {
    return externalIds;
  }

  public void setExternalIds(List<String> externalIds) {
    this.externalIds = externalIds;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PostSortRunFilter postSortRunFilter = (PostSortRunFilter) o;
    return Objects.equals(this.ids, postSortRunFilter.ids) &&
        Objects.equals(this.jobIds, postSortRunFilter.jobIds) &&
        Objects.equals(this.flowStepIds, postSortRunFilter.flowStepIds) &&
        Objects.equals(this.communicationIds, postSortRunFilter.communicationIds) &&
        Objects.equals(this.queueNames, postSortRunFilter.queueNames) &&
        Objects.equals(this.creationDateStart, postSortRunFilter.creationDateStart) &&
        Objects.equals(this.creationDateEnd, postSortRunFilter.creationDateEnd) &&
        Objects.equals(this.externalIds, postSortRunFilter.externalIds);
  }

  @Override
  public int hashCode() {
    return Objects.hash(ids, jobIds, flowStepIds, communicationIds, queueNames, creationDateStart, creationDateEnd, externalIds);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PostSortRunFilter {\n");
    sb.append("    ids: ").append(toIndentedString(ids)).append("\n");
    sb.append("    jobIds: ").append(toIndentedString(jobIds)).append("\n");
    sb.append("    flowStepIds: ").append(toIndentedString(flowStepIds)).append("\n");
    sb.append("    communicationIds: ").append(toIndentedString(communicationIds)).append("\n");
    sb.append("    queueNames: ").append(toIndentedString(queueNames)).append("\n");
    sb.append("    creationDateStart: ").append(toIndentedString(creationDateStart)).append("\n");
    sb.append("    creationDateEnd: ").append(toIndentedString(creationDateEnd)).append("\n");
    sb.append("    externalIds: ").append(toIndentedString(externalIds)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ids");
    openapiFields.add("jobIds");
    openapiFields.add("flowStepIds");
    openapiFields.add("communicationIds");
    openapiFields.add("queueNames");
    openapiFields.add("creationDateStart");
    openapiFields.add("creationDateEnd");
    openapiFields.add("externalIds");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to PostSortRunFilter
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PostSortRunFilter.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PostSortRunFilter is not found in the empty JSON string", PostSortRunFilter.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PostSortRunFilter.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PostSortRunFilter` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("ids") != null && !jsonObj.get("ids").isJsonNull() && !jsonObj.get("ids").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `ids` to be an array in the JSON string but got `%s`", jsonObj.get("ids").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("jobIds") != null && !jsonObj.get("jobIds").isJsonNull() && !jsonObj.get("jobIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `jobIds` to be an array in the JSON string but got `%s`", jsonObj.get("jobIds").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("flowStepIds") != null && !jsonObj.get("flowStepIds").isJsonNull() && !jsonObj.get("flowStepIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `flowStepIds` to be an array in the JSON string but got `%s`", jsonObj.get("flowStepIds").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("communicationIds") != null && !jsonObj.get("communicationIds").isJsonNull() && !jsonObj.get("communicationIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `communicationIds` to be an array in the JSON string but got `%s`", jsonObj.get("communicationIds").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("queueNames") != null && !jsonObj.get("queueNames").isJsonNull() && !jsonObj.get("queueNames").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `queueNames` to be an array in the JSON string but got `%s`", jsonObj.get("queueNames").toString()));
      }
      if ((jsonObj.get("creationDateStart") != null && !jsonObj.get("creationDateStart").isJsonNull()) && !jsonObj.get("creationDateStart").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `creationDateStart` to be a primitive type in the JSON string but got `%s`", jsonObj.get("creationDateStart").toString()));
      }
      if ((jsonObj.get("creationDateEnd") != null && !jsonObj.get("creationDateEnd").isJsonNull()) && !jsonObj.get("creationDateEnd").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `creationDateEnd` to be a primitive type in the JSON string but got `%s`", jsonObj.get("creationDateEnd").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("externalIds") != null && !jsonObj.get("externalIds").isJsonNull() && !jsonObj.get("externalIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `externalIds` to be an array in the JSON string but got `%s`", jsonObj.get("externalIds").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PostSortRunFilter.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PostSortRunFilter' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PostSortRunFilter> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PostSortRunFilter.class));

       return (TypeAdapter<T>) new TypeAdapter<PostSortRunFilter>() {
           @Override
           public void write(JsonWriter out, PostSortRunFilter value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PostSortRunFilter read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of PostSortRunFilter given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of PostSortRunFilter
  * @throws IOException if the JSON string is invalid with respect to PostSortRunFilter
  */
  public static PostSortRunFilter fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PostSortRunFilter.class);
  }

 /**
  * Convert an instance of PostSortRunFilter to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

