/*
 * Exstream Orchestration
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.PluginWizardStep;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PluginWizardConfig
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-17T13:55:50.549398439Z[Europe/Lisbon]")
public class PluginWizardConfig {
  public static final String SERIALIZED_NAME_OUTCOME_MAPPING_SUPPORTED = "outcomeMappingSupported";
  @SerializedName(SERIALIZED_NAME_OUTCOME_MAPPING_SUPPORTED)
  private Boolean outcomeMappingSupported;

  public static final String SERIALIZED_NAME_ASSURED_DELIVERY_SUPPORTED = "assuredDeliverySupported";
  @SerializedName(SERIALIZED_NAME_ASSURED_DELIVERY_SUPPORTED)
  private Boolean assuredDeliverySupported;

  public static final String SERIALIZED_NAME_OUTCOME_MAPPING_REQUIRED = "outcomeMappingRequired";
  @SerializedName(SERIALIZED_NAME_OUTCOME_MAPPING_REQUIRED)
  private Boolean outcomeMappingRequired;

  public static final String SERIALIZED_NAME_ANALYTICS_SUPPORTED = "analyticsSupported";
  @SerializedName(SERIALIZED_NAME_ANALYTICS_SUPPORTED)
  private Boolean analyticsSupported;

  public static final String SERIALIZED_NAME_ADDITIONAL_FILES_INPUT_HANDLING_SUPPORTED = "additionalFilesInputHandlingSupported";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_FILES_INPUT_HANDLING_SUPPORTED)
  private Boolean additionalFilesInputHandlingSupported;

  public static final String SERIALIZED_NAME_ADDITIONAL_FILES_INPUT_HANDLING_ONLY = "additionalFilesInputHandlingOnly";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_FILES_INPUT_HANDLING_ONLY)
  private Boolean additionalFilesInputHandlingOnly;

  public static final String SERIALIZED_NAME_RESTRICTED_USE_DEFAULT = "restrictedUseDefault";
  @SerializedName(SERIALIZED_NAME_RESTRICTED_USE_DEFAULT)
  private Boolean restrictedUseDefault;

  public static final String SERIALIZED_NAME_VALIDATORS = "validators";
  @SerializedName(SERIALIZED_NAME_VALIDATORS)
  private Object validators;

  public static final String SERIALIZED_NAME_SECURE_CHANNEL_HOST_VERIFICATION_REQUIRED = "secureChannelHostVerificationRequired";
  @SerializedName(SERIALIZED_NAME_SECURE_CHANNEL_HOST_VERIFICATION_REQUIRED)
  private List<String> secureChannelHostVerificationRequired;

  public static final String SERIALIZED_NAME_AUTHENTICATION_PROVIDED = "authenticationProvided";
  @SerializedName(SERIALIZED_NAME_AUTHENTICATION_PROVIDED)
  private Boolean authenticationProvided;

  public static final String SERIALIZED_NAME_JOB_EXPIRATION_SUPPORTED = "jobExpirationSupported";
  @SerializedName(SERIALIZED_NAME_JOB_EXPIRATION_SUPPORTED)
  private Boolean jobExpirationSupported;

  public static final String SERIALIZED_NAME_STEPS = "steps";
  @SerializedName(SERIALIZED_NAME_STEPS)
  private List<PluginWizardStep> steps;

  public PluginWizardConfig() {
  }

  public PluginWizardConfig outcomeMappingSupported(Boolean outcomeMappingSupported) {
    this.outcomeMappingSupported = outcomeMappingSupported;
    return this;
  }

   /**
   * Get outcomeMappingSupported
   * @return outcomeMappingSupported
  **/
  @javax.annotation.Nullable
  public Boolean getOutcomeMappingSupported() {
    return outcomeMappingSupported;
  }

  public void setOutcomeMappingSupported(Boolean outcomeMappingSupported) {
    this.outcomeMappingSupported = outcomeMappingSupported;
  }


  public PluginWizardConfig assuredDeliverySupported(Boolean assuredDeliverySupported) {
    this.assuredDeliverySupported = assuredDeliverySupported;
    return this;
  }

   /**
   * Get assuredDeliverySupported
   * @return assuredDeliverySupported
  **/
  @javax.annotation.Nullable
  public Boolean getAssuredDeliverySupported() {
    return assuredDeliverySupported;
  }

  public void setAssuredDeliverySupported(Boolean assuredDeliverySupported) {
    this.assuredDeliverySupported = assuredDeliverySupported;
  }


  public PluginWizardConfig outcomeMappingRequired(Boolean outcomeMappingRequired) {
    this.outcomeMappingRequired = outcomeMappingRequired;
    return this;
  }

   /**
   * Get outcomeMappingRequired
   * @return outcomeMappingRequired
  **/
  @javax.annotation.Nullable
  public Boolean getOutcomeMappingRequired() {
    return outcomeMappingRequired;
  }

  public void setOutcomeMappingRequired(Boolean outcomeMappingRequired) {
    this.outcomeMappingRequired = outcomeMappingRequired;
  }


  public PluginWizardConfig analyticsSupported(Boolean analyticsSupported) {
    this.analyticsSupported = analyticsSupported;
    return this;
  }

   /**
   * Get analyticsSupported
   * @return analyticsSupported
  **/
  @javax.annotation.Nullable
  public Boolean getAnalyticsSupported() {
    return analyticsSupported;
  }

  public void setAnalyticsSupported(Boolean analyticsSupported) {
    this.analyticsSupported = analyticsSupported;
  }


  public PluginWizardConfig additionalFilesInputHandlingSupported(Boolean additionalFilesInputHandlingSupported) {
    this.additionalFilesInputHandlingSupported = additionalFilesInputHandlingSupported;
    return this;
  }

   /**
   * Get additionalFilesInputHandlingSupported
   * @return additionalFilesInputHandlingSupported
  **/
  @javax.annotation.Nullable
  public Boolean getAdditionalFilesInputHandlingSupported() {
    return additionalFilesInputHandlingSupported;
  }

  public void setAdditionalFilesInputHandlingSupported(Boolean additionalFilesInputHandlingSupported) {
    this.additionalFilesInputHandlingSupported = additionalFilesInputHandlingSupported;
  }


  public PluginWizardConfig additionalFilesInputHandlingOnly(Boolean additionalFilesInputHandlingOnly) {
    this.additionalFilesInputHandlingOnly = additionalFilesInputHandlingOnly;
    return this;
  }

   /**
   * Get additionalFilesInputHandlingOnly
   * @return additionalFilesInputHandlingOnly
  **/
  @javax.annotation.Nullable
  public Boolean getAdditionalFilesInputHandlingOnly() {
    return additionalFilesInputHandlingOnly;
  }

  public void setAdditionalFilesInputHandlingOnly(Boolean additionalFilesInputHandlingOnly) {
    this.additionalFilesInputHandlingOnly = additionalFilesInputHandlingOnly;
  }


  public PluginWizardConfig restrictedUseDefault(Boolean restrictedUseDefault) {
    this.restrictedUseDefault = restrictedUseDefault;
    return this;
  }

   /**
   * Get restrictedUseDefault
   * @return restrictedUseDefault
  **/
  @javax.annotation.Nullable
  public Boolean getRestrictedUseDefault() {
    return restrictedUseDefault;
  }

  public void setRestrictedUseDefault(Boolean restrictedUseDefault) {
    this.restrictedUseDefault = restrictedUseDefault;
  }


  public PluginWizardConfig validators(Object validators) {
    this.validators = validators;
    return this;
  }

   /**
   * Get validators
   * @return validators
  **/
  @javax.annotation.Nullable
  public Object getValidators() {
    return validators;
  }

  public void setValidators(Object validators) {
    this.validators = validators;
  }


  public PluginWizardConfig secureChannelHostVerificationRequired(List<String> secureChannelHostVerificationRequired) {
    this.secureChannelHostVerificationRequired = secureChannelHostVerificationRequired;
    return this;
  }

  public PluginWizardConfig addSecureChannelHostVerificationRequiredItem(String secureChannelHostVerificationRequiredItem) {
    if (this.secureChannelHostVerificationRequired == null) {
      this.secureChannelHostVerificationRequired = new ArrayList<>();
    }
    this.secureChannelHostVerificationRequired.add(secureChannelHostVerificationRequiredItem);
    return this;
  }

   /**
   * Get secureChannelHostVerificationRequired
   * @return secureChannelHostVerificationRequired
  **/
  @javax.annotation.Nullable
  public List<String> getSecureChannelHostVerificationRequired() {
    return secureChannelHostVerificationRequired;
  }

  public void setSecureChannelHostVerificationRequired(List<String> secureChannelHostVerificationRequired) {
    this.secureChannelHostVerificationRequired = secureChannelHostVerificationRequired;
  }


  public PluginWizardConfig authenticationProvided(Boolean authenticationProvided) {
    this.authenticationProvided = authenticationProvided;
    return this;
  }

   /**
   * Get authenticationProvided
   * @return authenticationProvided
  **/
  @javax.annotation.Nullable
  public Boolean getAuthenticationProvided() {
    return authenticationProvided;
  }

  public void setAuthenticationProvided(Boolean authenticationProvided) {
    this.authenticationProvided = authenticationProvided;
  }


  public PluginWizardConfig jobExpirationSupported(Boolean jobExpirationSupported) {
    this.jobExpirationSupported = jobExpirationSupported;
    return this;
  }

   /**
   * Get jobExpirationSupported
   * @return jobExpirationSupported
  **/
  @javax.annotation.Nullable
  public Boolean getJobExpirationSupported() {
    return jobExpirationSupported;
  }

  public void setJobExpirationSupported(Boolean jobExpirationSupported) {
    this.jobExpirationSupported = jobExpirationSupported;
  }


  public PluginWizardConfig steps(List<PluginWizardStep> steps) {
    this.steps = steps;
    return this;
  }

  public PluginWizardConfig addStepsItem(PluginWizardStep stepsItem) {
    if (this.steps == null) {
      this.steps = new ArrayList<>();
    }
    this.steps.add(stepsItem);
    return this;
  }

   /**
   * Get steps
   * @return steps
  **/
  @javax.annotation.Nullable
  public List<PluginWizardStep> getSteps() {
    return steps;
  }

  public void setSteps(List<PluginWizardStep> steps) {
    this.steps = steps;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PluginWizardConfig pluginWizardConfig = (PluginWizardConfig) o;
    return Objects.equals(this.outcomeMappingSupported, pluginWizardConfig.outcomeMappingSupported) &&
        Objects.equals(this.assuredDeliverySupported, pluginWizardConfig.assuredDeliverySupported) &&
        Objects.equals(this.outcomeMappingRequired, pluginWizardConfig.outcomeMappingRequired) &&
        Objects.equals(this.analyticsSupported, pluginWizardConfig.analyticsSupported) &&
        Objects.equals(this.additionalFilesInputHandlingSupported, pluginWizardConfig.additionalFilesInputHandlingSupported) &&
        Objects.equals(this.additionalFilesInputHandlingOnly, pluginWizardConfig.additionalFilesInputHandlingOnly) &&
        Objects.equals(this.restrictedUseDefault, pluginWizardConfig.restrictedUseDefault) &&
        Objects.equals(this.validators, pluginWizardConfig.validators) &&
        Objects.equals(this.secureChannelHostVerificationRequired, pluginWizardConfig.secureChannelHostVerificationRequired) &&
        Objects.equals(this.authenticationProvided, pluginWizardConfig.authenticationProvided) &&
        Objects.equals(this.jobExpirationSupported, pluginWizardConfig.jobExpirationSupported) &&
        Objects.equals(this.steps, pluginWizardConfig.steps);
  }

  @Override
  public int hashCode() {
    return Objects.hash(outcomeMappingSupported, assuredDeliverySupported, outcomeMappingRequired, analyticsSupported, additionalFilesInputHandlingSupported, additionalFilesInputHandlingOnly, restrictedUseDefault, validators, secureChannelHostVerificationRequired, authenticationProvided, jobExpirationSupported, steps);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PluginWizardConfig {\n");
    sb.append("    outcomeMappingSupported: ").append(toIndentedString(outcomeMappingSupported)).append("\n");
    sb.append("    assuredDeliverySupported: ").append(toIndentedString(assuredDeliverySupported)).append("\n");
    sb.append("    outcomeMappingRequired: ").append(toIndentedString(outcomeMappingRequired)).append("\n");
    sb.append("    analyticsSupported: ").append(toIndentedString(analyticsSupported)).append("\n");
    sb.append("    additionalFilesInputHandlingSupported: ").append(toIndentedString(additionalFilesInputHandlingSupported)).append("\n");
    sb.append("    additionalFilesInputHandlingOnly: ").append(toIndentedString(additionalFilesInputHandlingOnly)).append("\n");
    sb.append("    restrictedUseDefault: ").append(toIndentedString(restrictedUseDefault)).append("\n");
    sb.append("    validators: ").append(toIndentedString(validators)).append("\n");
    sb.append("    secureChannelHostVerificationRequired: ").append(toIndentedString(secureChannelHostVerificationRequired)).append("\n");
    sb.append("    authenticationProvided: ").append(toIndentedString(authenticationProvided)).append("\n");
    sb.append("    jobExpirationSupported: ").append(toIndentedString(jobExpirationSupported)).append("\n");
    sb.append("    steps: ").append(toIndentedString(steps)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("outcomeMappingSupported");
    openapiFields.add("assuredDeliverySupported");
    openapiFields.add("outcomeMappingRequired");
    openapiFields.add("analyticsSupported");
    openapiFields.add("additionalFilesInputHandlingSupported");
    openapiFields.add("additionalFilesInputHandlingOnly");
    openapiFields.add("restrictedUseDefault");
    openapiFields.add("validators");
    openapiFields.add("secureChannelHostVerificationRequired");
    openapiFields.add("authenticationProvided");
    openapiFields.add("jobExpirationSupported");
    openapiFields.add("steps");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to PluginWizardConfig
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PluginWizardConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PluginWizardConfig is not found in the empty JSON string", PluginWizardConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PluginWizardConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PluginWizardConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("secureChannelHostVerificationRequired") != null && !jsonObj.get("secureChannelHostVerificationRequired").isJsonNull() && !jsonObj.get("secureChannelHostVerificationRequired").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `secureChannelHostVerificationRequired` to be an array in the JSON string but got `%s`", jsonObj.get("secureChannelHostVerificationRequired").toString()));
      }
      if (jsonObj.get("steps") != null && !jsonObj.get("steps").isJsonNull()) {
        JsonArray jsonArraysteps = jsonObj.getAsJsonArray("steps");
        if (jsonArraysteps != null) {
          // ensure the json data is an array
          if (!jsonObj.get("steps").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `steps` to be an array in the JSON string but got `%s`", jsonObj.get("steps").toString()));
          }

          // validate the optional field `steps` (array)
          for (int i = 0; i < jsonArraysteps.size(); i++) {
            PluginWizardStep.validateJsonElement(jsonArraysteps.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PluginWizardConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PluginWizardConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PluginWizardConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PluginWizardConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<PluginWizardConfig>() {
           @Override
           public void write(JsonWriter out, PluginWizardConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PluginWizardConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of PluginWizardConfig given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of PluginWizardConfig
  * @throws IOException if the JSON string is invalid with respect to PluginWizardConfig
  */
  public static PluginWizardConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PluginWizardConfig.class);
  }

 /**
  * Convert an instance of PluginWizardConfig to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

