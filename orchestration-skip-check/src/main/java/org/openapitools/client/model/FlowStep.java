/*
 * Exstream Orchestration
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.UUID;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * FlowStep
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-17T13:55:50.549398439Z[Europe/Lisbon]")
public class FlowStep {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private UUID id;

  public static final String SERIALIZED_NAME_PREVIOUS_STEP_ID = "previousStepId";
  @SerializedName(SERIALIZED_NAME_PREVIOUS_STEP_ID)
  private UUID previousStepId;

  public static final String SERIALIZED_NAME_FLOW_INSTANCE_ID = "flowInstanceId";
  @SerializedName(SERIALIZED_NAME_FLOW_INSTANCE_ID)
  private UUID flowInstanceId;

  public static final String SERIALIZED_NAME_STEP_NAME = "stepName";
  @SerializedName(SERIALIZED_NAME_STEP_NAME)
  private String stepName;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  /**
   * Gets or Sets status
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    CANCELED("canceled"),
    
    CREATED("created"),
    
    WAITING("waiting"),
    
    HOLDING("holding"),
    
    STARTED("started"),
    
    EXECUTED("executed"),
    
    FILTERED("filtered"),
    
    COMPLETE("complete"),
    
    ERROR("error"),
    
    EXPIRED("expired");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  /**
   * Gets or Sets stepType
   */
  @JsonAdapter(StepTypeEnum.Adapter.class)
  public enum StepTypeEnum {
    INPUT("input"),
    
    COMMUNICATION("communication"),
    
    OUTPUT("output"),
    
    DECIDER("decider"),
    
    PROCESSOR("processor"),
    
    AGGREGATOR("aggregator"),
    
    DELAY("delay"),
    
    HOLD("hold"),
    
    EXTERNALFLOW("externalFlow");

    private String value;

    StepTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StepTypeEnum fromValue(String value) {
      for (StepTypeEnum b : StepTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StepTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StepTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StepTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StepTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StepTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STEP_TYPE = "stepType";
  @SerializedName(SERIALIZED_NAME_STEP_TYPE)
  private StepTypeEnum stepType;

  public static final String SERIALIZED_NAME_QUEUE_DATE = "queueDate";
  @SerializedName(SERIALIZED_NAME_QUEUE_DATE)
  private OffsetDateTime queueDate;

  public static final String SERIALIZED_NAME_START_DATE = "startDate";
  @SerializedName(SERIALIZED_NAME_START_DATE)
  private OffsetDateTime startDate;

  public static final String SERIALIZED_NAME_EXECUTE_DATE = "executeDate";
  @SerializedName(SERIALIZED_NAME_EXECUTE_DATE)
  private OffsetDateTime executeDate;

  public static final String SERIALIZED_NAME_END_DATE = "endDate";
  @SerializedName(SERIALIZED_NAME_END_DATE)
  private OffsetDateTime endDate;

  public static final String SERIALIZED_NAME_EXPIRATION_DATE = "expirationDate";
  @SerializedName(SERIALIZED_NAME_EXPIRATION_DATE)
  private OffsetDateTime expirationDate;

  public static final String SERIALIZED_NAME_MSG = "msg";
  @SerializedName(SERIALIZED_NAME_MSG)
  private String msg;

  public static final String SERIALIZED_NAME_EXTERNAL_ID = "externalId";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_ID)
  private String externalId;

  public static final String SERIALIZED_NAME_DELIVERY_FILE_RETRIEVABLE = "deliveryFileRetrievable";
  @SerializedName(SERIALIZED_NAME_DELIVERY_FILE_RETRIEVABLE)
  private Boolean deliveryFileRetrievable;

  public static final String SERIALIZED_NAME_MESSAGE_FILE_RETRIEVABLE = "messageFileRetrievable";
  @SerializedName(SERIALIZED_NAME_MESSAGE_FILE_RETRIEVABLE)
  private Boolean messageFileRetrievable;

  public FlowStep() {
  }

  public FlowStep id(UUID id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nullable
  public UUID getId() {
    return id;
  }

  public void setId(UUID id) {
    this.id = id;
  }


  public FlowStep previousStepId(UUID previousStepId) {
    this.previousStepId = previousStepId;
    return this;
  }

   /**
   * Get previousStepId
   * @return previousStepId
  **/
  @javax.annotation.Nullable
  public UUID getPreviousStepId() {
    return previousStepId;
  }

  public void setPreviousStepId(UUID previousStepId) {
    this.previousStepId = previousStepId;
  }


  public FlowStep flowInstanceId(UUID flowInstanceId) {
    this.flowInstanceId = flowInstanceId;
    return this;
  }

   /**
   * Get flowInstanceId
   * @return flowInstanceId
  **/
  @javax.annotation.Nullable
  public UUID getFlowInstanceId() {
    return flowInstanceId;
  }

  public void setFlowInstanceId(UUID flowInstanceId) {
    this.flowInstanceId = flowInstanceId;
  }


  public FlowStep stepName(String stepName) {
    this.stepName = stepName;
    return this;
  }

   /**
   * Get stepName
   * @return stepName
  **/
  @javax.annotation.Nullable
  public String getStepName() {
    return stepName;
  }

  public void setStepName(String stepName) {
    this.stepName = stepName;
  }


  public FlowStep displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

   /**
   * Get displayName
   * @return displayName
  **/
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public FlowStep status(StatusEnum status) {
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @javax.annotation.Nullable
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  public FlowStep stepType(StepTypeEnum stepType) {
    this.stepType = stepType;
    return this;
  }

   /**
   * Get stepType
   * @return stepType
  **/
  @javax.annotation.Nullable
  public StepTypeEnum getStepType() {
    return stepType;
  }

  public void setStepType(StepTypeEnum stepType) {
    this.stepType = stepType;
  }


  public FlowStep queueDate(OffsetDateTime queueDate) {
    this.queueDate = queueDate;
    return this;
  }

   /**
   * Get queueDate
   * @return queueDate
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getQueueDate() {
    return queueDate;
  }

  public void setQueueDate(OffsetDateTime queueDate) {
    this.queueDate = queueDate;
  }


  public FlowStep startDate(OffsetDateTime startDate) {
    this.startDate = startDate;
    return this;
  }

   /**
   * Get startDate
   * @return startDate
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getStartDate() {
    return startDate;
  }

  public void setStartDate(OffsetDateTime startDate) {
    this.startDate = startDate;
  }


  public FlowStep executeDate(OffsetDateTime executeDate) {
    this.executeDate = executeDate;
    return this;
  }

   /**
   * Get executeDate
   * @return executeDate
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getExecuteDate() {
    return executeDate;
  }

  public void setExecuteDate(OffsetDateTime executeDate) {
    this.executeDate = executeDate;
  }


  public FlowStep endDate(OffsetDateTime endDate) {
    this.endDate = endDate;
    return this;
  }

   /**
   * Get endDate
   * @return endDate
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getEndDate() {
    return endDate;
  }

  public void setEndDate(OffsetDateTime endDate) {
    this.endDate = endDate;
  }


  public FlowStep expirationDate(OffsetDateTime expirationDate) {
    this.expirationDate = expirationDate;
    return this;
  }

   /**
   * Get expirationDate
   * @return expirationDate
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getExpirationDate() {
    return expirationDate;
  }

  public void setExpirationDate(OffsetDateTime expirationDate) {
    this.expirationDate = expirationDate;
  }


  public FlowStep msg(String msg) {
    this.msg = msg;
    return this;
  }

   /**
   * Get msg
   * @return msg
  **/
  @javax.annotation.Nullable
  public String getMsg() {
    return msg;
  }

  public void setMsg(String msg) {
    this.msg = msg;
  }


  public FlowStep externalId(String externalId) {
    this.externalId = externalId;
    return this;
  }

   /**
   * Get externalId
   * @return externalId
  **/
  @javax.annotation.Nullable
  public String getExternalId() {
    return externalId;
  }

  public void setExternalId(String externalId) {
    this.externalId = externalId;
  }


  public FlowStep deliveryFileRetrievable(Boolean deliveryFileRetrievable) {
    this.deliveryFileRetrievable = deliveryFileRetrievable;
    return this;
  }

   /**
   * Get deliveryFileRetrievable
   * @return deliveryFileRetrievable
  **/
  @javax.annotation.Nullable
  public Boolean getDeliveryFileRetrievable() {
    return deliveryFileRetrievable;
  }

  public void setDeliveryFileRetrievable(Boolean deliveryFileRetrievable) {
    this.deliveryFileRetrievable = deliveryFileRetrievable;
  }


  public FlowStep messageFileRetrievable(Boolean messageFileRetrievable) {
    this.messageFileRetrievable = messageFileRetrievable;
    return this;
  }

   /**
   * Get messageFileRetrievable
   * @return messageFileRetrievable
  **/
  @javax.annotation.Nullable
  public Boolean getMessageFileRetrievable() {
    return messageFileRetrievable;
  }

  public void setMessageFileRetrievable(Boolean messageFileRetrievable) {
    this.messageFileRetrievable = messageFileRetrievable;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FlowStep flowStep = (FlowStep) o;
    return Objects.equals(this.id, flowStep.id) &&
        Objects.equals(this.previousStepId, flowStep.previousStepId) &&
        Objects.equals(this.flowInstanceId, flowStep.flowInstanceId) &&
        Objects.equals(this.stepName, flowStep.stepName) &&
        Objects.equals(this.displayName, flowStep.displayName) &&
        Objects.equals(this.status, flowStep.status) &&
        Objects.equals(this.stepType, flowStep.stepType) &&
        Objects.equals(this.queueDate, flowStep.queueDate) &&
        Objects.equals(this.startDate, flowStep.startDate) &&
        Objects.equals(this.executeDate, flowStep.executeDate) &&
        Objects.equals(this.endDate, flowStep.endDate) &&
        Objects.equals(this.expirationDate, flowStep.expirationDate) &&
        Objects.equals(this.msg, flowStep.msg) &&
        Objects.equals(this.externalId, flowStep.externalId) &&
        Objects.equals(this.deliveryFileRetrievable, flowStep.deliveryFileRetrievable) &&
        Objects.equals(this.messageFileRetrievable, flowStep.messageFileRetrievable);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, previousStepId, flowInstanceId, stepName, displayName, status, stepType, queueDate, startDate, executeDate, endDate, expirationDate, msg, externalId, deliveryFileRetrievable, messageFileRetrievable);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FlowStep {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    previousStepId: ").append(toIndentedString(previousStepId)).append("\n");
    sb.append("    flowInstanceId: ").append(toIndentedString(flowInstanceId)).append("\n");
    sb.append("    stepName: ").append(toIndentedString(stepName)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    stepType: ").append(toIndentedString(stepType)).append("\n");
    sb.append("    queueDate: ").append(toIndentedString(queueDate)).append("\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("    executeDate: ").append(toIndentedString(executeDate)).append("\n");
    sb.append("    endDate: ").append(toIndentedString(endDate)).append("\n");
    sb.append("    expirationDate: ").append(toIndentedString(expirationDate)).append("\n");
    sb.append("    msg: ").append(toIndentedString(msg)).append("\n");
    sb.append("    externalId: ").append(toIndentedString(externalId)).append("\n");
    sb.append("    deliveryFileRetrievable: ").append(toIndentedString(deliveryFileRetrievable)).append("\n");
    sb.append("    messageFileRetrievable: ").append(toIndentedString(messageFileRetrievable)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("previousStepId");
    openapiFields.add("flowInstanceId");
    openapiFields.add("stepName");
    openapiFields.add("displayName");
    openapiFields.add("status");
    openapiFields.add("stepType");
    openapiFields.add("queueDate");
    openapiFields.add("startDate");
    openapiFields.add("executeDate");
    openapiFields.add("endDate");
    openapiFields.add("expirationDate");
    openapiFields.add("msg");
    openapiFields.add("externalId");
    openapiFields.add("deliveryFileRetrievable");
    openapiFields.add("messageFileRetrievable");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to FlowStep
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FlowStep.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FlowStep is not found in the empty JSON string", FlowStep.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!FlowStep.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FlowStep` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("previousStepId") != null && !jsonObj.get("previousStepId").isJsonNull()) && !jsonObj.get("previousStepId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `previousStepId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("previousStepId").toString()));
      }
      if ((jsonObj.get("flowInstanceId") != null && !jsonObj.get("flowInstanceId").isJsonNull()) && !jsonObj.get("flowInstanceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `flowInstanceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("flowInstanceId").toString()));
      }
      if ((jsonObj.get("stepName") != null && !jsonObj.get("stepName").isJsonNull()) && !jsonObj.get("stepName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `stepName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("stepName").toString()));
      }
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        StatusEnum.validateJsonElement(jsonObj.get("status"));
      }
      if ((jsonObj.get("stepType") != null && !jsonObj.get("stepType").isJsonNull()) && !jsonObj.get("stepType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `stepType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("stepType").toString()));
      }
      // validate the optional field `stepType`
      if (jsonObj.get("stepType") != null && !jsonObj.get("stepType").isJsonNull()) {
        StepTypeEnum.validateJsonElement(jsonObj.get("stepType"));
      }
      if ((jsonObj.get("msg") != null && !jsonObj.get("msg").isJsonNull()) && !jsonObj.get("msg").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `msg` to be a primitive type in the JSON string but got `%s`", jsonObj.get("msg").toString()));
      }
      if ((jsonObj.get("externalId") != null && !jsonObj.get("externalId").isJsonNull()) && !jsonObj.get("externalId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `externalId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("externalId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FlowStep.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FlowStep' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FlowStep> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FlowStep.class));

       return (TypeAdapter<T>) new TypeAdapter<FlowStep>() {
           @Override
           public void write(JsonWriter out, FlowStep value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FlowStep read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of FlowStep given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of FlowStep
  * @throws IOException if the JSON string is invalid with respect to FlowStep
  */
  public static FlowStep fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FlowStep.class);
  }

 /**
  * Convert an instance of FlowStep to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

