/*
 * Exstream Orchestration
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * FlowStepFilter
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-17T13:55:50.549398439Z[Europe/Lisbon]")
public class FlowStepFilter {
  public static final String SERIALIZED_NAME_IDS = "ids";
  @SerializedName(SERIALIZED_NAME_IDS)
  private List<UUID> ids;

  public static final String SERIALIZED_NAME_FLOW_INSTANCE_ID = "flowInstanceId";
  @SerializedName(SERIALIZED_NAME_FLOW_INSTANCE_ID)
  private UUID flowInstanceId;

  public static final String SERIALIZED_NAME_STEP_NAME = "stepName";
  @SerializedName(SERIALIZED_NAME_STEP_NAME)
  private String stepName;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_START_DATE_START = "startDateStart";
  @SerializedName(SERIALIZED_NAME_START_DATE_START)
  private OffsetDateTime startDateStart;

  public static final String SERIALIZED_NAME_START_DATE_END = "startDateEnd";
  @SerializedName(SERIALIZED_NAME_START_DATE_END)
  private OffsetDateTime startDateEnd;

  public static final String SERIALIZED_NAME_END_DATE_START = "endDateStart";
  @SerializedName(SERIALIZED_NAME_END_DATE_START)
  private OffsetDateTime endDateStart;

  public static final String SERIALIZED_NAME_END_DATE_END = "endDateEnd";
  @SerializedName(SERIALIZED_NAME_END_DATE_END)
  private OffsetDateTime endDateEnd;

  public static final String SERIALIZED_NAME_QUEUE_DATE_START = "queueDateStart";
  @SerializedName(SERIALIZED_NAME_QUEUE_DATE_START)
  private OffsetDateTime queueDateStart;

  public static final String SERIALIZED_NAME_QUEUE_DATE_END = "queueDateEnd";
  @SerializedName(SERIALIZED_NAME_QUEUE_DATE_END)
  private OffsetDateTime queueDateEnd;

  public static final String SERIALIZED_NAME_EXECUTE_DATE_START = "executeDateStart";
  @SerializedName(SERIALIZED_NAME_EXECUTE_DATE_START)
  private OffsetDateTime executeDateStart;

  public static final String SERIALIZED_NAME_EXECUTE_DATE_END = "executeDateEnd";
  @SerializedName(SERIALIZED_NAME_EXECUTE_DATE_END)
  private OffsetDateTime executeDateEnd;

  public static final String SERIALIZED_NAME_EXPIRING_DATE_START = "expiringDateStart";
  @SerializedName(SERIALIZED_NAME_EXPIRING_DATE_START)
  private OffsetDateTime expiringDateStart;

  public static final String SERIALIZED_NAME_EXPIRING_DATE_END = "expiringDateEnd";
  @SerializedName(SERIALIZED_NAME_EXPIRING_DATE_END)
  private OffsetDateTime expiringDateEnd;

  public static final String SERIALIZED_NAME_EXTERNAL_ID = "externalId";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_ID)
  private String externalId;

  public static final String SERIALIZED_NAME_PREVIOUS_STEP_ID = "previousStepId";
  @SerializedName(SERIALIZED_NAME_PREVIOUS_STEP_ID)
  private UUID previousStepId;

  public static final String SERIALIZED_NAME_CASE_SENSITIVE = "caseSensitive";
  @SerializedName(SERIALIZED_NAME_CASE_SENSITIVE)
  private Boolean caseSensitive;

  public static final String SERIALIZED_NAME_DELIVERY_FILE_RETRIEVABLE = "deliveryFileRetrievable";
  @SerializedName(SERIALIZED_NAME_DELIVERY_FILE_RETRIEVABLE)
  private Boolean deliveryFileRetrievable;

  /**
   * Gets or Sets statuses
   */
  @JsonAdapter(StatusesEnum.Adapter.class)
  public enum StatusesEnum {
    CANCELED("canceled"),
    
    CREATED("created"),
    
    WAITING("waiting"),
    
    HOLDING("holding"),
    
    STARTED("started"),
    
    EXECUTED("executed"),
    
    FILTERED("filtered"),
    
    COMPLETE("complete"),
    
    ERROR("error"),
    
    EXPIRED("expired");

    private String value;

    StatusesEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusesEnum fromValue(String value) {
      for (StatusesEnum b : StatusesEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusesEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusesEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusesEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusesEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUSES = "statuses";
  @SerializedName(SERIALIZED_NAME_STATUSES)
  private List<StatusesEnum> statuses;

  /**
   * Gets or Sets stepTypes
   */
  @JsonAdapter(StepTypesEnum.Adapter.class)
  public enum StepTypesEnum {
    INPUT("input"),
    
    COMMUNICATION("communication"),
    
    OUTPUT("output"),
    
    DECIDER("decider"),
    
    PROCESSOR("processor"),
    
    AGGREGATOR("aggregator"),
    
    DELAY("delay"),
    
    HOLD("hold"),
    
    EXTERNALFLOW("externalFlow");

    private String value;

    StepTypesEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StepTypesEnum fromValue(String value) {
      for (StepTypesEnum b : StepTypesEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StepTypesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StepTypesEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StepTypesEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StepTypesEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StepTypesEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STEP_TYPES = "stepTypes";
  @SerializedName(SERIALIZED_NAME_STEP_TYPES)
  private List<StepTypesEnum> stepTypes;

  public FlowStepFilter() {
  }

  public FlowStepFilter ids(List<UUID> ids) {
    this.ids = ids;
    return this;
  }

  public FlowStepFilter addIdsItem(UUID idsItem) {
    if (this.ids == null) {
      this.ids = new ArrayList<>();
    }
    this.ids.add(idsItem);
    return this;
  }

   /**
   * Get ids
   * @return ids
  **/
  @javax.annotation.Nullable
  public List<UUID> getIds() {
    return ids;
  }

  public void setIds(List<UUID> ids) {
    this.ids = ids;
  }


  public FlowStepFilter flowInstanceId(UUID flowInstanceId) {
    this.flowInstanceId = flowInstanceId;
    return this;
  }

   /**
   * Get flowInstanceId
   * @return flowInstanceId
  **/
  @javax.annotation.Nullable
  public UUID getFlowInstanceId() {
    return flowInstanceId;
  }

  public void setFlowInstanceId(UUID flowInstanceId) {
    this.flowInstanceId = flowInstanceId;
  }


  public FlowStepFilter stepName(String stepName) {
    this.stepName = stepName;
    return this;
  }

   /**
   * Get stepName
   * @return stepName
  **/
  @javax.annotation.Nullable
  public String getStepName() {
    return stepName;
  }

  public void setStepName(String stepName) {
    this.stepName = stepName;
  }


  public FlowStepFilter displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

   /**
   * Get displayName
   * @return displayName
  **/
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public FlowStepFilter startDateStart(OffsetDateTime startDateStart) {
    this.startDateStart = startDateStart;
    return this;
  }

   /**
   * Get startDateStart
   * @return startDateStart
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getStartDateStart() {
    return startDateStart;
  }

  public void setStartDateStart(OffsetDateTime startDateStart) {
    this.startDateStart = startDateStart;
  }


  public FlowStepFilter startDateEnd(OffsetDateTime startDateEnd) {
    this.startDateEnd = startDateEnd;
    return this;
  }

   /**
   * Get startDateEnd
   * @return startDateEnd
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getStartDateEnd() {
    return startDateEnd;
  }

  public void setStartDateEnd(OffsetDateTime startDateEnd) {
    this.startDateEnd = startDateEnd;
  }


  public FlowStepFilter endDateStart(OffsetDateTime endDateStart) {
    this.endDateStart = endDateStart;
    return this;
  }

   /**
   * Get endDateStart
   * @return endDateStart
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getEndDateStart() {
    return endDateStart;
  }

  public void setEndDateStart(OffsetDateTime endDateStart) {
    this.endDateStart = endDateStart;
  }


  public FlowStepFilter endDateEnd(OffsetDateTime endDateEnd) {
    this.endDateEnd = endDateEnd;
    return this;
  }

   /**
   * Get endDateEnd
   * @return endDateEnd
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getEndDateEnd() {
    return endDateEnd;
  }

  public void setEndDateEnd(OffsetDateTime endDateEnd) {
    this.endDateEnd = endDateEnd;
  }


  public FlowStepFilter queueDateStart(OffsetDateTime queueDateStart) {
    this.queueDateStart = queueDateStart;
    return this;
  }

   /**
   * Get queueDateStart
   * @return queueDateStart
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getQueueDateStart() {
    return queueDateStart;
  }

  public void setQueueDateStart(OffsetDateTime queueDateStart) {
    this.queueDateStart = queueDateStart;
  }


  public FlowStepFilter queueDateEnd(OffsetDateTime queueDateEnd) {
    this.queueDateEnd = queueDateEnd;
    return this;
  }

   /**
   * Get queueDateEnd
   * @return queueDateEnd
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getQueueDateEnd() {
    return queueDateEnd;
  }

  public void setQueueDateEnd(OffsetDateTime queueDateEnd) {
    this.queueDateEnd = queueDateEnd;
  }


  public FlowStepFilter executeDateStart(OffsetDateTime executeDateStart) {
    this.executeDateStart = executeDateStart;
    return this;
  }

   /**
   * Get executeDateStart
   * @return executeDateStart
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getExecuteDateStart() {
    return executeDateStart;
  }

  public void setExecuteDateStart(OffsetDateTime executeDateStart) {
    this.executeDateStart = executeDateStart;
  }


  public FlowStepFilter executeDateEnd(OffsetDateTime executeDateEnd) {
    this.executeDateEnd = executeDateEnd;
    return this;
  }

   /**
   * Get executeDateEnd
   * @return executeDateEnd
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getExecuteDateEnd() {
    return executeDateEnd;
  }

  public void setExecuteDateEnd(OffsetDateTime executeDateEnd) {
    this.executeDateEnd = executeDateEnd;
  }


  public FlowStepFilter expiringDateStart(OffsetDateTime expiringDateStart) {
    this.expiringDateStart = expiringDateStart;
    return this;
  }

   /**
   * Get expiringDateStart
   * @return expiringDateStart
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getExpiringDateStart() {
    return expiringDateStart;
  }

  public void setExpiringDateStart(OffsetDateTime expiringDateStart) {
    this.expiringDateStart = expiringDateStart;
  }


  public FlowStepFilter expiringDateEnd(OffsetDateTime expiringDateEnd) {
    this.expiringDateEnd = expiringDateEnd;
    return this;
  }

   /**
   * Get expiringDateEnd
   * @return expiringDateEnd
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getExpiringDateEnd() {
    return expiringDateEnd;
  }

  public void setExpiringDateEnd(OffsetDateTime expiringDateEnd) {
    this.expiringDateEnd = expiringDateEnd;
  }


  public FlowStepFilter externalId(String externalId) {
    this.externalId = externalId;
    return this;
  }

   /**
   * Get externalId
   * @return externalId
  **/
  @javax.annotation.Nullable
  public String getExternalId() {
    return externalId;
  }

  public void setExternalId(String externalId) {
    this.externalId = externalId;
  }


  public FlowStepFilter previousStepId(UUID previousStepId) {
    this.previousStepId = previousStepId;
    return this;
  }

   /**
   * Get previousStepId
   * @return previousStepId
  **/
  @javax.annotation.Nullable
  public UUID getPreviousStepId() {
    return previousStepId;
  }

  public void setPreviousStepId(UUID previousStepId) {
    this.previousStepId = previousStepId;
  }


  public FlowStepFilter caseSensitive(Boolean caseSensitive) {
    this.caseSensitive = caseSensitive;
    return this;
  }

   /**
   * Get caseSensitive
   * @return caseSensitive
  **/
  @javax.annotation.Nullable
  public Boolean getCaseSensitive() {
    return caseSensitive;
  }

  public void setCaseSensitive(Boolean caseSensitive) {
    this.caseSensitive = caseSensitive;
  }


  public FlowStepFilter deliveryFileRetrievable(Boolean deliveryFileRetrievable) {
    this.deliveryFileRetrievable = deliveryFileRetrievable;
    return this;
  }

   /**
   * Get deliveryFileRetrievable
   * @return deliveryFileRetrievable
  **/
  @javax.annotation.Nullable
  public Boolean getDeliveryFileRetrievable() {
    return deliveryFileRetrievable;
  }

  public void setDeliveryFileRetrievable(Boolean deliveryFileRetrievable) {
    this.deliveryFileRetrievable = deliveryFileRetrievable;
  }


  public FlowStepFilter statuses(List<StatusesEnum> statuses) {
    this.statuses = statuses;
    return this;
  }

  public FlowStepFilter addStatusesItem(StatusesEnum statusesItem) {
    if (this.statuses == null) {
      this.statuses = new ArrayList<>();
    }
    this.statuses.add(statusesItem);
    return this;
  }

   /**
   * Get statuses
   * @return statuses
  **/
  @javax.annotation.Nullable
  public List<StatusesEnum> getStatuses() {
    return statuses;
  }

  public void setStatuses(List<StatusesEnum> statuses) {
    this.statuses = statuses;
  }


  public FlowStepFilter stepTypes(List<StepTypesEnum> stepTypes) {
    this.stepTypes = stepTypes;
    return this;
  }

  public FlowStepFilter addStepTypesItem(StepTypesEnum stepTypesItem) {
    if (this.stepTypes == null) {
      this.stepTypes = new ArrayList<>();
    }
    this.stepTypes.add(stepTypesItem);
    return this;
  }

   /**
   * Get stepTypes
   * @return stepTypes
  **/
  @javax.annotation.Nullable
  public List<StepTypesEnum> getStepTypes() {
    return stepTypes;
  }

  public void setStepTypes(List<StepTypesEnum> stepTypes) {
    this.stepTypes = stepTypes;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FlowStepFilter flowStepFilter = (FlowStepFilter) o;
    return Objects.equals(this.ids, flowStepFilter.ids) &&
        Objects.equals(this.flowInstanceId, flowStepFilter.flowInstanceId) &&
        Objects.equals(this.stepName, flowStepFilter.stepName) &&
        Objects.equals(this.displayName, flowStepFilter.displayName) &&
        Objects.equals(this.startDateStart, flowStepFilter.startDateStart) &&
        Objects.equals(this.startDateEnd, flowStepFilter.startDateEnd) &&
        Objects.equals(this.endDateStart, flowStepFilter.endDateStart) &&
        Objects.equals(this.endDateEnd, flowStepFilter.endDateEnd) &&
        Objects.equals(this.queueDateStart, flowStepFilter.queueDateStart) &&
        Objects.equals(this.queueDateEnd, flowStepFilter.queueDateEnd) &&
        Objects.equals(this.executeDateStart, flowStepFilter.executeDateStart) &&
        Objects.equals(this.executeDateEnd, flowStepFilter.executeDateEnd) &&
        Objects.equals(this.expiringDateStart, flowStepFilter.expiringDateStart) &&
        Objects.equals(this.expiringDateEnd, flowStepFilter.expiringDateEnd) &&
        Objects.equals(this.externalId, flowStepFilter.externalId) &&
        Objects.equals(this.previousStepId, flowStepFilter.previousStepId) &&
        Objects.equals(this.caseSensitive, flowStepFilter.caseSensitive) &&
        Objects.equals(this.deliveryFileRetrievable, flowStepFilter.deliveryFileRetrievable) &&
        Objects.equals(this.statuses, flowStepFilter.statuses) &&
        Objects.equals(this.stepTypes, flowStepFilter.stepTypes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(ids, flowInstanceId, stepName, displayName, startDateStart, startDateEnd, endDateStart, endDateEnd, queueDateStart, queueDateEnd, executeDateStart, executeDateEnd, expiringDateStart, expiringDateEnd, externalId, previousStepId, caseSensitive, deliveryFileRetrievable, statuses, stepTypes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FlowStepFilter {\n");
    sb.append("    ids: ").append(toIndentedString(ids)).append("\n");
    sb.append("    flowInstanceId: ").append(toIndentedString(flowInstanceId)).append("\n");
    sb.append("    stepName: ").append(toIndentedString(stepName)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    startDateStart: ").append(toIndentedString(startDateStart)).append("\n");
    sb.append("    startDateEnd: ").append(toIndentedString(startDateEnd)).append("\n");
    sb.append("    endDateStart: ").append(toIndentedString(endDateStart)).append("\n");
    sb.append("    endDateEnd: ").append(toIndentedString(endDateEnd)).append("\n");
    sb.append("    queueDateStart: ").append(toIndentedString(queueDateStart)).append("\n");
    sb.append("    queueDateEnd: ").append(toIndentedString(queueDateEnd)).append("\n");
    sb.append("    executeDateStart: ").append(toIndentedString(executeDateStart)).append("\n");
    sb.append("    executeDateEnd: ").append(toIndentedString(executeDateEnd)).append("\n");
    sb.append("    expiringDateStart: ").append(toIndentedString(expiringDateStart)).append("\n");
    sb.append("    expiringDateEnd: ").append(toIndentedString(expiringDateEnd)).append("\n");
    sb.append("    externalId: ").append(toIndentedString(externalId)).append("\n");
    sb.append("    previousStepId: ").append(toIndentedString(previousStepId)).append("\n");
    sb.append("    caseSensitive: ").append(toIndentedString(caseSensitive)).append("\n");
    sb.append("    deliveryFileRetrievable: ").append(toIndentedString(deliveryFileRetrievable)).append("\n");
    sb.append("    statuses: ").append(toIndentedString(statuses)).append("\n");
    sb.append("    stepTypes: ").append(toIndentedString(stepTypes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ids");
    openapiFields.add("flowInstanceId");
    openapiFields.add("stepName");
    openapiFields.add("displayName");
    openapiFields.add("startDateStart");
    openapiFields.add("startDateEnd");
    openapiFields.add("endDateStart");
    openapiFields.add("endDateEnd");
    openapiFields.add("queueDateStart");
    openapiFields.add("queueDateEnd");
    openapiFields.add("executeDateStart");
    openapiFields.add("executeDateEnd");
    openapiFields.add("expiringDateStart");
    openapiFields.add("expiringDateEnd");
    openapiFields.add("externalId");
    openapiFields.add("previousStepId");
    openapiFields.add("caseSensitive");
    openapiFields.add("deliveryFileRetrievable");
    openapiFields.add("statuses");
    openapiFields.add("stepTypes");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to FlowStepFilter
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FlowStepFilter.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FlowStepFilter is not found in the empty JSON string", FlowStepFilter.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!FlowStepFilter.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FlowStepFilter` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("ids") != null && !jsonObj.get("ids").isJsonNull() && !jsonObj.get("ids").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `ids` to be an array in the JSON string but got `%s`", jsonObj.get("ids").toString()));
      }
      if ((jsonObj.get("flowInstanceId") != null && !jsonObj.get("flowInstanceId").isJsonNull()) && !jsonObj.get("flowInstanceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `flowInstanceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("flowInstanceId").toString()));
      }
      if ((jsonObj.get("stepName") != null && !jsonObj.get("stepName").isJsonNull()) && !jsonObj.get("stepName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `stepName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("stepName").toString()));
      }
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      if ((jsonObj.get("externalId") != null && !jsonObj.get("externalId").isJsonNull()) && !jsonObj.get("externalId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `externalId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("externalId").toString()));
      }
      if ((jsonObj.get("previousStepId") != null && !jsonObj.get("previousStepId").isJsonNull()) && !jsonObj.get("previousStepId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `previousStepId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("previousStepId").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("statuses") != null && !jsonObj.get("statuses").isJsonNull() && !jsonObj.get("statuses").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `statuses` to be an array in the JSON string but got `%s`", jsonObj.get("statuses").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("stepTypes") != null && !jsonObj.get("stepTypes").isJsonNull() && !jsonObj.get("stepTypes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `stepTypes` to be an array in the JSON string but got `%s`", jsonObj.get("stepTypes").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FlowStepFilter.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FlowStepFilter' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FlowStepFilter> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FlowStepFilter.class));

       return (TypeAdapter<T>) new TypeAdapter<FlowStepFilter>() {
           @Override
           public void write(JsonWriter out, FlowStepFilter value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FlowStepFilter read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of FlowStepFilter given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of FlowStepFilter
  * @throws IOException if the JSON string is invalid with respect to FlowStepFilter
  */
  public static FlowStepFilter fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FlowStepFilter.class);
  }

 /**
  * Convert an instance of FlowStepFilter to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

