/*
 * Exstream Orchestration
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CronJob
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-17T13:55:50.549398439Z[Europe/Lisbon]")
public class CronJob {
  public static final String SERIALIZED_NAME_DOMAIN_ID = "domainId";
  @SerializedName(SERIALIZED_NAME_DOMAIN_ID)
  private String domainId;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_CRON_EXPRESSION = "cronExpression";
  @SerializedName(SERIALIZED_NAME_CRON_EXPRESSION)
  private String cronExpression;

  /**
   * Gets or Sets cronType
   */
  @JsonAdapter(CronTypeEnum.Adapter.class)
  public enum CronTypeEnum {
    MARKDELETED("markDeleted"),
    
    WIPE("wipe"),
    
    STARTJOB("startJob"),
    
    UPDATEEXPIRATIONTIME("updateExpirationTime"),
    
    WIPESORTINGASSETS("wipeSortingAssets"),
    
    EXPIRESORTINGASSETS("expireSortingAssets"),
    
    SORTINGANDBUNDLING("sortingAndBundling");

    private String value;

    CronTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CronTypeEnum fromValue(String value) {
      for (CronTypeEnum b : CronTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CronTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CronTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CronTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CronTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CronTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CRON_TYPE = "cronType";
  @SerializedName(SERIALIZED_NAME_CRON_TYPE)
  private CronTypeEnum cronType;

  public static final String SERIALIZED_NAME_START_DATE_START = "startDateStart";
  @SerializedName(SERIALIZED_NAME_START_DATE_START)
  private String startDateStart;

  public static final String SERIALIZED_NAME_START_DATE_END = "startDateEnd";
  @SerializedName(SERIALIZED_NAME_START_DATE_END)
  private String startDateEnd;

  public static final String SERIALIZED_NAME_END_DATE_START = "endDateStart";
  @SerializedName(SERIALIZED_NAME_END_DATE_START)
  private String endDateStart;

  public static final String SERIALIZED_NAME_END_DATE_END = "endDateEnd";
  @SerializedName(SERIALIZED_NAME_END_DATE_END)
  private String endDateEnd;

  public static final String SERIALIZED_NAME_ENABLED = "enabled";
  @SerializedName(SERIALIZED_NAME_ENABLED)
  private Boolean enabled;

  public static final String SERIALIZED_NAME_SERVICE_NAME = "serviceName";
  @SerializedName(SERIALIZED_NAME_SERVICE_NAME)
  private String serviceName;

  public static final String SERIALIZED_NAME_CHANNEL_NAME = "channelName";
  @SerializedName(SERIALIZED_NAME_CHANNEL_NAME)
  private String channelName;

  public static final String SERIALIZED_NAME_INPUT_PATH = "inputPath";
  @SerializedName(SERIALIZED_NAME_INPUT_PATH)
  private String inputPath;

  public static final String SERIALIZED_NAME_HEADERS = "headers";
  @SerializedName(SERIALIZED_NAME_HEADERS)
  private Map<String, String> headers = new HashMap<>();

  public static final String SERIALIZED_NAME_CACHE_TIMEOUT = "cacheTimeout";
  @SerializedName(SERIALIZED_NAME_CACHE_TIMEOUT)
  private Float cacheTimeout;

  /**
   * Gets or Sets mode
   */
  @JsonAdapter(ModeEnum.Adapter.class)
  public enum ModeEnum {
    BATCH("BATCH"),
    
    ONDEMAND("ONDEMAND");

    private String value;

    ModeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ModeEnum fromValue(String value) {
      for (ModeEnum b : ModeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ModeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ModeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ModeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_MODE = "mode";
  @SerializedName(SERIALIZED_NAME_MODE)
  private ModeEnum mode;

  public static final String SERIALIZED_NAME_FLOW_MODEL_ID = "flowModelId";
  @SerializedName(SERIALIZED_NAME_FLOW_MODEL_ID)
  private UUID flowModelId;

  public static final String SERIALIZED_NAME_PRE_SORT_QUEUE_NAME = "preSortQueueName";
  @SerializedName(SERIALIZED_NAME_PRE_SORT_QUEUE_NAME)
  private String preSortQueueName;

  public static final String SERIALIZED_NAME_POST_SORT_QUEUE_NAME = "postSortQueueName";
  @SerializedName(SERIALIZED_NAME_POST_SORT_QUEUE_NAME)
  private String postSortQueueName;

  public static final String SERIALIZED_NAME_JOB_ID = "jobId";
  @SerializedName(SERIALIZED_NAME_JOB_ID)
  private UUID jobId;

  public static final String SERIALIZED_NAME_DRY_RUN = "dryRun";
  @SerializedName(SERIALIZED_NAME_DRY_RUN)
  private Boolean dryRun;

  public static final String SERIALIZED_NAME_APP_CONSOLIDATION = "appConsolidation";
  @SerializedName(SERIALIZED_NAME_APP_CONSOLIDATION)
  private Boolean appConsolidation;

  public static final String SERIALIZED_NAME_JOB_AVAILABLE = "jobAvailable";
  @SerializedName(SERIALIZED_NAME_JOB_AVAILABLE)
  private Boolean jobAvailable;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private UUID id;

  /**
   * Gets or Sets statuses
   */
  @JsonAdapter(StatusesEnum.Adapter.class)
  public enum StatusesEnum {
    CANCELED("canceled"),
    
    COMPLETE("complete"),
    
    DELETED("deleted"),
    
    STARTED("started"),
    
    WAITING("waiting"),
    
    HOLDING("holding"),
    
    ERROR("error"),
    
    UNINITIALIZED("uninitialized");

    private String value;

    StatusesEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusesEnum fromValue(String value) {
      for (StatusesEnum b : StatusesEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusesEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusesEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusesEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusesEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUSES = "statuses";
  @SerializedName(SERIALIZED_NAME_STATUSES)
  private List<StatusesEnum> statuses;

  /**
   * Gets or Sets sortingAssetStatuses
   */
  @JsonAdapter(SortingAssetStatusesEnum.Adapter.class)
  public enum SortingAssetStatusesEnum {
    PROCESSED("processed"),
    
    WAITING("waiting"),
    
    EXPIRED("expired"),
    
    CANCELED("canceled"),
    
    ALL("all");

    private String value;

    SortingAssetStatusesEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SortingAssetStatusesEnum fromValue(String value) {
      for (SortingAssetStatusesEnum b : SortingAssetStatusesEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SortingAssetStatusesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SortingAssetStatusesEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SortingAssetStatusesEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SortingAssetStatusesEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SortingAssetStatusesEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SORTING_ASSET_STATUSES = "sortingAssetStatuses";
  @SerializedName(SERIALIZED_NAME_SORTING_ASSET_STATUSES)
  private List<SortingAssetStatusesEnum> sortingAssetStatuses;

  public static final String SERIALIZED_NAME_COMMUNICATION_ID_LIST = "communicationIdList";
  @SerializedName(SERIALIZED_NAME_COMMUNICATION_ID_LIST)
  private List<UUID> communicationIdList;

  public CronJob() {
  }

  public CronJob domainId(String domainId) {
    this.domainId = domainId;
    return this;
  }

   /**
   * Get domainId
   * @return domainId
  **/
  @javax.annotation.Nullable
  public String getDomainId() {
    return domainId;
  }

  public void setDomainId(String domainId) {
    this.domainId = domainId;
  }


  public CronJob name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public CronJob cronExpression(String cronExpression) {
    this.cronExpression = cronExpression;
    return this;
  }

   /**
   * Get cronExpression
   * @return cronExpression
  **/
  @javax.annotation.Nullable
  public String getCronExpression() {
    return cronExpression;
  }

  public void setCronExpression(String cronExpression) {
    this.cronExpression = cronExpression;
  }


  public CronJob cronType(CronTypeEnum cronType) {
    this.cronType = cronType;
    return this;
  }

   /**
   * Get cronType
   * @return cronType
  **/
  @javax.annotation.Nullable
  public CronTypeEnum getCronType() {
    return cronType;
  }

  public void setCronType(CronTypeEnum cronType) {
    this.cronType = cronType;
  }


  public CronJob startDateStart(String startDateStart) {
    this.startDateStart = startDateStart;
    return this;
  }

   /**
   * Get startDateStart
   * @return startDateStart
  **/
  @javax.annotation.Nullable
  public String getStartDateStart() {
    return startDateStart;
  }

  public void setStartDateStart(String startDateStart) {
    this.startDateStart = startDateStart;
  }


  public CronJob startDateEnd(String startDateEnd) {
    this.startDateEnd = startDateEnd;
    return this;
  }

   /**
   * Get startDateEnd
   * @return startDateEnd
  **/
  @javax.annotation.Nullable
  public String getStartDateEnd() {
    return startDateEnd;
  }

  public void setStartDateEnd(String startDateEnd) {
    this.startDateEnd = startDateEnd;
  }


  public CronJob endDateStart(String endDateStart) {
    this.endDateStart = endDateStart;
    return this;
  }

   /**
   * Get endDateStart
   * @return endDateStart
  **/
  @javax.annotation.Nullable
  public String getEndDateStart() {
    return endDateStart;
  }

  public void setEndDateStart(String endDateStart) {
    this.endDateStart = endDateStart;
  }


  public CronJob endDateEnd(String endDateEnd) {
    this.endDateEnd = endDateEnd;
    return this;
  }

   /**
   * Get endDateEnd
   * @return endDateEnd
  **/
  @javax.annotation.Nullable
  public String getEndDateEnd() {
    return endDateEnd;
  }

  public void setEndDateEnd(String endDateEnd) {
    this.endDateEnd = endDateEnd;
  }


  public CronJob enabled(Boolean enabled) {
    this.enabled = enabled;
    return this;
  }

   /**
   * Get enabled
   * @return enabled
  **/
  @javax.annotation.Nullable
  public Boolean getEnabled() {
    return enabled;
  }

  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }


  public CronJob serviceName(String serviceName) {
    this.serviceName = serviceName;
    return this;
  }

   /**
   * Get serviceName
   * @return serviceName
  **/
  @javax.annotation.Nullable
  public String getServiceName() {
    return serviceName;
  }

  public void setServiceName(String serviceName) {
    this.serviceName = serviceName;
  }


  public CronJob channelName(String channelName) {
    this.channelName = channelName;
    return this;
  }

   /**
   * Get channelName
   * @return channelName
  **/
  @javax.annotation.Nullable
  public String getChannelName() {
    return channelName;
  }

  public void setChannelName(String channelName) {
    this.channelName = channelName;
  }


  public CronJob inputPath(String inputPath) {
    this.inputPath = inputPath;
    return this;
  }

   /**
   * Get inputPath
   * @return inputPath
  **/
  @javax.annotation.Nullable
  public String getInputPath() {
    return inputPath;
  }

  public void setInputPath(String inputPath) {
    this.inputPath = inputPath;
  }


  public CronJob headers(Map<String, String> headers) {
    this.headers = headers;
    return this;
  }

  public CronJob putHeadersItem(String key, String headersItem) {
    if (this.headers == null) {
      this.headers = new HashMap<>();
    }
    this.headers.put(key, headersItem);
    return this;
  }

   /**
   * Get headers
   * @return headers
  **/
  @javax.annotation.Nullable
  public Map<String, String> getHeaders() {
    return headers;
  }

  public void setHeaders(Map<String, String> headers) {
    this.headers = headers;
  }


  public CronJob cacheTimeout(Float cacheTimeout) {
    this.cacheTimeout = cacheTimeout;
    return this;
  }

   /**
   * Get cacheTimeout
   * @return cacheTimeout
  **/
  @javax.annotation.Nullable
  public Float getCacheTimeout() {
    return cacheTimeout;
  }

  public void setCacheTimeout(Float cacheTimeout) {
    this.cacheTimeout = cacheTimeout;
  }


  public CronJob mode(ModeEnum mode) {
    this.mode = mode;
    return this;
  }

   /**
   * Get mode
   * @return mode
  **/
  @javax.annotation.Nullable
  public ModeEnum getMode() {
    return mode;
  }

  public void setMode(ModeEnum mode) {
    this.mode = mode;
  }


  public CronJob flowModelId(UUID flowModelId) {
    this.flowModelId = flowModelId;
    return this;
  }

   /**
   * Get flowModelId
   * @return flowModelId
  **/
  @javax.annotation.Nullable
  public UUID getFlowModelId() {
    return flowModelId;
  }

  public void setFlowModelId(UUID flowModelId) {
    this.flowModelId = flowModelId;
  }


  public CronJob preSortQueueName(String preSortQueueName) {
    this.preSortQueueName = preSortQueueName;
    return this;
  }

   /**
   * Get preSortQueueName
   * @return preSortQueueName
  **/
  @javax.annotation.Nullable
  public String getPreSortQueueName() {
    return preSortQueueName;
  }

  public void setPreSortQueueName(String preSortQueueName) {
    this.preSortQueueName = preSortQueueName;
  }


  public CronJob postSortQueueName(String postSortQueueName) {
    this.postSortQueueName = postSortQueueName;
    return this;
  }

   /**
   * Get postSortQueueName
   * @return postSortQueueName
  **/
  @javax.annotation.Nullable
  public String getPostSortQueueName() {
    return postSortQueueName;
  }

  public void setPostSortQueueName(String postSortQueueName) {
    this.postSortQueueName = postSortQueueName;
  }


  public CronJob jobId(UUID jobId) {
    this.jobId = jobId;
    return this;
  }

   /**
   * Get jobId
   * @return jobId
  **/
  @javax.annotation.Nullable
  public UUID getJobId() {
    return jobId;
  }

  public void setJobId(UUID jobId) {
    this.jobId = jobId;
  }


  public CronJob dryRun(Boolean dryRun) {
    this.dryRun = dryRun;
    return this;
  }

   /**
   * Get dryRun
   * @return dryRun
  **/
  @javax.annotation.Nullable
  public Boolean getDryRun() {
    return dryRun;
  }

  public void setDryRun(Boolean dryRun) {
    this.dryRun = dryRun;
  }


  public CronJob appConsolidation(Boolean appConsolidation) {
    this.appConsolidation = appConsolidation;
    return this;
  }

   /**
   * Get appConsolidation
   * @return appConsolidation
  **/
  @javax.annotation.Nullable
  public Boolean getAppConsolidation() {
    return appConsolidation;
  }

  public void setAppConsolidation(Boolean appConsolidation) {
    this.appConsolidation = appConsolidation;
  }


  public CronJob jobAvailable(Boolean jobAvailable) {
    this.jobAvailable = jobAvailable;
    return this;
  }

   /**
   * Get jobAvailable
   * @return jobAvailable
  **/
  @javax.annotation.Nullable
  public Boolean getJobAvailable() {
    return jobAvailable;
  }

  public void setJobAvailable(Boolean jobAvailable) {
    this.jobAvailable = jobAvailable;
  }


  public CronJob id(UUID id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nullable
  public UUID getId() {
    return id;
  }

  public void setId(UUID id) {
    this.id = id;
  }


  public CronJob statuses(List<StatusesEnum> statuses) {
    this.statuses = statuses;
    return this;
  }

  public CronJob addStatusesItem(StatusesEnum statusesItem) {
    if (this.statuses == null) {
      this.statuses = new ArrayList<>();
    }
    this.statuses.add(statusesItem);
    return this;
  }

   /**
   * Get statuses
   * @return statuses
  **/
  @javax.annotation.Nullable
  public List<StatusesEnum> getStatuses() {
    return statuses;
  }

  public void setStatuses(List<StatusesEnum> statuses) {
    this.statuses = statuses;
  }


  public CronJob sortingAssetStatuses(List<SortingAssetStatusesEnum> sortingAssetStatuses) {
    this.sortingAssetStatuses = sortingAssetStatuses;
    return this;
  }

  public CronJob addSortingAssetStatusesItem(SortingAssetStatusesEnum sortingAssetStatusesItem) {
    if (this.sortingAssetStatuses == null) {
      this.sortingAssetStatuses = new ArrayList<>();
    }
    this.sortingAssetStatuses.add(sortingAssetStatusesItem);
    return this;
  }

   /**
   * Get sortingAssetStatuses
   * @return sortingAssetStatuses
  **/
  @javax.annotation.Nullable
  public List<SortingAssetStatusesEnum> getSortingAssetStatuses() {
    return sortingAssetStatuses;
  }

  public void setSortingAssetStatuses(List<SortingAssetStatusesEnum> sortingAssetStatuses) {
    this.sortingAssetStatuses = sortingAssetStatuses;
  }


  public CronJob communicationIdList(List<UUID> communicationIdList) {
    this.communicationIdList = communicationIdList;
    return this;
  }

  public CronJob addCommunicationIdListItem(UUID communicationIdListItem) {
    if (this.communicationIdList == null) {
      this.communicationIdList = new ArrayList<>();
    }
    this.communicationIdList.add(communicationIdListItem);
    return this;
  }

   /**
   * Get communicationIdList
   * @return communicationIdList
  **/
  @javax.annotation.Nullable
  public List<UUID> getCommunicationIdList() {
    return communicationIdList;
  }

  public void setCommunicationIdList(List<UUID> communicationIdList) {
    this.communicationIdList = communicationIdList;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CronJob cronJob = (CronJob) o;
    return Objects.equals(this.domainId, cronJob.domainId) &&
        Objects.equals(this.name, cronJob.name) &&
        Objects.equals(this.cronExpression, cronJob.cronExpression) &&
        Objects.equals(this.cronType, cronJob.cronType) &&
        Objects.equals(this.startDateStart, cronJob.startDateStart) &&
        Objects.equals(this.startDateEnd, cronJob.startDateEnd) &&
        Objects.equals(this.endDateStart, cronJob.endDateStart) &&
        Objects.equals(this.endDateEnd, cronJob.endDateEnd) &&
        Objects.equals(this.enabled, cronJob.enabled) &&
        Objects.equals(this.serviceName, cronJob.serviceName) &&
        Objects.equals(this.channelName, cronJob.channelName) &&
        Objects.equals(this.inputPath, cronJob.inputPath) &&
        Objects.equals(this.headers, cronJob.headers) &&
        Objects.equals(this.cacheTimeout, cronJob.cacheTimeout) &&
        Objects.equals(this.mode, cronJob.mode) &&
        Objects.equals(this.flowModelId, cronJob.flowModelId) &&
        Objects.equals(this.preSortQueueName, cronJob.preSortQueueName) &&
        Objects.equals(this.postSortQueueName, cronJob.postSortQueueName) &&
        Objects.equals(this.jobId, cronJob.jobId) &&
        Objects.equals(this.dryRun, cronJob.dryRun) &&
        Objects.equals(this.appConsolidation, cronJob.appConsolidation) &&
        Objects.equals(this.jobAvailable, cronJob.jobAvailable) &&
        Objects.equals(this.id, cronJob.id) &&
        Objects.equals(this.statuses, cronJob.statuses) &&
        Objects.equals(this.sortingAssetStatuses, cronJob.sortingAssetStatuses) &&
        Objects.equals(this.communicationIdList, cronJob.communicationIdList);
  }

  @Override
  public int hashCode() {
    return Objects.hash(domainId, name, cronExpression, cronType, startDateStart, startDateEnd, endDateStart, endDateEnd, enabled, serviceName, channelName, inputPath, headers, cacheTimeout, mode, flowModelId, preSortQueueName, postSortQueueName, jobId, dryRun, appConsolidation, jobAvailable, id, statuses, sortingAssetStatuses, communicationIdList);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CronJob {\n");
    sb.append("    domainId: ").append(toIndentedString(domainId)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    cronExpression: ").append(toIndentedString(cronExpression)).append("\n");
    sb.append("    cronType: ").append(toIndentedString(cronType)).append("\n");
    sb.append("    startDateStart: ").append(toIndentedString(startDateStart)).append("\n");
    sb.append("    startDateEnd: ").append(toIndentedString(startDateEnd)).append("\n");
    sb.append("    endDateStart: ").append(toIndentedString(endDateStart)).append("\n");
    sb.append("    endDateEnd: ").append(toIndentedString(endDateEnd)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    serviceName: ").append(toIndentedString(serviceName)).append("\n");
    sb.append("    channelName: ").append(toIndentedString(channelName)).append("\n");
    sb.append("    inputPath: ").append(toIndentedString(inputPath)).append("\n");
    sb.append("    headers: ").append(toIndentedString(headers)).append("\n");
    sb.append("    cacheTimeout: ").append(toIndentedString(cacheTimeout)).append("\n");
    sb.append("    mode: ").append(toIndentedString(mode)).append("\n");
    sb.append("    flowModelId: ").append(toIndentedString(flowModelId)).append("\n");
    sb.append("    preSortQueueName: ").append(toIndentedString(preSortQueueName)).append("\n");
    sb.append("    postSortQueueName: ").append(toIndentedString(postSortQueueName)).append("\n");
    sb.append("    jobId: ").append(toIndentedString(jobId)).append("\n");
    sb.append("    dryRun: ").append(toIndentedString(dryRun)).append("\n");
    sb.append("    appConsolidation: ").append(toIndentedString(appConsolidation)).append("\n");
    sb.append("    jobAvailable: ").append(toIndentedString(jobAvailable)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    statuses: ").append(toIndentedString(statuses)).append("\n");
    sb.append("    sortingAssetStatuses: ").append(toIndentedString(sortingAssetStatuses)).append("\n");
    sb.append("    communicationIdList: ").append(toIndentedString(communicationIdList)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("domainId");
    openapiFields.add("name");
    openapiFields.add("cronExpression");
    openapiFields.add("cronType");
    openapiFields.add("startDateStart");
    openapiFields.add("startDateEnd");
    openapiFields.add("endDateStart");
    openapiFields.add("endDateEnd");
    openapiFields.add("enabled");
    openapiFields.add("serviceName");
    openapiFields.add("channelName");
    openapiFields.add("inputPath");
    openapiFields.add("headers");
    openapiFields.add("cacheTimeout");
    openapiFields.add("mode");
    openapiFields.add("flowModelId");
    openapiFields.add("preSortQueueName");
    openapiFields.add("postSortQueueName");
    openapiFields.add("jobId");
    openapiFields.add("dryRun");
    openapiFields.add("appConsolidation");
    openapiFields.add("jobAvailable");
    openapiFields.add("id");
    openapiFields.add("statuses");
    openapiFields.add("sortingAssetStatuses");
    openapiFields.add("communicationIdList");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to CronJob
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CronJob.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CronJob is not found in the empty JSON string", CronJob.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CronJob.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CronJob` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("domainId") != null && !jsonObj.get("domainId").isJsonNull()) && !jsonObj.get("domainId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `domainId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("domainId").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("cronExpression") != null && !jsonObj.get("cronExpression").isJsonNull()) && !jsonObj.get("cronExpression").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cronExpression` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cronExpression").toString()));
      }
      if ((jsonObj.get("cronType") != null && !jsonObj.get("cronType").isJsonNull()) && !jsonObj.get("cronType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cronType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cronType").toString()));
      }
      // validate the optional field `cronType`
      if (jsonObj.get("cronType") != null && !jsonObj.get("cronType").isJsonNull()) {
        CronTypeEnum.validateJsonElement(jsonObj.get("cronType"));
      }
      if ((jsonObj.get("startDateStart") != null && !jsonObj.get("startDateStart").isJsonNull()) && !jsonObj.get("startDateStart").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `startDateStart` to be a primitive type in the JSON string but got `%s`", jsonObj.get("startDateStart").toString()));
      }
      if ((jsonObj.get("startDateEnd") != null && !jsonObj.get("startDateEnd").isJsonNull()) && !jsonObj.get("startDateEnd").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `startDateEnd` to be a primitive type in the JSON string but got `%s`", jsonObj.get("startDateEnd").toString()));
      }
      if ((jsonObj.get("endDateStart") != null && !jsonObj.get("endDateStart").isJsonNull()) && !jsonObj.get("endDateStart").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `endDateStart` to be a primitive type in the JSON string but got `%s`", jsonObj.get("endDateStart").toString()));
      }
      if ((jsonObj.get("endDateEnd") != null && !jsonObj.get("endDateEnd").isJsonNull()) && !jsonObj.get("endDateEnd").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `endDateEnd` to be a primitive type in the JSON string but got `%s`", jsonObj.get("endDateEnd").toString()));
      }
      if ((jsonObj.get("serviceName") != null && !jsonObj.get("serviceName").isJsonNull()) && !jsonObj.get("serviceName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serviceName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serviceName").toString()));
      }
      if ((jsonObj.get("channelName") != null && !jsonObj.get("channelName").isJsonNull()) && !jsonObj.get("channelName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `channelName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("channelName").toString()));
      }
      if ((jsonObj.get("inputPath") != null && !jsonObj.get("inputPath").isJsonNull()) && !jsonObj.get("inputPath").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `inputPath` to be a primitive type in the JSON string but got `%s`", jsonObj.get("inputPath").toString()));
      }
      if ((jsonObj.get("mode") != null && !jsonObj.get("mode").isJsonNull()) && !jsonObj.get("mode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mode").toString()));
      }
      // validate the optional field `mode`
      if (jsonObj.get("mode") != null && !jsonObj.get("mode").isJsonNull()) {
        ModeEnum.validateJsonElement(jsonObj.get("mode"));
      }
      if ((jsonObj.get("flowModelId") != null && !jsonObj.get("flowModelId").isJsonNull()) && !jsonObj.get("flowModelId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `flowModelId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("flowModelId").toString()));
      }
      if ((jsonObj.get("preSortQueueName") != null && !jsonObj.get("preSortQueueName").isJsonNull()) && !jsonObj.get("preSortQueueName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `preSortQueueName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("preSortQueueName").toString()));
      }
      if ((jsonObj.get("postSortQueueName") != null && !jsonObj.get("postSortQueueName").isJsonNull()) && !jsonObj.get("postSortQueueName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `postSortQueueName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("postSortQueueName").toString()));
      }
      if ((jsonObj.get("jobId") != null && !jsonObj.get("jobId").isJsonNull()) && !jsonObj.get("jobId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `jobId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("jobId").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("statuses") != null && !jsonObj.get("statuses").isJsonNull() && !jsonObj.get("statuses").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `statuses` to be an array in the JSON string but got `%s`", jsonObj.get("statuses").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("sortingAssetStatuses") != null && !jsonObj.get("sortingAssetStatuses").isJsonNull() && !jsonObj.get("sortingAssetStatuses").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `sortingAssetStatuses` to be an array in the JSON string but got `%s`", jsonObj.get("sortingAssetStatuses").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("communicationIdList") != null && !jsonObj.get("communicationIdList").isJsonNull() && !jsonObj.get("communicationIdList").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `communicationIdList` to be an array in the JSON string but got `%s`", jsonObj.get("communicationIdList").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CronJob.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CronJob' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CronJob> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CronJob.class));

       return (TypeAdapter<T>) new TypeAdapter<CronJob>() {
           @Override
           public void write(JsonWriter out, CronJob value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CronJob read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CronJob given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CronJob
  * @throws IOException if the JSON string is invalid with respect to CronJob
  */
  public static CronJob fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CronJob.class);
  }

 /**
  * Convert an instance of CronJob to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

