/*
 * Exstream Orchestration
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * FlowModelSnapshot
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-17T13:55:50.549398439Z[Europe/Lisbon]")
public class FlowModelSnapshot {
  public static final String SERIALIZED_NAME_SNAPSHOT_ID = "snapshotId";
  @SerializedName(SERIALIZED_NAME_SNAPSHOT_ID)
  private UUID snapshotId;

  public static final String SERIALIZED_NAME_DAS_ID = "dasId";
  @SerializedName(SERIALIZED_NAME_DAS_ID)
  private UUID dasId;

  public static final String SERIALIZED_NAME_DAS_VERSION = "dasVersion";
  @SerializedName(SERIALIZED_NAME_DAS_VERSION)
  private Integer dasVersion;

  public static final String SERIALIZED_NAME_DOMAIN = "domain";
  @SerializedName(SERIALIZED_NAME_DOMAIN)
  private String domain;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_PUBLISHED_BY = "publishedBy";
  @SerializedName(SERIALIZED_NAME_PUBLISHED_BY)
  private String publishedBy;

  public static final String SERIALIZED_NAME_PUBLISH_DATE = "publishDate";
  @SerializedName(SERIALIZED_NAME_PUBLISH_DATE)
  private OffsetDateTime publishDate;

  public static final String SERIALIZED_NAME_UNPUBLISH_DATE = "unpublishDate";
  @SerializedName(SERIALIZED_NAME_UNPUBLISH_DATE)
  private OffsetDateTime unpublishDate;

  public static final String SERIALIZED_NAME_CONTENT = "content";
  @SerializedName(SERIALIZED_NAME_CONTENT)
  private List<byte[]> content;

  public FlowModelSnapshot() {
  }

  public FlowModelSnapshot snapshotId(UUID snapshotId) {
    this.snapshotId = snapshotId;
    return this;
  }

   /**
   * Get snapshotId
   * @return snapshotId
  **/
  @javax.annotation.Nullable
  public UUID getSnapshotId() {
    return snapshotId;
  }

  public void setSnapshotId(UUID snapshotId) {
    this.snapshotId = snapshotId;
  }


  public FlowModelSnapshot dasId(UUID dasId) {
    this.dasId = dasId;
    return this;
  }

   /**
   * Get dasId
   * @return dasId
  **/
  @javax.annotation.Nullable
  public UUID getDasId() {
    return dasId;
  }

  public void setDasId(UUID dasId) {
    this.dasId = dasId;
  }


  public FlowModelSnapshot dasVersion(Integer dasVersion) {
    this.dasVersion = dasVersion;
    return this;
  }

   /**
   * Get dasVersion
   * @return dasVersion
  **/
  @javax.annotation.Nullable
  public Integer getDasVersion() {
    return dasVersion;
  }

  public void setDasVersion(Integer dasVersion) {
    this.dasVersion = dasVersion;
  }


  public FlowModelSnapshot domain(String domain) {
    this.domain = domain;
    return this;
  }

   /**
   * Get domain
   * @return domain
  **/
  @javax.annotation.Nullable
  public String getDomain() {
    return domain;
  }

  public void setDomain(String domain) {
    this.domain = domain;
  }


  public FlowModelSnapshot name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public FlowModelSnapshot description(String description) {
    this.description = description;
    return this;
  }

   /**
   * Get description
   * @return description
  **/
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public FlowModelSnapshot publishedBy(String publishedBy) {
    this.publishedBy = publishedBy;
    return this;
  }

   /**
   * Get publishedBy
   * @return publishedBy
  **/
  @javax.annotation.Nullable
  public String getPublishedBy() {
    return publishedBy;
  }

  public void setPublishedBy(String publishedBy) {
    this.publishedBy = publishedBy;
  }


  public FlowModelSnapshot publishDate(OffsetDateTime publishDate) {
    this.publishDate = publishDate;
    return this;
  }

   /**
   * Get publishDate
   * @return publishDate
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getPublishDate() {
    return publishDate;
  }

  public void setPublishDate(OffsetDateTime publishDate) {
    this.publishDate = publishDate;
  }


  public FlowModelSnapshot unpublishDate(OffsetDateTime unpublishDate) {
    this.unpublishDate = unpublishDate;
    return this;
  }

   /**
   * Get unpublishDate
   * @return unpublishDate
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getUnpublishDate() {
    return unpublishDate;
  }

  public void setUnpublishDate(OffsetDateTime unpublishDate) {
    this.unpublishDate = unpublishDate;
  }


  public FlowModelSnapshot content(List<byte[]> content) {
    this.content = content;
    return this;
  }

  public FlowModelSnapshot addContentItem(byte[] contentItem) {
    if (this.content == null) {
      this.content = new ArrayList<>();
    }
    this.content.add(contentItem);
    return this;
  }

   /**
   * Get content
   * @return content
  **/
  @javax.annotation.Nullable
  public List<byte[]> getContent() {
    return content;
  }

  public void setContent(List<byte[]> content) {
    this.content = content;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FlowModelSnapshot flowModelSnapshot = (FlowModelSnapshot) o;
    return Objects.equals(this.snapshotId, flowModelSnapshot.snapshotId) &&
        Objects.equals(this.dasId, flowModelSnapshot.dasId) &&
        Objects.equals(this.dasVersion, flowModelSnapshot.dasVersion) &&
        Objects.equals(this.domain, flowModelSnapshot.domain) &&
        Objects.equals(this.name, flowModelSnapshot.name) &&
        Objects.equals(this.description, flowModelSnapshot.description) &&
        Objects.equals(this.publishedBy, flowModelSnapshot.publishedBy) &&
        Objects.equals(this.publishDate, flowModelSnapshot.publishDate) &&
        Objects.equals(this.unpublishDate, flowModelSnapshot.unpublishDate) &&
        Objects.equals(this.content, flowModelSnapshot.content);
  }

  @Override
  public int hashCode() {
    return Objects.hash(snapshotId, dasId, dasVersion, domain, name, description, publishedBy, publishDate, unpublishDate, content);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FlowModelSnapshot {\n");
    sb.append("    snapshotId: ").append(toIndentedString(snapshotId)).append("\n");
    sb.append("    dasId: ").append(toIndentedString(dasId)).append("\n");
    sb.append("    dasVersion: ").append(toIndentedString(dasVersion)).append("\n");
    sb.append("    domain: ").append(toIndentedString(domain)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    publishedBy: ").append(toIndentedString(publishedBy)).append("\n");
    sb.append("    publishDate: ").append(toIndentedString(publishDate)).append("\n");
    sb.append("    unpublishDate: ").append(toIndentedString(unpublishDate)).append("\n");
    sb.append("    content: ").append(toIndentedString(content)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("snapshotId");
    openapiFields.add("dasId");
    openapiFields.add("dasVersion");
    openapiFields.add("domain");
    openapiFields.add("name");
    openapiFields.add("description");
    openapiFields.add("publishedBy");
    openapiFields.add("publishDate");
    openapiFields.add("unpublishDate");
    openapiFields.add("content");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to FlowModelSnapshot
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FlowModelSnapshot.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FlowModelSnapshot is not found in the empty JSON string", FlowModelSnapshot.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!FlowModelSnapshot.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FlowModelSnapshot` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("snapshotId") != null && !jsonObj.get("snapshotId").isJsonNull()) && !jsonObj.get("snapshotId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `snapshotId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("snapshotId").toString()));
      }
      if ((jsonObj.get("dasId") != null && !jsonObj.get("dasId").isJsonNull()) && !jsonObj.get("dasId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dasId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dasId").toString()));
      }
      if ((jsonObj.get("domain") != null && !jsonObj.get("domain").isJsonNull()) && !jsonObj.get("domain").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `domain` to be a primitive type in the JSON string but got `%s`", jsonObj.get("domain").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("publishedBy") != null && !jsonObj.get("publishedBy").isJsonNull()) && !jsonObj.get("publishedBy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `publishedBy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("publishedBy").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("content") != null && !jsonObj.get("content").isJsonNull() && !jsonObj.get("content").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `content` to be an array in the JSON string but got `%s`", jsonObj.get("content").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FlowModelSnapshot.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FlowModelSnapshot' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FlowModelSnapshot> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FlowModelSnapshot.class));

       return (TypeAdapter<T>) new TypeAdapter<FlowModelSnapshot>() {
           @Override
           public void write(JsonWriter out, FlowModelSnapshot value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FlowModelSnapshot read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of FlowModelSnapshot given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of FlowModelSnapshot
  * @throws IOException if the JSON string is invalid with respect to FlowModelSnapshot
  */
  public static FlowModelSnapshot fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FlowModelSnapshot.class);
  }

 /**
  * Convert an instance of FlowModelSnapshot to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

