/*
 * Exstream Orchestration
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Condition;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Connection
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-17T13:55:50.549398439Z[Europe/Lisbon]")
public class Connection {
  public static final String SERIALIZED_NAME_CONDITION = "condition";
  @SerializedName(SERIALIZED_NAME_CONDITION)
  private Condition condition;

  public static final String SERIALIZED_NAME_SOURCE_ANCHOR = "sourceAnchor";
  @SerializedName(SERIALIZED_NAME_SOURCE_ANCHOR)
  private String sourceAnchor;

  public static final String SERIALIZED_NAME_TARGET_ANCHOR = "targetAnchor";
  @SerializedName(SERIALIZED_NAME_TARGET_ANCHOR)
  private String targetAnchor;

  public static final String SERIALIZED_NAME_TARGET_NODE = "targetNode";
  @SerializedName(SERIALIZED_NAME_TARGET_NODE)
  private String targetNode;

  public static final String SERIALIZED_NAME_TARGET_NODE_ID = "targetNodeId";
  @SerializedName(SERIALIZED_NAME_TARGET_NODE_ID)
  private String targetNodeId;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_DEFAULT_CONNECTION = "defaultConnection";
  @SerializedName(SERIALIZED_NAME_DEFAULT_CONNECTION)
  private Boolean defaultConnection;

  public Connection() {
  }

  public Connection condition(Condition condition) {
    this.condition = condition;
    return this;
  }

   /**
   * Get condition
   * @return condition
  **/
  @javax.annotation.Nullable
  public Condition getCondition() {
    return condition;
  }

  public void setCondition(Condition condition) {
    this.condition = condition;
  }


  public Connection sourceAnchor(String sourceAnchor) {
    this.sourceAnchor = sourceAnchor;
    return this;
  }

   /**
   * Get sourceAnchor
   * @return sourceAnchor
  **/
  @javax.annotation.Nullable
  public String getSourceAnchor() {
    return sourceAnchor;
  }

  public void setSourceAnchor(String sourceAnchor) {
    this.sourceAnchor = sourceAnchor;
  }


  public Connection targetAnchor(String targetAnchor) {
    this.targetAnchor = targetAnchor;
    return this;
  }

   /**
   * Get targetAnchor
   * @return targetAnchor
  **/
  @javax.annotation.Nullable
  public String getTargetAnchor() {
    return targetAnchor;
  }

  public void setTargetAnchor(String targetAnchor) {
    this.targetAnchor = targetAnchor;
  }


  public Connection targetNode(String targetNode) {
    this.targetNode = targetNode;
    return this;
  }

   /**
   * Get targetNode
   * @return targetNode
  **/
  @javax.annotation.Nullable
  public String getTargetNode() {
    return targetNode;
  }

  public void setTargetNode(String targetNode) {
    this.targetNode = targetNode;
  }


  public Connection targetNodeId(String targetNodeId) {
    this.targetNodeId = targetNodeId;
    return this;
  }

   /**
   * Get targetNodeId
   * @return targetNodeId
  **/
  @javax.annotation.Nullable
  public String getTargetNodeId() {
    return targetNodeId;
  }

  public void setTargetNodeId(String targetNodeId) {
    this.targetNodeId = targetNodeId;
  }


  public Connection displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

   /**
   * Get displayName
   * @return displayName
  **/
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public Connection defaultConnection(Boolean defaultConnection) {
    this.defaultConnection = defaultConnection;
    return this;
  }

   /**
   * Get defaultConnection
   * @return defaultConnection
  **/
  @javax.annotation.Nullable
  public Boolean getDefaultConnection() {
    return defaultConnection;
  }

  public void setDefaultConnection(Boolean defaultConnection) {
    this.defaultConnection = defaultConnection;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Connection connection = (Connection) o;
    return Objects.equals(this.condition, connection.condition) &&
        Objects.equals(this.sourceAnchor, connection.sourceAnchor) &&
        Objects.equals(this.targetAnchor, connection.targetAnchor) &&
        Objects.equals(this.targetNode, connection.targetNode) &&
        Objects.equals(this.targetNodeId, connection.targetNodeId) &&
        Objects.equals(this.displayName, connection.displayName) &&
        Objects.equals(this.defaultConnection, connection.defaultConnection);
  }

  @Override
  public int hashCode() {
    return Objects.hash(condition, sourceAnchor, targetAnchor, targetNode, targetNodeId, displayName, defaultConnection);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Connection {\n");
    sb.append("    condition: ").append(toIndentedString(condition)).append("\n");
    sb.append("    sourceAnchor: ").append(toIndentedString(sourceAnchor)).append("\n");
    sb.append("    targetAnchor: ").append(toIndentedString(targetAnchor)).append("\n");
    sb.append("    targetNode: ").append(toIndentedString(targetNode)).append("\n");
    sb.append("    targetNodeId: ").append(toIndentedString(targetNodeId)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    defaultConnection: ").append(toIndentedString(defaultConnection)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("condition");
    openapiFields.add("sourceAnchor");
    openapiFields.add("targetAnchor");
    openapiFields.add("targetNode");
    openapiFields.add("targetNodeId");
    openapiFields.add("displayName");
    openapiFields.add("defaultConnection");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to Connection
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Connection.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Connection is not found in the empty JSON string", Connection.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Connection.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Connection` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `condition`
      if (jsonObj.get("condition") != null && !jsonObj.get("condition").isJsonNull()) {
        Condition.validateJsonElement(jsonObj.get("condition"));
      }
      if ((jsonObj.get("sourceAnchor") != null && !jsonObj.get("sourceAnchor").isJsonNull()) && !jsonObj.get("sourceAnchor").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sourceAnchor` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sourceAnchor").toString()));
      }
      if ((jsonObj.get("targetAnchor") != null && !jsonObj.get("targetAnchor").isJsonNull()) && !jsonObj.get("targetAnchor").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `targetAnchor` to be a primitive type in the JSON string but got `%s`", jsonObj.get("targetAnchor").toString()));
      }
      if ((jsonObj.get("targetNode") != null && !jsonObj.get("targetNode").isJsonNull()) && !jsonObj.get("targetNode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `targetNode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("targetNode").toString()));
      }
      if ((jsonObj.get("targetNodeId") != null && !jsonObj.get("targetNodeId").isJsonNull()) && !jsonObj.get("targetNodeId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `targetNodeId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("targetNodeId").toString()));
      }
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Connection.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Connection' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Connection> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Connection.class));

       return (TypeAdapter<T>) new TypeAdapter<Connection>() {
           @Override
           public void write(JsonWriter out, Connection value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Connection read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Connection given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Connection
  * @throws IOException if the JSON string is invalid with respect to Connection
  */
  public static Connection fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Connection.class);
  }

 /**
  * Convert an instance of Connection to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

