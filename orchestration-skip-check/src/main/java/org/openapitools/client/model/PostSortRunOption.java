/*
 * Exstream Orchestration
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.UUID;
import org.openapitools.client.model.PostSortRunFilter;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PostSortRunOption
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-17T13:55:50.549398439Z[Europe/Lisbon]")
public class PostSortRunOption {
  public static final String SERIALIZED_NAME_FLOW_MODEL_ID = "flowModelId";
  @SerializedName(SERIALIZED_NAME_FLOW_MODEL_ID)
  private UUID flowModelId;

  public static final String SERIALIZED_NAME_APP_CONSOLIDATION = "appConsolidation";
  @SerializedName(SERIALIZED_NAME_APP_CONSOLIDATION)
  private Boolean appConsolidation;

  public static final String SERIALIZED_NAME_DRY_RUN = "dryRun";
  @SerializedName(SERIALIZED_NAME_DRY_RUN)
  private Boolean dryRun;

  public static final String SERIALIZED_NAME_EXTERNAL_ID = "externalId";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_ID)
  private String externalId;

  public static final String SERIALIZED_NAME_CUSTOMER_LIST = "customerList";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_LIST)
  private String customerList;

  public static final String SERIALIZED_NAME_POST_SORT_QUEUE_NAME = "postSortQueueName";
  @SerializedName(SERIALIZED_NAME_POST_SORT_QUEUE_NAME)
  private String postSortQueueName;

  public static final String SERIALIZED_NAME_FILTER = "filter";
  @SerializedName(SERIALIZED_NAME_FILTER)
  private PostSortRunFilter filter;

  public PostSortRunOption() {
  }

  public PostSortRunOption flowModelId(UUID flowModelId) {
    this.flowModelId = flowModelId;
    return this;
  }

   /**
   * Get flowModelId
   * @return flowModelId
  **/
  @javax.annotation.Nonnull
  public UUID getFlowModelId() {
    return flowModelId;
  }

  public void setFlowModelId(UUID flowModelId) {
    this.flowModelId = flowModelId;
  }


  public PostSortRunOption appConsolidation(Boolean appConsolidation) {
    this.appConsolidation = appConsolidation;
    return this;
  }

   /**
   * Get appConsolidation
   * @return appConsolidation
  **/
  @javax.annotation.Nullable
  public Boolean getAppConsolidation() {
    return appConsolidation;
  }

  public void setAppConsolidation(Boolean appConsolidation) {
    this.appConsolidation = appConsolidation;
  }


  public PostSortRunOption dryRun(Boolean dryRun) {
    this.dryRun = dryRun;
    return this;
  }

   /**
   * Get dryRun
   * @return dryRun
  **/
  @javax.annotation.Nullable
  public Boolean getDryRun() {
    return dryRun;
  }

  public void setDryRun(Boolean dryRun) {
    this.dryRun = dryRun;
  }


  public PostSortRunOption externalId(String externalId) {
    this.externalId = externalId;
    return this;
  }

   /**
   * Get externalId
   * @return externalId
  **/
  @javax.annotation.Nullable
  public String getExternalId() {
    return externalId;
  }

  public void setExternalId(String externalId) {
    this.externalId = externalId;
  }


  public PostSortRunOption customerList(String customerList) {
    this.customerList = customerList;
    return this;
  }

   /**
   * Get customerList
   * @return customerList
  **/
  @javax.annotation.Nullable
  public String getCustomerList() {
    return customerList;
  }

  public void setCustomerList(String customerList) {
    this.customerList = customerList;
  }


  public PostSortRunOption postSortQueueName(String postSortQueueName) {
    this.postSortQueueName = postSortQueueName;
    return this;
  }

   /**
   * Get postSortQueueName
   * @return postSortQueueName
  **/
  @javax.annotation.Nullable
  public String getPostSortQueueName() {
    return postSortQueueName;
  }

  public void setPostSortQueueName(String postSortQueueName) {
    this.postSortQueueName = postSortQueueName;
  }


  public PostSortRunOption filter(PostSortRunFilter filter) {
    this.filter = filter;
    return this;
  }

   /**
   * Get filter
   * @return filter
  **/
  @javax.annotation.Nullable
  public PostSortRunFilter getFilter() {
    return filter;
  }

  public void setFilter(PostSortRunFilter filter) {
    this.filter = filter;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PostSortRunOption postSortRunOption = (PostSortRunOption) o;
    return Objects.equals(this.flowModelId, postSortRunOption.flowModelId) &&
        Objects.equals(this.appConsolidation, postSortRunOption.appConsolidation) &&
        Objects.equals(this.dryRun, postSortRunOption.dryRun) &&
        Objects.equals(this.externalId, postSortRunOption.externalId) &&
        Objects.equals(this.customerList, postSortRunOption.customerList) &&
        Objects.equals(this.postSortQueueName, postSortRunOption.postSortQueueName) &&
        Objects.equals(this.filter, postSortRunOption.filter);
  }

  @Override
  public int hashCode() {
    return Objects.hash(flowModelId, appConsolidation, dryRun, externalId, customerList, postSortQueueName, filter);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PostSortRunOption {\n");
    sb.append("    flowModelId: ").append(toIndentedString(flowModelId)).append("\n");
    sb.append("    appConsolidation: ").append(toIndentedString(appConsolidation)).append("\n");
    sb.append("    dryRun: ").append(toIndentedString(dryRun)).append("\n");
    sb.append("    externalId: ").append(toIndentedString(externalId)).append("\n");
    sb.append("    customerList: ").append(toIndentedString(customerList)).append("\n");
    sb.append("    postSortQueueName: ").append(toIndentedString(postSortQueueName)).append("\n");
    sb.append("    filter: ").append(toIndentedString(filter)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("flowModelId");
    openapiFields.add("appConsolidation");
    openapiFields.add("dryRun");
    openapiFields.add("externalId");
    openapiFields.add("customerList");
    openapiFields.add("postSortQueueName");
    openapiFields.add("filter");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("flowModelId");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to PostSortRunOption
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PostSortRunOption.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PostSortRunOption is not found in the empty JSON string", PostSortRunOption.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PostSortRunOption.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PostSortRunOption` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PostSortRunOption.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("flowModelId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `flowModelId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("flowModelId").toString()));
      }
      if ((jsonObj.get("externalId") != null && !jsonObj.get("externalId").isJsonNull()) && !jsonObj.get("externalId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `externalId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("externalId").toString()));
      }
      if ((jsonObj.get("customerList") != null && !jsonObj.get("customerList").isJsonNull()) && !jsonObj.get("customerList").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `customerList` to be a primitive type in the JSON string but got `%s`", jsonObj.get("customerList").toString()));
      }
      if ((jsonObj.get("postSortQueueName") != null && !jsonObj.get("postSortQueueName").isJsonNull()) && !jsonObj.get("postSortQueueName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `postSortQueueName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("postSortQueueName").toString()));
      }
      // validate the optional field `filter`
      if (jsonObj.get("filter") != null && !jsonObj.get("filter").isJsonNull()) {
        PostSortRunFilter.validateJsonElement(jsonObj.get("filter"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PostSortRunOption.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PostSortRunOption' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PostSortRunOption> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PostSortRunOption.class));

       return (TypeAdapter<T>) new TypeAdapter<PostSortRunOption>() {
           @Override
           public void write(JsonWriter out, PostSortRunOption value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PostSortRunOption read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of PostSortRunOption given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of PostSortRunOption
  * @throws IOException if the JSON string is invalid with respect to PostSortRunOption
  */
  public static PostSortRunOption fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PostSortRunOption.class);
  }

 /**
  * Convert an instance of PostSortRunOption to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

