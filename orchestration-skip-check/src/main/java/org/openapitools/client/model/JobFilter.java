/*
 * Exstream Orchestration
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * JobFilter
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-17T13:55:50.549398439Z[Europe/Lisbon]")
public class JobFilter {
  public static final String SERIALIZED_NAME_IDS = "ids";
  @SerializedName(SERIALIZED_NAME_IDS)
  private List<UUID> ids;

  public static final String SERIALIZED_NAME_CHANNEL = "channel";
  @SerializedName(SERIALIZED_NAME_CHANNEL)
  private String channel;

  public static final String SERIALIZED_NAME_START_DATE_START = "startDateStart";
  @SerializedName(SERIALIZED_NAME_START_DATE_START)
  private OffsetDateTime startDateStart;

  public static final String SERIALIZED_NAME_START_DATE_END = "startDateEnd";
  @SerializedName(SERIALIZED_NAME_START_DATE_END)
  private OffsetDateTime startDateEnd;

  public static final String SERIALIZED_NAME_END_DATE_START = "endDateStart";
  @SerializedName(SERIALIZED_NAME_END_DATE_START)
  private OffsetDateTime endDateStart;

  public static final String SERIALIZED_NAME_END_DATE_END = "endDateEnd";
  @SerializedName(SERIALIZED_NAME_END_DATE_END)
  private OffsetDateTime endDateEnd;

  public static final String SERIALIZED_NAME_EXPIRING_DATE_START = "expiringDateStart";
  @SerializedName(SERIALIZED_NAME_EXPIRING_DATE_START)
  private OffsetDateTime expiringDateStart;

  public static final String SERIALIZED_NAME_EXPIRING_DATE_END = "expiringDateEnd";
  @SerializedName(SERIALIZED_NAME_EXPIRING_DATE_END)
  private OffsetDateTime expiringDateEnd;

  public static final String SERIALIZED_NAME_DOMAIN_ID = "domainId";
  @SerializedName(SERIALIZED_NAME_DOMAIN_ID)
  private String domainId;

  /**
   * Gets or Sets statuses
   */
  @JsonAdapter(StatusesEnum.Adapter.class)
  public enum StatusesEnum {
    CANCELED("canceled"),
    
    COMPLETE("complete"),
    
    DELETED("deleted"),
    
    STARTED("started"),
    
    WAITING("waiting"),
    
    HOLDING("holding"),
    
    ERROR("error"),
    
    UNINITIALIZED("uninitialized");

    private String value;

    StatusesEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusesEnum fromValue(String value) {
      for (StatusesEnum b : StatusesEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusesEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusesEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusesEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusesEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUSES = "statuses";
  @SerializedName(SERIALIZED_NAME_STATUSES)
  private List<StatusesEnum> statuses;

  /**
   * Gets or Sets mode
   */
  @JsonAdapter(ModeEnum.Adapter.class)
  public enum ModeEnum {
    BATCH("BATCH"),
    
    ONDEMAND("ONDEMAND");

    private String value;

    ModeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ModeEnum fromValue(String value) {
      for (ModeEnum b : ModeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ModeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ModeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ModeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_MODE = "mode";
  @SerializedName(SERIALIZED_NAME_MODE)
  private ModeEnum mode;

  public static final String SERIALIZED_NAME_EXTERNAL_ID = "externalId";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_ID)
  private String externalId;

  public static final String SERIALIZED_NAME_TRIGGERED_BY = "triggeredBy";
  @SerializedName(SERIALIZED_NAME_TRIGGERED_BY)
  private String triggeredBy;

  public static final String SERIALIZED_NAME_AGGREGATED_F_M_C_SNAPSHOT_IDS = "aggregatedFMCSnapshotIds";
  @SerializedName(SERIALIZED_NAME_AGGREGATED_F_M_C_SNAPSHOT_IDS)
  private List<UUID> aggregatedFMCSnapshotIds;

  /**
   * Gets or Sets flowModelTypes
   */
  @JsonAdapter(FlowModelTypesEnum.Adapter.class)
  public enum FlowModelTypesEnum {
    COMMUNICATION("COMMUNICATION"),
    
    ALERT("ALERT"),
    
    NOTIFICATION("NOTIFICATION");

    private String value;

    FlowModelTypesEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FlowModelTypesEnum fromValue(String value) {
      for (FlowModelTypesEnum b : FlowModelTypesEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<FlowModelTypesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FlowModelTypesEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FlowModelTypesEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return FlowModelTypesEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      FlowModelTypesEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_FLOW_MODEL_TYPES = "flowModelTypes";
  @SerializedName(SERIALIZED_NAME_FLOW_MODEL_TYPES)
  private List<FlowModelTypesEnum> flowModelTypes;

  public JobFilter() {
  }

  public JobFilter ids(List<UUID> ids) {
    this.ids = ids;
    return this;
  }

  public JobFilter addIdsItem(UUID idsItem) {
    if (this.ids == null) {
      this.ids = new ArrayList<>();
    }
    this.ids.add(idsItem);
    return this;
  }

   /**
   * Get ids
   * @return ids
  **/
  @javax.annotation.Nullable
  public List<UUID> getIds() {
    return ids;
  }

  public void setIds(List<UUID> ids) {
    this.ids = ids;
  }


  public JobFilter channel(String channel) {
    this.channel = channel;
    return this;
  }

   /**
   * Get channel
   * @return channel
  **/
  @javax.annotation.Nullable
  public String getChannel() {
    return channel;
  }

  public void setChannel(String channel) {
    this.channel = channel;
  }


  public JobFilter startDateStart(OffsetDateTime startDateStart) {
    this.startDateStart = startDateStart;
    return this;
  }

   /**
   * Get startDateStart
   * @return startDateStart
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getStartDateStart() {
    return startDateStart;
  }

  public void setStartDateStart(OffsetDateTime startDateStart) {
    this.startDateStart = startDateStart;
  }


  public JobFilter startDateEnd(OffsetDateTime startDateEnd) {
    this.startDateEnd = startDateEnd;
    return this;
  }

   /**
   * Get startDateEnd
   * @return startDateEnd
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getStartDateEnd() {
    return startDateEnd;
  }

  public void setStartDateEnd(OffsetDateTime startDateEnd) {
    this.startDateEnd = startDateEnd;
  }


  public JobFilter endDateStart(OffsetDateTime endDateStart) {
    this.endDateStart = endDateStart;
    return this;
  }

   /**
   * Get endDateStart
   * @return endDateStart
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getEndDateStart() {
    return endDateStart;
  }

  public void setEndDateStart(OffsetDateTime endDateStart) {
    this.endDateStart = endDateStart;
  }


  public JobFilter endDateEnd(OffsetDateTime endDateEnd) {
    this.endDateEnd = endDateEnd;
    return this;
  }

   /**
   * Get endDateEnd
   * @return endDateEnd
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getEndDateEnd() {
    return endDateEnd;
  }

  public void setEndDateEnd(OffsetDateTime endDateEnd) {
    this.endDateEnd = endDateEnd;
  }


  public JobFilter expiringDateStart(OffsetDateTime expiringDateStart) {
    this.expiringDateStart = expiringDateStart;
    return this;
  }

   /**
   * Get expiringDateStart
   * @return expiringDateStart
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getExpiringDateStart() {
    return expiringDateStart;
  }

  public void setExpiringDateStart(OffsetDateTime expiringDateStart) {
    this.expiringDateStart = expiringDateStart;
  }


  public JobFilter expiringDateEnd(OffsetDateTime expiringDateEnd) {
    this.expiringDateEnd = expiringDateEnd;
    return this;
  }

   /**
   * Get expiringDateEnd
   * @return expiringDateEnd
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getExpiringDateEnd() {
    return expiringDateEnd;
  }

  public void setExpiringDateEnd(OffsetDateTime expiringDateEnd) {
    this.expiringDateEnd = expiringDateEnd;
  }


  public JobFilter domainId(String domainId) {
    this.domainId = domainId;
    return this;
  }

   /**
   * Get domainId
   * @return domainId
  **/
  @javax.annotation.Nullable
  public String getDomainId() {
    return domainId;
  }

  public void setDomainId(String domainId) {
    this.domainId = domainId;
  }


  public JobFilter statuses(List<StatusesEnum> statuses) {
    this.statuses = statuses;
    return this;
  }

  public JobFilter addStatusesItem(StatusesEnum statusesItem) {
    if (this.statuses == null) {
      this.statuses = new ArrayList<>();
    }
    this.statuses.add(statusesItem);
    return this;
  }

   /**
   * Get statuses
   * @return statuses
  **/
  @javax.annotation.Nullable
  public List<StatusesEnum> getStatuses() {
    return statuses;
  }

  public void setStatuses(List<StatusesEnum> statuses) {
    this.statuses = statuses;
  }


  public JobFilter mode(ModeEnum mode) {
    this.mode = mode;
    return this;
  }

   /**
   * Get mode
   * @return mode
  **/
  @javax.annotation.Nullable
  public ModeEnum getMode() {
    return mode;
  }

  public void setMode(ModeEnum mode) {
    this.mode = mode;
  }


  public JobFilter externalId(String externalId) {
    this.externalId = externalId;
    return this;
  }

   /**
   * Get externalId
   * @return externalId
  **/
  @javax.annotation.Nullable
  public String getExternalId() {
    return externalId;
  }

  public void setExternalId(String externalId) {
    this.externalId = externalId;
  }


  public JobFilter triggeredBy(String triggeredBy) {
    this.triggeredBy = triggeredBy;
    return this;
  }

   /**
   * Get triggeredBy
   * @return triggeredBy
  **/
  @javax.annotation.Nullable
  public String getTriggeredBy() {
    return triggeredBy;
  }

  public void setTriggeredBy(String triggeredBy) {
    this.triggeredBy = triggeredBy;
  }


  public JobFilter aggregatedFMCSnapshotIds(List<UUID> aggregatedFMCSnapshotIds) {
    this.aggregatedFMCSnapshotIds = aggregatedFMCSnapshotIds;
    return this;
  }

  public JobFilter addAggregatedFMCSnapshotIdsItem(UUID aggregatedFMCSnapshotIdsItem) {
    if (this.aggregatedFMCSnapshotIds == null) {
      this.aggregatedFMCSnapshotIds = new ArrayList<>();
    }
    this.aggregatedFMCSnapshotIds.add(aggregatedFMCSnapshotIdsItem);
    return this;
  }

   /**
   * Get aggregatedFMCSnapshotIds
   * @return aggregatedFMCSnapshotIds
  **/
  @javax.annotation.Nullable
  public List<UUID> getAggregatedFMCSnapshotIds() {
    return aggregatedFMCSnapshotIds;
  }

  public void setAggregatedFMCSnapshotIds(List<UUID> aggregatedFMCSnapshotIds) {
    this.aggregatedFMCSnapshotIds = aggregatedFMCSnapshotIds;
  }


  public JobFilter flowModelTypes(List<FlowModelTypesEnum> flowModelTypes) {
    this.flowModelTypes = flowModelTypes;
    return this;
  }

  public JobFilter addFlowModelTypesItem(FlowModelTypesEnum flowModelTypesItem) {
    if (this.flowModelTypes == null) {
      this.flowModelTypes = new ArrayList<>();
    }
    this.flowModelTypes.add(flowModelTypesItem);
    return this;
  }

   /**
   * Get flowModelTypes
   * @return flowModelTypes
  **/
  @javax.annotation.Nullable
  public List<FlowModelTypesEnum> getFlowModelTypes() {
    return flowModelTypes;
  }

  public void setFlowModelTypes(List<FlowModelTypesEnum> flowModelTypes) {
    this.flowModelTypes = flowModelTypes;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    JobFilter jobFilter = (JobFilter) o;
    return Objects.equals(this.ids, jobFilter.ids) &&
        Objects.equals(this.channel, jobFilter.channel) &&
        Objects.equals(this.startDateStart, jobFilter.startDateStart) &&
        Objects.equals(this.startDateEnd, jobFilter.startDateEnd) &&
        Objects.equals(this.endDateStart, jobFilter.endDateStart) &&
        Objects.equals(this.endDateEnd, jobFilter.endDateEnd) &&
        Objects.equals(this.expiringDateStart, jobFilter.expiringDateStart) &&
        Objects.equals(this.expiringDateEnd, jobFilter.expiringDateEnd) &&
        Objects.equals(this.domainId, jobFilter.domainId) &&
        Objects.equals(this.statuses, jobFilter.statuses) &&
        Objects.equals(this.mode, jobFilter.mode) &&
        Objects.equals(this.externalId, jobFilter.externalId) &&
        Objects.equals(this.triggeredBy, jobFilter.triggeredBy) &&
        Objects.equals(this.aggregatedFMCSnapshotIds, jobFilter.aggregatedFMCSnapshotIds) &&
        Objects.equals(this.flowModelTypes, jobFilter.flowModelTypes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(ids, channel, startDateStart, startDateEnd, endDateStart, endDateEnd, expiringDateStart, expiringDateEnd, domainId, statuses, mode, externalId, triggeredBy, aggregatedFMCSnapshotIds, flowModelTypes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class JobFilter {\n");
    sb.append("    ids: ").append(toIndentedString(ids)).append("\n");
    sb.append("    channel: ").append(toIndentedString(channel)).append("\n");
    sb.append("    startDateStart: ").append(toIndentedString(startDateStart)).append("\n");
    sb.append("    startDateEnd: ").append(toIndentedString(startDateEnd)).append("\n");
    sb.append("    endDateStart: ").append(toIndentedString(endDateStart)).append("\n");
    sb.append("    endDateEnd: ").append(toIndentedString(endDateEnd)).append("\n");
    sb.append("    expiringDateStart: ").append(toIndentedString(expiringDateStart)).append("\n");
    sb.append("    expiringDateEnd: ").append(toIndentedString(expiringDateEnd)).append("\n");
    sb.append("    domainId: ").append(toIndentedString(domainId)).append("\n");
    sb.append("    statuses: ").append(toIndentedString(statuses)).append("\n");
    sb.append("    mode: ").append(toIndentedString(mode)).append("\n");
    sb.append("    externalId: ").append(toIndentedString(externalId)).append("\n");
    sb.append("    triggeredBy: ").append(toIndentedString(triggeredBy)).append("\n");
    sb.append("    aggregatedFMCSnapshotIds: ").append(toIndentedString(aggregatedFMCSnapshotIds)).append("\n");
    sb.append("    flowModelTypes: ").append(toIndentedString(flowModelTypes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ids");
    openapiFields.add("channel");
    openapiFields.add("startDateStart");
    openapiFields.add("startDateEnd");
    openapiFields.add("endDateStart");
    openapiFields.add("endDateEnd");
    openapiFields.add("expiringDateStart");
    openapiFields.add("expiringDateEnd");
    openapiFields.add("domainId");
    openapiFields.add("statuses");
    openapiFields.add("mode");
    openapiFields.add("externalId");
    openapiFields.add("triggeredBy");
    openapiFields.add("aggregatedFMCSnapshotIds");
    openapiFields.add("flowModelTypes");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to JobFilter
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!JobFilter.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in JobFilter is not found in the empty JSON string", JobFilter.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!JobFilter.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `JobFilter` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("ids") != null && !jsonObj.get("ids").isJsonNull() && !jsonObj.get("ids").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `ids` to be an array in the JSON string but got `%s`", jsonObj.get("ids").toString()));
      }
      if ((jsonObj.get("channel") != null && !jsonObj.get("channel").isJsonNull()) && !jsonObj.get("channel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `channel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("channel").toString()));
      }
      if ((jsonObj.get("domainId") != null && !jsonObj.get("domainId").isJsonNull()) && !jsonObj.get("domainId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `domainId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("domainId").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("statuses") != null && !jsonObj.get("statuses").isJsonNull() && !jsonObj.get("statuses").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `statuses` to be an array in the JSON string but got `%s`", jsonObj.get("statuses").toString()));
      }
      if ((jsonObj.get("mode") != null && !jsonObj.get("mode").isJsonNull()) && !jsonObj.get("mode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mode").toString()));
      }
      // validate the optional field `mode`
      if (jsonObj.get("mode") != null && !jsonObj.get("mode").isJsonNull()) {
        ModeEnum.validateJsonElement(jsonObj.get("mode"));
      }
      if ((jsonObj.get("externalId") != null && !jsonObj.get("externalId").isJsonNull()) && !jsonObj.get("externalId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `externalId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("externalId").toString()));
      }
      if ((jsonObj.get("triggeredBy") != null && !jsonObj.get("triggeredBy").isJsonNull()) && !jsonObj.get("triggeredBy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `triggeredBy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("triggeredBy").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("aggregatedFMCSnapshotIds") != null && !jsonObj.get("aggregatedFMCSnapshotIds").isJsonNull() && !jsonObj.get("aggregatedFMCSnapshotIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `aggregatedFMCSnapshotIds` to be an array in the JSON string but got `%s`", jsonObj.get("aggregatedFMCSnapshotIds").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("flowModelTypes") != null && !jsonObj.get("flowModelTypes").isJsonNull() && !jsonObj.get("flowModelTypes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `flowModelTypes` to be an array in the JSON string but got `%s`", jsonObj.get("flowModelTypes").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!JobFilter.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'JobFilter' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<JobFilter> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(JobFilter.class));

       return (TypeAdapter<T>) new TypeAdapter<JobFilter>() {
           @Override
           public void write(JsonWriter out, JobFilter value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public JobFilter read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of JobFilter given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of JobFilter
  * @throws IOException if the JSON string is invalid with respect to JobFilter
  */
  public static JobFilter fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, JobFilter.class);
  }

 /**
  * Convert an instance of JobFilter to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

