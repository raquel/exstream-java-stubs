/*
 * Exstream Orchestration
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * FlowModelContextFilter
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-17T13:55:50.549398439Z[Europe/Lisbon]")
public class FlowModelContextFilter {
  public static final String SERIALIZED_NAME_SNAPSHOT_IDS = "snapshotIds";
  @SerializedName(SERIALIZED_NAME_SNAPSHOT_IDS)
  private List<UUID> snapshotIds;

  public static final String SERIALIZED_NAME_DAS_IDS = "dasIds";
  @SerializedName(SERIALIZED_NAME_DAS_IDS)
  private List<UUID> dasIds;

  public static final String SERIALIZED_NAME_DAS_VERSIONS = "dasVersions";
  @SerializedName(SERIALIZED_NAME_DAS_VERSIONS)
  private List<Integer> dasVersions;

  public static final String SERIALIZED_NAME_DOMAIN = "domain";
  @SerializedName(SERIALIZED_NAME_DOMAIN)
  private String domain;

  public static final String SERIALIZED_NAME_SEARCH_STRING = "searchString";
  @SerializedName(SERIALIZED_NAME_SEARCH_STRING)
  private String searchString;

  public static final String SERIALIZED_NAME_CASE_SENSITIVE = "caseSensitive";
  @SerializedName(SERIALIZED_NAME_CASE_SENSITIVE)
  private Boolean caseSensitive;

  public static final String SERIALIZED_NAME_WHOLE_WORD = "wholeWord";
  @SerializedName(SERIALIZED_NAME_WHOLE_WORD)
  private Boolean wholeWord;

  public FlowModelContextFilter() {
  }

  public FlowModelContextFilter snapshotIds(List<UUID> snapshotIds) {
    this.snapshotIds = snapshotIds;
    return this;
  }

  public FlowModelContextFilter addSnapshotIdsItem(UUID snapshotIdsItem) {
    if (this.snapshotIds == null) {
      this.snapshotIds = new ArrayList<>();
    }
    this.snapshotIds.add(snapshotIdsItem);
    return this;
  }

   /**
   * Get snapshotIds
   * @return snapshotIds
  **/
  @javax.annotation.Nullable
  public List<UUID> getSnapshotIds() {
    return snapshotIds;
  }

  public void setSnapshotIds(List<UUID> snapshotIds) {
    this.snapshotIds = snapshotIds;
  }


  public FlowModelContextFilter dasIds(List<UUID> dasIds) {
    this.dasIds = dasIds;
    return this;
  }

  public FlowModelContextFilter addDasIdsItem(UUID dasIdsItem) {
    if (this.dasIds == null) {
      this.dasIds = new ArrayList<>();
    }
    this.dasIds.add(dasIdsItem);
    return this;
  }

   /**
   * Get dasIds
   * @return dasIds
  **/
  @javax.annotation.Nullable
  public List<UUID> getDasIds() {
    return dasIds;
  }

  public void setDasIds(List<UUID> dasIds) {
    this.dasIds = dasIds;
  }


  public FlowModelContextFilter dasVersions(List<Integer> dasVersions) {
    this.dasVersions = dasVersions;
    return this;
  }

  public FlowModelContextFilter addDasVersionsItem(Integer dasVersionsItem) {
    if (this.dasVersions == null) {
      this.dasVersions = new ArrayList<>();
    }
    this.dasVersions.add(dasVersionsItem);
    return this;
  }

   /**
   * Get dasVersions
   * @return dasVersions
  **/
  @javax.annotation.Nullable
  public List<Integer> getDasVersions() {
    return dasVersions;
  }

  public void setDasVersions(List<Integer> dasVersions) {
    this.dasVersions = dasVersions;
  }


  public FlowModelContextFilter domain(String domain) {
    this.domain = domain;
    return this;
  }

   /**
   * Get domain
   * @return domain
  **/
  @javax.annotation.Nullable
  public String getDomain() {
    return domain;
  }

  public void setDomain(String domain) {
    this.domain = domain;
  }


  public FlowModelContextFilter searchString(String searchString) {
    this.searchString = searchString;
    return this;
  }

   /**
   * Get searchString
   * @return searchString
  **/
  @javax.annotation.Nullable
  public String getSearchString() {
    return searchString;
  }

  public void setSearchString(String searchString) {
    this.searchString = searchString;
  }


  public FlowModelContextFilter caseSensitive(Boolean caseSensitive) {
    this.caseSensitive = caseSensitive;
    return this;
  }

   /**
   * Get caseSensitive
   * @return caseSensitive
  **/
  @javax.annotation.Nullable
  public Boolean getCaseSensitive() {
    return caseSensitive;
  }

  public void setCaseSensitive(Boolean caseSensitive) {
    this.caseSensitive = caseSensitive;
  }


  public FlowModelContextFilter wholeWord(Boolean wholeWord) {
    this.wholeWord = wholeWord;
    return this;
  }

   /**
   * Get wholeWord
   * @return wholeWord
  **/
  @javax.annotation.Nullable
  public Boolean getWholeWord() {
    return wholeWord;
  }

  public void setWholeWord(Boolean wholeWord) {
    this.wholeWord = wholeWord;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FlowModelContextFilter flowModelContextFilter = (FlowModelContextFilter) o;
    return Objects.equals(this.snapshotIds, flowModelContextFilter.snapshotIds) &&
        Objects.equals(this.dasIds, flowModelContextFilter.dasIds) &&
        Objects.equals(this.dasVersions, flowModelContextFilter.dasVersions) &&
        Objects.equals(this.domain, flowModelContextFilter.domain) &&
        Objects.equals(this.searchString, flowModelContextFilter.searchString) &&
        Objects.equals(this.caseSensitive, flowModelContextFilter.caseSensitive) &&
        Objects.equals(this.wholeWord, flowModelContextFilter.wholeWord);
  }

  @Override
  public int hashCode() {
    return Objects.hash(snapshotIds, dasIds, dasVersions, domain, searchString, caseSensitive, wholeWord);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FlowModelContextFilter {\n");
    sb.append("    snapshotIds: ").append(toIndentedString(snapshotIds)).append("\n");
    sb.append("    dasIds: ").append(toIndentedString(dasIds)).append("\n");
    sb.append("    dasVersions: ").append(toIndentedString(dasVersions)).append("\n");
    sb.append("    domain: ").append(toIndentedString(domain)).append("\n");
    sb.append("    searchString: ").append(toIndentedString(searchString)).append("\n");
    sb.append("    caseSensitive: ").append(toIndentedString(caseSensitive)).append("\n");
    sb.append("    wholeWord: ").append(toIndentedString(wholeWord)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("snapshotIds");
    openapiFields.add("dasIds");
    openapiFields.add("dasVersions");
    openapiFields.add("domain");
    openapiFields.add("searchString");
    openapiFields.add("caseSensitive");
    openapiFields.add("wholeWord");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to FlowModelContextFilter
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FlowModelContextFilter.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FlowModelContextFilter is not found in the empty JSON string", FlowModelContextFilter.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!FlowModelContextFilter.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FlowModelContextFilter` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("snapshotIds") != null && !jsonObj.get("snapshotIds").isJsonNull() && !jsonObj.get("snapshotIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `snapshotIds` to be an array in the JSON string but got `%s`", jsonObj.get("snapshotIds").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("dasIds") != null && !jsonObj.get("dasIds").isJsonNull() && !jsonObj.get("dasIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `dasIds` to be an array in the JSON string but got `%s`", jsonObj.get("dasIds").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("dasVersions") != null && !jsonObj.get("dasVersions").isJsonNull() && !jsonObj.get("dasVersions").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `dasVersions` to be an array in the JSON string but got `%s`", jsonObj.get("dasVersions").toString()));
      }
      if ((jsonObj.get("domain") != null && !jsonObj.get("domain").isJsonNull()) && !jsonObj.get("domain").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `domain` to be a primitive type in the JSON string but got `%s`", jsonObj.get("domain").toString()));
      }
      if ((jsonObj.get("searchString") != null && !jsonObj.get("searchString").isJsonNull()) && !jsonObj.get("searchString").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `searchString` to be a primitive type in the JSON string but got `%s`", jsonObj.get("searchString").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FlowModelContextFilter.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FlowModelContextFilter' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FlowModelContextFilter> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FlowModelContextFilter.class));

       return (TypeAdapter<T>) new TypeAdapter<FlowModelContextFilter>() {
           @Override
           public void write(JsonWriter out, FlowModelContextFilter value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FlowModelContextFilter read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of FlowModelContextFilter given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of FlowModelContextFilter
  * @throws IOException if the JSON string is invalid with respect to FlowModelContextFilter
  */
  public static FlowModelContextFilter fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FlowModelContextFilter.class);
  }

 /**
  * Convert an instance of FlowModelContextFilter to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

