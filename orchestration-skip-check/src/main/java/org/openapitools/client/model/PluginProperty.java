/*
 * Exstream Orchestration
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.OptionValue;
import org.openapitools.client.model.PluginDynamicOptions;
import org.openapitools.client.model.PluginMigrationConfig;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PluginProperty
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-17T13:55:50.549398439Z[Europe/Lisbon]")
public class PluginProperty {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_LABEL = "label";
  @SerializedName(SERIALIZED_NAME_LABEL)
  private String label;

  public static final String SERIALIZED_NAME_DEFAULT_VALUE = "defaultValue";
  @SerializedName(SERIALIZED_NAME_DEFAULT_VALUE)
  private String defaultValue;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_REQUIRED = "required";
  @SerializedName(SERIALIZED_NAME_REQUIRED)
  private Boolean required;

  public static final String SERIALIZED_NAME_DISABLED = "disabled";
  @SerializedName(SERIALIZED_NAME_DISABLED)
  private Boolean disabled;

  public static final String SERIALIZED_NAME_PLACEHOLDER = "placeholder";
  @SerializedName(SERIALIZED_NAME_PLACEHOLDER)
  private String placeholder;

  public static final String SERIALIZED_NAME_MAX_LENGTH = "maxLength";
  @SerializedName(SERIALIZED_NAME_MAX_LENGTH)
  private Integer maxLength;

  public static final String SERIALIZED_NAME_VALIDATOR = "validator";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_VALIDATOR)
  private String validator;

  public static final String SERIALIZED_NAME_VALIDATORS = "validators";
  @SerializedName(SERIALIZED_NAME_VALIDATORS)
  private List<String> validators;

  public static final String SERIALIZED_NAME_VISIBLE = "visible";
  @SerializedName(SERIALIZED_NAME_VISIBLE)
  private String visible;

  public static final String SERIALIZED_NAME_OPTIONS = "options";
  @SerializedName(SERIALIZED_NAME_OPTIONS)
  private List<OptionValue> options;

  public static final String SERIALIZED_NAME_MIN_LIST_ROWS = "minListRows";
  @SerializedName(SERIALIZED_NAME_MIN_LIST_ROWS)
  private Integer minListRows;

  public static final String SERIALIZED_NAME_MAX_LIST_ROWS = "maxListRows";
  @SerializedName(SERIALIZED_NAME_MAX_LIST_ROWS)
  private Integer maxListRows;

  public static final String SERIALIZED_NAME_INSTRUCTION = "instruction";
  @SerializedName(SERIALIZED_NAME_INSTRUCTION)
  private String instruction;

  public static final String SERIALIZED_NAME_ROWS = "rows";
  @SerializedName(SERIALIZED_NAME_ROWS)
  private Integer rows;

  public static final String SERIALIZED_NAME_MIGRATION = "migration";
  @SerializedName(SERIALIZED_NAME_MIGRATION)
  private PluginMigrationConfig migration;

  public static final String SERIALIZED_NAME_HEADERS = "headers";
  @SerializedName(SERIALIZED_NAME_HEADERS)
  private Boolean headers;

  public static final String SERIALIZED_NAME_DYNAMIC_OPTIONS = "dynamicOptions";
  @SerializedName(SERIALIZED_NAME_DYNAMIC_OPTIONS)
  private PluginDynamicOptions dynamicOptions;

  public PluginProperty() {
  }

  public PluginProperty id(String id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public PluginProperty label(String label) {
    this.label = label;
    return this;
  }

   /**
   * Get label
   * @return label
  **/
  @javax.annotation.Nullable
  public String getLabel() {
    return label;
  }

  public void setLabel(String label) {
    this.label = label;
  }


  public PluginProperty defaultValue(String defaultValue) {
    this.defaultValue = defaultValue;
    return this;
  }

   /**
   * Get defaultValue
   * @return defaultValue
  **/
  @javax.annotation.Nullable
  public String getDefaultValue() {
    return defaultValue;
  }

  public void setDefaultValue(String defaultValue) {
    this.defaultValue = defaultValue;
  }


  public PluginProperty type(String type) {
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }


  public PluginProperty required(Boolean required) {
    this.required = required;
    return this;
  }

   /**
   * Get required
   * @return required
  **/
  @javax.annotation.Nullable
  public Boolean getRequired() {
    return required;
  }

  public void setRequired(Boolean required) {
    this.required = required;
  }


  public PluginProperty disabled(Boolean disabled) {
    this.disabled = disabled;
    return this;
  }

   /**
   * Get disabled
   * @return disabled
  **/
  @javax.annotation.Nullable
  public Boolean getDisabled() {
    return disabled;
  }

  public void setDisabled(Boolean disabled) {
    this.disabled = disabled;
  }


  public PluginProperty placeholder(String placeholder) {
    this.placeholder = placeholder;
    return this;
  }

   /**
   * Get placeholder
   * @return placeholder
  **/
  @javax.annotation.Nullable
  public String getPlaceholder() {
    return placeholder;
  }

  public void setPlaceholder(String placeholder) {
    this.placeholder = placeholder;
  }


  public PluginProperty maxLength(Integer maxLength) {
    this.maxLength = maxLength;
    return this;
  }

   /**
   * Get maxLength
   * @return maxLength
  **/
  @javax.annotation.Nullable
  public Integer getMaxLength() {
    return maxLength;
  }

  public void setMaxLength(Integer maxLength) {
    this.maxLength = maxLength;
  }


  @Deprecated
  public PluginProperty validator(String validator) {
    this.validator = validator;
    return this;
  }

   /**
   * Get validator
   * @return validator
   * @deprecated
  **/
  @Deprecated
  @javax.annotation.Nullable
  public String getValidator() {
    return validator;
  }

  @Deprecated
  public void setValidator(String validator) {
    this.validator = validator;
  }


  public PluginProperty validators(List<String> validators) {
    this.validators = validators;
    return this;
  }

  public PluginProperty addValidatorsItem(String validatorsItem) {
    if (this.validators == null) {
      this.validators = new ArrayList<>();
    }
    this.validators.add(validatorsItem);
    return this;
  }

   /**
   * Get validators
   * @return validators
  **/
  @javax.annotation.Nullable
  public List<String> getValidators() {
    return validators;
  }

  public void setValidators(List<String> validators) {
    this.validators = validators;
  }


  public PluginProperty visible(String visible) {
    this.visible = visible;
    return this;
  }

   /**
   * Get visible
   * @return visible
  **/
  @javax.annotation.Nullable
  public String getVisible() {
    return visible;
  }

  public void setVisible(String visible) {
    this.visible = visible;
  }


  public PluginProperty options(List<OptionValue> options) {
    this.options = options;
    return this;
  }

  public PluginProperty addOptionsItem(OptionValue optionsItem) {
    if (this.options == null) {
      this.options = new ArrayList<>();
    }
    this.options.add(optionsItem);
    return this;
  }

   /**
   * Get options
   * @return options
  **/
  @javax.annotation.Nullable
  public List<OptionValue> getOptions() {
    return options;
  }

  public void setOptions(List<OptionValue> options) {
    this.options = options;
  }


  public PluginProperty minListRows(Integer minListRows) {
    this.minListRows = minListRows;
    return this;
  }

   /**
   * Get minListRows
   * @return minListRows
  **/
  @javax.annotation.Nullable
  public Integer getMinListRows() {
    return minListRows;
  }

  public void setMinListRows(Integer minListRows) {
    this.minListRows = minListRows;
  }


  public PluginProperty maxListRows(Integer maxListRows) {
    this.maxListRows = maxListRows;
    return this;
  }

   /**
   * Get maxListRows
   * @return maxListRows
  **/
  @javax.annotation.Nullable
  public Integer getMaxListRows() {
    return maxListRows;
  }

  public void setMaxListRows(Integer maxListRows) {
    this.maxListRows = maxListRows;
  }


  public PluginProperty instruction(String instruction) {
    this.instruction = instruction;
    return this;
  }

   /**
   * Get instruction
   * @return instruction
  **/
  @javax.annotation.Nullable
  public String getInstruction() {
    return instruction;
  }

  public void setInstruction(String instruction) {
    this.instruction = instruction;
  }


  public PluginProperty rows(Integer rows) {
    this.rows = rows;
    return this;
  }

   /**
   * Get rows
   * @return rows
  **/
  @javax.annotation.Nullable
  public Integer getRows() {
    return rows;
  }

  public void setRows(Integer rows) {
    this.rows = rows;
  }


  public PluginProperty migration(PluginMigrationConfig migration) {
    this.migration = migration;
    return this;
  }

   /**
   * Get migration
   * @return migration
  **/
  @javax.annotation.Nullable
  public PluginMigrationConfig getMigration() {
    return migration;
  }

  public void setMigration(PluginMigrationConfig migration) {
    this.migration = migration;
  }


  public PluginProperty headers(Boolean headers) {
    this.headers = headers;
    return this;
  }

   /**
   * Get headers
   * @return headers
  **/
  @javax.annotation.Nullable
  public Boolean getHeaders() {
    return headers;
  }

  public void setHeaders(Boolean headers) {
    this.headers = headers;
  }


  public PluginProperty dynamicOptions(PluginDynamicOptions dynamicOptions) {
    this.dynamicOptions = dynamicOptions;
    return this;
  }

   /**
   * Get dynamicOptions
   * @return dynamicOptions
  **/
  @javax.annotation.Nullable
  public PluginDynamicOptions getDynamicOptions() {
    return dynamicOptions;
  }

  public void setDynamicOptions(PluginDynamicOptions dynamicOptions) {
    this.dynamicOptions = dynamicOptions;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PluginProperty pluginProperty = (PluginProperty) o;
    return Objects.equals(this.id, pluginProperty.id) &&
        Objects.equals(this.label, pluginProperty.label) &&
        Objects.equals(this.defaultValue, pluginProperty.defaultValue) &&
        Objects.equals(this.type, pluginProperty.type) &&
        Objects.equals(this.required, pluginProperty.required) &&
        Objects.equals(this.disabled, pluginProperty.disabled) &&
        Objects.equals(this.placeholder, pluginProperty.placeholder) &&
        Objects.equals(this.maxLength, pluginProperty.maxLength) &&
        Objects.equals(this.validator, pluginProperty.validator) &&
        Objects.equals(this.validators, pluginProperty.validators) &&
        Objects.equals(this.visible, pluginProperty.visible) &&
        Objects.equals(this.options, pluginProperty.options) &&
        Objects.equals(this.minListRows, pluginProperty.minListRows) &&
        Objects.equals(this.maxListRows, pluginProperty.maxListRows) &&
        Objects.equals(this.instruction, pluginProperty.instruction) &&
        Objects.equals(this.rows, pluginProperty.rows) &&
        Objects.equals(this.migration, pluginProperty.migration) &&
        Objects.equals(this.headers, pluginProperty.headers) &&
        Objects.equals(this.dynamicOptions, pluginProperty.dynamicOptions);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, label, defaultValue, type, required, disabled, placeholder, maxLength, validator, validators, visible, options, minListRows, maxListRows, instruction, rows, migration, headers, dynamicOptions);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PluginProperty {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    label: ").append(toIndentedString(label)).append("\n");
    sb.append("    defaultValue: ").append(toIndentedString(defaultValue)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    required: ").append(toIndentedString(required)).append("\n");
    sb.append("    disabled: ").append(toIndentedString(disabled)).append("\n");
    sb.append("    placeholder: ").append(toIndentedString(placeholder)).append("\n");
    sb.append("    maxLength: ").append(toIndentedString(maxLength)).append("\n");
    sb.append("    validator: ").append(toIndentedString(validator)).append("\n");
    sb.append("    validators: ").append(toIndentedString(validators)).append("\n");
    sb.append("    visible: ").append(toIndentedString(visible)).append("\n");
    sb.append("    options: ").append(toIndentedString(options)).append("\n");
    sb.append("    minListRows: ").append(toIndentedString(minListRows)).append("\n");
    sb.append("    maxListRows: ").append(toIndentedString(maxListRows)).append("\n");
    sb.append("    instruction: ").append(toIndentedString(instruction)).append("\n");
    sb.append("    rows: ").append(toIndentedString(rows)).append("\n");
    sb.append("    migration: ").append(toIndentedString(migration)).append("\n");
    sb.append("    headers: ").append(toIndentedString(headers)).append("\n");
    sb.append("    dynamicOptions: ").append(toIndentedString(dynamicOptions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("label");
    openapiFields.add("defaultValue");
    openapiFields.add("type");
    openapiFields.add("required");
    openapiFields.add("disabled");
    openapiFields.add("placeholder");
    openapiFields.add("maxLength");
    openapiFields.add("validator");
    openapiFields.add("validators");
    openapiFields.add("visible");
    openapiFields.add("options");
    openapiFields.add("minListRows");
    openapiFields.add("maxListRows");
    openapiFields.add("instruction");
    openapiFields.add("rows");
    openapiFields.add("migration");
    openapiFields.add("headers");
    openapiFields.add("dynamicOptions");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to PluginProperty
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PluginProperty.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PluginProperty is not found in the empty JSON string", PluginProperty.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PluginProperty.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PluginProperty` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PluginProperty.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("label") != null && !jsonObj.get("label").isJsonNull()) && !jsonObj.get("label").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `label` to be a primitive type in the JSON string but got `%s`", jsonObj.get("label").toString()));
      }
      if ((jsonObj.get("defaultValue") != null && !jsonObj.get("defaultValue").isJsonNull()) && !jsonObj.get("defaultValue").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `defaultValue` to be a primitive type in the JSON string but got `%s`", jsonObj.get("defaultValue").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if ((jsonObj.get("placeholder") != null && !jsonObj.get("placeholder").isJsonNull()) && !jsonObj.get("placeholder").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `placeholder` to be a primitive type in the JSON string but got `%s`", jsonObj.get("placeholder").toString()));
      }
      if ((jsonObj.get("validator") != null && !jsonObj.get("validator").isJsonNull()) && !jsonObj.get("validator").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `validator` to be a primitive type in the JSON string but got `%s`", jsonObj.get("validator").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("validators") != null && !jsonObj.get("validators").isJsonNull() && !jsonObj.get("validators").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `validators` to be an array in the JSON string but got `%s`", jsonObj.get("validators").toString()));
      }
      if ((jsonObj.get("visible") != null && !jsonObj.get("visible").isJsonNull()) && !jsonObj.get("visible").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `visible` to be a primitive type in the JSON string but got `%s`", jsonObj.get("visible").toString()));
      }
      if (jsonObj.get("options") != null && !jsonObj.get("options").isJsonNull()) {
        JsonArray jsonArrayoptions = jsonObj.getAsJsonArray("options");
        if (jsonArrayoptions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("options").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `options` to be an array in the JSON string but got `%s`", jsonObj.get("options").toString()));
          }

          // validate the optional field `options` (array)
          for (int i = 0; i < jsonArrayoptions.size(); i++) {
            OptionValue.validateJsonElement(jsonArrayoptions.get(i));
          };
        }
      }
      if ((jsonObj.get("instruction") != null && !jsonObj.get("instruction").isJsonNull()) && !jsonObj.get("instruction").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `instruction` to be a primitive type in the JSON string but got `%s`", jsonObj.get("instruction").toString()));
      }
      // validate the optional field `migration`
      if (jsonObj.get("migration") != null && !jsonObj.get("migration").isJsonNull()) {
        PluginMigrationConfig.validateJsonElement(jsonObj.get("migration"));
      }
      // validate the optional field `dynamicOptions`
      if (jsonObj.get("dynamicOptions") != null && !jsonObj.get("dynamicOptions").isJsonNull()) {
        PluginDynamicOptions.validateJsonElement(jsonObj.get("dynamicOptions"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PluginProperty.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PluginProperty' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PluginProperty> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PluginProperty.class));

       return (TypeAdapter<T>) new TypeAdapter<PluginProperty>() {
           @Override
           public void write(JsonWriter out, PluginProperty value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PluginProperty read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of PluginProperty given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of PluginProperty
  * @throws IOException if the JSON string is invalid with respect to PluginProperty
  */
  public static PluginProperty fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PluginProperty.class);
  }

 /**
  * Convert an instance of PluginProperty to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

