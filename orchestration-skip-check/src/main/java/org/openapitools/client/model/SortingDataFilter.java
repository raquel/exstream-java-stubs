/*
 * Exstream Orchestration
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SortingDataFilter
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-17T13:55:50.549398439Z[Europe/Lisbon]")
public class SortingDataFilter {
  public static final String SERIALIZED_NAME_IDS = "ids";
  @SerializedName(SERIALIZED_NAME_IDS)
  private List<UUID> ids;

  public static final String SERIALIZED_NAME_JOB_IDS = "jobIds";
  @SerializedName(SERIALIZED_NAME_JOB_IDS)
  private List<UUID> jobIds;

  public static final String SERIALIZED_NAME_FLOW_STEP_IDS = "flowStepIds";
  @SerializedName(SERIALIZED_NAME_FLOW_STEP_IDS)
  private List<UUID> flowStepIds;

  public static final String SERIALIZED_NAME_COMMUNICATION_IDS = "communicationIds";
  @SerializedName(SERIALIZED_NAME_COMMUNICATION_IDS)
  private List<UUID> communicationIds;

  public static final String SERIALIZED_NAME_QUEUE_NAMES = "queueNames";
  @SerializedName(SERIALIZED_NAME_QUEUE_NAMES)
  private List<String> queueNames;

  public static final String SERIALIZED_NAME_CREATION_DATE_START = "creationDateStart";
  @SerializedName(SERIALIZED_NAME_CREATION_DATE_START)
  private String creationDateStart;

  public static final String SERIALIZED_NAME_CREATION_DATE_END = "creationDateEnd";
  @SerializedName(SERIALIZED_NAME_CREATION_DATE_END)
  private String creationDateEnd;

  public static final String SERIALIZED_NAME_EXTERNAL_IDS = "externalIds";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_IDS)
  private List<String> externalIds;

  public static final String SERIALIZED_NAME_FLOW_MODEL_IDS = "flowModelIds";
  @SerializedName(SERIALIZED_NAME_FLOW_MODEL_IDS)
  private List<UUID> flowModelIds;

  public static final String SERIALIZED_NAME_LAST_MODIFICATION_DATE_START = "lastModificationDateStart";
  @SerializedName(SERIALIZED_NAME_LAST_MODIFICATION_DATE_START)
  private OffsetDateTime lastModificationDateStart;

  public static final String SERIALIZED_NAME_LAST_MODIFICATION_DATE_END = "lastModificationDateEnd";
  @SerializedName(SERIALIZED_NAME_LAST_MODIFICATION_DATE_END)
  private OffsetDateTime lastModificationDateEnd;

  /**
   * Gets or Sets states
   */
  @JsonAdapter(StatesEnum.Adapter.class)
  public enum StatesEnum {
    PROCESSED("processed"),
    
    WAITING("waiting"),
    
    EXPIRED("expired"),
    
    CANCELED("canceled"),
    
    ALL("all");

    private String value;

    StatesEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatesEnum fromValue(String value) {
      for (StatesEnum b : StatesEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatesEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatesEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatesEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatesEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATES = "states";
  @SerializedName(SERIALIZED_NAME_STATES)
  private List<StatesEnum> states;

  /**
   * Gets or Sets assetTypes
   */
  @JsonAdapter(AssetTypesEnum.Adapter.class)
  public enum AssetTypesEnum {
    SORTINGINDEX("sortingIndex"),
    
    SORTINGDATAREFERENCE("sortingDataReference");

    private String value;

    AssetTypesEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AssetTypesEnum fromValue(String value) {
      for (AssetTypesEnum b : AssetTypesEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AssetTypesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AssetTypesEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AssetTypesEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AssetTypesEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AssetTypesEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ASSET_TYPES = "assetTypes";
  @SerializedName(SERIALIZED_NAME_ASSET_TYPES)
  private List<AssetTypesEnum> assetTypes;

  public static final String SERIALIZED_NAME_METADATA = "metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  private List<String> metadata;

  public static final String SERIALIZED_NAME_SORT_SUBFLOWS = "sortSubflows";
  @SerializedName(SERIALIZED_NAME_SORT_SUBFLOWS)
  private List<String> sortSubflows;

  public static final String SERIALIZED_NAME_REFERENCE_IDS = "referenceIds";
  @SerializedName(SERIALIZED_NAME_REFERENCE_IDS)
  private List<UUID> referenceIds;

  public static final String SERIALIZED_NAME_CUSTOMERS_COUNT_FROM = "customersCountFrom";
  @SerializedName(SERIALIZED_NAME_CUSTOMERS_COUNT_FROM)
  private Integer customersCountFrom;

  public static final String SERIALIZED_NAME_CUSTOMERS_COUNT_TO = "customersCountTo";
  @SerializedName(SERIALIZED_NAME_CUSTOMERS_COUNT_TO)
  private Integer customersCountTo;

  public SortingDataFilter() {
  }

  public SortingDataFilter ids(List<UUID> ids) {
    this.ids = ids;
    return this;
  }

  public SortingDataFilter addIdsItem(UUID idsItem) {
    if (this.ids == null) {
      this.ids = new ArrayList<>();
    }
    this.ids.add(idsItem);
    return this;
  }

   /**
   * Get ids
   * @return ids
  **/
  @javax.annotation.Nullable
  public List<UUID> getIds() {
    return ids;
  }

  public void setIds(List<UUID> ids) {
    this.ids = ids;
  }


  public SortingDataFilter jobIds(List<UUID> jobIds) {
    this.jobIds = jobIds;
    return this;
  }

  public SortingDataFilter addJobIdsItem(UUID jobIdsItem) {
    if (this.jobIds == null) {
      this.jobIds = new ArrayList<>();
    }
    this.jobIds.add(jobIdsItem);
    return this;
  }

   /**
   * Get jobIds
   * @return jobIds
  **/
  @javax.annotation.Nullable
  public List<UUID> getJobIds() {
    return jobIds;
  }

  public void setJobIds(List<UUID> jobIds) {
    this.jobIds = jobIds;
  }


  public SortingDataFilter flowStepIds(List<UUID> flowStepIds) {
    this.flowStepIds = flowStepIds;
    return this;
  }

  public SortingDataFilter addFlowStepIdsItem(UUID flowStepIdsItem) {
    if (this.flowStepIds == null) {
      this.flowStepIds = new ArrayList<>();
    }
    this.flowStepIds.add(flowStepIdsItem);
    return this;
  }

   /**
   * Get flowStepIds
   * @return flowStepIds
  **/
  @javax.annotation.Nullable
  public List<UUID> getFlowStepIds() {
    return flowStepIds;
  }

  public void setFlowStepIds(List<UUID> flowStepIds) {
    this.flowStepIds = flowStepIds;
  }


  public SortingDataFilter communicationIds(List<UUID> communicationIds) {
    this.communicationIds = communicationIds;
    return this;
  }

  public SortingDataFilter addCommunicationIdsItem(UUID communicationIdsItem) {
    if (this.communicationIds == null) {
      this.communicationIds = new ArrayList<>();
    }
    this.communicationIds.add(communicationIdsItem);
    return this;
  }

   /**
   * Get communicationIds
   * @return communicationIds
  **/
  @javax.annotation.Nullable
  public List<UUID> getCommunicationIds() {
    return communicationIds;
  }

  public void setCommunicationIds(List<UUID> communicationIds) {
    this.communicationIds = communicationIds;
  }


  public SortingDataFilter queueNames(List<String> queueNames) {
    this.queueNames = queueNames;
    return this;
  }

  public SortingDataFilter addQueueNamesItem(String queueNamesItem) {
    if (this.queueNames == null) {
      this.queueNames = new ArrayList<>();
    }
    this.queueNames.add(queueNamesItem);
    return this;
  }

   /**
   * Get queueNames
   * @return queueNames
  **/
  @javax.annotation.Nullable
  public List<String> getQueueNames() {
    return queueNames;
  }

  public void setQueueNames(List<String> queueNames) {
    this.queueNames = queueNames;
  }


  public SortingDataFilter creationDateStart(String creationDateStart) {
    this.creationDateStart = creationDateStart;
    return this;
  }

   /**
   * Get creationDateStart
   * @return creationDateStart
  **/
  @javax.annotation.Nullable
  public String getCreationDateStart() {
    return creationDateStart;
  }

  public void setCreationDateStart(String creationDateStart) {
    this.creationDateStart = creationDateStart;
  }


  public SortingDataFilter creationDateEnd(String creationDateEnd) {
    this.creationDateEnd = creationDateEnd;
    return this;
  }

   /**
   * Get creationDateEnd
   * @return creationDateEnd
  **/
  @javax.annotation.Nullable
  public String getCreationDateEnd() {
    return creationDateEnd;
  }

  public void setCreationDateEnd(String creationDateEnd) {
    this.creationDateEnd = creationDateEnd;
  }


  public SortingDataFilter externalIds(List<String> externalIds) {
    this.externalIds = externalIds;
    return this;
  }

  public SortingDataFilter addExternalIdsItem(String externalIdsItem) {
    if (this.externalIds == null) {
      this.externalIds = new ArrayList<>();
    }
    this.externalIds.add(externalIdsItem);
    return this;
  }

   /**
   * Get externalIds
   * @return externalIds
  **/
  @javax.annotation.Nullable
  public List<String> getExternalIds() {
    return externalIds;
  }

  public void setExternalIds(List<String> externalIds) {
    this.externalIds = externalIds;
  }


  public SortingDataFilter flowModelIds(List<UUID> flowModelIds) {
    this.flowModelIds = flowModelIds;
    return this;
  }

  public SortingDataFilter addFlowModelIdsItem(UUID flowModelIdsItem) {
    if (this.flowModelIds == null) {
      this.flowModelIds = new ArrayList<>();
    }
    this.flowModelIds.add(flowModelIdsItem);
    return this;
  }

   /**
   * Get flowModelIds
   * @return flowModelIds
  **/
  @javax.annotation.Nullable
  public List<UUID> getFlowModelIds() {
    return flowModelIds;
  }

  public void setFlowModelIds(List<UUID> flowModelIds) {
    this.flowModelIds = flowModelIds;
  }


  public SortingDataFilter lastModificationDateStart(OffsetDateTime lastModificationDateStart) {
    this.lastModificationDateStart = lastModificationDateStart;
    return this;
  }

   /**
   * Get lastModificationDateStart
   * @return lastModificationDateStart
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getLastModificationDateStart() {
    return lastModificationDateStart;
  }

  public void setLastModificationDateStart(OffsetDateTime lastModificationDateStart) {
    this.lastModificationDateStart = lastModificationDateStart;
  }


  public SortingDataFilter lastModificationDateEnd(OffsetDateTime lastModificationDateEnd) {
    this.lastModificationDateEnd = lastModificationDateEnd;
    return this;
  }

   /**
   * Get lastModificationDateEnd
   * @return lastModificationDateEnd
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getLastModificationDateEnd() {
    return lastModificationDateEnd;
  }

  public void setLastModificationDateEnd(OffsetDateTime lastModificationDateEnd) {
    this.lastModificationDateEnd = lastModificationDateEnd;
  }


  public SortingDataFilter states(List<StatesEnum> states) {
    this.states = states;
    return this;
  }

  public SortingDataFilter addStatesItem(StatesEnum statesItem) {
    if (this.states == null) {
      this.states = new ArrayList<>();
    }
    this.states.add(statesItem);
    return this;
  }

   /**
   * Get states
   * @return states
  **/
  @javax.annotation.Nullable
  public List<StatesEnum> getStates() {
    return states;
  }

  public void setStates(List<StatesEnum> states) {
    this.states = states;
  }


  public SortingDataFilter assetTypes(List<AssetTypesEnum> assetTypes) {
    this.assetTypes = assetTypes;
    return this;
  }

  public SortingDataFilter addAssetTypesItem(AssetTypesEnum assetTypesItem) {
    if (this.assetTypes == null) {
      this.assetTypes = new ArrayList<>();
    }
    this.assetTypes.add(assetTypesItem);
    return this;
  }

   /**
   * Get assetTypes
   * @return assetTypes
  **/
  @javax.annotation.Nullable
  public List<AssetTypesEnum> getAssetTypes() {
    return assetTypes;
  }

  public void setAssetTypes(List<AssetTypesEnum> assetTypes) {
    this.assetTypes = assetTypes;
  }


  public SortingDataFilter metadata(List<String> metadata) {
    this.metadata = metadata;
    return this;
  }

  public SortingDataFilter addMetadataItem(String metadataItem) {
    if (this.metadata == null) {
      this.metadata = new ArrayList<>();
    }
    this.metadata.add(metadataItem);
    return this;
  }

   /**
   * Get metadata
   * @return metadata
  **/
  @javax.annotation.Nullable
  public List<String> getMetadata() {
    return metadata;
  }

  public void setMetadata(List<String> metadata) {
    this.metadata = metadata;
  }


  public SortingDataFilter sortSubflows(List<String> sortSubflows) {
    this.sortSubflows = sortSubflows;
    return this;
  }

  public SortingDataFilter addSortSubflowsItem(String sortSubflowsItem) {
    if (this.sortSubflows == null) {
      this.sortSubflows = new ArrayList<>();
    }
    this.sortSubflows.add(sortSubflowsItem);
    return this;
  }

   /**
   * Get sortSubflows
   * @return sortSubflows
  **/
  @javax.annotation.Nullable
  public List<String> getSortSubflows() {
    return sortSubflows;
  }

  public void setSortSubflows(List<String> sortSubflows) {
    this.sortSubflows = sortSubflows;
  }


  public SortingDataFilter referenceIds(List<UUID> referenceIds) {
    this.referenceIds = referenceIds;
    return this;
  }

  public SortingDataFilter addReferenceIdsItem(UUID referenceIdsItem) {
    if (this.referenceIds == null) {
      this.referenceIds = new ArrayList<>();
    }
    this.referenceIds.add(referenceIdsItem);
    return this;
  }

   /**
   * Get referenceIds
   * @return referenceIds
  **/
  @javax.annotation.Nullable
  public List<UUID> getReferenceIds() {
    return referenceIds;
  }

  public void setReferenceIds(List<UUID> referenceIds) {
    this.referenceIds = referenceIds;
  }


  public SortingDataFilter customersCountFrom(Integer customersCountFrom) {
    this.customersCountFrom = customersCountFrom;
    return this;
  }

   /**
   * Get customersCountFrom
   * @return customersCountFrom
  **/
  @javax.annotation.Nullable
  public Integer getCustomersCountFrom() {
    return customersCountFrom;
  }

  public void setCustomersCountFrom(Integer customersCountFrom) {
    this.customersCountFrom = customersCountFrom;
  }


  public SortingDataFilter customersCountTo(Integer customersCountTo) {
    this.customersCountTo = customersCountTo;
    return this;
  }

   /**
   * Get customersCountTo
   * @return customersCountTo
  **/
  @javax.annotation.Nullable
  public Integer getCustomersCountTo() {
    return customersCountTo;
  }

  public void setCustomersCountTo(Integer customersCountTo) {
    this.customersCountTo = customersCountTo;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SortingDataFilter sortingDataFilter = (SortingDataFilter) o;
    return Objects.equals(this.ids, sortingDataFilter.ids) &&
        Objects.equals(this.jobIds, sortingDataFilter.jobIds) &&
        Objects.equals(this.flowStepIds, sortingDataFilter.flowStepIds) &&
        Objects.equals(this.communicationIds, sortingDataFilter.communicationIds) &&
        Objects.equals(this.queueNames, sortingDataFilter.queueNames) &&
        Objects.equals(this.creationDateStart, sortingDataFilter.creationDateStart) &&
        Objects.equals(this.creationDateEnd, sortingDataFilter.creationDateEnd) &&
        Objects.equals(this.externalIds, sortingDataFilter.externalIds) &&
        Objects.equals(this.flowModelIds, sortingDataFilter.flowModelIds) &&
        Objects.equals(this.lastModificationDateStart, sortingDataFilter.lastModificationDateStart) &&
        Objects.equals(this.lastModificationDateEnd, sortingDataFilter.lastModificationDateEnd) &&
        Objects.equals(this.states, sortingDataFilter.states) &&
        Objects.equals(this.assetTypes, sortingDataFilter.assetTypes) &&
        Objects.equals(this.metadata, sortingDataFilter.metadata) &&
        Objects.equals(this.sortSubflows, sortingDataFilter.sortSubflows) &&
        Objects.equals(this.referenceIds, sortingDataFilter.referenceIds) &&
        Objects.equals(this.customersCountFrom, sortingDataFilter.customersCountFrom) &&
        Objects.equals(this.customersCountTo, sortingDataFilter.customersCountTo);
  }

  @Override
  public int hashCode() {
    return Objects.hash(ids, jobIds, flowStepIds, communicationIds, queueNames, creationDateStart, creationDateEnd, externalIds, flowModelIds, lastModificationDateStart, lastModificationDateEnd, states, assetTypes, metadata, sortSubflows, referenceIds, customersCountFrom, customersCountTo);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SortingDataFilter {\n");
    sb.append("    ids: ").append(toIndentedString(ids)).append("\n");
    sb.append("    jobIds: ").append(toIndentedString(jobIds)).append("\n");
    sb.append("    flowStepIds: ").append(toIndentedString(flowStepIds)).append("\n");
    sb.append("    communicationIds: ").append(toIndentedString(communicationIds)).append("\n");
    sb.append("    queueNames: ").append(toIndentedString(queueNames)).append("\n");
    sb.append("    creationDateStart: ").append(toIndentedString(creationDateStart)).append("\n");
    sb.append("    creationDateEnd: ").append(toIndentedString(creationDateEnd)).append("\n");
    sb.append("    externalIds: ").append(toIndentedString(externalIds)).append("\n");
    sb.append("    flowModelIds: ").append(toIndentedString(flowModelIds)).append("\n");
    sb.append("    lastModificationDateStart: ").append(toIndentedString(lastModificationDateStart)).append("\n");
    sb.append("    lastModificationDateEnd: ").append(toIndentedString(lastModificationDateEnd)).append("\n");
    sb.append("    states: ").append(toIndentedString(states)).append("\n");
    sb.append("    assetTypes: ").append(toIndentedString(assetTypes)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    sortSubflows: ").append(toIndentedString(sortSubflows)).append("\n");
    sb.append("    referenceIds: ").append(toIndentedString(referenceIds)).append("\n");
    sb.append("    customersCountFrom: ").append(toIndentedString(customersCountFrom)).append("\n");
    sb.append("    customersCountTo: ").append(toIndentedString(customersCountTo)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ids");
    openapiFields.add("jobIds");
    openapiFields.add("flowStepIds");
    openapiFields.add("communicationIds");
    openapiFields.add("queueNames");
    openapiFields.add("creationDateStart");
    openapiFields.add("creationDateEnd");
    openapiFields.add("externalIds");
    openapiFields.add("flowModelIds");
    openapiFields.add("lastModificationDateStart");
    openapiFields.add("lastModificationDateEnd");
    openapiFields.add("states");
    openapiFields.add("assetTypes");
    openapiFields.add("metadata");
    openapiFields.add("sortSubflows");
    openapiFields.add("referenceIds");
    openapiFields.add("customersCountFrom");
    openapiFields.add("customersCountTo");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to SortingDataFilter
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SortingDataFilter.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SortingDataFilter is not found in the empty JSON string", SortingDataFilter.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SortingDataFilter.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SortingDataFilter` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("ids") != null && !jsonObj.get("ids").isJsonNull() && !jsonObj.get("ids").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `ids` to be an array in the JSON string but got `%s`", jsonObj.get("ids").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("jobIds") != null && !jsonObj.get("jobIds").isJsonNull() && !jsonObj.get("jobIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `jobIds` to be an array in the JSON string but got `%s`", jsonObj.get("jobIds").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("flowStepIds") != null && !jsonObj.get("flowStepIds").isJsonNull() && !jsonObj.get("flowStepIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `flowStepIds` to be an array in the JSON string but got `%s`", jsonObj.get("flowStepIds").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("communicationIds") != null && !jsonObj.get("communicationIds").isJsonNull() && !jsonObj.get("communicationIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `communicationIds` to be an array in the JSON string but got `%s`", jsonObj.get("communicationIds").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("queueNames") != null && !jsonObj.get("queueNames").isJsonNull() && !jsonObj.get("queueNames").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `queueNames` to be an array in the JSON string but got `%s`", jsonObj.get("queueNames").toString()));
      }
      if ((jsonObj.get("creationDateStart") != null && !jsonObj.get("creationDateStart").isJsonNull()) && !jsonObj.get("creationDateStart").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `creationDateStart` to be a primitive type in the JSON string but got `%s`", jsonObj.get("creationDateStart").toString()));
      }
      if ((jsonObj.get("creationDateEnd") != null && !jsonObj.get("creationDateEnd").isJsonNull()) && !jsonObj.get("creationDateEnd").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `creationDateEnd` to be a primitive type in the JSON string but got `%s`", jsonObj.get("creationDateEnd").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("externalIds") != null && !jsonObj.get("externalIds").isJsonNull() && !jsonObj.get("externalIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `externalIds` to be an array in the JSON string but got `%s`", jsonObj.get("externalIds").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("flowModelIds") != null && !jsonObj.get("flowModelIds").isJsonNull() && !jsonObj.get("flowModelIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `flowModelIds` to be an array in the JSON string but got `%s`", jsonObj.get("flowModelIds").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("states") != null && !jsonObj.get("states").isJsonNull() && !jsonObj.get("states").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `states` to be an array in the JSON string but got `%s`", jsonObj.get("states").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("assetTypes") != null && !jsonObj.get("assetTypes").isJsonNull() && !jsonObj.get("assetTypes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `assetTypes` to be an array in the JSON string but got `%s`", jsonObj.get("assetTypes").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("metadata") != null && !jsonObj.get("metadata").isJsonNull() && !jsonObj.get("metadata").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `metadata` to be an array in the JSON string but got `%s`", jsonObj.get("metadata").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("sortSubflows") != null && !jsonObj.get("sortSubflows").isJsonNull() && !jsonObj.get("sortSubflows").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `sortSubflows` to be an array in the JSON string but got `%s`", jsonObj.get("sortSubflows").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("referenceIds") != null && !jsonObj.get("referenceIds").isJsonNull() && !jsonObj.get("referenceIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `referenceIds` to be an array in the JSON string but got `%s`", jsonObj.get("referenceIds").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SortingDataFilter.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SortingDataFilter' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SortingDataFilter> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SortingDataFilter.class));

       return (TypeAdapter<T>) new TypeAdapter<SortingDataFilter>() {
           @Override
           public void write(JsonWriter out, SortingDataFilter value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SortingDataFilter read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of SortingDataFilter given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of SortingDataFilter
  * @throws IOException if the JSON string is invalid with respect to SortingDataFilter
  */
  public static SortingDataFilter fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SortingDataFilter.class);
  }

 /**
  * Convert an instance of SortingDataFilter to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

