/*
 * Exstream Orchestration
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.DataResponseSortingAsset;
import org.openapitools.client.model.GenericResponse;
import org.openapitools.client.model.SortingDataFilterRequest;
import java.util.UUID;
import org.openapitools.client.model.UpdateState1Request;
import org.openapitools.client.model.UpdateStateRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SortDataControllerApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public SortDataControllerApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SortDataControllerApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for deleteSortData
     * @param domain Domain id (required)
     * @param sortingDataFilterRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteSortDataCall(String domain, SortingDataFilterRequest sortingDataFilterRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = sortingDataFilterRequest;

        // create path and map variables
        String localVarPath = "/api/v1/sortdata/{domain}"
            .replace("{" + "domain" + "}", localVarApiClient.escapeString(domain.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteSortDataValidateBeforeCall(String domain, SortingDataFilterRequest sortingDataFilterRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling deleteSortData(Async)");
        }

        return deleteSortDataCall(domain, sortingDataFilterRequest, _callback);

    }

    /**
     * Delete sorting assets and set the jobs, instances and queued flow steps using those assets to error. The only possible parameters are domain (in the URL) and the mandatory filter
     * Sorting assets using synchronous mode is not included.  The filter value is a semicolon delimited list of key value pairs.  List values separate possible values with commas. These are the only keys possible, please ignore the parameters below this list: | Filter name                    | Filter value description                                                         | |--------------------------------|----------------------------------------------------------------------------------| | flowModelIds                   | Match sorting assets with these flow model ids.                                  | | communicationIds               | Match sorting assets with these communication ids.                               | | queueNames                     | Match sorting assets with these queue names.                                     | | externalIds                    | Match sorting assets with these external ids.                                    | | flowStepIds                    | Match sorting assets with these flow step ids.                                   | | ids                            | Match sorting assets with these sorting asset ids.                               | | jobIds                         | Match sorting assets with these job ids.                                         | | referenceIds                   | Match sorting assets with these reference ids.                                   | | sortSubflows                   | Match sorting assets with these sort sub flows.                                  | | metadata                       | Match sorting assets with these metadata values.                                 | | states                         | Match sorting assets with any of these states. Possible values: processed,waiting,expired,canceled,all| | customersCountFrom             | Match sorting assets having customer count from this number.                     | | customersCountTo               | Match sorting assets having customer count to this number.                       | | creationDateStart              | Match sorting assets created after this date. (yyyy-MM-dd format)                | | creationDateEnd                | Match sorting assets created before this date. (yyyy-MM-dd format)               | | lastModificationDateStart      | Match sorting assets modified after this date. (yyyy-MM-dd format)               | | lastModificationDateEnd        | Match sorting assets modified before this date. (yyyy-MM-dd format)              | Note: For following special characters in strings (applicable for queueNames, externalIds, sortSubflows, metadata) use:  : &amp;rarr; /colon/  ; &amp;rarr; /semi/  \\ &amp;rarr; /bsol/  Example - filter&#x3D;states:expired;queueNames:SortPrep
     * @param domain Domain id (required)
     * @param sortingDataFilterRequest  (optional)
     * @return GenericResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GenericResponse deleteSortData(String domain, SortingDataFilterRequest sortingDataFilterRequest) throws ApiException {
        ApiResponse<GenericResponse> localVarResp = deleteSortDataWithHttpInfo(domain, sortingDataFilterRequest);
        return localVarResp.getData();
    }

    /**
     * Delete sorting assets and set the jobs, instances and queued flow steps using those assets to error. The only possible parameters are domain (in the URL) and the mandatory filter
     * Sorting assets using synchronous mode is not included.  The filter value is a semicolon delimited list of key value pairs.  List values separate possible values with commas. These are the only keys possible, please ignore the parameters below this list: | Filter name                    | Filter value description                                                         | |--------------------------------|----------------------------------------------------------------------------------| | flowModelIds                   | Match sorting assets with these flow model ids.                                  | | communicationIds               | Match sorting assets with these communication ids.                               | | queueNames                     | Match sorting assets with these queue names.                                     | | externalIds                    | Match sorting assets with these external ids.                                    | | flowStepIds                    | Match sorting assets with these flow step ids.                                   | | ids                            | Match sorting assets with these sorting asset ids.                               | | jobIds                         | Match sorting assets with these job ids.                                         | | referenceIds                   | Match sorting assets with these reference ids.                                   | | sortSubflows                   | Match sorting assets with these sort sub flows.                                  | | metadata                       | Match sorting assets with these metadata values.                                 | | states                         | Match sorting assets with any of these states. Possible values: processed,waiting,expired,canceled,all| | customersCountFrom             | Match sorting assets having customer count from this number.                     | | customersCountTo               | Match sorting assets having customer count to this number.                       | | creationDateStart              | Match sorting assets created after this date. (yyyy-MM-dd format)                | | creationDateEnd                | Match sorting assets created before this date. (yyyy-MM-dd format)               | | lastModificationDateStart      | Match sorting assets modified after this date. (yyyy-MM-dd format)               | | lastModificationDateEnd        | Match sorting assets modified before this date. (yyyy-MM-dd format)              | Note: For following special characters in strings (applicable for queueNames, externalIds, sortSubflows, metadata) use:  : &amp;rarr; /colon/  ; &amp;rarr; /semi/  \\ &amp;rarr; /bsol/  Example - filter&#x3D;states:expired;queueNames:SortPrep
     * @param domain Domain id (required)
     * @param sortingDataFilterRequest  (optional)
     * @return ApiResponse&lt;GenericResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GenericResponse> deleteSortDataWithHttpInfo(String domain, SortingDataFilterRequest sortingDataFilterRequest) throws ApiException {
        okhttp3.Call localVarCall = deleteSortDataValidateBeforeCall(domain, sortingDataFilterRequest, null);
        Type localVarReturnType = new TypeToken<GenericResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete sorting assets and set the jobs, instances and queued flow steps using those assets to error. The only possible parameters are domain (in the URL) and the mandatory filter (asynchronously)
     * Sorting assets using synchronous mode is not included.  The filter value is a semicolon delimited list of key value pairs.  List values separate possible values with commas. These are the only keys possible, please ignore the parameters below this list: | Filter name                    | Filter value description                                                         | |--------------------------------|----------------------------------------------------------------------------------| | flowModelIds                   | Match sorting assets with these flow model ids.                                  | | communicationIds               | Match sorting assets with these communication ids.                               | | queueNames                     | Match sorting assets with these queue names.                                     | | externalIds                    | Match sorting assets with these external ids.                                    | | flowStepIds                    | Match sorting assets with these flow step ids.                                   | | ids                            | Match sorting assets with these sorting asset ids.                               | | jobIds                         | Match sorting assets with these job ids.                                         | | referenceIds                   | Match sorting assets with these reference ids.                                   | | sortSubflows                   | Match sorting assets with these sort sub flows.                                  | | metadata                       | Match sorting assets with these metadata values.                                 | | states                         | Match sorting assets with any of these states. Possible values: processed,waiting,expired,canceled,all| | customersCountFrom             | Match sorting assets having customer count from this number.                     | | customersCountTo               | Match sorting assets having customer count to this number.                       | | creationDateStart              | Match sorting assets created after this date. (yyyy-MM-dd format)                | | creationDateEnd                | Match sorting assets created before this date. (yyyy-MM-dd format)               | | lastModificationDateStart      | Match sorting assets modified after this date. (yyyy-MM-dd format)               | | lastModificationDateEnd        | Match sorting assets modified before this date. (yyyy-MM-dd format)              | Note: For following special characters in strings (applicable for queueNames, externalIds, sortSubflows, metadata) use:  : &amp;rarr; /colon/  ; &amp;rarr; /semi/  \\ &amp;rarr; /bsol/  Example - filter&#x3D;states:expired;queueNames:SortPrep
     * @param domain Domain id (required)
     * @param sortingDataFilterRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteSortDataAsync(String domain, SortingDataFilterRequest sortingDataFilterRequest, final ApiCallback<GenericResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteSortDataValidateBeforeCall(domain, sortingDataFilterRequest, _callback);
        Type localVarReturnType = new TypeToken<GenericResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteSortData1
     * @param domain Domain id (required)
     * @param id Id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteSortData1Call(String domain, UUID id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/sortdata/{domain}/{id}"
            .replace("{" + "domain" + "}", localVarApiClient.escapeString(domain.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteSortData1ValidateBeforeCall(String domain, UUID id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling deleteSortData1(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteSortData1(Async)");
        }

        return deleteSortData1Call(domain, id, _callback);

    }

    /**
     * Delete sorting asset and set the jobs, instances and queued flow steps using those assets to error. The only possible parameters are domain (in the URL) and the sorting asset id (in the URL)
     * Sorting assets using synchronous mode is not included.
     * @param domain Domain id (required)
     * @param id Id (required)
     * @return GenericResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GenericResponse deleteSortData1(String domain, UUID id) throws ApiException {
        ApiResponse<GenericResponse> localVarResp = deleteSortData1WithHttpInfo(domain, id);
        return localVarResp.getData();
    }

    /**
     * Delete sorting asset and set the jobs, instances and queued flow steps using those assets to error. The only possible parameters are domain (in the URL) and the sorting asset id (in the URL)
     * Sorting assets using synchronous mode is not included.
     * @param domain Domain id (required)
     * @param id Id (required)
     * @return ApiResponse&lt;GenericResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GenericResponse> deleteSortData1WithHttpInfo(String domain, UUID id) throws ApiException {
        okhttp3.Call localVarCall = deleteSortData1ValidateBeforeCall(domain, id, null);
        Type localVarReturnType = new TypeToken<GenericResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete sorting asset and set the jobs, instances and queued flow steps using those assets to error. The only possible parameters are domain (in the URL) and the sorting asset id (in the URL) (asynchronously)
     * Sorting assets using synchronous mode is not included.
     * @param domain Domain id (required)
     * @param id Id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteSortData1Async(String domain, UUID id, final ApiCallback<GenericResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteSortData1ValidateBeforeCall(domain, id, _callback);
        Type localVarReturnType = new TypeToken<GenericResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSortingAsset
     * @param domain Domain id (required)
     * @param id Id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSortingAssetCall(String domain, UUID id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/sortdata/{domain}/{id}"
            .replace("{" + "domain" + "}", localVarApiClient.escapeString(domain.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSortingAssetValidateBeforeCall(String domain, UUID id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling getSortingAsset(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getSortingAsset(Async)");
        }

        return getSortingAssetCall(domain, id, _callback);

    }

    /**
     * Get sorting asset. The only possible parameters are domain (in the URL) and the id (in the URL)
     * Sorting assets using synchronous mode is not included.
     * @param domain Domain id (required)
     * @param id Id (required)
     * @return DataResponseSortingAsset
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public DataResponseSortingAsset getSortingAsset(String domain, UUID id) throws ApiException {
        ApiResponse<DataResponseSortingAsset> localVarResp = getSortingAssetWithHttpInfo(domain, id);
        return localVarResp.getData();
    }

    /**
     * Get sorting asset. The only possible parameters are domain (in the URL) and the id (in the URL)
     * Sorting assets using synchronous mode is not included.
     * @param domain Domain id (required)
     * @param id Id (required)
     * @return ApiResponse&lt;DataResponseSortingAsset&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DataResponseSortingAsset> getSortingAssetWithHttpInfo(String domain, UUID id) throws ApiException {
        okhttp3.Call localVarCall = getSortingAssetValidateBeforeCall(domain, id, null);
        Type localVarReturnType = new TypeToken<DataResponseSortingAsset>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get sorting asset. The only possible parameters are domain (in the URL) and the id (in the URL) (asynchronously)
     * Sorting assets using synchronous mode is not included.
     * @param domain Domain id (required)
     * @param id Id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSortingAssetAsync(String domain, UUID id, final ApiCallback<DataResponseSortingAsset> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSortingAssetValidateBeforeCall(domain, id, _callback);
        Type localVarReturnType = new TypeToken<DataResponseSortingAsset>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSortingAssetContent
     * @param domain Domain id (required)
     * @param id Id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSortingAssetContentCall(String domain, UUID id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/sortdata/{domain}/{id}/content"
            .replace("{" + "domain" + "}", localVarApiClient.escapeString(domain.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/exstream-sort-index"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSortingAssetContentValidateBeforeCall(String domain, UUID id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling getSortingAssetContent(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getSortingAssetContent(Async)");
        }

        return getSortingAssetContentCall(domain, id, _callback);

    }

    /**
     * Get content of sorting assets. Possible parameters are domain (in the URL) and the id (in the URL) of the sorting asset.
     * Sorting assets using synchronous mode is not included.
     * @param domain Domain id (required)
     * @param id Id (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void getSortingAssetContent(String domain, UUID id) throws ApiException {
        getSortingAssetContentWithHttpInfo(domain, id);
    }

    /**
     * Get content of sorting assets. Possible parameters are domain (in the URL) and the id (in the URL) of the sorting asset.
     * Sorting assets using synchronous mode is not included.
     * @param domain Domain id (required)
     * @param id Id (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getSortingAssetContentWithHttpInfo(String domain, UUID id) throws ApiException {
        okhttp3.Call localVarCall = getSortingAssetContentValidateBeforeCall(domain, id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get content of sorting assets. Possible parameters are domain (in the URL) and the id (in the URL) of the sorting asset. (asynchronously)
     * Sorting assets using synchronous mode is not included.
     * @param domain Domain id (required)
     * @param id Id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSortingAssetContentAsync(String domain, UUID id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSortingAssetContentValidateBeforeCall(domain, id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for listSortingAssets
     * @param domain Domain id (required)
     * @param filterRequest Use the optional filter parameter to decide which sorting assets should be listed (ALL of them if no filter specified) (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listSortingAssetsCall(String domain, SortingDataFilterRequest filterRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/sortdata/{domain}"
            .replace("{" + "domain" + "}", localVarApiClient.escapeString(domain.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (filterRequest != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filterRequest", filterRequest));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listSortingAssetsValidateBeforeCall(String domain, SortingDataFilterRequest filterRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling listSortingAssets(Async)");
        }

        // verify the required parameter 'filterRequest' is set
        if (filterRequest == null) {
            throw new ApiException("Missing the required parameter 'filterRequest' when calling listSortingAssets(Async)");
        }

        return listSortingAssetsCall(domain, filterRequest, _callback);

    }

    /**
     * List sorting assets. Possible parameters are domain (in the URL) and the optional parameters filter,count,offset and sort
     * Sorting assets using synchronous mode is not included.  The filter value is a semicolon delimited list of key value pairs.  List values separate possible values with commas. These are the only keys possible, please ignore the parameters below this list: | Filter name                    | Filter value description                                                         | |--------------------------------|----------------------------------------------------------------------------------| | flowModelIds                   | Match sorting assets with these flow model ids.                                  | | communicationIds               | Match sorting assets with these communication ids.                               | | queueNames                     | Match sorting assets with these queue names.                                     | | externalIds                    | Match sorting assets with these external ids.                                    | | flowStepIds                    | Match sorting assets with these flow step ids.                                   | | ids                            | Match sorting assets with these sorting asset ids.                               | | jobIds                         | Match sorting assets with these job ids.                                         | | referenceIds                   | Match sorting assets with these reference ids.                                   | | sortSubflows                   | Match sorting assets with these sort sub flows.                                  | | metadata                       | Match sorting assets with these metadata values.                                 | | states                         | Match sorting assets with any of these states. Possible values: processed,waiting,expired,canceled,all| | customersCountFrom             | Match sorting assets having customer count from this number.                     | | customersCountTo               | Match sorting assets having customer count to this number.                       | | creationDateStart              | Match sorting assets created after this date. (yyyy-MM-dd format)                | | creationDateEnd                | Match sorting assets created before this date. (yyyy-MM-dd format)               | | lastModificationDateStart      | Match sorting assets modified after this date. (yyyy-MM-dd format)               | | lastModificationDateEnd        | Match sorting assets modified before this date. (yyyy-MM-dd format)              | Note: For following special characters in strings (applicable for queueNames, externalIds, sortSubflows, metadata) use:  : &amp;rarr; /colon/  ; &amp;rarr; /semi/  \\ &amp;rarr; /bsol/  Example - filter&#x3D;queueNames:SortPrep&amp;count&#x3D;10&amp;offset&#x3D;0
     * @param domain Domain id (required)
     * @param filterRequest Use the optional filter parameter to decide which sorting assets should be listed (ALL of them if no filter specified) (required)
     * @return GenericResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GenericResponse listSortingAssets(String domain, SortingDataFilterRequest filterRequest) throws ApiException {
        ApiResponse<GenericResponse> localVarResp = listSortingAssetsWithHttpInfo(domain, filterRequest);
        return localVarResp.getData();
    }

    /**
     * List sorting assets. Possible parameters are domain (in the URL) and the optional parameters filter,count,offset and sort
     * Sorting assets using synchronous mode is not included.  The filter value is a semicolon delimited list of key value pairs.  List values separate possible values with commas. These are the only keys possible, please ignore the parameters below this list: | Filter name                    | Filter value description                                                         | |--------------------------------|----------------------------------------------------------------------------------| | flowModelIds                   | Match sorting assets with these flow model ids.                                  | | communicationIds               | Match sorting assets with these communication ids.                               | | queueNames                     | Match sorting assets with these queue names.                                     | | externalIds                    | Match sorting assets with these external ids.                                    | | flowStepIds                    | Match sorting assets with these flow step ids.                                   | | ids                            | Match sorting assets with these sorting asset ids.                               | | jobIds                         | Match sorting assets with these job ids.                                         | | referenceIds                   | Match sorting assets with these reference ids.                                   | | sortSubflows                   | Match sorting assets with these sort sub flows.                                  | | metadata                       | Match sorting assets with these metadata values.                                 | | states                         | Match sorting assets with any of these states. Possible values: processed,waiting,expired,canceled,all| | customersCountFrom             | Match sorting assets having customer count from this number.                     | | customersCountTo               | Match sorting assets having customer count to this number.                       | | creationDateStart              | Match sorting assets created after this date. (yyyy-MM-dd format)                | | creationDateEnd                | Match sorting assets created before this date. (yyyy-MM-dd format)               | | lastModificationDateStart      | Match sorting assets modified after this date. (yyyy-MM-dd format)               | | lastModificationDateEnd        | Match sorting assets modified before this date. (yyyy-MM-dd format)              | Note: For following special characters in strings (applicable for queueNames, externalIds, sortSubflows, metadata) use:  : &amp;rarr; /colon/  ; &amp;rarr; /semi/  \\ &amp;rarr; /bsol/  Example - filter&#x3D;queueNames:SortPrep&amp;count&#x3D;10&amp;offset&#x3D;0
     * @param domain Domain id (required)
     * @param filterRequest Use the optional filter parameter to decide which sorting assets should be listed (ALL of them if no filter specified) (required)
     * @return ApiResponse&lt;GenericResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GenericResponse> listSortingAssetsWithHttpInfo(String domain, SortingDataFilterRequest filterRequest) throws ApiException {
        okhttp3.Call localVarCall = listSortingAssetsValidateBeforeCall(domain, filterRequest, null);
        Type localVarReturnType = new TypeToken<GenericResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List sorting assets. Possible parameters are domain (in the URL) and the optional parameters filter,count,offset and sort (asynchronously)
     * Sorting assets using synchronous mode is not included.  The filter value is a semicolon delimited list of key value pairs.  List values separate possible values with commas. These are the only keys possible, please ignore the parameters below this list: | Filter name                    | Filter value description                                                         | |--------------------------------|----------------------------------------------------------------------------------| | flowModelIds                   | Match sorting assets with these flow model ids.                                  | | communicationIds               | Match sorting assets with these communication ids.                               | | queueNames                     | Match sorting assets with these queue names.                                     | | externalIds                    | Match sorting assets with these external ids.                                    | | flowStepIds                    | Match sorting assets with these flow step ids.                                   | | ids                            | Match sorting assets with these sorting asset ids.                               | | jobIds                         | Match sorting assets with these job ids.                                         | | referenceIds                   | Match sorting assets with these reference ids.                                   | | sortSubflows                   | Match sorting assets with these sort sub flows.                                  | | metadata                       | Match sorting assets with these metadata values.                                 | | states                         | Match sorting assets with any of these states. Possible values: processed,waiting,expired,canceled,all| | customersCountFrom             | Match sorting assets having customer count from this number.                     | | customersCountTo               | Match sorting assets having customer count to this number.                       | | creationDateStart              | Match sorting assets created after this date. (yyyy-MM-dd format)                | | creationDateEnd                | Match sorting assets created before this date. (yyyy-MM-dd format)               | | lastModificationDateStart      | Match sorting assets modified after this date. (yyyy-MM-dd format)               | | lastModificationDateEnd        | Match sorting assets modified before this date. (yyyy-MM-dd format)              | Note: For following special characters in strings (applicable for queueNames, externalIds, sortSubflows, metadata) use:  : &amp;rarr; /colon/  ; &amp;rarr; /semi/  \\ &amp;rarr; /bsol/  Example - filter&#x3D;queueNames:SortPrep&amp;count&#x3D;10&amp;offset&#x3D;0
     * @param domain Domain id (required)
     * @param filterRequest Use the optional filter parameter to decide which sorting assets should be listed (ALL of them if no filter specified) (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listSortingAssetsAsync(String domain, SortingDataFilterRequest filterRequest, final ApiCallback<GenericResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listSortingAssetsValidateBeforeCall(domain, filterRequest, _callback);
        Type localVarReturnType = new TypeToken<GenericResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateState
     * @param domain Domain id (required)
     * @param updateStateRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateStateCall(String domain, UpdateStateRequest updateStateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateStateRequest;

        // create path and map variables
        String localVarPath = "/api/v1/sortdata/{domain}"
            .replace("{" + "domain" + "}", localVarApiClient.escapeString(domain.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateStateValidateBeforeCall(String domain, UpdateStateRequest updateStateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling updateState(Async)");
        }

        return updateStateCall(domain, updateStateRequest, _callback);

    }

    /**
     * Update state for all sort assets matching filter criteria. Possible parameters are domain (in the URL), state and the mandatory filter
     * Sorting assets using synchronous mode is not included.  The filter value is a semicolon delimited list of key value pairs.  List values separate possible values with commas. These are the only keys possible, please ignore the parameters below this list: | Filter name                    | Filter value description                                                         | |--------------------------------|----------------------------------------------------------------------------------| | flowModelIds                   | Match sorting assets with these flow model ids.                                  | | communicationIds               | Match sorting assets with these communication ids.                               | | queueNames                     | Match sorting assets with these queue names.                                     | | externalIds                    | Match sorting assets with these external ids.                                    | | flowStepIds                    | Match sorting assets with these flow step ids.                                   | | ids                            | Match sorting assets with these sorting asset ids.                               | | jobIds                         | Match sorting assets with these job ids.                                         | | referenceIds                   | Match sorting assets with these reference ids.                                   | | sortSubflows                   | Match sorting assets with these sort sub flows.                                  | | metadata                       | Match sorting assets with these metadata values.                                 | | states                         | Match sorting assets with any of these states. Possible values: processed,waiting,expired,canceled,all| | customersCountFrom             | Match sorting assets having customer count from this number.                     | | customersCountTo               | Match sorting assets having customer count to this number.                       | | creationDateStart              | Match sorting assets created after this date. (yyyy-MM-dd format)                | | creationDateEnd                | Match sorting assets created before this date. (yyyy-MM-dd format)               | | lastModificationDateStart      | Match sorting assets modified after this date. (yyyy-MM-dd format)               | | lastModificationDateEnd        | Match sorting assets modified before this date. (yyyy-MM-dd format)              | Note: For following special characters in strings (applicable for queueNames, externalIds, sortSubflows, metadata) use:  : &amp;rarr; /colon/  ; &amp;rarr; /semi/  \\ &amp;rarr; /bsol/  Example - state&#x3D;waiting&amp;filter&#x3D;externalIds:Ext001;states:processed
     * @param domain Domain id (required)
     * @param updateStateRequest  (optional)
     * @return GenericResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public GenericResponse updateState(String domain, UpdateStateRequest updateStateRequest) throws ApiException {
        ApiResponse<GenericResponse> localVarResp = updateStateWithHttpInfo(domain, updateStateRequest);
        return localVarResp.getData();
    }

    /**
     * Update state for all sort assets matching filter criteria. Possible parameters are domain (in the URL), state and the mandatory filter
     * Sorting assets using synchronous mode is not included.  The filter value is a semicolon delimited list of key value pairs.  List values separate possible values with commas. These are the only keys possible, please ignore the parameters below this list: | Filter name                    | Filter value description                                                         | |--------------------------------|----------------------------------------------------------------------------------| | flowModelIds                   | Match sorting assets with these flow model ids.                                  | | communicationIds               | Match sorting assets with these communication ids.                               | | queueNames                     | Match sorting assets with these queue names.                                     | | externalIds                    | Match sorting assets with these external ids.                                    | | flowStepIds                    | Match sorting assets with these flow step ids.                                   | | ids                            | Match sorting assets with these sorting asset ids.                               | | jobIds                         | Match sorting assets with these job ids.                                         | | referenceIds                   | Match sorting assets with these reference ids.                                   | | sortSubflows                   | Match sorting assets with these sort sub flows.                                  | | metadata                       | Match sorting assets with these metadata values.                                 | | states                         | Match sorting assets with any of these states. Possible values: processed,waiting,expired,canceled,all| | customersCountFrom             | Match sorting assets having customer count from this number.                     | | customersCountTo               | Match sorting assets having customer count to this number.                       | | creationDateStart              | Match sorting assets created after this date. (yyyy-MM-dd format)                | | creationDateEnd                | Match sorting assets created before this date. (yyyy-MM-dd format)               | | lastModificationDateStart      | Match sorting assets modified after this date. (yyyy-MM-dd format)               | | lastModificationDateEnd        | Match sorting assets modified before this date. (yyyy-MM-dd format)              | Note: For following special characters in strings (applicable for queueNames, externalIds, sortSubflows, metadata) use:  : &amp;rarr; /colon/  ; &amp;rarr; /semi/  \\ &amp;rarr; /bsol/  Example - state&#x3D;waiting&amp;filter&#x3D;externalIds:Ext001;states:processed
     * @param domain Domain id (required)
     * @param updateStateRequest  (optional)
     * @return ApiResponse&lt;GenericResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GenericResponse> updateStateWithHttpInfo(String domain, UpdateStateRequest updateStateRequest) throws ApiException {
        okhttp3.Call localVarCall = updateStateValidateBeforeCall(domain, updateStateRequest, null);
        Type localVarReturnType = new TypeToken<GenericResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update state for all sort assets matching filter criteria. Possible parameters are domain (in the URL), state and the mandatory filter (asynchronously)
     * Sorting assets using synchronous mode is not included.  The filter value is a semicolon delimited list of key value pairs.  List values separate possible values with commas. These are the only keys possible, please ignore the parameters below this list: | Filter name                    | Filter value description                                                         | |--------------------------------|----------------------------------------------------------------------------------| | flowModelIds                   | Match sorting assets with these flow model ids.                                  | | communicationIds               | Match sorting assets with these communication ids.                               | | queueNames                     | Match sorting assets with these queue names.                                     | | externalIds                    | Match sorting assets with these external ids.                                    | | flowStepIds                    | Match sorting assets with these flow step ids.                                   | | ids                            | Match sorting assets with these sorting asset ids.                               | | jobIds                         | Match sorting assets with these job ids.                                         | | referenceIds                   | Match sorting assets with these reference ids.                                   | | sortSubflows                   | Match sorting assets with these sort sub flows.                                  | | metadata                       | Match sorting assets with these metadata values.                                 | | states                         | Match sorting assets with any of these states. Possible values: processed,waiting,expired,canceled,all| | customersCountFrom             | Match sorting assets having customer count from this number.                     | | customersCountTo               | Match sorting assets having customer count to this number.                       | | creationDateStart              | Match sorting assets created after this date. (yyyy-MM-dd format)                | | creationDateEnd                | Match sorting assets created before this date. (yyyy-MM-dd format)               | | lastModificationDateStart      | Match sorting assets modified after this date. (yyyy-MM-dd format)               | | lastModificationDateEnd        | Match sorting assets modified before this date. (yyyy-MM-dd format)              | Note: For following special characters in strings (applicable for queueNames, externalIds, sortSubflows, metadata) use:  : &amp;rarr; /colon/  ; &amp;rarr; /semi/  \\ &amp;rarr; /bsol/  Example - state&#x3D;waiting&amp;filter&#x3D;externalIds:Ext001;states:processed
     * @param domain Domain id (required)
     * @param updateStateRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateStateAsync(String domain, UpdateStateRequest updateStateRequest, final ApiCallback<GenericResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateStateValidateBeforeCall(domain, updateStateRequest, _callback);
        Type localVarReturnType = new TypeToken<GenericResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateState1
     * @param domain Domain id (required)
     * @param id Id (required)
     * @param updateState1Request  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateState1Call(String domain, UUID id, UpdateState1Request updateState1Request, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateState1Request;

        // create path and map variables
        String localVarPath = "/api/v1/sortdata/{domain}/{id}"
            .replace("{" + "domain" + "}", localVarApiClient.escapeString(domain.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateState1ValidateBeforeCall(String domain, UUID id, UpdateState1Request updateState1Request, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling updateState1(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateState1(Async)");
        }

        return updateState1Call(domain, id, updateState1Request, _callback);

    }

    /**
     * Update state for all sort assets referenced by given id. Possible parameters are domain (in the URL), id (in the URL) and state.
     * Sorting assets using synchronous mode is not included.  Example - state&#x3D;expired
     * @param domain Domain id (required)
     * @param id Id (required)
     * @param updateState1Request  (optional)
     * @return DataResponseSortingAsset
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public DataResponseSortingAsset updateState1(String domain, UUID id, UpdateState1Request updateState1Request) throws ApiException {
        ApiResponse<DataResponseSortingAsset> localVarResp = updateState1WithHttpInfo(domain, id, updateState1Request);
        return localVarResp.getData();
    }

    /**
     * Update state for all sort assets referenced by given id. Possible parameters are domain (in the URL), id (in the URL) and state.
     * Sorting assets using synchronous mode is not included.  Example - state&#x3D;expired
     * @param domain Domain id (required)
     * @param id Id (required)
     * @param updateState1Request  (optional)
     * @return ApiResponse&lt;DataResponseSortingAsset&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DataResponseSortingAsset> updateState1WithHttpInfo(String domain, UUID id, UpdateState1Request updateState1Request) throws ApiException {
        okhttp3.Call localVarCall = updateState1ValidateBeforeCall(domain, id, updateState1Request, null);
        Type localVarReturnType = new TypeToken<DataResponseSortingAsset>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update state for all sort assets referenced by given id. Possible parameters are domain (in the URL), id (in the URL) and state. (asynchronously)
     * Sorting assets using synchronous mode is not included.  Example - state&#x3D;expired
     * @param domain Domain id (required)
     * @param id Id (required)
     * @param updateState1Request  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateState1Async(String domain, UUID id, UpdateState1Request updateState1Request, final ApiCallback<DataResponseSortingAsset> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateState1ValidateBeforeCall(domain, id, updateState1Request, _callback);
        Type localVarReturnType = new TypeToken<DataResponseSortingAsset>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
