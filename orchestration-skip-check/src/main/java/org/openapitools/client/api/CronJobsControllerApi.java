/*
 * Exstream Orchestration
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CronJob;
import org.openapitools.client.model.DataResponseCronJob;
import org.openapitools.client.model.GenericResponse;
import org.openapitools.client.model.ListResponseCronJob;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CronJobsControllerApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CronJobsControllerApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CronJobsControllerApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for addSchedule
     * @param domain Domain id (required)
     * @param cronJob Cron job. It can apply to jobs or sort assets.&lt;br/&gt;name: Name of the cron job&lt;br/&gt;cronExpression: Cron expression in UNIX format that reflects when the cron job should be executed (the main cron orchestration cleanup job is executed hourly by default)&lt;br/&gt;cronType: Cron job type. Available values: markDeleted,wipe,startJob,updateExpirationTime,wipeSortingAssets,expireSortingAssets,sortingAndBundling. When wipe is selected the filter parameters are not used.&lt;br/&gt;startDateStart: Filter jobs matching started date after this date or sort assets created after this date. Date is a (yyyy-MM-dd format) String. It&#39;s also possible to use a negative number, representing the number of days before today.&lt;br/&gt;startDateEnd: Filter jobs matching started date before this date or sort assets created before this date. Date is a (yyyy-MM-dd format) String. It&#39;s also possible to use a negative number, representing the number of days before today.&lt;br/&gt;endDateStart: Filter jobs matching ended date after this date or sort assets modified after this date. Date is a (yyyy-MM-dd format) String. It&#39;s also possible to use a negative number, representing the number of days before today&lt;br/&gt;endDateEnd: Filter jobs matching ended date before this date or sort assets modified before this date. Date is a (yyyy-MM-dd format) String. It&#39;s also possible to use a negative number, representing the number of days before today&lt;br/&gt;statuses: Match jobs with any of these statuses. Possible values for jobs: complete,error,canceled,deleted&lt;br/&gt;sortingAssetStatuses: Match sorting assets with any of these statuses, possible values for sort assets: processed,waiting,expired,canceled&lt;br/&gt;serviceName: service to trigger for job&lt;br/&gt;channelName: input channel for pulling data&lt;br/&gt;inputPath: path parameter for the input channel&lt;br/&gt;headers: map of headers for starting job&lt;br/&gt;cacheTimeout: optional duration of file cache&lt;br/&gt;mode: Filter jobs matching this mode (ONDEMAND|BATCH)&lt;br/&gt;flowModelId: Filter sorting assets matching flow model id&lt;br/&gt;communicationIdList: Filter sorting assets matching the communication id (only one) or when running sorting&amp;bundling with appConsolidation equal to true, use the specified communications,&lt;br/&gt;when appConsolidation is false, only one communication id should be present&lt;br/&gt;preSortQueueName: Filter sorting assets matching pre sort queue name&lt;br/&gt;jobId: Filter sorting assets matching jobId&lt;br/&gt;postSortQueueName: queue name used in the post sort queue name&lt;br/&gt;appConsolidation: says whether multiple communications should be consolidated when running sorting&amp;bundling&lt;br/&gt;enabled: Determines whether the cron job should be triggered or not. Default value: true (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addScheduleCall(String domain, CronJob cronJob, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = cronJob;

        // create path and map variables
        String localVarPath = "/api/v1/cron-jobs/{domain}"
            .replace("{" + "domain" + "}", localVarApiClient.escapeString(domain.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addScheduleValidateBeforeCall(String domain, CronJob cronJob, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling addSchedule(Async)");
        }

        // verify the required parameter 'cronJob' is set
        if (cronJob == null) {
            throw new ApiException("Missing the required parameter 'cronJob' when calling addSchedule(Async)");
        }

        return addScheduleCall(domain, cronJob, _callback);

    }

    /**
     * Adds a new cron job
     * Adds a new Cron job 
     * @param domain Domain id (required)
     * @param cronJob Cron job. It can apply to jobs or sort assets.&lt;br/&gt;name: Name of the cron job&lt;br/&gt;cronExpression: Cron expression in UNIX format that reflects when the cron job should be executed (the main cron orchestration cleanup job is executed hourly by default)&lt;br/&gt;cronType: Cron job type. Available values: markDeleted,wipe,startJob,updateExpirationTime,wipeSortingAssets,expireSortingAssets,sortingAndBundling. When wipe is selected the filter parameters are not used.&lt;br/&gt;startDateStart: Filter jobs matching started date after this date or sort assets created after this date. Date is a (yyyy-MM-dd format) String. It&#39;s also possible to use a negative number, representing the number of days before today.&lt;br/&gt;startDateEnd: Filter jobs matching started date before this date or sort assets created before this date. Date is a (yyyy-MM-dd format) String. It&#39;s also possible to use a negative number, representing the number of days before today.&lt;br/&gt;endDateStart: Filter jobs matching ended date after this date or sort assets modified after this date. Date is a (yyyy-MM-dd format) String. It&#39;s also possible to use a negative number, representing the number of days before today&lt;br/&gt;endDateEnd: Filter jobs matching ended date before this date or sort assets modified before this date. Date is a (yyyy-MM-dd format) String. It&#39;s also possible to use a negative number, representing the number of days before today&lt;br/&gt;statuses: Match jobs with any of these statuses. Possible values for jobs: complete,error,canceled,deleted&lt;br/&gt;sortingAssetStatuses: Match sorting assets with any of these statuses, possible values for sort assets: processed,waiting,expired,canceled&lt;br/&gt;serviceName: service to trigger for job&lt;br/&gt;channelName: input channel for pulling data&lt;br/&gt;inputPath: path parameter for the input channel&lt;br/&gt;headers: map of headers for starting job&lt;br/&gt;cacheTimeout: optional duration of file cache&lt;br/&gt;mode: Filter jobs matching this mode (ONDEMAND|BATCH)&lt;br/&gt;flowModelId: Filter sorting assets matching flow model id&lt;br/&gt;communicationIdList: Filter sorting assets matching the communication id (only one) or when running sorting&amp;bundling with appConsolidation equal to true, use the specified communications,&lt;br/&gt;when appConsolidation is false, only one communication id should be present&lt;br/&gt;preSortQueueName: Filter sorting assets matching pre sort queue name&lt;br/&gt;jobId: Filter sorting assets matching jobId&lt;br/&gt;postSortQueueName: queue name used in the post sort queue name&lt;br/&gt;appConsolidation: says whether multiple communications should be consolidated when running sorting&amp;bundling&lt;br/&gt;enabled: Determines whether the cron job should be triggered or not. Default value: true (required)
     * @return DataResponseCronJob
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> default response </td><td>  -  </td></tr>
     </table>
     */
    public DataResponseCronJob addSchedule(String domain, CronJob cronJob) throws ApiException {
        ApiResponse<DataResponseCronJob> localVarResp = addScheduleWithHttpInfo(domain, cronJob);
        return localVarResp.getData();
    }

    /**
     * Adds a new cron job
     * Adds a new Cron job 
     * @param domain Domain id (required)
     * @param cronJob Cron job. It can apply to jobs or sort assets.&lt;br/&gt;name: Name of the cron job&lt;br/&gt;cronExpression: Cron expression in UNIX format that reflects when the cron job should be executed (the main cron orchestration cleanup job is executed hourly by default)&lt;br/&gt;cronType: Cron job type. Available values: markDeleted,wipe,startJob,updateExpirationTime,wipeSortingAssets,expireSortingAssets,sortingAndBundling. When wipe is selected the filter parameters are not used.&lt;br/&gt;startDateStart: Filter jobs matching started date after this date or sort assets created after this date. Date is a (yyyy-MM-dd format) String. It&#39;s also possible to use a negative number, representing the number of days before today.&lt;br/&gt;startDateEnd: Filter jobs matching started date before this date or sort assets created before this date. Date is a (yyyy-MM-dd format) String. It&#39;s also possible to use a negative number, representing the number of days before today.&lt;br/&gt;endDateStart: Filter jobs matching ended date after this date or sort assets modified after this date. Date is a (yyyy-MM-dd format) String. It&#39;s also possible to use a negative number, representing the number of days before today&lt;br/&gt;endDateEnd: Filter jobs matching ended date before this date or sort assets modified before this date. Date is a (yyyy-MM-dd format) String. It&#39;s also possible to use a negative number, representing the number of days before today&lt;br/&gt;statuses: Match jobs with any of these statuses. Possible values for jobs: complete,error,canceled,deleted&lt;br/&gt;sortingAssetStatuses: Match sorting assets with any of these statuses, possible values for sort assets: processed,waiting,expired,canceled&lt;br/&gt;serviceName: service to trigger for job&lt;br/&gt;channelName: input channel for pulling data&lt;br/&gt;inputPath: path parameter for the input channel&lt;br/&gt;headers: map of headers for starting job&lt;br/&gt;cacheTimeout: optional duration of file cache&lt;br/&gt;mode: Filter jobs matching this mode (ONDEMAND|BATCH)&lt;br/&gt;flowModelId: Filter sorting assets matching flow model id&lt;br/&gt;communicationIdList: Filter sorting assets matching the communication id (only one) or when running sorting&amp;bundling with appConsolidation equal to true, use the specified communications,&lt;br/&gt;when appConsolidation is false, only one communication id should be present&lt;br/&gt;preSortQueueName: Filter sorting assets matching pre sort queue name&lt;br/&gt;jobId: Filter sorting assets matching jobId&lt;br/&gt;postSortQueueName: queue name used in the post sort queue name&lt;br/&gt;appConsolidation: says whether multiple communications should be consolidated when running sorting&amp;bundling&lt;br/&gt;enabled: Determines whether the cron job should be triggered or not. Default value: true (required)
     * @return ApiResponse&lt;DataResponseCronJob&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> default response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DataResponseCronJob> addScheduleWithHttpInfo(String domain, CronJob cronJob) throws ApiException {
        okhttp3.Call localVarCall = addScheduleValidateBeforeCall(domain, cronJob, null);
        Type localVarReturnType = new TypeToken<DataResponseCronJob>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Adds a new cron job (asynchronously)
     * Adds a new Cron job 
     * @param domain Domain id (required)
     * @param cronJob Cron job. It can apply to jobs or sort assets.&lt;br/&gt;name: Name of the cron job&lt;br/&gt;cronExpression: Cron expression in UNIX format that reflects when the cron job should be executed (the main cron orchestration cleanup job is executed hourly by default)&lt;br/&gt;cronType: Cron job type. Available values: markDeleted,wipe,startJob,updateExpirationTime,wipeSortingAssets,expireSortingAssets,sortingAndBundling. When wipe is selected the filter parameters are not used.&lt;br/&gt;startDateStart: Filter jobs matching started date after this date or sort assets created after this date. Date is a (yyyy-MM-dd format) String. It&#39;s also possible to use a negative number, representing the number of days before today.&lt;br/&gt;startDateEnd: Filter jobs matching started date before this date or sort assets created before this date. Date is a (yyyy-MM-dd format) String. It&#39;s also possible to use a negative number, representing the number of days before today.&lt;br/&gt;endDateStart: Filter jobs matching ended date after this date or sort assets modified after this date. Date is a (yyyy-MM-dd format) String. It&#39;s also possible to use a negative number, representing the number of days before today&lt;br/&gt;endDateEnd: Filter jobs matching ended date before this date or sort assets modified before this date. Date is a (yyyy-MM-dd format) String. It&#39;s also possible to use a negative number, representing the number of days before today&lt;br/&gt;statuses: Match jobs with any of these statuses. Possible values for jobs: complete,error,canceled,deleted&lt;br/&gt;sortingAssetStatuses: Match sorting assets with any of these statuses, possible values for sort assets: processed,waiting,expired,canceled&lt;br/&gt;serviceName: service to trigger for job&lt;br/&gt;channelName: input channel for pulling data&lt;br/&gt;inputPath: path parameter for the input channel&lt;br/&gt;headers: map of headers for starting job&lt;br/&gt;cacheTimeout: optional duration of file cache&lt;br/&gt;mode: Filter jobs matching this mode (ONDEMAND|BATCH)&lt;br/&gt;flowModelId: Filter sorting assets matching flow model id&lt;br/&gt;communicationIdList: Filter sorting assets matching the communication id (only one) or when running sorting&amp;bundling with appConsolidation equal to true, use the specified communications,&lt;br/&gt;when appConsolidation is false, only one communication id should be present&lt;br/&gt;preSortQueueName: Filter sorting assets matching pre sort queue name&lt;br/&gt;jobId: Filter sorting assets matching jobId&lt;br/&gt;postSortQueueName: queue name used in the post sort queue name&lt;br/&gt;appConsolidation: says whether multiple communications should be consolidated when running sorting&amp;bundling&lt;br/&gt;enabled: Determines whether the cron job should be triggered or not. Default value: true (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addScheduleAsync(String domain, CronJob cronJob, final ApiCallback<DataResponseCronJob> _callback) throws ApiException {

        okhttp3.Call localVarCall = addScheduleValidateBeforeCall(domain, cronJob, _callback);
        Type localVarReturnType = new TypeToken<DataResponseCronJob>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteSchedule
     * @param domain Domain id (required)
     * @param cronJobId CronJobId (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteScheduleCall(String domain, UUID cronJobId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/cron-jobs/{domain}/{cronJobId}"
            .replace("{" + "domain" + "}", localVarApiClient.escapeString(domain.toString()))
            .replace("{" + "cronJobId" + "}", localVarApiClient.escapeString(cronJobId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteScheduleValidateBeforeCall(String domain, UUID cronJobId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling deleteSchedule(Async)");
        }

        // verify the required parameter 'cronJobId' is set
        if (cronJobId == null) {
            throw new ApiException("Missing the required parameter 'cronJobId' when calling deleteSchedule(Async)");
        }

        return deleteScheduleCall(domain, cronJobId, _callback);

    }

    /**
     * Deletes a cron job
     * 
     * @param domain Domain id (required)
     * @param cronJobId CronJobId (required)
     * @return GenericResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> default response </td><td>  -  </td></tr>
     </table>
     */
    public GenericResponse deleteSchedule(String domain, UUID cronJobId) throws ApiException {
        ApiResponse<GenericResponse> localVarResp = deleteScheduleWithHttpInfo(domain, cronJobId);
        return localVarResp.getData();
    }

    /**
     * Deletes a cron job
     * 
     * @param domain Domain id (required)
     * @param cronJobId CronJobId (required)
     * @return ApiResponse&lt;GenericResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> default response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GenericResponse> deleteScheduleWithHttpInfo(String domain, UUID cronJobId) throws ApiException {
        okhttp3.Call localVarCall = deleteScheduleValidateBeforeCall(domain, cronJobId, null);
        Type localVarReturnType = new TypeToken<GenericResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Deletes a cron job (asynchronously)
     * 
     * @param domain Domain id (required)
     * @param cronJobId CronJobId (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteScheduleAsync(String domain, UUID cronJobId, final ApiCallback<GenericResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteScheduleValidateBeforeCall(domain, cronJobId, _callback);
        Type localVarReturnType = new TypeToken<GenericResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listSchedules
     * @param domain Domain id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listSchedulesCall(String domain, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/cron-jobs/{domain}"
            .replace("{" + "domain" + "}", localVarApiClient.escapeString(domain.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listSchedulesValidateBeforeCall(String domain, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling listSchedules(Async)");
        }

        return listSchedulesCall(domain, _callback);

    }

    /**
     * List all cron jobs
     * 
     * @param domain Domain id (required)
     * @return ListResponseCronJob
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> default response </td><td>  -  </td></tr>
     </table>
     */
    public ListResponseCronJob listSchedules(String domain) throws ApiException {
        ApiResponse<ListResponseCronJob> localVarResp = listSchedulesWithHttpInfo(domain);
        return localVarResp.getData();
    }

    /**
     * List all cron jobs
     * 
     * @param domain Domain id (required)
     * @return ApiResponse&lt;ListResponseCronJob&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> default response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListResponseCronJob> listSchedulesWithHttpInfo(String domain) throws ApiException {
        okhttp3.Call localVarCall = listSchedulesValidateBeforeCall(domain, null);
        Type localVarReturnType = new TypeToken<ListResponseCronJob>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List all cron jobs (asynchronously)
     * 
     * @param domain Domain id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listSchedulesAsync(String domain, final ApiCallback<ListResponseCronJob> _callback) throws ApiException {

        okhttp3.Call localVarCall = listSchedulesValidateBeforeCall(domain, _callback);
        Type localVarReturnType = new TypeToken<ListResponseCronJob>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for readSchedule
     * @param domain Domain id (required)
     * @param cronJobId CronJobId (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call readScheduleCall(String domain, UUID cronJobId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/cron-jobs/{domain}/{cronJobId}"
            .replace("{" + "domain" + "}", localVarApiClient.escapeString(domain.toString()))
            .replace("{" + "cronJobId" + "}", localVarApiClient.escapeString(cronJobId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call readScheduleValidateBeforeCall(String domain, UUID cronJobId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling readSchedule(Async)");
        }

        // verify the required parameter 'cronJobId' is set
        if (cronJobId == null) {
            throw new ApiException("Missing the required parameter 'cronJobId' when calling readSchedule(Async)");
        }

        return readScheduleCall(domain, cronJobId, _callback);

    }

    /**
     * Gets a cron job
     * 
     * @param domain Domain id (required)
     * @param cronJobId CronJobId (required)
     * @return DataResponseCronJob
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> default response </td><td>  -  </td></tr>
     </table>
     */
    public DataResponseCronJob readSchedule(String domain, UUID cronJobId) throws ApiException {
        ApiResponse<DataResponseCronJob> localVarResp = readScheduleWithHttpInfo(domain, cronJobId);
        return localVarResp.getData();
    }

    /**
     * Gets a cron job
     * 
     * @param domain Domain id (required)
     * @param cronJobId CronJobId (required)
     * @return ApiResponse&lt;DataResponseCronJob&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> default response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DataResponseCronJob> readScheduleWithHttpInfo(String domain, UUID cronJobId) throws ApiException {
        okhttp3.Call localVarCall = readScheduleValidateBeforeCall(domain, cronJobId, null);
        Type localVarReturnType = new TypeToken<DataResponseCronJob>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets a cron job (asynchronously)
     * 
     * @param domain Domain id (required)
     * @param cronJobId CronJobId (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call readScheduleAsync(String domain, UUID cronJobId, final ApiCallback<DataResponseCronJob> _callback) throws ApiException {

        okhttp3.Call localVarCall = readScheduleValidateBeforeCall(domain, cronJobId, _callback);
        Type localVarReturnType = new TypeToken<DataResponseCronJob>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for triggerSchedule
     * @param domain Domain id (required)
     * @param cronJobId CronJobId (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call triggerScheduleCall(String domain, UUID cronJobId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/cron-jobs/{domain}/{cronJobId}/trigger"
            .replace("{" + "domain" + "}", localVarApiClient.escapeString(domain.toString()))
            .replace("{" + "cronJobId" + "}", localVarApiClient.escapeString(cronJobId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call triggerScheduleValidateBeforeCall(String domain, UUID cronJobId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling triggerSchedule(Async)");
        }

        // verify the required parameter 'cronJobId' is set
        if (cronJobId == null) {
            throw new ApiException("Missing the required parameter 'cronJobId' when calling triggerSchedule(Async)");
        }

        return triggerScheduleCall(domain, cronJobId, _callback);

    }

    /**
     * Trigger a cron job
     * 
     * @param domain Domain id (required)
     * @param cronJobId CronJobId (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public String triggerSchedule(String domain, UUID cronJobId) throws ApiException {
        ApiResponse<String> localVarResp = triggerScheduleWithHttpInfo(domain, cronJobId);
        return localVarResp.getData();
    }

    /**
     * Trigger a cron job
     * 
     * @param domain Domain id (required)
     * @param cronJobId CronJobId (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> triggerScheduleWithHttpInfo(String domain, UUID cronJobId) throws ApiException {
        okhttp3.Call localVarCall = triggerScheduleValidateBeforeCall(domain, cronJobId, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Trigger a cron job (asynchronously)
     * 
     * @param domain Domain id (required)
     * @param cronJobId CronJobId (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call triggerScheduleAsync(String domain, UUID cronJobId, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = triggerScheduleValidateBeforeCall(domain, cronJobId, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateSchedule
     * @param domain Domain id (required)
     * @param cronJobId CronJobId (required)
     * @param cronJob Cron job. It can apply to jobs or sort assets.&lt;br/&gt;name: Name of the cron job&lt;br/&gt;cronExpression: Cron expression in UNIX format that reflects when the cron job should be executed (the main cron orchestration cleanup job is executed hourly by default)&lt;br/&gt;cronType: Cron job type. Available values: markDeleted,wipe,startJob,updateExpirationTime,wipeSortingAssets,expireSortingAssets,sortingAndBundling. When wipe is selected the filter parameters are not used.&lt;br/&gt;startDateStart: Filter jobs matching started date after this date or sort assets created after this date. Date is a (yyyy-MM-dd format) String. It&#39;s also possible to use a negative number, representing the number of days before today.&lt;br/&gt;startDateEnd: Filter jobs matching started date before this date or sort assets created before this date. Date is a (yyyy-MM-dd format) String. It&#39;s also possible to use a negative number, representing the number of days before today.&lt;br/&gt;endDateStart: Filter jobs matching ended date after this date or sort assets modified after this date. Date is a (yyyy-MM-dd format) String. It&#39;s also possible to use a negative number, representing the number of days before today&lt;br/&gt;endDateEnd: Filter jobs matching ended date before this date or sort assets modified before this date. Date is a (yyyy-MM-dd format) String. It&#39;s also possible to use a negative number, representing the number of days before today&lt;br/&gt;statuses: Match jobs with any of these statuses. Possible values for jobs: complete,error,canceled,deleted&lt;br/&gt;sortingAssetStatuses: Match sorting assets with any of these statuses, possible values for sort assets: processed,waiting,expired,canceled&lt;br/&gt;serviceName: service to trigger for job&lt;br/&gt;channelName: input channel for pulling data&lt;br/&gt;inputPath: path parameter for the input channel&lt;br/&gt;headers: map of headers for starting job&lt;br/&gt;cacheTimeout: optional duration of file cache&lt;br/&gt;mode: Filter jobs matching this mode (ONDEMAND|BATCH)&lt;br/&gt;flowModelId: Filter sorting assets matching flow model id&lt;br/&gt;communicationIdList: Filter sorting assets matching the communication id (only one) or when running sorting&amp;bundling with appConsolidation equal to true, use the specified communications,&lt;br/&gt;when appConsolidation is false, only one communication id should be present&lt;br/&gt;preSortQueueName: Filter sorting assets matching pre sort queue name&lt;br/&gt;jobId: Filter sorting assets matching jobId&lt;br/&gt;postSortQueueName: queue name used in the post sort queue name&lt;br/&gt;appConsolidation: says whether multiple communications should be consolidated when running sorting&amp;bundling&lt;br/&gt;enabled: Determines whether the cron job should be triggered or not. Default value: true (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateScheduleCall(String domain, UUID cronJobId, CronJob cronJob, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = cronJob;

        // create path and map variables
        String localVarPath = "/api/v1/cron-jobs/{domain}/{cronJobId}"
            .replace("{" + "domain" + "}", localVarApiClient.escapeString(domain.toString()))
            .replace("{" + "cronJobId" + "}", localVarApiClient.escapeString(cronJobId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateScheduleValidateBeforeCall(String domain, UUID cronJobId, CronJob cronJob, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling updateSchedule(Async)");
        }

        // verify the required parameter 'cronJobId' is set
        if (cronJobId == null) {
            throw new ApiException("Missing the required parameter 'cronJobId' when calling updateSchedule(Async)");
        }

        // verify the required parameter 'cronJob' is set
        if (cronJob == null) {
            throw new ApiException("Missing the required parameter 'cronJob' when calling updateSchedule(Async)");
        }

        return updateScheduleCall(domain, cronJobId, cronJob, _callback);

    }

    /**
     * Updates a cron job
     * 
     * @param domain Domain id (required)
     * @param cronJobId CronJobId (required)
     * @param cronJob Cron job. It can apply to jobs or sort assets.&lt;br/&gt;name: Name of the cron job&lt;br/&gt;cronExpression: Cron expression in UNIX format that reflects when the cron job should be executed (the main cron orchestration cleanup job is executed hourly by default)&lt;br/&gt;cronType: Cron job type. Available values: markDeleted,wipe,startJob,updateExpirationTime,wipeSortingAssets,expireSortingAssets,sortingAndBundling. When wipe is selected the filter parameters are not used.&lt;br/&gt;startDateStart: Filter jobs matching started date after this date or sort assets created after this date. Date is a (yyyy-MM-dd format) String. It&#39;s also possible to use a negative number, representing the number of days before today.&lt;br/&gt;startDateEnd: Filter jobs matching started date before this date or sort assets created before this date. Date is a (yyyy-MM-dd format) String. It&#39;s also possible to use a negative number, representing the number of days before today.&lt;br/&gt;endDateStart: Filter jobs matching ended date after this date or sort assets modified after this date. Date is a (yyyy-MM-dd format) String. It&#39;s also possible to use a negative number, representing the number of days before today&lt;br/&gt;endDateEnd: Filter jobs matching ended date before this date or sort assets modified before this date. Date is a (yyyy-MM-dd format) String. It&#39;s also possible to use a negative number, representing the number of days before today&lt;br/&gt;statuses: Match jobs with any of these statuses. Possible values for jobs: complete,error,canceled,deleted&lt;br/&gt;sortingAssetStatuses: Match sorting assets with any of these statuses, possible values for sort assets: processed,waiting,expired,canceled&lt;br/&gt;serviceName: service to trigger for job&lt;br/&gt;channelName: input channel for pulling data&lt;br/&gt;inputPath: path parameter for the input channel&lt;br/&gt;headers: map of headers for starting job&lt;br/&gt;cacheTimeout: optional duration of file cache&lt;br/&gt;mode: Filter jobs matching this mode (ONDEMAND|BATCH)&lt;br/&gt;flowModelId: Filter sorting assets matching flow model id&lt;br/&gt;communicationIdList: Filter sorting assets matching the communication id (only one) or when running sorting&amp;bundling with appConsolidation equal to true, use the specified communications,&lt;br/&gt;when appConsolidation is false, only one communication id should be present&lt;br/&gt;preSortQueueName: Filter sorting assets matching pre sort queue name&lt;br/&gt;jobId: Filter sorting assets matching jobId&lt;br/&gt;postSortQueueName: queue name used in the post sort queue name&lt;br/&gt;appConsolidation: says whether multiple communications should be consolidated when running sorting&amp;bundling&lt;br/&gt;enabled: Determines whether the cron job should be triggered or not. Default value: true (required)
     * @return DataResponseCronJob
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> default response </td><td>  -  </td></tr>
     </table>
     */
    public DataResponseCronJob updateSchedule(String domain, UUID cronJobId, CronJob cronJob) throws ApiException {
        ApiResponse<DataResponseCronJob> localVarResp = updateScheduleWithHttpInfo(domain, cronJobId, cronJob);
        return localVarResp.getData();
    }

    /**
     * Updates a cron job
     * 
     * @param domain Domain id (required)
     * @param cronJobId CronJobId (required)
     * @param cronJob Cron job. It can apply to jobs or sort assets.&lt;br/&gt;name: Name of the cron job&lt;br/&gt;cronExpression: Cron expression in UNIX format that reflects when the cron job should be executed (the main cron orchestration cleanup job is executed hourly by default)&lt;br/&gt;cronType: Cron job type. Available values: markDeleted,wipe,startJob,updateExpirationTime,wipeSortingAssets,expireSortingAssets,sortingAndBundling. When wipe is selected the filter parameters are not used.&lt;br/&gt;startDateStart: Filter jobs matching started date after this date or sort assets created after this date. Date is a (yyyy-MM-dd format) String. It&#39;s also possible to use a negative number, representing the number of days before today.&lt;br/&gt;startDateEnd: Filter jobs matching started date before this date or sort assets created before this date. Date is a (yyyy-MM-dd format) String. It&#39;s also possible to use a negative number, representing the number of days before today.&lt;br/&gt;endDateStart: Filter jobs matching ended date after this date or sort assets modified after this date. Date is a (yyyy-MM-dd format) String. It&#39;s also possible to use a negative number, representing the number of days before today&lt;br/&gt;endDateEnd: Filter jobs matching ended date before this date or sort assets modified before this date. Date is a (yyyy-MM-dd format) String. It&#39;s also possible to use a negative number, representing the number of days before today&lt;br/&gt;statuses: Match jobs with any of these statuses. Possible values for jobs: complete,error,canceled,deleted&lt;br/&gt;sortingAssetStatuses: Match sorting assets with any of these statuses, possible values for sort assets: processed,waiting,expired,canceled&lt;br/&gt;serviceName: service to trigger for job&lt;br/&gt;channelName: input channel for pulling data&lt;br/&gt;inputPath: path parameter for the input channel&lt;br/&gt;headers: map of headers for starting job&lt;br/&gt;cacheTimeout: optional duration of file cache&lt;br/&gt;mode: Filter jobs matching this mode (ONDEMAND|BATCH)&lt;br/&gt;flowModelId: Filter sorting assets matching flow model id&lt;br/&gt;communicationIdList: Filter sorting assets matching the communication id (only one) or when running sorting&amp;bundling with appConsolidation equal to true, use the specified communications,&lt;br/&gt;when appConsolidation is false, only one communication id should be present&lt;br/&gt;preSortQueueName: Filter sorting assets matching pre sort queue name&lt;br/&gt;jobId: Filter sorting assets matching jobId&lt;br/&gt;postSortQueueName: queue name used in the post sort queue name&lt;br/&gt;appConsolidation: says whether multiple communications should be consolidated when running sorting&amp;bundling&lt;br/&gt;enabled: Determines whether the cron job should be triggered or not. Default value: true (required)
     * @return ApiResponse&lt;DataResponseCronJob&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> default response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DataResponseCronJob> updateScheduleWithHttpInfo(String domain, UUID cronJobId, CronJob cronJob) throws ApiException {
        okhttp3.Call localVarCall = updateScheduleValidateBeforeCall(domain, cronJobId, cronJob, null);
        Type localVarReturnType = new TypeToken<DataResponseCronJob>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates a cron job (asynchronously)
     * 
     * @param domain Domain id (required)
     * @param cronJobId CronJobId (required)
     * @param cronJob Cron job. It can apply to jobs or sort assets.&lt;br/&gt;name: Name of the cron job&lt;br/&gt;cronExpression: Cron expression in UNIX format that reflects when the cron job should be executed (the main cron orchestration cleanup job is executed hourly by default)&lt;br/&gt;cronType: Cron job type. Available values: markDeleted,wipe,startJob,updateExpirationTime,wipeSortingAssets,expireSortingAssets,sortingAndBundling. When wipe is selected the filter parameters are not used.&lt;br/&gt;startDateStart: Filter jobs matching started date after this date or sort assets created after this date. Date is a (yyyy-MM-dd format) String. It&#39;s also possible to use a negative number, representing the number of days before today.&lt;br/&gt;startDateEnd: Filter jobs matching started date before this date or sort assets created before this date. Date is a (yyyy-MM-dd format) String. It&#39;s also possible to use a negative number, representing the number of days before today.&lt;br/&gt;endDateStart: Filter jobs matching ended date after this date or sort assets modified after this date. Date is a (yyyy-MM-dd format) String. It&#39;s also possible to use a negative number, representing the number of days before today&lt;br/&gt;endDateEnd: Filter jobs matching ended date before this date or sort assets modified before this date. Date is a (yyyy-MM-dd format) String. It&#39;s also possible to use a negative number, representing the number of days before today&lt;br/&gt;statuses: Match jobs with any of these statuses. Possible values for jobs: complete,error,canceled,deleted&lt;br/&gt;sortingAssetStatuses: Match sorting assets with any of these statuses, possible values for sort assets: processed,waiting,expired,canceled&lt;br/&gt;serviceName: service to trigger for job&lt;br/&gt;channelName: input channel for pulling data&lt;br/&gt;inputPath: path parameter for the input channel&lt;br/&gt;headers: map of headers for starting job&lt;br/&gt;cacheTimeout: optional duration of file cache&lt;br/&gt;mode: Filter jobs matching this mode (ONDEMAND|BATCH)&lt;br/&gt;flowModelId: Filter sorting assets matching flow model id&lt;br/&gt;communicationIdList: Filter sorting assets matching the communication id (only one) or when running sorting&amp;bundling with appConsolidation equal to true, use the specified communications,&lt;br/&gt;when appConsolidation is false, only one communication id should be present&lt;br/&gt;preSortQueueName: Filter sorting assets matching pre sort queue name&lt;br/&gt;jobId: Filter sorting assets matching jobId&lt;br/&gt;postSortQueueName: queue name used in the post sort queue name&lt;br/&gt;appConsolidation: says whether multiple communications should be consolidated when running sorting&amp;bundling&lt;br/&gt;enabled: Determines whether the cron job should be triggered or not. Default value: true (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateScheduleAsync(String domain, UUID cronJobId, CronJob cronJob, final ApiCallback<DataResponseCronJob> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateScheduleValidateBeforeCall(domain, cronJobId, cronJob, _callback);
        Type localVarReturnType = new TypeToken<DataResponseCronJob>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
