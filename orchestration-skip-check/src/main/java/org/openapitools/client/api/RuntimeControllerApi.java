/*
 * Exstream Orchestration
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.DataResponseFlowInstance;
import org.openapitools.client.model.DataResponseFlowInstancesAndAssociatedJobs;
import org.openapitools.client.model.DataResponseFlowModelSnapshot;
import org.openapitools.client.model.DataResponseFlowStep;
import org.openapitools.client.model.DataResponseFlowStepFlow;
import org.openapitools.client.model.DataResponseJob;
import org.openapitools.client.model.DataResponseJobDeleteStatus;
import org.openapitools.client.model.DataResponseJsonNode;
import org.openapitools.client.model.DataResponseMapObjectObject;
import org.openapitools.client.model.FlowInstanceCountsFilterRequest;
import org.openapitools.client.model.FlowInstanceFilterRequest;
import org.openapitools.client.model.FlowModelSnapshotFilterRequest;
import org.openapitools.client.model.FlowStepFilterRequest;
import org.openapitools.client.model.GenericResponse;
import org.openapitools.client.model.JobFilterRequest;
import org.openapitools.client.model.ListResponseString;
import org.openapitools.client.model.PageResponseFlowInstance;
import org.openapitools.client.model.PageResponseFlowModelSnapshot;
import org.openapitools.client.model.PageResponseFlowStep;
import org.openapitools.client.model.PageResponseJob;
import org.openapitools.client.model.PageResponseString;
import org.openapitools.client.model.PostSortRunOption;
import org.openapitools.client.model.SimplePageRequest;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class RuntimeControllerApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public RuntimeControllerApi() {
        this(Configuration.getDefaultApiClient());
    }

    public RuntimeControllerApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for deleteFlowInstance
     * @param domain  (required)
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteFlowInstanceCall(String domain, UUID id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/runtime/{domain}/flow-instances/{id}"
            .replace("{" + "domain" + "}", localVarApiClient.escapeString(domain.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteFlowInstanceValidateBeforeCall(String domain, UUID id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling deleteFlowInstance(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteFlowInstance(Async)");
        }

        return deleteFlowInstanceCall(domain, id, _callback);

    }

    /**
     * 
     * 
     * @param domain  (required)
     * @param id  (required)
     * @return GenericResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public GenericResponse deleteFlowInstance(String domain, UUID id) throws ApiException {
        ApiResponse<GenericResponse> localVarResp = deleteFlowInstanceWithHttpInfo(domain, id);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param domain  (required)
     * @param id  (required)
     * @return ApiResponse&lt;GenericResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GenericResponse> deleteFlowInstanceWithHttpInfo(String domain, UUID id) throws ApiException {
        okhttp3.Call localVarCall = deleteFlowInstanceValidateBeforeCall(domain, id, null);
        Type localVarReturnType = new TypeToken<GenericResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param domain  (required)
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteFlowInstanceAsync(String domain, UUID id, final ApiCallback<GenericResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteFlowInstanceValidateBeforeCall(domain, id, _callback);
        Type localVarReturnType = new TypeToken<GenericResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteJob
     * @param domain Domain id (required)
     * @param id Job id (required)
     * @param force Force deletion of job entry in the database repository in case deletion of one or more files in the job working directory failed. (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 409 </td><td> Deletion of one or more files failed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteJobCall(String domain, UUID id, Boolean force, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/runtime/{domain}/jobs/{id}"
            .replace("{" + "domain" + "}", localVarApiClient.escapeString(domain.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (force != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("force", force));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteJobValidateBeforeCall(String domain, UUID id, Boolean force, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling deleteJob(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteJob(Async)");
        }

        return deleteJobCall(domain, id, force, _callback);

    }

    /**
     * Delete completed job
     * Delete completed job entry (including all flow instances) in runtime database and correspondent job working directory.
     * @param domain Domain id (required)
     * @param id Job id (required)
     * @param force Force deletion of job entry in the database repository in case deletion of one or more files in the job working directory failed. (optional, default to false)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 409 </td><td> Deletion of one or more files failed </td><td>  -  </td></tr>
     </table>
     */
    public void deleteJob(String domain, UUID id, Boolean force) throws ApiException {
        deleteJobWithHttpInfo(domain, id, force);
    }

    /**
     * Delete completed job
     * Delete completed job entry (including all flow instances) in runtime database and correspondent job working directory.
     * @param domain Domain id (required)
     * @param id Job id (required)
     * @param force Force deletion of job entry in the database repository in case deletion of one or more files in the job working directory failed. (optional, default to false)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 409 </td><td> Deletion of one or more files failed </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteJobWithHttpInfo(String domain, UUID id, Boolean force) throws ApiException {
        okhttp3.Call localVarCall = deleteJobValidateBeforeCall(domain, id, force, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete completed job (asynchronously)
     * Delete completed job entry (including all flow instances) in runtime database and correspondent job working directory.
     * @param domain Domain id (required)
     * @param id Job id (required)
     * @param force Force deletion of job entry in the database repository in case deletion of one or more files in the job working directory failed. (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 409 </td><td> Deletion of one or more files failed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteJobAsync(String domain, UUID id, Boolean force, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteJobValidateBeforeCall(domain, id, force, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteJobs
     * @param domain Domain id (required)
     * @param force Force deletion of job entry in the database repository in case deletion of one or more files in the job working directory failed. (optional, default to false)
     * @param syncDelete Delete jobs and all job files synchronously. In case we run it asynchronously, the jobs will be marked as deleted and will be deleted asynchronously by an external job. This parameter only is available when using the key &#39;ids&#39; in the filter. (optional, default to false)
     * @param jobFilterRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted jobs successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Deletion of one or more files failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteJobsCall(String domain, Boolean force, Boolean syncDelete, JobFilterRequest jobFilterRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = jobFilterRequest;

        // create path and map variables
        String localVarPath = "/api/v1/runtime/{domain}/jobs"
            .replace("{" + "domain" + "}", localVarApiClient.escapeString(domain.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (force != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("force", force));
        }

        if (syncDelete != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("syncDelete", syncDelete));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteJobsValidateBeforeCall(String domain, Boolean force, Boolean syncDelete, JobFilterRequest jobFilterRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling deleteJobs(Async)");
        }

        return deleteJobsCall(domain, force, syncDelete, jobFilterRequest, _callback);

    }

    /**
     * Delete completed, canceled or failed jobs
     * Delete completed, canceled or failed job entries (including all flow instances) in runtime database and correspondent job working directories. &lt;br/&gt; Filter example: filter&#x3D;mode:BATCH;statuses:complete,error 
     * @param domain Domain id (required)
     * @param force Force deletion of job entry in the database repository in case deletion of one or more files in the job working directory failed. (optional, default to false)
     * @param syncDelete Delete jobs and all job files synchronously. In case we run it asynchronously, the jobs will be marked as deleted and will be deleted asynchronously by an external job. This parameter only is available when using the key &#39;ids&#39; in the filter. (optional, default to false)
     * @param jobFilterRequest  (optional)
     * @return DataResponseJobDeleteStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted jobs successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Deletion of one or more files failed. </td><td>  -  </td></tr>
     </table>
     */
    public DataResponseJobDeleteStatus deleteJobs(String domain, Boolean force, Boolean syncDelete, JobFilterRequest jobFilterRequest) throws ApiException {
        ApiResponse<DataResponseJobDeleteStatus> localVarResp = deleteJobsWithHttpInfo(domain, force, syncDelete, jobFilterRequest);
        return localVarResp.getData();
    }

    /**
     * Delete completed, canceled or failed jobs
     * Delete completed, canceled or failed job entries (including all flow instances) in runtime database and correspondent job working directories. &lt;br/&gt; Filter example: filter&#x3D;mode:BATCH;statuses:complete,error 
     * @param domain Domain id (required)
     * @param force Force deletion of job entry in the database repository in case deletion of one or more files in the job working directory failed. (optional, default to false)
     * @param syncDelete Delete jobs and all job files synchronously. In case we run it asynchronously, the jobs will be marked as deleted and will be deleted asynchronously by an external job. This parameter only is available when using the key &#39;ids&#39; in the filter. (optional, default to false)
     * @param jobFilterRequest  (optional)
     * @return ApiResponse&lt;DataResponseJobDeleteStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted jobs successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Deletion of one or more files failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DataResponseJobDeleteStatus> deleteJobsWithHttpInfo(String domain, Boolean force, Boolean syncDelete, JobFilterRequest jobFilterRequest) throws ApiException {
        okhttp3.Call localVarCall = deleteJobsValidateBeforeCall(domain, force, syncDelete, jobFilterRequest, null);
        Type localVarReturnType = new TypeToken<DataResponseJobDeleteStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete completed, canceled or failed jobs (asynchronously)
     * Delete completed, canceled or failed job entries (including all flow instances) in runtime database and correspondent job working directories. &lt;br/&gt; Filter example: filter&#x3D;mode:BATCH;statuses:complete,error 
     * @param domain Domain id (required)
     * @param force Force deletion of job entry in the database repository in case deletion of one or more files in the job working directory failed. (optional, default to false)
     * @param syncDelete Delete jobs and all job files synchronously. In case we run it asynchronously, the jobs will be marked as deleted and will be deleted asynchronously by an external job. This parameter only is available when using the key &#39;ids&#39; in the filter. (optional, default to false)
     * @param jobFilterRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted jobs successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Deletion of one or more files failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteJobsAsync(String domain, Boolean force, Boolean syncDelete, JobFilterRequest jobFilterRequest, final ApiCallback<DataResponseJobDeleteStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteJobsValidateBeforeCall(domain, force, syncDelete, jobFilterRequest, _callback);
        Type localVarReturnType = new TypeToken<DataResponseJobDeleteStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCustomerOutputArtifacts
     * @param domain  (required)
     * @param id  (required)
     * @param customerId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCustomerOutputArtifactsCall(String domain, UUID id, String customerId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/runtime/{domain}/flow-steps/{id}/customer-artifacts/{customerId}"
            .replace("{" + "domain" + "}", localVarApiClient.escapeString(domain.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "customerId" + "}", localVarApiClient.escapeString(customerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCustomerOutputArtifactsValidateBeforeCall(String domain, UUID id, String customerId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling getCustomerOutputArtifacts(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getCustomerOutputArtifacts(Async)");
        }

        // verify the required parameter 'customerId' is set
        if (customerId == null) {
            throw new ApiException("Missing the required parameter 'customerId' when calling getCustomerOutputArtifacts(Async)");
        }

        return getCustomerOutputArtifactsCall(domain, id, customerId, _callback);

    }

    /**
     * Get the customer artifacts in a zip file
     * Get the customer artifacts (1 or more) in a zip file, for the specified customer number (e.g. 1)
     * @param domain  (required)
     * @param id  (required)
     * @param customerId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void getCustomerOutputArtifacts(String domain, UUID id, String customerId) throws ApiException {
        getCustomerOutputArtifactsWithHttpInfo(domain, id, customerId);
    }

    /**
     * Get the customer artifacts in a zip file
     * Get the customer artifacts (1 or more) in a zip file, for the specified customer number (e.g. 1)
     * @param domain  (required)
     * @param id  (required)
     * @param customerId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getCustomerOutputArtifactsWithHttpInfo(String domain, UUID id, String customerId) throws ApiException {
        okhttp3.Call localVarCall = getCustomerOutputArtifactsValidateBeforeCall(domain, id, customerId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get the customer artifacts in a zip file (asynchronously)
     * Get the customer artifacts (1 or more) in a zip file, for the specified customer number (e.g. 1)
     * @param domain  (required)
     * @param id  (required)
     * @param customerId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCustomerOutputArtifactsAsync(String domain, UUID id, String customerId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCustomerOutputArtifactsValidateBeforeCall(domain, id, customerId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDeliveryFileOutputFiles
     * @param domain  (required)
     * @param id  (required)
     * @param pageRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDeliveryFileOutputFilesCall(String domain, UUID id, SimplePageRequest pageRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/runtime/{domain}/flow-steps/{id}/delivery-file/output-files"
            .replace("{" + "domain" + "}", localVarApiClient.escapeString(domain.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pageRequest != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageRequest", pageRequest));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDeliveryFileOutputFilesValidateBeforeCall(String domain, UUID id, SimplePageRequest pageRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling getDeliveryFileOutputFiles(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getDeliveryFileOutputFiles(Async)");
        }

        // verify the required parameter 'pageRequest' is set
        if (pageRequest == null) {
            throw new ApiException("Missing the required parameter 'pageRequest' when calling getDeliveryFileOutputFiles(Async)");
        }

        return getDeliveryFileOutputFilesCall(domain, id, pageRequest, _callback);

    }

    /**
     * 
     * 
     * @param domain  (required)
     * @param id  (required)
     * @param pageRequest  (required)
     * @return PageResponseString
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public PageResponseString getDeliveryFileOutputFiles(String domain, UUID id, SimplePageRequest pageRequest) throws ApiException {
        ApiResponse<PageResponseString> localVarResp = getDeliveryFileOutputFilesWithHttpInfo(domain, id, pageRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param domain  (required)
     * @param id  (required)
     * @param pageRequest  (required)
     * @return ApiResponse&lt;PageResponseString&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PageResponseString> getDeliveryFileOutputFilesWithHttpInfo(String domain, UUID id, SimplePageRequest pageRequest) throws ApiException {
        okhttp3.Call localVarCall = getDeliveryFileOutputFilesValidateBeforeCall(domain, id, pageRequest, null);
        Type localVarReturnType = new TypeToken<PageResponseString>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param domain  (required)
     * @param id  (required)
     * @param pageRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDeliveryFileOutputFilesAsync(String domain, UUID id, SimplePageRequest pageRequest, final ApiCallback<PageResponseString> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDeliveryFileOutputFilesValidateBeforeCall(domain, id, pageRequest, _callback);
        Type localVarReturnType = new TypeToken<PageResponseString>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDeliveryFileOutputs
     * @param domain  (required)
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDeliveryFileOutputsCall(String domain, UUID id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/runtime/{domain}/flow-steps/{id}/delivery-file/outputs"
            .replace("{" + "domain" + "}", localVarApiClient.escapeString(domain.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDeliveryFileOutputsValidateBeforeCall(String domain, UUID id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling getDeliveryFileOutputs(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getDeliveryFileOutputs(Async)");
        }

        return getDeliveryFileOutputsCall(domain, id, _callback);

    }

    /**
     * 
     * 
     * @param domain  (required)
     * @param id  (required)
     * @return DataResponseJsonNode
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public DataResponseJsonNode getDeliveryFileOutputs(String domain, UUID id) throws ApiException {
        ApiResponse<DataResponseJsonNode> localVarResp = getDeliveryFileOutputsWithHttpInfo(domain, id);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param domain  (required)
     * @param id  (required)
     * @return ApiResponse&lt;DataResponseJsonNode&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DataResponseJsonNode> getDeliveryFileOutputsWithHttpInfo(String domain, UUID id) throws ApiException {
        okhttp3.Call localVarCall = getDeliveryFileOutputsValidateBeforeCall(domain, id, null);
        Type localVarReturnType = new TypeToken<DataResponseJsonNode>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param domain  (required)
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDeliveryFileOutputsAsync(String domain, UUID id, final ApiCallback<DataResponseJsonNode> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDeliveryFileOutputsValidateBeforeCall(domain, id, _callback);
        Type localVarReturnType = new TypeToken<DataResponseJsonNode>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDeliveryFileOutputs1
     * @param domain  (required)
     * @param id  (required)
     * @param artifactName  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDeliveryFileOutputs1Call(String domain, UUID id, String artifactName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/runtime/{domain}/flow-steps/{id}/artifact/{artifactName}"
            .replace("{" + "domain" + "}", localVarApiClient.escapeString(domain.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "artifactName" + "}", localVarApiClient.escapeString(artifactName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDeliveryFileOutputs1ValidateBeforeCall(String domain, UUID id, String artifactName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling getDeliveryFileOutputs1(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getDeliveryFileOutputs1(Async)");
        }

        // verify the required parameter 'artifactName' is set
        if (artifactName == null) {
            throw new ApiException("Missing the required parameter 'artifactName' when calling getDeliveryFileOutputs1(Async)");
        }

        return getDeliveryFileOutputs1Call(domain, id, artifactName, _callback);

    }

    /**
     * 
     * 
     * @param domain  (required)
     * @param id  (required)
     * @param artifactName  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Object getDeliveryFileOutputs1(String domain, UUID id, String artifactName) throws ApiException {
        ApiResponse<Object> localVarResp = getDeliveryFileOutputs1WithHttpInfo(domain, id, artifactName);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param domain  (required)
     * @param id  (required)
     * @param artifactName  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getDeliveryFileOutputs1WithHttpInfo(String domain, UUID id, String artifactName) throws ApiException {
        okhttp3.Call localVarCall = getDeliveryFileOutputs1ValidateBeforeCall(domain, id, artifactName, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param domain  (required)
     * @param id  (required)
     * @param artifactName  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDeliveryFileOutputs1Async(String domain, UUID id, String artifactName, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDeliveryFileOutputs1ValidateBeforeCall(domain, id, artifactName, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getFlowInstance
     * @param domain  (required)
     * @param id  (required)
     * @param checkArtifacts  (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFlowInstanceCall(String domain, UUID id, Boolean checkArtifacts, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/runtime/{domain}/flow-instances/{id}"
            .replace("{" + "domain" + "}", localVarApiClient.escapeString(domain.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (checkArtifacts != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("checkArtifacts", checkArtifacts));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFlowInstanceValidateBeforeCall(String domain, UUID id, Boolean checkArtifacts, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling getFlowInstance(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getFlowInstance(Async)");
        }

        return getFlowInstanceCall(domain, id, checkArtifacts, _callback);

    }

    /**
     * 
     * 
     * @param domain  (required)
     * @param id  (required)
     * @param checkArtifacts  (optional, default to false)
     * @return DataResponseFlowInstance
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public DataResponseFlowInstance getFlowInstance(String domain, UUID id, Boolean checkArtifacts) throws ApiException {
        ApiResponse<DataResponseFlowInstance> localVarResp = getFlowInstanceWithHttpInfo(domain, id, checkArtifacts);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param domain  (required)
     * @param id  (required)
     * @param checkArtifacts  (optional, default to false)
     * @return ApiResponse&lt;DataResponseFlowInstance&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DataResponseFlowInstance> getFlowInstanceWithHttpInfo(String domain, UUID id, Boolean checkArtifacts) throws ApiException {
        okhttp3.Call localVarCall = getFlowInstanceValidateBeforeCall(domain, id, checkArtifacts, null);
        Type localVarReturnType = new TypeToken<DataResponseFlowInstance>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param domain  (required)
     * @param id  (required)
     * @param checkArtifacts  (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFlowInstanceAsync(String domain, UUID id, Boolean checkArtifacts, final ApiCallback<DataResponseFlowInstance> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFlowInstanceValidateBeforeCall(domain, id, checkArtifacts, _callback);
        Type localVarReturnType = new TypeToken<DataResponseFlowInstance>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getFlowInstanceCollectionResources
     * @param domain  (required)
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFlowInstanceCollectionResourcesCall(String domain, UUID id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/runtime/{domain}/flow-instances/{id}/collection-resources"
            .replace("{" + "domain" + "}", localVarApiClient.escapeString(domain.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFlowInstanceCollectionResourcesValidateBeforeCall(String domain, UUID id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling getFlowInstanceCollectionResources(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getFlowInstanceCollectionResources(Async)");
        }

        return getFlowInstanceCollectionResourcesCall(domain, id, _callback);

    }

    /**
     * 
     * Returns all collection resource ids used by any flow step for a flow instance
     * @param domain  (required)
     * @param id  (required)
     * @return ListResponseString
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ListResponseString getFlowInstanceCollectionResources(String domain, UUID id) throws ApiException {
        ApiResponse<ListResponseString> localVarResp = getFlowInstanceCollectionResourcesWithHttpInfo(domain, id);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns all collection resource ids used by any flow step for a flow instance
     * @param domain  (required)
     * @param id  (required)
     * @return ApiResponse&lt;ListResponseString&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListResponseString> getFlowInstanceCollectionResourcesWithHttpInfo(String domain, UUID id) throws ApiException {
        okhttp3.Call localVarCall = getFlowInstanceCollectionResourcesValidateBeforeCall(domain, id, null);
        Type localVarReturnType = new TypeToken<ListResponseString>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns all collection resource ids used by any flow step for a flow instance
     * @param domain  (required)
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFlowInstanceCollectionResourcesAsync(String domain, UUID id, final ApiCallback<ListResponseString> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFlowInstanceCollectionResourcesValidateBeforeCall(domain, id, _callback);
        Type localVarReturnType = new TypeToken<ListResponseString>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getFlowInstanceInput
     * @param domain  (required)
     * @param id  (required)
     * @param download  (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFlowInstanceInputCall(String domain, UUID id, Boolean download, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/runtime/{domain}/flow-instances/{id}/input"
            .replace("{" + "domain" + "}", localVarApiClient.escapeString(domain.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (download != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("download", download));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFlowInstanceInputValidateBeforeCall(String domain, UUID id, Boolean download, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling getFlowInstanceInput(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getFlowInstanceInput(Async)");
        }

        return getFlowInstanceInputCall(domain, id, download, _callback);

    }

    /**
     * 
     * 
     * @param domain  (required)
     * @param id  (required)
     * @param download  (optional, default to false)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Object getFlowInstanceInput(String domain, UUID id, Boolean download) throws ApiException {
        ApiResponse<Object> localVarResp = getFlowInstanceInputWithHttpInfo(domain, id, download);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param domain  (required)
     * @param id  (required)
     * @param download  (optional, default to false)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getFlowInstanceInputWithHttpInfo(String domain, UUID id, Boolean download) throws ApiException {
        okhttp3.Call localVarCall = getFlowInstanceInputValidateBeforeCall(domain, id, download, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param domain  (required)
     * @param id  (required)
     * @param download  (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFlowInstanceInputAsync(String domain, UUID id, Boolean download, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFlowInstanceInputValidateBeforeCall(domain, id, download, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getFlowInstances
     * @param filterRequest The filter value is a semicolon delimited list of key value pairs. List values separate possible values with commas. Keys include: | filter name            | Filter value description                                                                               | |------------------------|--------------------------------------------------------------------------------------------------------| | ids                    | Match flow instances with ids in this comma-separated list.                                            | | flowModelId            | Match flow instances spawned from this flow model id (deprecated).                                     | | flowModelIds           | Match flow instances spawned from these flow model ids.(Note: When used along with flowModelId filter, ids from both filters are applied.)| | flowModelSnapshotIds   | Match flow instances spawned from any of these flow model snapshot ids.                                | | jobId                  | Match flow instances that ran as part of this job.                                                     | | externalId             | Match flow instances associated to this external id.                                                   | | statuses               | Match flow instances with any of these statuses. Possible values: canceled,started,complete,error,waiting,holding| | expiringDateStart      | Match flow instances expiring after this date. (yyyy-MM-dd format)                                     | | expiringDateEnd        | Match flow instances expiring before this date. (yyyy-MM-dd format)                                    | | flowModelTypes         | Match flow instances with any of these flow model types. Possible values: COMMUNICATION,ALERT,NOTIFICATION| | startDateStart         | Match flow instances started after this date. (yyyy-MM-dd format)                                      | | startDateEnd           | Match flow instances started before this date. (yyyy-MM-dd format)                                     | | endDateStart           | Match flow instances ended after this date. (yyyy-MM-dd format)                                        | | endDateEnd             | Match flow instances ended before this date. (yyyy-MM-dd format)                                       | | executingLongRunningOp | Match flow instances which are executing a long-running operation                                      | (required)
     * @param domain  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFlowInstancesCall(FlowInstanceFilterRequest filterRequest, String domain, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/runtime/{domain}/flow-instances"
            .replace("{" + "domain" + "}", localVarApiClient.escapeString(domain.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (filterRequest != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filterRequest", filterRequest));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFlowInstancesValidateBeforeCall(FlowInstanceFilterRequest filterRequest, String domain, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'filterRequest' is set
        if (filterRequest == null) {
            throw new ApiException("Missing the required parameter 'filterRequest' when calling getFlowInstances(Async)");
        }

        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling getFlowInstances(Async)");
        }

        return getFlowInstancesCall(filterRequest, domain, _callback);

    }

    /**
     * Get flow instances
     * Get all flow instances (no filter) or all the flow instances matching the filter. &lt;br/&gt;Filter example: filter&#x3D;statuses:complete,error;externalId:specialJob 
     * @param filterRequest The filter value is a semicolon delimited list of key value pairs. List values separate possible values with commas. Keys include: | filter name            | Filter value description                                                                               | |------------------------|--------------------------------------------------------------------------------------------------------| | ids                    | Match flow instances with ids in this comma-separated list.                                            | | flowModelId            | Match flow instances spawned from this flow model id (deprecated).                                     | | flowModelIds           | Match flow instances spawned from these flow model ids.(Note: When used along with flowModelId filter, ids from both filters are applied.)| | flowModelSnapshotIds   | Match flow instances spawned from any of these flow model snapshot ids.                                | | jobId                  | Match flow instances that ran as part of this job.                                                     | | externalId             | Match flow instances associated to this external id.                                                   | | statuses               | Match flow instances with any of these statuses. Possible values: canceled,started,complete,error,waiting,holding| | expiringDateStart      | Match flow instances expiring after this date. (yyyy-MM-dd format)                                     | | expiringDateEnd        | Match flow instances expiring before this date. (yyyy-MM-dd format)                                    | | flowModelTypes         | Match flow instances with any of these flow model types. Possible values: COMMUNICATION,ALERT,NOTIFICATION| | startDateStart         | Match flow instances started after this date. (yyyy-MM-dd format)                                      | | startDateEnd           | Match flow instances started before this date. (yyyy-MM-dd format)                                     | | endDateStart           | Match flow instances ended after this date. (yyyy-MM-dd format)                                        | | endDateEnd             | Match flow instances ended before this date. (yyyy-MM-dd format)                                       | | executingLongRunningOp | Match flow instances which are executing a long-running operation                                      | (required)
     * @param domain  (required)
     * @return PageResponseFlowInstance
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public PageResponseFlowInstance getFlowInstances(FlowInstanceFilterRequest filterRequest, String domain) throws ApiException {
        ApiResponse<PageResponseFlowInstance> localVarResp = getFlowInstancesWithHttpInfo(filterRequest, domain);
        return localVarResp.getData();
    }

    /**
     * Get flow instances
     * Get all flow instances (no filter) or all the flow instances matching the filter. &lt;br/&gt;Filter example: filter&#x3D;statuses:complete,error;externalId:specialJob 
     * @param filterRequest The filter value is a semicolon delimited list of key value pairs. List values separate possible values with commas. Keys include: | filter name            | Filter value description                                                                               | |------------------------|--------------------------------------------------------------------------------------------------------| | ids                    | Match flow instances with ids in this comma-separated list.                                            | | flowModelId            | Match flow instances spawned from this flow model id (deprecated).                                     | | flowModelIds           | Match flow instances spawned from these flow model ids.(Note: When used along with flowModelId filter, ids from both filters are applied.)| | flowModelSnapshotIds   | Match flow instances spawned from any of these flow model snapshot ids.                                | | jobId                  | Match flow instances that ran as part of this job.                                                     | | externalId             | Match flow instances associated to this external id.                                                   | | statuses               | Match flow instances with any of these statuses. Possible values: canceled,started,complete,error,waiting,holding| | expiringDateStart      | Match flow instances expiring after this date. (yyyy-MM-dd format)                                     | | expiringDateEnd        | Match flow instances expiring before this date. (yyyy-MM-dd format)                                    | | flowModelTypes         | Match flow instances with any of these flow model types. Possible values: COMMUNICATION,ALERT,NOTIFICATION| | startDateStart         | Match flow instances started after this date. (yyyy-MM-dd format)                                      | | startDateEnd           | Match flow instances started before this date. (yyyy-MM-dd format)                                     | | endDateStart           | Match flow instances ended after this date. (yyyy-MM-dd format)                                        | | endDateEnd             | Match flow instances ended before this date. (yyyy-MM-dd format)                                       | | executingLongRunningOp | Match flow instances which are executing a long-running operation                                      | (required)
     * @param domain  (required)
     * @return ApiResponse&lt;PageResponseFlowInstance&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PageResponseFlowInstance> getFlowInstancesWithHttpInfo(FlowInstanceFilterRequest filterRequest, String domain) throws ApiException {
        okhttp3.Call localVarCall = getFlowInstancesValidateBeforeCall(filterRequest, domain, null);
        Type localVarReturnType = new TypeToken<PageResponseFlowInstance>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get flow instances (asynchronously)
     * Get all flow instances (no filter) or all the flow instances matching the filter. &lt;br/&gt;Filter example: filter&#x3D;statuses:complete,error;externalId:specialJob 
     * @param filterRequest The filter value is a semicolon delimited list of key value pairs. List values separate possible values with commas. Keys include: | filter name            | Filter value description                                                                               | |------------------------|--------------------------------------------------------------------------------------------------------| | ids                    | Match flow instances with ids in this comma-separated list.                                            | | flowModelId            | Match flow instances spawned from this flow model id (deprecated).                                     | | flowModelIds           | Match flow instances spawned from these flow model ids.(Note: When used along with flowModelId filter, ids from both filters are applied.)| | flowModelSnapshotIds   | Match flow instances spawned from any of these flow model snapshot ids.                                | | jobId                  | Match flow instances that ran as part of this job.                                                     | | externalId             | Match flow instances associated to this external id.                                                   | | statuses               | Match flow instances with any of these statuses. Possible values: canceled,started,complete,error,waiting,holding| | expiringDateStart      | Match flow instances expiring after this date. (yyyy-MM-dd format)                                     | | expiringDateEnd        | Match flow instances expiring before this date. (yyyy-MM-dd format)                                    | | flowModelTypes         | Match flow instances with any of these flow model types. Possible values: COMMUNICATION,ALERT,NOTIFICATION| | startDateStart         | Match flow instances started after this date. (yyyy-MM-dd format)                                      | | startDateEnd           | Match flow instances started before this date. (yyyy-MM-dd format)                                     | | endDateStart           | Match flow instances ended after this date. (yyyy-MM-dd format)                                        | | endDateEnd             | Match flow instances ended before this date. (yyyy-MM-dd format)                                       | | executingLongRunningOp | Match flow instances which are executing a long-running operation                                      | (required)
     * @param domain  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFlowInstancesAsync(FlowInstanceFilterRequest filterRequest, String domain, final ApiCallback<PageResponseFlowInstance> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFlowInstancesValidateBeforeCall(filterRequest, domain, _callback);
        Type localVarReturnType = new TypeToken<PageResponseFlowInstance>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getFlowInstancesAndAssociatedJobs
     * @param domain  (required)
     * @param flowInstanceFilterRequest The filter value is a semicolon delimited list of key value pairs. List values separate possible values with commas. Keys include: | filter name            | Filter value description                                                                               | |------------------------|--------------------------------------------------------------------------------------------------------| | ids                    | Match flow instances with ids in this comma-separated list.                                            | | flowModelId            | Match flow instances spawned from this flow model id (deprecated).                                     | | flowModelIds           | Match flow instances spawned from these flow model ids.(Note: When used along with flowModelId filter, ids from both filters are applied.)| | flowModelSnapshotIds   | Match flow instances spawned from any of these flow model snapshot ids.                                | | jobId                  | Match flow instances that ran as part of this job.                                                     | | externalId             | Match flow instances associated to this external id.                                                   | | statuses               | Match flow instances with any of these statuses. Possible values: canceled,started,complete,error,waiting,holding| | expiringDateStart      | Match flow instances expiring after this date. (yyyy-MM-dd format)                                     | | expiringDateEnd        | Match flow instances expiring before this date. (yyyy-MM-dd format)                                    | | flowModelTypes         | Match flow instances with any of these flow model types. Possible values: COMMUNICATION,ALERT,NOTIFICATION| | startDateStart         | Match flow instances started after this date. (yyyy-MM-dd format)                                      | | startDateEnd           | Match flow instances started before this date. (yyyy-MM-dd format)                                     | | endDateStart           | Match flow instances ended after this date. (yyyy-MM-dd format)                                        | | endDateEnd             | Match flow instances ended before this date. (yyyy-MM-dd format)                                       | | executingLongRunningOp | Match flow instances which are executing a long-running operation                                      | (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFlowInstancesAndAssociatedJobsCall(String domain, FlowInstanceFilterRequest flowInstanceFilterRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = flowInstanceFilterRequest;

        // create path and map variables
        String localVarPath = "/api/v1/runtime/{domain}/flow-instances/associated-jobs"
            .replace("{" + "domain" + "}", localVarApiClient.escapeString(domain.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFlowInstancesAndAssociatedJobsValidateBeforeCall(String domain, FlowInstanceFilterRequest flowInstanceFilterRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling getFlowInstancesAndAssociatedJobs(Async)");
        }

        // verify the required parameter 'flowInstanceFilterRequest' is set
        if (flowInstanceFilterRequest == null) {
            throw new ApiException("Missing the required parameter 'flowInstanceFilterRequest' when calling getFlowInstancesAndAssociatedJobs(Async)");
        }

        return getFlowInstancesAndAssociatedJobsCall(domain, flowInstanceFilterRequest, _callback);

    }

    /**
     * 
     * 
     * @param domain  (required)
     * @param flowInstanceFilterRequest The filter value is a semicolon delimited list of key value pairs. List values separate possible values with commas. Keys include: | filter name            | Filter value description                                                                               | |------------------------|--------------------------------------------------------------------------------------------------------| | ids                    | Match flow instances with ids in this comma-separated list.                                            | | flowModelId            | Match flow instances spawned from this flow model id (deprecated).                                     | | flowModelIds           | Match flow instances spawned from these flow model ids.(Note: When used along with flowModelId filter, ids from both filters are applied.)| | flowModelSnapshotIds   | Match flow instances spawned from any of these flow model snapshot ids.                                | | jobId                  | Match flow instances that ran as part of this job.                                                     | | externalId             | Match flow instances associated to this external id.                                                   | | statuses               | Match flow instances with any of these statuses. Possible values: canceled,started,complete,error,waiting,holding| | expiringDateStart      | Match flow instances expiring after this date. (yyyy-MM-dd format)                                     | | expiringDateEnd        | Match flow instances expiring before this date. (yyyy-MM-dd format)                                    | | flowModelTypes         | Match flow instances with any of these flow model types. Possible values: COMMUNICATION,ALERT,NOTIFICATION| | startDateStart         | Match flow instances started after this date. (yyyy-MM-dd format)                                      | | startDateEnd           | Match flow instances started before this date. (yyyy-MM-dd format)                                     | | endDateStart           | Match flow instances ended after this date. (yyyy-MM-dd format)                                        | | endDateEnd             | Match flow instances ended before this date. (yyyy-MM-dd format)                                       | | executingLongRunningOp | Match flow instances which are executing a long-running operation                                      | (required)
     * @return DataResponseFlowInstancesAndAssociatedJobs
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public DataResponseFlowInstancesAndAssociatedJobs getFlowInstancesAndAssociatedJobs(String domain, FlowInstanceFilterRequest flowInstanceFilterRequest) throws ApiException {
        ApiResponse<DataResponseFlowInstancesAndAssociatedJobs> localVarResp = getFlowInstancesAndAssociatedJobsWithHttpInfo(domain, flowInstanceFilterRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param domain  (required)
     * @param flowInstanceFilterRequest The filter value is a semicolon delimited list of key value pairs. List values separate possible values with commas. Keys include: | filter name            | Filter value description                                                                               | |------------------------|--------------------------------------------------------------------------------------------------------| | ids                    | Match flow instances with ids in this comma-separated list.                                            | | flowModelId            | Match flow instances spawned from this flow model id (deprecated).                                     | | flowModelIds           | Match flow instances spawned from these flow model ids.(Note: When used along with flowModelId filter, ids from both filters are applied.)| | flowModelSnapshotIds   | Match flow instances spawned from any of these flow model snapshot ids.                                | | jobId                  | Match flow instances that ran as part of this job.                                                     | | externalId             | Match flow instances associated to this external id.                                                   | | statuses               | Match flow instances with any of these statuses. Possible values: canceled,started,complete,error,waiting,holding| | expiringDateStart      | Match flow instances expiring after this date. (yyyy-MM-dd format)                                     | | expiringDateEnd        | Match flow instances expiring before this date. (yyyy-MM-dd format)                                    | | flowModelTypes         | Match flow instances with any of these flow model types. Possible values: COMMUNICATION,ALERT,NOTIFICATION| | startDateStart         | Match flow instances started after this date. (yyyy-MM-dd format)                                      | | startDateEnd           | Match flow instances started before this date. (yyyy-MM-dd format)                                     | | endDateStart           | Match flow instances ended after this date. (yyyy-MM-dd format)                                        | | endDateEnd             | Match flow instances ended before this date. (yyyy-MM-dd format)                                       | | executingLongRunningOp | Match flow instances which are executing a long-running operation                                      | (required)
     * @return ApiResponse&lt;DataResponseFlowInstancesAndAssociatedJobs&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DataResponseFlowInstancesAndAssociatedJobs> getFlowInstancesAndAssociatedJobsWithHttpInfo(String domain, FlowInstanceFilterRequest flowInstanceFilterRequest) throws ApiException {
        okhttp3.Call localVarCall = getFlowInstancesAndAssociatedJobsValidateBeforeCall(domain, flowInstanceFilterRequest, null);
        Type localVarReturnType = new TypeToken<DataResponseFlowInstancesAndAssociatedJobs>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param domain  (required)
     * @param flowInstanceFilterRequest The filter value is a semicolon delimited list of key value pairs. List values separate possible values with commas. Keys include: | filter name            | Filter value description                                                                               | |------------------------|--------------------------------------------------------------------------------------------------------| | ids                    | Match flow instances with ids in this comma-separated list.                                            | | flowModelId            | Match flow instances spawned from this flow model id (deprecated).                                     | | flowModelIds           | Match flow instances spawned from these flow model ids.(Note: When used along with flowModelId filter, ids from both filters are applied.)| | flowModelSnapshotIds   | Match flow instances spawned from any of these flow model snapshot ids.                                | | jobId                  | Match flow instances that ran as part of this job.                                                     | | externalId             | Match flow instances associated to this external id.                                                   | | statuses               | Match flow instances with any of these statuses. Possible values: canceled,started,complete,error,waiting,holding| | expiringDateStart      | Match flow instances expiring after this date. (yyyy-MM-dd format)                                     | | expiringDateEnd        | Match flow instances expiring before this date. (yyyy-MM-dd format)                                    | | flowModelTypes         | Match flow instances with any of these flow model types. Possible values: COMMUNICATION,ALERT,NOTIFICATION| | startDateStart         | Match flow instances started after this date. (yyyy-MM-dd format)                                      | | startDateEnd           | Match flow instances started before this date. (yyyy-MM-dd format)                                     | | endDateStart           | Match flow instances ended after this date. (yyyy-MM-dd format)                                        | | endDateEnd             | Match flow instances ended before this date. (yyyy-MM-dd format)                                       | | executingLongRunningOp | Match flow instances which are executing a long-running operation                                      | (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFlowInstancesAndAssociatedJobsAsync(String domain, FlowInstanceFilterRequest flowInstanceFilterRequest, final ApiCallback<DataResponseFlowInstancesAndAssociatedJobs> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFlowInstancesAndAssociatedJobsValidateBeforeCall(domain, flowInstanceFilterRequest, _callback);
        Type localVarReturnType = new TypeToken<DataResponseFlowInstancesAndAssociatedJobs>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getFlowInstancesCounts
     * @param domain  (required)
     * @param flowInstanceCountsFilterRequest The filter value is a semicolon delimited list of key value pairs. List values separate possible values with commas. Keys include: | Filter name          | Filter value description                                                                                             | |----------------------|----------------------------------------------------------------------------------------------------------------------| | flowModelIds         | Match flow instances spawned from these flow model ids.                                                              | | startDateStart       | Match flow instances started after this date. (yyyy-MM-ddThh:mm:ss.SSSZ format)                                      | | startDateEnd         | Match flow instances started before this date. (yyyy-MM-ddThh:mm:ss.SSSZ format)                                     | | fillMissingData      | Populate any missing data between grouped data ranges. If data is not found, counts would be returned as 0           | (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFlowInstancesCountsCall(String domain, FlowInstanceCountsFilterRequest flowInstanceCountsFilterRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = flowInstanceCountsFilterRequest;

        // create path and map variables
        String localVarPath = "/api/v1/runtime/{domain}/flow-instances/counts"
            .replace("{" + "domain" + "}", localVarApiClient.escapeString(domain.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFlowInstancesCountsValidateBeforeCall(String domain, FlowInstanceCountsFilterRequest flowInstanceCountsFilterRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling getFlowInstancesCounts(Async)");
        }

        // verify the required parameter 'flowInstanceCountsFilterRequest' is set
        if (flowInstanceCountsFilterRequest == null) {
            throw new ApiException("Missing the required parameter 'flowInstanceCountsFilterRequest' when calling getFlowInstancesCounts(Async)");
        }

        return getFlowInstancesCountsCall(domain, flowInstanceCountsFilterRequest, _callback);

    }

    /**
     * Get flow instances counts
     * Get counts of flow instances grouped by start date and status. The counts will be automatically grouped by DAY/MONTH/YEAR based on available data.
     * @param domain  (required)
     * @param flowInstanceCountsFilterRequest The filter value is a semicolon delimited list of key value pairs. List values separate possible values with commas. Keys include: | Filter name          | Filter value description                                                                                             | |----------------------|----------------------------------------------------------------------------------------------------------------------| | flowModelIds         | Match flow instances spawned from these flow model ids.                                                              | | startDateStart       | Match flow instances started after this date. (yyyy-MM-ddThh:mm:ss.SSSZ format)                                      | | startDateEnd         | Match flow instances started before this date. (yyyy-MM-ddThh:mm:ss.SSSZ format)                                     | | fillMissingData      | Populate any missing data between grouped data ranges. If data is not found, counts would be returned as 0           | (required)
     * @return DataResponseMapObjectObject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public DataResponseMapObjectObject getFlowInstancesCounts(String domain, FlowInstanceCountsFilterRequest flowInstanceCountsFilterRequest) throws ApiException {
        ApiResponse<DataResponseMapObjectObject> localVarResp = getFlowInstancesCountsWithHttpInfo(domain, flowInstanceCountsFilterRequest);
        return localVarResp.getData();
    }

    /**
     * Get flow instances counts
     * Get counts of flow instances grouped by start date and status. The counts will be automatically grouped by DAY/MONTH/YEAR based on available data.
     * @param domain  (required)
     * @param flowInstanceCountsFilterRequest The filter value is a semicolon delimited list of key value pairs. List values separate possible values with commas. Keys include: | Filter name          | Filter value description                                                                                             | |----------------------|----------------------------------------------------------------------------------------------------------------------| | flowModelIds         | Match flow instances spawned from these flow model ids.                                                              | | startDateStart       | Match flow instances started after this date. (yyyy-MM-ddThh:mm:ss.SSSZ format)                                      | | startDateEnd         | Match flow instances started before this date. (yyyy-MM-ddThh:mm:ss.SSSZ format)                                     | | fillMissingData      | Populate any missing data between grouped data ranges. If data is not found, counts would be returned as 0           | (required)
     * @return ApiResponse&lt;DataResponseMapObjectObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DataResponseMapObjectObject> getFlowInstancesCountsWithHttpInfo(String domain, FlowInstanceCountsFilterRequest flowInstanceCountsFilterRequest) throws ApiException {
        okhttp3.Call localVarCall = getFlowInstancesCountsValidateBeforeCall(domain, flowInstanceCountsFilterRequest, null);
        Type localVarReturnType = new TypeToken<DataResponseMapObjectObject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get flow instances counts (asynchronously)
     * Get counts of flow instances grouped by start date and status. The counts will be automatically grouped by DAY/MONTH/YEAR based on available data.
     * @param domain  (required)
     * @param flowInstanceCountsFilterRequest The filter value is a semicolon delimited list of key value pairs. List values separate possible values with commas. Keys include: | Filter name          | Filter value description                                                                                             | |----------------------|----------------------------------------------------------------------------------------------------------------------| | flowModelIds         | Match flow instances spawned from these flow model ids.                                                              | | startDateStart       | Match flow instances started after this date. (yyyy-MM-ddThh:mm:ss.SSSZ format)                                      | | startDateEnd         | Match flow instances started before this date. (yyyy-MM-ddThh:mm:ss.SSSZ format)                                     | | fillMissingData      | Populate any missing data between grouped data ranges. If data is not found, counts would be returned as 0           | (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFlowInstancesCountsAsync(String domain, FlowInstanceCountsFilterRequest flowInstanceCountsFilterRequest, final ApiCallback<DataResponseMapObjectObject> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFlowInstancesCountsValidateBeforeCall(domain, flowInstanceCountsFilterRequest, _callback);
        Type localVarReturnType = new TypeToken<DataResponseMapObjectObject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getFlowModelSnapshot
     * @param domain  (required)
     * @param snapshotId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFlowModelSnapshotCall(String domain, UUID snapshotId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/runtime/{domain}/flow-model-snapshots/{snapshotId}"
            .replace("{" + "domain" + "}", localVarApiClient.escapeString(domain.toString()))
            .replace("{" + "snapshotId" + "}", localVarApiClient.escapeString(snapshotId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFlowModelSnapshotValidateBeforeCall(String domain, UUID snapshotId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling getFlowModelSnapshot(Async)");
        }

        // verify the required parameter 'snapshotId' is set
        if (snapshotId == null) {
            throw new ApiException("Missing the required parameter 'snapshotId' when calling getFlowModelSnapshot(Async)");
        }

        return getFlowModelSnapshotCall(domain, snapshotId, _callback);

    }

    /**
     * 
     * 
     * @param domain  (required)
     * @param snapshotId  (required)
     * @return DataResponseFlowModelSnapshot
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public DataResponseFlowModelSnapshot getFlowModelSnapshot(String domain, UUID snapshotId) throws ApiException {
        ApiResponse<DataResponseFlowModelSnapshot> localVarResp = getFlowModelSnapshotWithHttpInfo(domain, snapshotId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param domain  (required)
     * @param snapshotId  (required)
     * @return ApiResponse&lt;DataResponseFlowModelSnapshot&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DataResponseFlowModelSnapshot> getFlowModelSnapshotWithHttpInfo(String domain, UUID snapshotId) throws ApiException {
        okhttp3.Call localVarCall = getFlowModelSnapshotValidateBeforeCall(domain, snapshotId, null);
        Type localVarReturnType = new TypeToken<DataResponseFlowModelSnapshot>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param domain  (required)
     * @param snapshotId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFlowModelSnapshotAsync(String domain, UUID snapshotId, final ApiCallback<DataResponseFlowModelSnapshot> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFlowModelSnapshotValidateBeforeCall(domain, snapshotId, _callback);
        Type localVarReturnType = new TypeToken<DataResponseFlowModelSnapshot>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getFlowModelSnapshots
     * @param domain  (required)
     * @param filterRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFlowModelSnapshotsCall(String domain, FlowModelSnapshotFilterRequest filterRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/runtime/{domain}/flow-model-snapshots"
            .replace("{" + "domain" + "}", localVarApiClient.escapeString(domain.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (filterRequest != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filterRequest", filterRequest));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFlowModelSnapshotsValidateBeforeCall(String domain, FlowModelSnapshotFilterRequest filterRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling getFlowModelSnapshots(Async)");
        }

        // verify the required parameter 'filterRequest' is set
        if (filterRequest == null) {
            throw new ApiException("Missing the required parameter 'filterRequest' when calling getFlowModelSnapshots(Async)");
        }

        return getFlowModelSnapshotsCall(domain, filterRequest, _callback);

    }

    /**
     * 
     * 
     * @param domain  (required)
     * @param filterRequest  (required)
     * @return PageResponseFlowModelSnapshot
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public PageResponseFlowModelSnapshot getFlowModelSnapshots(String domain, FlowModelSnapshotFilterRequest filterRequest) throws ApiException {
        ApiResponse<PageResponseFlowModelSnapshot> localVarResp = getFlowModelSnapshotsWithHttpInfo(domain, filterRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param domain  (required)
     * @param filterRequest  (required)
     * @return ApiResponse&lt;PageResponseFlowModelSnapshot&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PageResponseFlowModelSnapshot> getFlowModelSnapshotsWithHttpInfo(String domain, FlowModelSnapshotFilterRequest filterRequest) throws ApiException {
        okhttp3.Call localVarCall = getFlowModelSnapshotsValidateBeforeCall(domain, filterRequest, null);
        Type localVarReturnType = new TypeToken<PageResponseFlowModelSnapshot>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param domain  (required)
     * @param filterRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFlowModelSnapshotsAsync(String domain, FlowModelSnapshotFilterRequest filterRequest, final ApiCallback<PageResponseFlowModelSnapshot> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFlowModelSnapshotsValidateBeforeCall(domain, filterRequest, _callback);
        Type localVarReturnType = new TypeToken<PageResponseFlowModelSnapshot>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getFlowStep
     * @param domain  (required)
     * @param id  (required)
     * @param checkArtifacts  (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFlowStepCall(String domain, UUID id, Boolean checkArtifacts, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/runtime/{domain}/flow-steps/{id}"
            .replace("{" + "domain" + "}", localVarApiClient.escapeString(domain.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (checkArtifacts != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("checkArtifacts", checkArtifacts));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFlowStepValidateBeforeCall(String domain, UUID id, Boolean checkArtifacts, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling getFlowStep(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getFlowStep(Async)");
        }

        return getFlowStepCall(domain, id, checkArtifacts, _callback);

    }

    /**
     * 
     * 
     * @param domain  (required)
     * @param id  (required)
     * @param checkArtifacts  (optional, default to false)
     * @return DataResponseFlowStep
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public DataResponseFlowStep getFlowStep(String domain, UUID id, Boolean checkArtifacts) throws ApiException {
        ApiResponse<DataResponseFlowStep> localVarResp = getFlowStepWithHttpInfo(domain, id, checkArtifacts);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param domain  (required)
     * @param id  (required)
     * @param checkArtifacts  (optional, default to false)
     * @return ApiResponse&lt;DataResponseFlowStep&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DataResponseFlowStep> getFlowStepWithHttpInfo(String domain, UUID id, Boolean checkArtifacts) throws ApiException {
        okhttp3.Call localVarCall = getFlowStepValidateBeforeCall(domain, id, checkArtifacts, null);
        Type localVarReturnType = new TypeToken<DataResponseFlowStep>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param domain  (required)
     * @param id  (required)
     * @param checkArtifacts  (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFlowStepAsync(String domain, UUID id, Boolean checkArtifacts, final ApiCallback<DataResponseFlowStep> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFlowStepValidateBeforeCall(domain, id, checkArtifacts, _callback);
        Type localVarReturnType = new TypeToken<DataResponseFlowStep>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getFlowStepCollectionResources
     * @param domain  (required)
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFlowStepCollectionResourcesCall(String domain, UUID id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/runtime/{domain}/flow-steps/{id}/collection-resources"
            .replace("{" + "domain" + "}", localVarApiClient.escapeString(domain.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFlowStepCollectionResourcesValidateBeforeCall(String domain, UUID id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling getFlowStepCollectionResources(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getFlowStepCollectionResources(Async)");
        }

        return getFlowStepCollectionResourcesCall(domain, id, _callback);

    }

    /**
     * 
     * Returns all collection resource ids used by the specified flow step
     * @param domain  (required)
     * @param id  (required)
     * @return ListResponseString
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ListResponseString getFlowStepCollectionResources(String domain, UUID id) throws ApiException {
        ApiResponse<ListResponseString> localVarResp = getFlowStepCollectionResourcesWithHttpInfo(domain, id);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns all collection resource ids used by the specified flow step
     * @param domain  (required)
     * @param id  (required)
     * @return ApiResponse&lt;ListResponseString&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListResponseString> getFlowStepCollectionResourcesWithHttpInfo(String domain, UUID id) throws ApiException {
        okhttp3.Call localVarCall = getFlowStepCollectionResourcesValidateBeforeCall(domain, id, null);
        Type localVarReturnType = new TypeToken<ListResponseString>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns all collection resource ids used by the specified flow step
     * @param domain  (required)
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFlowStepCollectionResourcesAsync(String domain, UUID id, final ApiCallback<ListResponseString> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFlowStepCollectionResourcesValidateBeforeCall(domain, id, _callback);
        Type localVarReturnType = new TypeToken<ListResponseString>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getFlowStepDeliveryFile
     * @param domain  (required)
     * @param id  (required)
     * @param download  (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFlowStepDeliveryFileCall(String domain, UUID id, Boolean download, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/runtime/{domain}/flow-steps/{id}/delivery-file"
            .replace("{" + "domain" + "}", localVarApiClient.escapeString(domain.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (download != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("download", download));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFlowStepDeliveryFileValidateBeforeCall(String domain, UUID id, Boolean download, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling getFlowStepDeliveryFile(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getFlowStepDeliveryFile(Async)");
        }

        return getFlowStepDeliveryFileCall(domain, id, download, _callback);

    }

    /**
     * 
     * 
     * @param domain  (required)
     * @param id  (required)
     * @param download  (optional, default to false)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Object getFlowStepDeliveryFile(String domain, UUID id, Boolean download) throws ApiException {
        ApiResponse<Object> localVarResp = getFlowStepDeliveryFileWithHttpInfo(domain, id, download);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param domain  (required)
     * @param id  (required)
     * @param download  (optional, default to false)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getFlowStepDeliveryFileWithHttpInfo(String domain, UUID id, Boolean download) throws ApiException {
        okhttp3.Call localVarCall = getFlowStepDeliveryFileValidateBeforeCall(domain, id, download, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param domain  (required)
     * @param id  (required)
     * @param download  (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFlowStepDeliveryFileAsync(String domain, UUID id, Boolean download, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFlowStepDeliveryFileValidateBeforeCall(domain, id, download, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getFlowStepFlow
     * @param domain  (required)
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFlowStepFlowCall(String domain, UUID id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/runtime/{domain}/flow-steps/{id}/flow"
            .replace("{" + "domain" + "}", localVarApiClient.escapeString(domain.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFlowStepFlowValidateBeforeCall(String domain, UUID id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling getFlowStepFlow(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getFlowStepFlow(Async)");
        }

        return getFlowStepFlowCall(domain, id, _callback);

    }

    /**
     * 
     * 
     * @param domain  (required)
     * @param id  (required)
     * @return DataResponseFlowStepFlow
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public DataResponseFlowStepFlow getFlowStepFlow(String domain, UUID id) throws ApiException {
        ApiResponse<DataResponseFlowStepFlow> localVarResp = getFlowStepFlowWithHttpInfo(domain, id);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param domain  (required)
     * @param id  (required)
     * @return ApiResponse&lt;DataResponseFlowStepFlow&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DataResponseFlowStepFlow> getFlowStepFlowWithHttpInfo(String domain, UUID id) throws ApiException {
        okhttp3.Call localVarCall = getFlowStepFlowValidateBeforeCall(domain, id, null);
        Type localVarReturnType = new TypeToken<DataResponseFlowStepFlow>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param domain  (required)
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFlowStepFlowAsync(String domain, UUID id, final ApiCallback<DataResponseFlowStepFlow> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFlowStepFlowValidateBeforeCall(domain, id, _callback);
        Type localVarReturnType = new TypeToken<DataResponseFlowStepFlow>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getFlowStepMessageFile
     * @param domain  (required)
     * @param id  (required)
     * @param download  (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFlowStepMessageFileCall(String domain, UUID id, Boolean download, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/runtime/{domain}/flow-steps/{id}/message-file"
            .replace("{" + "domain" + "}", localVarApiClient.escapeString(domain.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (download != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("download", download));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFlowStepMessageFileValidateBeforeCall(String domain, UUID id, Boolean download, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling getFlowStepMessageFile(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getFlowStepMessageFile(Async)");
        }

        return getFlowStepMessageFileCall(domain, id, download, _callback);

    }

    /**
     * 
     * 
     * @param domain  (required)
     * @param id  (required)
     * @param download  (optional, default to false)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Object getFlowStepMessageFile(String domain, UUID id, Boolean download) throws ApiException {
        ApiResponse<Object> localVarResp = getFlowStepMessageFileWithHttpInfo(domain, id, download);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param domain  (required)
     * @param id  (required)
     * @param download  (optional, default to false)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getFlowStepMessageFileWithHttpInfo(String domain, UUID id, Boolean download) throws ApiException {
        okhttp3.Call localVarCall = getFlowStepMessageFileValidateBeforeCall(domain, id, download, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param domain  (required)
     * @param id  (required)
     * @param download  (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFlowStepMessageFileAsync(String domain, UUID id, Boolean download, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFlowStepMessageFileValidateBeforeCall(domain, id, download, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getFlowSteps
     * @param filterRequest The filter value is a semicolon delimited list of key value pairs. List values separate possible values with commas. Keys include: | filter name             | Filter value description                                                                       | |-------------------------|------------------------------------------------------------------------------------------------| | ids                     | Match flow steps with ids in this comma-separated list.                                        | | stepName                | Match resources with this stepName                                                             | | externalId              | Match flow steps associated to this external id.                                               | | previousStepId          | Match flow steps having this flow step as previous step id                                     | | flowInstanceId          | Match flow steps belonging to this flow instance                                               | | caseSensitive           | Specify if searches (stepName, displayName, externalId) are case sensitive or not.             | | statuses                | Match flow steps with any of these statuses. Possible values: canceled,created,waiting,holding,started,executed,complete,error| | stepTypes               | Match flow steps with any of these types. Possible values: input,communication,output,decider,processor,delay,hold,externalFlow,aggregator| | startDateStart          | Match flow steps started after this date. (yyyy-MM-dd format)                                  | | startDateEnd            | Match flow steps started before this date. (yyyy-MM-dd format)                                 | | endDateStart            | Match flow steps ended after this date. (yyyy-MM-dd format)                                    | | endDateEnd              | Match flow steps ended before this date. (yyyy-MM-dd format)                                   | | expiringDateStart       | Match flow steps expiring after this date. (yyyy-MM-dd format)                                 | | expiringDateEnd         | Match flow steps expiring before this date. (yyyy-MM-dd format)                                | | queueDateStart          | Match flow steps started after this date. (yyyy-MM-dd format)                                  | | queueDateEnd            | Match flow steps started before this date. (yyyy-MM-dd format)                                 | | executeDateStart        | Match flow steps ended after this date. (yyyy-MM-dd format)                                    | | executeDateEnd          | Match flow steps ended before this date. (yyyy-MM-dd format)                                   | | deliveryFileRetrievable | Match flow steps that have retrievable delivery files                                          | | displayName             | Match flow steps with this display name                                                        | (required)
     * @param domain  (required)
     * @param checkArtifacts  (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFlowStepsCall(FlowStepFilterRequest filterRequest, String domain, Boolean checkArtifacts, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/runtime/{domain}/flow-steps"
            .replace("{" + "domain" + "}", localVarApiClient.escapeString(domain.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (filterRequest != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filterRequest", filterRequest));
        }

        if (checkArtifacts != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("checkArtifacts", checkArtifacts));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFlowStepsValidateBeforeCall(FlowStepFilterRequest filterRequest, String domain, Boolean checkArtifacts, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'filterRequest' is set
        if (filterRequest == null) {
            throw new ApiException("Missing the required parameter 'filterRequest' when calling getFlowSteps(Async)");
        }

        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling getFlowSteps(Async)");
        }

        return getFlowStepsCall(filterRequest, domain, checkArtifacts, _callback);

    }

    /**
     * Get flow steps
     * Get all flow steps in the domain (no filter) or all the flow steps matching the filter. &lt;br/&gt;Filter example: name:FileInput;statuses:complete,error
     * @param filterRequest The filter value is a semicolon delimited list of key value pairs. List values separate possible values with commas. Keys include: | filter name             | Filter value description                                                                       | |-------------------------|------------------------------------------------------------------------------------------------| | ids                     | Match flow steps with ids in this comma-separated list.                                        | | stepName                | Match resources with this stepName                                                             | | externalId              | Match flow steps associated to this external id.                                               | | previousStepId          | Match flow steps having this flow step as previous step id                                     | | flowInstanceId          | Match flow steps belonging to this flow instance                                               | | caseSensitive           | Specify if searches (stepName, displayName, externalId) are case sensitive or not.             | | statuses                | Match flow steps with any of these statuses. Possible values: canceled,created,waiting,holding,started,executed,complete,error| | stepTypes               | Match flow steps with any of these types. Possible values: input,communication,output,decider,processor,delay,hold,externalFlow,aggregator| | startDateStart          | Match flow steps started after this date. (yyyy-MM-dd format)                                  | | startDateEnd            | Match flow steps started before this date. (yyyy-MM-dd format)                                 | | endDateStart            | Match flow steps ended after this date. (yyyy-MM-dd format)                                    | | endDateEnd              | Match flow steps ended before this date. (yyyy-MM-dd format)                                   | | expiringDateStart       | Match flow steps expiring after this date. (yyyy-MM-dd format)                                 | | expiringDateEnd         | Match flow steps expiring before this date. (yyyy-MM-dd format)                                | | queueDateStart          | Match flow steps started after this date. (yyyy-MM-dd format)                                  | | queueDateEnd            | Match flow steps started before this date. (yyyy-MM-dd format)                                 | | executeDateStart        | Match flow steps ended after this date. (yyyy-MM-dd format)                                    | | executeDateEnd          | Match flow steps ended before this date. (yyyy-MM-dd format)                                   | | deliveryFileRetrievable | Match flow steps that have retrievable delivery files                                          | | displayName             | Match flow steps with this display name                                                        | (required)
     * @param domain  (required)
     * @param checkArtifacts  (optional, default to false)
     * @return PageResponseFlowStep
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public PageResponseFlowStep getFlowSteps(FlowStepFilterRequest filterRequest, String domain, Boolean checkArtifacts) throws ApiException {
        ApiResponse<PageResponseFlowStep> localVarResp = getFlowStepsWithHttpInfo(filterRequest, domain, checkArtifacts);
        return localVarResp.getData();
    }

    /**
     * Get flow steps
     * Get all flow steps in the domain (no filter) or all the flow steps matching the filter. &lt;br/&gt;Filter example: name:FileInput;statuses:complete,error
     * @param filterRequest The filter value is a semicolon delimited list of key value pairs. List values separate possible values with commas. Keys include: | filter name             | Filter value description                                                                       | |-------------------------|------------------------------------------------------------------------------------------------| | ids                     | Match flow steps with ids in this comma-separated list.                                        | | stepName                | Match resources with this stepName                                                             | | externalId              | Match flow steps associated to this external id.                                               | | previousStepId          | Match flow steps having this flow step as previous step id                                     | | flowInstanceId          | Match flow steps belonging to this flow instance                                               | | caseSensitive           | Specify if searches (stepName, displayName, externalId) are case sensitive or not.             | | statuses                | Match flow steps with any of these statuses. Possible values: canceled,created,waiting,holding,started,executed,complete,error| | stepTypes               | Match flow steps with any of these types. Possible values: input,communication,output,decider,processor,delay,hold,externalFlow,aggregator| | startDateStart          | Match flow steps started after this date. (yyyy-MM-dd format)                                  | | startDateEnd            | Match flow steps started before this date. (yyyy-MM-dd format)                                 | | endDateStart            | Match flow steps ended after this date. (yyyy-MM-dd format)                                    | | endDateEnd              | Match flow steps ended before this date. (yyyy-MM-dd format)                                   | | expiringDateStart       | Match flow steps expiring after this date. (yyyy-MM-dd format)                                 | | expiringDateEnd         | Match flow steps expiring before this date. (yyyy-MM-dd format)                                | | queueDateStart          | Match flow steps started after this date. (yyyy-MM-dd format)                                  | | queueDateEnd            | Match flow steps started before this date. (yyyy-MM-dd format)                                 | | executeDateStart        | Match flow steps ended after this date. (yyyy-MM-dd format)                                    | | executeDateEnd          | Match flow steps ended before this date. (yyyy-MM-dd format)                                   | | deliveryFileRetrievable | Match flow steps that have retrievable delivery files                                          | | displayName             | Match flow steps with this display name                                                        | (required)
     * @param domain  (required)
     * @param checkArtifacts  (optional, default to false)
     * @return ApiResponse&lt;PageResponseFlowStep&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PageResponseFlowStep> getFlowStepsWithHttpInfo(FlowStepFilterRequest filterRequest, String domain, Boolean checkArtifacts) throws ApiException {
        okhttp3.Call localVarCall = getFlowStepsValidateBeforeCall(filterRequest, domain, checkArtifacts, null);
        Type localVarReturnType = new TypeToken<PageResponseFlowStep>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get flow steps (asynchronously)
     * Get all flow steps in the domain (no filter) or all the flow steps matching the filter. &lt;br/&gt;Filter example: name:FileInput;statuses:complete,error
     * @param filterRequest The filter value is a semicolon delimited list of key value pairs. List values separate possible values with commas. Keys include: | filter name             | Filter value description                                                                       | |-------------------------|------------------------------------------------------------------------------------------------| | ids                     | Match flow steps with ids in this comma-separated list.                                        | | stepName                | Match resources with this stepName                                                             | | externalId              | Match flow steps associated to this external id.                                               | | previousStepId          | Match flow steps having this flow step as previous step id                                     | | flowInstanceId          | Match flow steps belonging to this flow instance                                               | | caseSensitive           | Specify if searches (stepName, displayName, externalId) are case sensitive or not.             | | statuses                | Match flow steps with any of these statuses. Possible values: canceled,created,waiting,holding,started,executed,complete,error| | stepTypes               | Match flow steps with any of these types. Possible values: input,communication,output,decider,processor,delay,hold,externalFlow,aggregator| | startDateStart          | Match flow steps started after this date. (yyyy-MM-dd format)                                  | | startDateEnd            | Match flow steps started before this date. (yyyy-MM-dd format)                                 | | endDateStart            | Match flow steps ended after this date. (yyyy-MM-dd format)                                    | | endDateEnd              | Match flow steps ended before this date. (yyyy-MM-dd format)                                   | | expiringDateStart       | Match flow steps expiring after this date. (yyyy-MM-dd format)                                 | | expiringDateEnd         | Match flow steps expiring before this date. (yyyy-MM-dd format)                                | | queueDateStart          | Match flow steps started after this date. (yyyy-MM-dd format)                                  | | queueDateEnd            | Match flow steps started before this date. (yyyy-MM-dd format)                                 | | executeDateStart        | Match flow steps ended after this date. (yyyy-MM-dd format)                                    | | executeDateEnd          | Match flow steps ended before this date. (yyyy-MM-dd format)                                   | | deliveryFileRetrievable | Match flow steps that have retrievable delivery files                                          | | displayName             | Match flow steps with this display name                                                        | (required)
     * @param domain  (required)
     * @param checkArtifacts  (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFlowStepsAsync(FlowStepFilterRequest filterRequest, String domain, Boolean checkArtifacts, final ApiCallback<PageResponseFlowStep> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFlowStepsValidateBeforeCall(filterRequest, domain, checkArtifacts, _callback);
        Type localVarReturnType = new TypeToken<PageResponseFlowStep>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getJob
     * @param domain  (required)
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getJobCall(String domain, UUID id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/runtime/{domain}/jobs/{id}"
            .replace("{" + "domain" + "}", localVarApiClient.escapeString(domain.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getJobValidateBeforeCall(String domain, UUID id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling getJob(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getJob(Async)");
        }

        return getJobCall(domain, id, _callback);

    }

    /**
     * 
     * 
     * @param domain  (required)
     * @param id  (required)
     * @return DataResponseJob
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public DataResponseJob getJob(String domain, UUID id) throws ApiException {
        ApiResponse<DataResponseJob> localVarResp = getJobWithHttpInfo(domain, id);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param domain  (required)
     * @param id  (required)
     * @return ApiResponse&lt;DataResponseJob&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DataResponseJob> getJobWithHttpInfo(String domain, UUID id) throws ApiException {
        okhttp3.Call localVarCall = getJobValidateBeforeCall(domain, id, null);
        Type localVarReturnType = new TypeToken<DataResponseJob>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param domain  (required)
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getJobAsync(String domain, UUID id, final ApiCallback<DataResponseJob> _callback) throws ApiException {

        okhttp3.Call localVarCall = getJobValidateBeforeCall(domain, id, _callback);
        Type localVarReturnType = new TypeToken<DataResponseJob>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getJobs
     * @param filterRequest The filter value is a semicolon delimited list of key value pairs. List values separate possible values with commas. In deletion, if ids are used as key, the other keys are ignored. Keys include: | filter name             | Filter value description                                                                           | |-------------------------|----------------------------------------------------------------------------------------------------| | ids                     | Match jobs with ids in this comma-separated list. For deletion, the maximum number of ids is 100   | | channel                 | Match jobs using this channel                                                                      | | externalId              | Match jobs associated to this external id.                                                         | | triggeredBy             | Match jobs triggered by this user                                                                  | | statuses                | Match jobs with any of these statuses. Possible values: started,complete,error,waiting,holding,canceled,deleted| | startDateStart          | Match jobs started after this date. (yyyy-MM-dd format)                                            | | startDateEnd            | Match jobs started before this date. (yyyy-MM-dd format)                                           | | endDateStart            | Match jobs ended after this date. (yyyy-MM-dd format)                                              | | endDateEnd              | Match jobs ended before this date. (yyyy-MM-dd format)                                             | | expiringDateStart       | Match jobs expiring after this date. (yyyy-MM-dd format)                                           | | expiringDateEnd         | Match jobs expiring before this date. (yyyy-MM-dd format)                                          | | mode                    | Match jobs with modes in this list. Modes include: BATCH,ONDEMAND                      | | aggregatedFMCSnapshotIds| Match jobs with any of these aggregated flow context snapshot ids.                                 | | flowModelTypes          | Match jobs with any of these flowModelTypes. Possible values:COMMUNICATION,ALERT      | (required)
     * @param domain  (required)
     * @param fetchDeleted Show deleted jobs. If set to true, other states are ignored and only deleted jobs are returned. (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getJobsCall(JobFilterRequest filterRequest, String domain, Boolean fetchDeleted, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/runtime/{domain}/jobs"
            .replace("{" + "domain" + "}", localVarApiClient.escapeString(domain.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (filterRequest != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filterRequest", filterRequest));
        }

        if (fetchDeleted != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fetchDeleted", fetchDeleted));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getJobsValidateBeforeCall(JobFilterRequest filterRequest, String domain, Boolean fetchDeleted, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'filterRequest' is set
        if (filterRequest == null) {
            throw new ApiException("Missing the required parameter 'filterRequest' when calling getJobs(Async)");
        }

        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling getJobs(Async)");
        }

        return getJobsCall(filterRequest, domain, fetchDeleted, _callback);

    }

    /**
     * Get jobs
     * Get all jobs (no filter) or all the jobs matching the filter. &lt;br/&gt;Filter example: filter&#x3D;mode:BATCH;statuses:complete,error 
     * @param filterRequest The filter value is a semicolon delimited list of key value pairs. List values separate possible values with commas. In deletion, if ids are used as key, the other keys are ignored. Keys include: | filter name             | Filter value description                                                                           | |-------------------------|----------------------------------------------------------------------------------------------------| | ids                     | Match jobs with ids in this comma-separated list. For deletion, the maximum number of ids is 100   | | channel                 | Match jobs using this channel                                                                      | | externalId              | Match jobs associated to this external id.                                                         | | triggeredBy             | Match jobs triggered by this user                                                                  | | statuses                | Match jobs with any of these statuses. Possible values: started,complete,error,waiting,holding,canceled,deleted| | startDateStart          | Match jobs started after this date. (yyyy-MM-dd format)                                            | | startDateEnd            | Match jobs started before this date. (yyyy-MM-dd format)                                           | | endDateStart            | Match jobs ended after this date. (yyyy-MM-dd format)                                              | | endDateEnd              | Match jobs ended before this date. (yyyy-MM-dd format)                                             | | expiringDateStart       | Match jobs expiring after this date. (yyyy-MM-dd format)                                           | | expiringDateEnd         | Match jobs expiring before this date. (yyyy-MM-dd format)                                          | | mode                    | Match jobs with modes in this list. Modes include: BATCH,ONDEMAND                      | | aggregatedFMCSnapshotIds| Match jobs with any of these aggregated flow context snapshot ids.                                 | | flowModelTypes          | Match jobs with any of these flowModelTypes. Possible values:COMMUNICATION,ALERT      | (required)
     * @param domain  (required)
     * @param fetchDeleted Show deleted jobs. If set to true, other states are ignored and only deleted jobs are returned. (optional, default to false)
     * @return PageResponseJob
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public PageResponseJob getJobs(JobFilterRequest filterRequest, String domain, Boolean fetchDeleted) throws ApiException {
        ApiResponse<PageResponseJob> localVarResp = getJobsWithHttpInfo(filterRequest, domain, fetchDeleted);
        return localVarResp.getData();
    }

    /**
     * Get jobs
     * Get all jobs (no filter) or all the jobs matching the filter. &lt;br/&gt;Filter example: filter&#x3D;mode:BATCH;statuses:complete,error 
     * @param filterRequest The filter value is a semicolon delimited list of key value pairs. List values separate possible values with commas. In deletion, if ids are used as key, the other keys are ignored. Keys include: | filter name             | Filter value description                                                                           | |-------------------------|----------------------------------------------------------------------------------------------------| | ids                     | Match jobs with ids in this comma-separated list. For deletion, the maximum number of ids is 100   | | channel                 | Match jobs using this channel                                                                      | | externalId              | Match jobs associated to this external id.                                                         | | triggeredBy             | Match jobs triggered by this user                                                                  | | statuses                | Match jobs with any of these statuses. Possible values: started,complete,error,waiting,holding,canceled,deleted| | startDateStart          | Match jobs started after this date. (yyyy-MM-dd format)                                            | | startDateEnd            | Match jobs started before this date. (yyyy-MM-dd format)                                           | | endDateStart            | Match jobs ended after this date. (yyyy-MM-dd format)                                              | | endDateEnd              | Match jobs ended before this date. (yyyy-MM-dd format)                                             | | expiringDateStart       | Match jobs expiring after this date. (yyyy-MM-dd format)                                           | | expiringDateEnd         | Match jobs expiring before this date. (yyyy-MM-dd format)                                          | | mode                    | Match jobs with modes in this list. Modes include: BATCH,ONDEMAND                      | | aggregatedFMCSnapshotIds| Match jobs with any of these aggregated flow context snapshot ids.                                 | | flowModelTypes          | Match jobs with any of these flowModelTypes. Possible values:COMMUNICATION,ALERT      | (required)
     * @param domain  (required)
     * @param fetchDeleted Show deleted jobs. If set to true, other states are ignored and only deleted jobs are returned. (optional, default to false)
     * @return ApiResponse&lt;PageResponseJob&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PageResponseJob> getJobsWithHttpInfo(JobFilterRequest filterRequest, String domain, Boolean fetchDeleted) throws ApiException {
        okhttp3.Call localVarCall = getJobsValidateBeforeCall(filterRequest, domain, fetchDeleted, null);
        Type localVarReturnType = new TypeToken<PageResponseJob>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get jobs (asynchronously)
     * Get all jobs (no filter) or all the jobs matching the filter. &lt;br/&gt;Filter example: filter&#x3D;mode:BATCH;statuses:complete,error 
     * @param filterRequest The filter value is a semicolon delimited list of key value pairs. List values separate possible values with commas. In deletion, if ids are used as key, the other keys are ignored. Keys include: | filter name             | Filter value description                                                                           | |-------------------------|----------------------------------------------------------------------------------------------------| | ids                     | Match jobs with ids in this comma-separated list. For deletion, the maximum number of ids is 100   | | channel                 | Match jobs using this channel                                                                      | | externalId              | Match jobs associated to this external id.                                                         | | triggeredBy             | Match jobs triggered by this user                                                                  | | statuses                | Match jobs with any of these statuses. Possible values: started,complete,error,waiting,holding,canceled,deleted| | startDateStart          | Match jobs started after this date. (yyyy-MM-dd format)                                            | | startDateEnd            | Match jobs started before this date. (yyyy-MM-dd format)                                           | | endDateStart            | Match jobs ended after this date. (yyyy-MM-dd format)                                              | | endDateEnd              | Match jobs ended before this date. (yyyy-MM-dd format)                                             | | expiringDateStart       | Match jobs expiring after this date. (yyyy-MM-dd format)                                           | | expiringDateEnd         | Match jobs expiring before this date. (yyyy-MM-dd format)                                          | | mode                    | Match jobs with modes in this list. Modes include: BATCH,ONDEMAND                      | | aggregatedFMCSnapshotIds| Match jobs with any of these aggregated flow context snapshot ids.                                 | | flowModelTypes          | Match jobs with any of these flowModelTypes. Possible values:COMMUNICATION,ALERT      | (required)
     * @param domain  (required)
     * @param fetchDeleted Show deleted jobs. If set to true, other states are ignored and only deleted jobs are returned. (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getJobsAsync(JobFilterRequest filterRequest, String domain, Boolean fetchDeleted, final ApiCallback<PageResponseJob> _callback) throws ApiException {

        okhttp3.Call localVarCall = getJobsValidateBeforeCall(filterRequest, domain, fetchDeleted, _callback);
        Type localVarReturnType = new TypeToken<PageResponseJob>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for releaseHoldingFlowInstances
     * @param domain Domain id (required)
     * @param id Flow instance id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call releaseHoldingFlowInstancesCall(String domain, UUID id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/runtime/{domain}/flow-instances/{id}/release"
            .replace("{" + "domain" + "}", localVarApiClient.escapeString(domain.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call releaseHoldingFlowInstancesValidateBeforeCall(String domain, UUID id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling releaseHoldingFlowInstances(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling releaseHoldingFlowInstances(Async)");
        }

        return releaseHoldingFlowInstancesCall(domain, id, _callback);

    }

    /**
     * Continue a held flow instance
     * Release a flow instance in holding state.
     * @param domain Domain id (required)
     * @param id Flow instance id (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public String releaseHoldingFlowInstances(String domain, UUID id) throws ApiException {
        ApiResponse<String> localVarResp = releaseHoldingFlowInstancesWithHttpInfo(domain, id);
        return localVarResp.getData();
    }

    /**
     * Continue a held flow instance
     * Release a flow instance in holding state.
     * @param domain Domain id (required)
     * @param id Flow instance id (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> releaseHoldingFlowInstancesWithHttpInfo(String domain, UUID id) throws ApiException {
        okhttp3.Call localVarCall = releaseHoldingFlowInstancesValidateBeforeCall(domain, id, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Continue a held flow instance (asynchronously)
     * Release a flow instance in holding state.
     * @param domain Domain id (required)
     * @param id Flow instance id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call releaseHoldingFlowInstancesAsync(String domain, UUID id, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = releaseHoldingFlowInstancesValidateBeforeCall(domain, id, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for releaseHoldingFlowStep
     * @param domain Domain id (required)
     * @param id Flow step id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call releaseHoldingFlowStepCall(String domain, UUID id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/runtime/{domain}/flow-steps/{id}/release"
            .replace("{" + "domain" + "}", localVarApiClient.escapeString(domain.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call releaseHoldingFlowStepValidateBeforeCall(String domain, UUID id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling releaseHoldingFlowStep(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling releaseHoldingFlowStep(Async)");
        }

        return releaseHoldingFlowStepCall(domain, id, _callback);

    }

    /**
     * Continue a held flow step
     * Release a flow step in holding state.
     * @param domain Domain id (required)
     * @param id Flow step id (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public String releaseHoldingFlowStep(String domain, UUID id) throws ApiException {
        ApiResponse<String> localVarResp = releaseHoldingFlowStepWithHttpInfo(domain, id);
        return localVarResp.getData();
    }

    /**
     * Continue a held flow step
     * Release a flow step in holding state.
     * @param domain Domain id (required)
     * @param id Flow step id (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> releaseHoldingFlowStepWithHttpInfo(String domain, UUID id) throws ApiException {
        okhttp3.Call localVarCall = releaseHoldingFlowStepValidateBeforeCall(domain, id, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Continue a held flow step (asynchronously)
     * Release a flow step in holding state.
     * @param domain Domain id (required)
     * @param id Flow step id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call releaseHoldingFlowStepAsync(String domain, UUID id, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = releaseHoldingFlowStepValidateBeforeCall(domain, id, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reprocessJob
     * @param domain Domain id (required)
     * @param id Job id (required)
     * @param useCurrentFlowModel Use current flow model (instead of the one stored in the job) (optional, default to false)
     * @param useCurrentFlowContext Use current flow context (instead of the one stored in the job (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reprocessJobCall(String domain, UUID id, Boolean useCurrentFlowModel, Boolean useCurrentFlowContext, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/runtime/{domain}/jobs/{id}/reprocessing"
            .replace("{" + "domain" + "}", localVarApiClient.escapeString(domain.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (useCurrentFlowModel != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("useCurrentFlowModel", useCurrentFlowModel));
        }

        if (useCurrentFlowContext != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("useCurrentFlowContext", useCurrentFlowContext));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reprocessJobValidateBeforeCall(String domain, UUID id, Boolean useCurrentFlowModel, Boolean useCurrentFlowContext, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling reprocessJob(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling reprocessJob(Async)");
        }

        return reprocessJobCall(domain, id, useCurrentFlowModel, useCurrentFlowContext, _callback);

    }

    /**
     * Reprocess job
     * Reprocess the job with the specified id, optionally using the current flow model and/or the current flow context
     * @param domain Domain id (required)
     * @param id Job id (required)
     * @param useCurrentFlowModel Use current flow model (instead of the one stored in the job) (optional, default to false)
     * @param useCurrentFlowContext Use current flow context (instead of the one stored in the job (optional, default to false)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public String reprocessJob(String domain, UUID id, Boolean useCurrentFlowModel, Boolean useCurrentFlowContext) throws ApiException {
        ApiResponse<String> localVarResp = reprocessJobWithHttpInfo(domain, id, useCurrentFlowModel, useCurrentFlowContext);
        return localVarResp.getData();
    }

    /**
     * Reprocess job
     * Reprocess the job with the specified id, optionally using the current flow model and/or the current flow context
     * @param domain Domain id (required)
     * @param id Job id (required)
     * @param useCurrentFlowModel Use current flow model (instead of the one stored in the job) (optional, default to false)
     * @param useCurrentFlowContext Use current flow context (instead of the one stored in the job (optional, default to false)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> reprocessJobWithHttpInfo(String domain, UUID id, Boolean useCurrentFlowModel, Boolean useCurrentFlowContext) throws ApiException {
        okhttp3.Call localVarCall = reprocessJobValidateBeforeCall(domain, id, useCurrentFlowModel, useCurrentFlowContext, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Reprocess job (asynchronously)
     * Reprocess the job with the specified id, optionally using the current flow model and/or the current flow context
     * @param domain Domain id (required)
     * @param id Job id (required)
     * @param useCurrentFlowModel Use current flow model (instead of the one stored in the job) (optional, default to false)
     * @param useCurrentFlowContext Use current flow context (instead of the one stored in the job (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reprocessJobAsync(String domain, UUID id, Boolean useCurrentFlowModel, Boolean useCurrentFlowContext, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = reprocessJobValidateBeforeCall(domain, id, useCurrentFlowModel, useCurrentFlowContext, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for startPostSortJob
     * @param domain Domain id (required)
     * @param postSortRunOption    | Run setting            | description                                                                                           | |------------------------|-------------------------------------------------------------------------------------------------------| | flowModelId            | Select sorting assets matching flow model id.                                                         | | appConsolidation       | Consolidate multiple communications.                                                                  | | dryRun                 | Dry run                                                                                               | | externalId             | Set externalID on the job for this post-sort run.                                                     | | customerList           | Select individual list of customer numbers or ranges of numbers to be processed in post-sort run.     | | postSortQueueName      | Set post-sort queue to use in this post-sort run. If not specified, all post-sort queues will be included in the run.|   | Sort asset filter name |Filter value description                                                                               | |------------------------|-------------------------------------------------------------------------------------------------------| | ids                    | Filter sorting assets matching sorting index ids.                                                     | | jobIds                 | Filter sorting assets matching job ids.                                                               | | flowStepIds            | Filter sorting assets matching flow step ids.                                                         | | communicationIds       | Filter sorting assets matching communication ids.                                                     | | queueNames             | Filter sorting assets matching pre-sort queue name                                                     (Note: Only first entry of list is currently supported for post-sort run).       | | externalIds            | Filter sorting assets matching external ids.                                                          | | creationDateStart      | Filter sorting assets created after this date (yyyy-MM-dd format or elapsed period in negative days). | | creationDateEnd        | Filter sorting assets created before this date (yyyy-MM-dd format or elapsed period in negative days).| (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Post sort run(s) triggered. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Validation failure. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Domain not found or flow model not found in domain. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call startPostSortJobCall(String domain, PostSortRunOption postSortRunOption, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = postSortRunOption;

        // create path and map variables
        String localVarPath = "/api/v1/runtime/{domain}/jobs/post-sort"
            .replace("{" + "domain" + "}", localVarApiClient.escapeString(domain.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call startPostSortJobValidateBeforeCall(String domain, PostSortRunOption postSortRunOption, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling startPostSortJob(Async)");
        }

        // verify the required parameter 'postSortRunOption' is set
        if (postSortRunOption == null) {
            throw new ApiException("Missing the required parameter 'postSortRunOption' when calling startPostSortJob(Async)");
        }

        return startPostSortJobCall(domain, postSortRunOption, _callback);

    }

    /**
     * Trigger post-sort run
     * Trigger a post-sort related job
     * @param domain Domain id (required)
     * @param postSortRunOption    | Run setting            | description                                                                                           | |------------------------|-------------------------------------------------------------------------------------------------------| | flowModelId            | Select sorting assets matching flow model id.                                                         | | appConsolidation       | Consolidate multiple communications.                                                                  | | dryRun                 | Dry run                                                                                               | | externalId             | Set externalID on the job for this post-sort run.                                                     | | customerList           | Select individual list of customer numbers or ranges of numbers to be processed in post-sort run.     | | postSortQueueName      | Set post-sort queue to use in this post-sort run. If not specified, all post-sort queues will be included in the run.|   | Sort asset filter name |Filter value description                                                                               | |------------------------|-------------------------------------------------------------------------------------------------------| | ids                    | Filter sorting assets matching sorting index ids.                                                     | | jobIds                 | Filter sorting assets matching job ids.                                                               | | flowStepIds            | Filter sorting assets matching flow step ids.                                                         | | communicationIds       | Filter sorting assets matching communication ids.                                                     | | queueNames             | Filter sorting assets matching pre-sort queue name                                                     (Note: Only first entry of list is currently supported for post-sort run).       | | externalIds            | Filter sorting assets matching external ids.                                                          | | creationDateStart      | Filter sorting assets created after this date (yyyy-MM-dd format or elapsed period in negative days). | | creationDateEnd        | Filter sorting assets created before this date (yyyy-MM-dd format or elapsed period in negative days).| (required)
     * @return GenericResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Post sort run(s) triggered. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Validation failure. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Domain not found or flow model not found in domain. </td><td>  -  </td></tr>
     </table>
     */
    public GenericResponse startPostSortJob(String domain, PostSortRunOption postSortRunOption) throws ApiException {
        ApiResponse<GenericResponse> localVarResp = startPostSortJobWithHttpInfo(domain, postSortRunOption);
        return localVarResp.getData();
    }

    /**
     * Trigger post-sort run
     * Trigger a post-sort related job
     * @param domain Domain id (required)
     * @param postSortRunOption    | Run setting            | description                                                                                           | |------------------------|-------------------------------------------------------------------------------------------------------| | flowModelId            | Select sorting assets matching flow model id.                                                         | | appConsolidation       | Consolidate multiple communications.                                                                  | | dryRun                 | Dry run                                                                                               | | externalId             | Set externalID on the job for this post-sort run.                                                     | | customerList           | Select individual list of customer numbers or ranges of numbers to be processed in post-sort run.     | | postSortQueueName      | Set post-sort queue to use in this post-sort run. If not specified, all post-sort queues will be included in the run.|   | Sort asset filter name |Filter value description                                                                               | |------------------------|-------------------------------------------------------------------------------------------------------| | ids                    | Filter sorting assets matching sorting index ids.                                                     | | jobIds                 | Filter sorting assets matching job ids.                                                               | | flowStepIds            | Filter sorting assets matching flow step ids.                                                         | | communicationIds       | Filter sorting assets matching communication ids.                                                     | | queueNames             | Filter sorting assets matching pre-sort queue name                                                     (Note: Only first entry of list is currently supported for post-sort run).       | | externalIds            | Filter sorting assets matching external ids.                                                          | | creationDateStart      | Filter sorting assets created after this date (yyyy-MM-dd format or elapsed period in negative days). | | creationDateEnd        | Filter sorting assets created before this date (yyyy-MM-dd format or elapsed period in negative days).| (required)
     * @return ApiResponse&lt;GenericResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Post sort run(s) triggered. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Validation failure. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Domain not found or flow model not found in domain. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GenericResponse> startPostSortJobWithHttpInfo(String domain, PostSortRunOption postSortRunOption) throws ApiException {
        okhttp3.Call localVarCall = startPostSortJobValidateBeforeCall(domain, postSortRunOption, null);
        Type localVarReturnType = new TypeToken<GenericResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Trigger post-sort run (asynchronously)
     * Trigger a post-sort related job
     * @param domain Domain id (required)
     * @param postSortRunOption    | Run setting            | description                                                                                           | |------------------------|-------------------------------------------------------------------------------------------------------| | flowModelId            | Select sorting assets matching flow model id.                                                         | | appConsolidation       | Consolidate multiple communications.                                                                  | | dryRun                 | Dry run                                                                                               | | externalId             | Set externalID on the job for this post-sort run.                                                     | | customerList           | Select individual list of customer numbers or ranges of numbers to be processed in post-sort run.     | | postSortQueueName      | Set post-sort queue to use in this post-sort run. If not specified, all post-sort queues will be included in the run.|   | Sort asset filter name |Filter value description                                                                               | |------------------------|-------------------------------------------------------------------------------------------------------| | ids                    | Filter sorting assets matching sorting index ids.                                                     | | jobIds                 | Filter sorting assets matching job ids.                                                               | | flowStepIds            | Filter sorting assets matching flow step ids.                                                         | | communicationIds       | Filter sorting assets matching communication ids.                                                     | | queueNames             | Filter sorting assets matching pre-sort queue name                                                     (Note: Only first entry of list is currently supported for post-sort run).       | | externalIds            | Filter sorting assets matching external ids.                                                          | | creationDateStart      | Filter sorting assets created after this date (yyyy-MM-dd format or elapsed period in negative days). | | creationDateEnd        | Filter sorting assets created before this date (yyyy-MM-dd format or elapsed period in negative days).| (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Post sort run(s) triggered. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Validation failure. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Domain not found or flow model not found in domain. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call startPostSortJobAsync(String domain, PostSortRunOption postSortRunOption, final ApiCallback<GenericResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = startPostSortJobValidateBeforeCall(domain, postSortRunOption, _callback);
        Type localVarReturnType = new TypeToken<GenericResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for stopFlowInstance
     * @param domain Domain id (required)
     * @param id Flow instance id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stopFlowInstanceCall(String domain, UUID id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/runtime/{domain}/flow-instances/{id}/stop"
            .replace("{" + "domain" + "}", localVarApiClient.escapeString(domain.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call stopFlowInstanceValidateBeforeCall(String domain, UUID id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling stopFlowInstance(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling stopFlowInstance(Async)");
        }

        return stopFlowInstanceCall(domain, id, _callback);

    }

    /**
     * Cancel flow instance
     * Stop a running flow instance entry (including all flow steps) in runtime database.
     * @param domain Domain id (required)
     * @param id Flow instance id (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public String stopFlowInstance(String domain, UUID id) throws ApiException {
        ApiResponse<String> localVarResp = stopFlowInstanceWithHttpInfo(domain, id);
        return localVarResp.getData();
    }

    /**
     * Cancel flow instance
     * Stop a running flow instance entry (including all flow steps) in runtime database.
     * @param domain Domain id (required)
     * @param id Flow instance id (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> stopFlowInstanceWithHttpInfo(String domain, UUID id) throws ApiException {
        okhttp3.Call localVarCall = stopFlowInstanceValidateBeforeCall(domain, id, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Cancel flow instance (asynchronously)
     * Stop a running flow instance entry (including all flow steps) in runtime database.
     * @param domain Domain id (required)
     * @param id Flow instance id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stopFlowInstanceAsync(String domain, UUID id, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = stopFlowInstanceValidateBeforeCall(domain, id, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for stopFlowStep
     * @param domain Domain id (required)
     * @param id Flow step id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stopFlowStepCall(String domain, UUID id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/runtime/{domain}/flow-steps/{id}/stop"
            .replace("{" + "domain" + "}", localVarApiClient.escapeString(domain.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call stopFlowStepValidateBeforeCall(String domain, UUID id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling stopFlowStep(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling stopFlowStep(Async)");
        }

        return stopFlowStepCall(domain, id, _callback);

    }

    /**
     * Cancel flow step
     * Stop a running flow step in runtime database.
     * @param domain Domain id (required)
     * @param id Flow step id (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public String stopFlowStep(String domain, UUID id) throws ApiException {
        ApiResponse<String> localVarResp = stopFlowStepWithHttpInfo(domain, id);
        return localVarResp.getData();
    }

    /**
     * Cancel flow step
     * Stop a running flow step in runtime database.
     * @param domain Domain id (required)
     * @param id Flow step id (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> stopFlowStepWithHttpInfo(String domain, UUID id) throws ApiException {
        okhttp3.Call localVarCall = stopFlowStepValidateBeforeCall(domain, id, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Cancel flow step (asynchronously)
     * Stop a running flow step in runtime database.
     * @param domain Domain id (required)
     * @param id Flow step id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stopFlowStepAsync(String domain, UUID id, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = stopFlowStepValidateBeforeCall(domain, id, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for stopJob
     * @param domain Domain id (required)
     * @param id Job id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stopJobCall(String domain, UUID id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/runtime/{domain}/jobs/{id}/stop"
            .replace("{" + "domain" + "}", localVarApiClient.escapeString(domain.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call stopJobValidateBeforeCall(String domain, UUID id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling stopJob(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling stopJob(Async)");
        }

        return stopJobCall(domain, id, _callback);

    }

    /**
     * Cancel job
     * Stop a running job entry (including all flow instances) in runtime database.
     * @param domain Domain id (required)
     * @param id Job id (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public String stopJob(String domain, UUID id) throws ApiException {
        ApiResponse<String> localVarResp = stopJobWithHttpInfo(domain, id);
        return localVarResp.getData();
    }

    /**
     * Cancel job
     * Stop a running job entry (including all flow instances) in runtime database.
     * @param domain Domain id (required)
     * @param id Job id (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> stopJobWithHttpInfo(String domain, UUID id) throws ApiException {
        okhttp3.Call localVarCall = stopJobValidateBeforeCall(domain, id, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Cancel job (asynchronously)
     * Stop a running job entry (including all flow instances) in runtime database.
     * @param domain Domain id (required)
     * @param id Job id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stopJobAsync(String domain, UUID id, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = stopJobValidateBeforeCall(domain, id, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
