/*
 * Exstream Orchestration
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.DataResponseDeletableResource;
import org.openapitools.client.model.DataResponseTenantFlowmodel;
import org.openapitools.client.model.FlowObjectsRequest;
import org.openapitools.client.model.GenericResponse;
import org.openapitools.client.model.ListResponseTenantFlowmodel;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class FlowModelControllerApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public FlowModelControllerApi() {
        this(Configuration.getDefaultApiClient());
    }

    public FlowModelControllerApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for isDeletable
     * @param domain Domain id (required)
     * @param flowModelId Flow model id (required)
     * @param version Specify version (optional). If omitted, any version will match. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Says whether the flow model can be safely deleted or not </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call isDeletableCall(String domain, UUID flowModelId, Integer version, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/flow-models/{domain}/{flowModelId}/deletable"
            .replace("{" + "domain" + "}", localVarApiClient.escapeString(domain.toString()))
            .replace("{" + "flowModelId" + "}", localVarApiClient.escapeString(flowModelId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("version", version));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call isDeletableValidateBeforeCall(String domain, UUID flowModelId, Integer version, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling isDeletable(Async)");
        }

        // verify the required parameter 'flowModelId' is set
        if (flowModelId == null) {
            throw new ApiException("Missing the required parameter 'flowModelId' when calling isDeletable(Async)");
        }

        return isDeletableCall(domain, flowModelId, version, _callback);

    }

    /**
     * Says whether this flow model can be safely deleted
     * It will not be deletable if it is published in at least one domain, maybe one to which the user has no access
     * @param domain Domain id (required)
     * @param flowModelId Flow model id (required)
     * @param version Specify version (optional). If omitted, any version will match. (optional)
     * @return DataResponseDeletableResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Says whether the flow model can be safely deleted or not </td><td>  -  </td></tr>
     </table>
     */
    public DataResponseDeletableResource isDeletable(String domain, UUID flowModelId, Integer version) throws ApiException {
        ApiResponse<DataResponseDeletableResource> localVarResp = isDeletableWithHttpInfo(domain, flowModelId, version);
        return localVarResp.getData();
    }

    /**
     * Says whether this flow model can be safely deleted
     * It will not be deletable if it is published in at least one domain, maybe one to which the user has no access
     * @param domain Domain id (required)
     * @param flowModelId Flow model id (required)
     * @param version Specify version (optional). If omitted, any version will match. (optional)
     * @return ApiResponse&lt;DataResponseDeletableResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Says whether the flow model can be safely deleted or not </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DataResponseDeletableResource> isDeletableWithHttpInfo(String domain, UUID flowModelId, Integer version) throws ApiException {
        okhttp3.Call localVarCall = isDeletableValidateBeforeCall(domain, flowModelId, version, null);
        Type localVarReturnType = new TypeToken<DataResponseDeletableResource>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Says whether this flow model can be safely deleted (asynchronously)
     * It will not be deletable if it is published in at least one domain, maybe one to which the user has no access
     * @param domain Domain id (required)
     * @param flowModelId Flow model id (required)
     * @param version Specify version (optional). If omitted, any version will match. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Says whether the flow model can be safely deleted or not </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call isDeletableAsync(String domain, UUID flowModelId, Integer version, final ApiCallback<DataResponseDeletableResource> _callback) throws ApiException {

        okhttp3.Call localVarCall = isDeletableValidateBeforeCall(domain, flowModelId, version, _callback);
        Type localVarReturnType = new TypeToken<DataResponseDeletableResource>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listPublished
     * @param domain Domain id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of published flow models, the list may be empty </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listPublishedCall(String domain, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/flow-models/{domain}/published"
            .replace("{" + "domain" + "}", localVarApiClient.escapeString(domain.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listPublishedValidateBeforeCall(String domain, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling listPublished(Async)");
        }

        return listPublishedCall(domain, _callback);

    }

    /**
     * List published flow models
     * Get a list of current published flow models in this orchestration runtime environment context.&lt;br /&gt;&lt;b&gt;Version 20.4.0:&lt;/b&gt; Flow model &#39;&lt;i&gt;version&lt;/i&gt;&#39; property changed from datatype string to integer in response body.
     * @param domain Domain id (required)
     * @return ListResponseTenantFlowmodel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of published flow models, the list may be empty </td><td>  -  </td></tr>
     </table>
     */
    public ListResponseTenantFlowmodel listPublished(String domain) throws ApiException {
        ApiResponse<ListResponseTenantFlowmodel> localVarResp = listPublishedWithHttpInfo(domain);
        return localVarResp.getData();
    }

    /**
     * List published flow models
     * Get a list of current published flow models in this orchestration runtime environment context.&lt;br /&gt;&lt;b&gt;Version 20.4.0:&lt;/b&gt; Flow model &#39;&lt;i&gt;version&lt;/i&gt;&#39; property changed from datatype string to integer in response body.
     * @param domain Domain id (required)
     * @return ApiResponse&lt;ListResponseTenantFlowmodel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of published flow models, the list may be empty </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListResponseTenantFlowmodel> listPublishedWithHttpInfo(String domain) throws ApiException {
        okhttp3.Call localVarCall = listPublishedValidateBeforeCall(domain, null);
        Type localVarReturnType = new TypeToken<ListResponseTenantFlowmodel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List published flow models (asynchronously)
     * Get a list of current published flow models in this orchestration runtime environment context.&lt;br /&gt;&lt;b&gt;Version 20.4.0:&lt;/b&gt; Flow model &#39;&lt;i&gt;version&lt;/i&gt;&#39; property changed from datatype string to integer in response body.
     * @param domain Domain id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of published flow models, the list may be empty </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listPublishedAsync(String domain, final ApiCallback<ListResponseTenantFlowmodel> _callback) throws ApiException {

        okhttp3.Call localVarCall = listPublishedValidateBeforeCall(domain, _callback);
        Type localVarReturnType = new TypeToken<ListResponseTenantFlowmodel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for publish
     * @param domain Domain id (required)
     * @param flowModelId Flow model id (required)
     * @param version Specify version (optional). If omitted, latest version will be published. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Flow model published successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Flow model not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call publishCall(String domain, UUID flowModelId, Integer version, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/flow-models/{domain}/{flowModelId}/publish"
            .replace("{" + "domain" + "}", localVarApiClient.escapeString(domain.toString()))
            .replace("{" + "flowModelId" + "}", localVarApiClient.escapeString(flowModelId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("version", version));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call publishValidateBeforeCall(String domain, UUID flowModelId, Integer version, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling publish(Async)");
        }

        // verify the required parameter 'flowModelId' is set
        if (flowModelId == null) {
            throw new ApiException("Missing the required parameter 'flowModelId' when calling publish(Async)");
        }

        return publishCall(domain, flowModelId, version, _callback);

    }

    /**
     * Publish flow model
     * Publish specified flow model version to orchestration runtime environment. &lt;br /&gt;&lt;b&gt;Version 20.4.0:&lt;/b&gt; Flow model &#39;&lt;i&gt;version&lt;/i&gt;&#39; property changed from datatype string to integer in response body.
     * @param domain Domain id (required)
     * @param flowModelId Flow model id (required)
     * @param version Specify version (optional). If omitted, latest version will be published. (optional)
     * @return DataResponseTenantFlowmodel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Flow model published successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Flow model not found </td><td>  -  </td></tr>
     </table>
     */
    public DataResponseTenantFlowmodel publish(String domain, UUID flowModelId, Integer version) throws ApiException {
        ApiResponse<DataResponseTenantFlowmodel> localVarResp = publishWithHttpInfo(domain, flowModelId, version);
        return localVarResp.getData();
    }

    /**
     * Publish flow model
     * Publish specified flow model version to orchestration runtime environment. &lt;br /&gt;&lt;b&gt;Version 20.4.0:&lt;/b&gt; Flow model &#39;&lt;i&gt;version&lt;/i&gt;&#39; property changed from datatype string to integer in response body.
     * @param domain Domain id (required)
     * @param flowModelId Flow model id (required)
     * @param version Specify version (optional). If omitted, latest version will be published. (optional)
     * @return ApiResponse&lt;DataResponseTenantFlowmodel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Flow model published successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Flow model not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DataResponseTenantFlowmodel> publishWithHttpInfo(String domain, UUID flowModelId, Integer version) throws ApiException {
        okhttp3.Call localVarCall = publishValidateBeforeCall(domain, flowModelId, version, null);
        Type localVarReturnType = new TypeToken<DataResponseTenantFlowmodel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Publish flow model (asynchronously)
     * Publish specified flow model version to orchestration runtime environment. &lt;br /&gt;&lt;b&gt;Version 20.4.0:&lt;/b&gt; Flow model &#39;&lt;i&gt;version&lt;/i&gt;&#39; property changed from datatype string to integer in response body.
     * @param domain Domain id (required)
     * @param flowModelId Flow model id (required)
     * @param version Specify version (optional). If omitted, latest version will be published. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Flow model published successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Flow model not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call publishAsync(String domain, UUID flowModelId, Integer version, final ApiCallback<DataResponseTenantFlowmodel> _callback) throws ApiException {

        okhttp3.Call localVarCall = publishValidateBeforeCall(domain, flowModelId, version, _callback);
        Type localVarReturnType = new TypeToken<DataResponseTenantFlowmodel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for unpublish
     * @param domain Domain id (required)
     * @param flowModelId Flow model id (required)
     * @param version Specify version (optional). If omitted, latest version will be unpublished. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Flow model published successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Flow model not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call unpublishCall(String domain, UUID flowModelId, Integer version, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/flow-models/{domain}/{flowModelId}/unpublish"
            .replace("{" + "domain" + "}", localVarApiClient.escapeString(domain.toString()))
            .replace("{" + "flowModelId" + "}", localVarApiClient.escapeString(flowModelId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("version", version));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call unpublishValidateBeforeCall(String domain, UUID flowModelId, Integer version, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling unpublish(Async)");
        }

        // verify the required parameter 'flowModelId' is set
        if (flowModelId == null) {
            throw new ApiException("Missing the required parameter 'flowModelId' when calling unpublish(Async)");
        }

        return unpublishCall(domain, flowModelId, version, _callback);

    }

    /**
     * Unpublish flow model
     * Unpublish specified flow model version from orchestration runtime environment. 
     * @param domain Domain id (required)
     * @param flowModelId Flow model id (required)
     * @param version Specify version (optional). If omitted, latest version will be unpublished. (optional)
     * @return GenericResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Flow model published successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Flow model not found </td><td>  -  </td></tr>
     </table>
     */
    public GenericResponse unpublish(String domain, UUID flowModelId, Integer version) throws ApiException {
        ApiResponse<GenericResponse> localVarResp = unpublishWithHttpInfo(domain, flowModelId, version);
        return localVarResp.getData();
    }

    /**
     * Unpublish flow model
     * Unpublish specified flow model version from orchestration runtime environment. 
     * @param domain Domain id (required)
     * @param flowModelId Flow model id (required)
     * @param version Specify version (optional). If omitted, latest version will be unpublished. (optional)
     * @return ApiResponse&lt;GenericResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Flow model published successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Flow model not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GenericResponse> unpublishWithHttpInfo(String domain, UUID flowModelId, Integer version) throws ApiException {
        okhttp3.Call localVarCall = unpublishValidateBeforeCall(domain, flowModelId, version, null);
        Type localVarReturnType = new TypeToken<GenericResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Unpublish flow model (asynchronously)
     * Unpublish specified flow model version from orchestration runtime environment. 
     * @param domain Domain id (required)
     * @param flowModelId Flow model id (required)
     * @param version Specify version (optional). If omitted, latest version will be unpublished. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Flow model published successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Flow model not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call unpublishAsync(String domain, UUID flowModelId, Integer version, final ApiCallback<GenericResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = unpublishValidateBeforeCall(domain, flowModelId, version, _callback);
        Type localVarReturnType = new TypeToken<GenericResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for unpublish1
     * @param domain Domain id (required)
     * @param flowObjectsRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call unpublish1Call(String domain, FlowObjectsRequest flowObjectsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = flowObjectsRequest;

        // create path and map variables
        String localVarPath = "/api/v1/flow-models/{domain}/unpublish"
            .replace("{" + "domain" + "}", localVarApiClient.escapeString(domain.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call unpublish1ValidateBeforeCall(String domain, FlowObjectsRequest flowObjectsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling unpublish1(Async)");
        }

        // verify the required parameter 'flowObjectsRequest' is set
        if (flowObjectsRequest == null) {
            throw new ApiException("Missing the required parameter 'flowObjectsRequest' when calling unpublish1(Async)");
        }

        return unpublish1Call(domain, flowObjectsRequest, _callback);

    }

    /**
     * Unpublish list of flow models
     * Unpublish specified flow models version from orchestration runtime environment. 
     * @param domain Domain id (required)
     * @param flowObjectsRequest  (required)
     * @return GenericResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public GenericResponse unpublish1(String domain, FlowObjectsRequest flowObjectsRequest) throws ApiException {
        ApiResponse<GenericResponse> localVarResp = unpublish1WithHttpInfo(domain, flowObjectsRequest);
        return localVarResp.getData();
    }

    /**
     * Unpublish list of flow models
     * Unpublish specified flow models version from orchestration runtime environment. 
     * @param domain Domain id (required)
     * @param flowObjectsRequest  (required)
     * @return ApiResponse&lt;GenericResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GenericResponse> unpublish1WithHttpInfo(String domain, FlowObjectsRequest flowObjectsRequest) throws ApiException {
        okhttp3.Call localVarCall = unpublish1ValidateBeforeCall(domain, flowObjectsRequest, null);
        Type localVarReturnType = new TypeToken<GenericResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Unpublish list of flow models (asynchronously)
     * Unpublish specified flow models version from orchestration runtime environment. 
     * @param domain Domain id (required)
     * @param flowObjectsRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call unpublish1Async(String domain, FlowObjectsRequest flowObjectsRequest, final ApiCallback<GenericResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = unpublish1ValidateBeforeCall(domain, flowObjectsRequest, _callback);
        Type localVarReturnType = new TypeToken<GenericResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
