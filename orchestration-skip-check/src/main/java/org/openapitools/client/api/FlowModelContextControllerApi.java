/*
 * Exstream Orchestration
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.DataResponseDeletableResource;
import org.openapitools.client.model.DataResponseFlowModelContextSnapshot;
import org.openapitools.client.model.FlowModelContextFilterRequest;
import org.openapitools.client.model.FlowObjectsRequest;
import org.openapitools.client.model.GenericResponse;
import org.openapitools.client.model.ListResponseFlowModelContextSnapshot;
import org.openapitools.client.model.PageResponseFlowModelContextSnapshot;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class FlowModelContextControllerApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public FlowModelContextControllerApi() {
        this(Configuration.getDefaultApiClient());
    }

    public FlowModelContextControllerApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getFilteredContexts
     * @param filterRequest The filter value is a semicolon delimited list of key value pairs. List values separate possible values with commas. Keys include: | filter name          | Filter value description                                                                                       | |----------------------|----------------------------------------------------------------------------------------------------------------| | snapshotIds          | Match contexts with snapshotIds in this comma-separated list.                                                  | | dasIds               | Match snapshots created from any of these das ids.                                                             | | dasVersions          | Match snapshots where das version of original flow model is in this list. Useful with a singular id in dasIds. | | searchString         | Match snapshots with names matching this string.                                                               | | caseSensitive        | Specify if searches are case sensitive or not.                                                                 | | wholeWord            | Specify if searches match whole word or not.                                                                   | (required)
     * @param domain  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFilteredContextsCall(FlowModelContextFilterRequest filterRequest, String domain, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/flow-model-contexts/{domain}"
            .replace("{" + "domain" + "}", localVarApiClient.escapeString(domain.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (filterRequest != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filterRequest", filterRequest));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFilteredContextsValidateBeforeCall(FlowModelContextFilterRequest filterRequest, String domain, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'filterRequest' is set
        if (filterRequest == null) {
            throw new ApiException("Missing the required parameter 'filterRequest' when calling getFilteredContexts(Async)");
        }

        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling getFilteredContexts(Async)");
        }

        return getFilteredContextsCall(filterRequest, domain, _callback);

    }

    /**
     * Filter published flow contexts
     * Get a filtered list of current published flow contexts in this orchestration runtime environment context.&lt;br/&gt;Filter example: searchString:fulfillment
     * @param filterRequest The filter value is a semicolon delimited list of key value pairs. List values separate possible values with commas. Keys include: | filter name          | Filter value description                                                                                       | |----------------------|----------------------------------------------------------------------------------------------------------------| | snapshotIds          | Match contexts with snapshotIds in this comma-separated list.                                                  | | dasIds               | Match snapshots created from any of these das ids.                                                             | | dasVersions          | Match snapshots where das version of original flow model is in this list. Useful with a singular id in dasIds. | | searchString         | Match snapshots with names matching this string.                                                               | | caseSensitive        | Specify if searches are case sensitive or not.                                                                 | | wholeWord            | Specify if searches match whole word or not.                                                                   | (required)
     * @param domain  (required)
     * @return PageResponseFlowModelContextSnapshot
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public PageResponseFlowModelContextSnapshot getFilteredContexts(FlowModelContextFilterRequest filterRequest, String domain) throws ApiException {
        ApiResponse<PageResponseFlowModelContextSnapshot> localVarResp = getFilteredContextsWithHttpInfo(filterRequest, domain);
        return localVarResp.getData();
    }

    /**
     * Filter published flow contexts
     * Get a filtered list of current published flow contexts in this orchestration runtime environment context.&lt;br/&gt;Filter example: searchString:fulfillment
     * @param filterRequest The filter value is a semicolon delimited list of key value pairs. List values separate possible values with commas. Keys include: | filter name          | Filter value description                                                                                       | |----------------------|----------------------------------------------------------------------------------------------------------------| | snapshotIds          | Match contexts with snapshotIds in this comma-separated list.                                                  | | dasIds               | Match snapshots created from any of these das ids.                                                             | | dasVersions          | Match snapshots where das version of original flow model is in this list. Useful with a singular id in dasIds. | | searchString         | Match snapshots with names matching this string.                                                               | | caseSensitive        | Specify if searches are case sensitive or not.                                                                 | | wholeWord            | Specify if searches match whole word or not.                                                                   | (required)
     * @param domain  (required)
     * @return ApiResponse&lt;PageResponseFlowModelContextSnapshot&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PageResponseFlowModelContextSnapshot> getFilteredContextsWithHttpInfo(FlowModelContextFilterRequest filterRequest, String domain) throws ApiException {
        okhttp3.Call localVarCall = getFilteredContextsValidateBeforeCall(filterRequest, domain, null);
        Type localVarReturnType = new TypeToken<PageResponseFlowModelContextSnapshot>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Filter published flow contexts (asynchronously)
     * Get a filtered list of current published flow contexts in this orchestration runtime environment context.&lt;br/&gt;Filter example: searchString:fulfillment
     * @param filterRequest The filter value is a semicolon delimited list of key value pairs. List values separate possible values with commas. Keys include: | filter name          | Filter value description                                                                                       | |----------------------|----------------------------------------------------------------------------------------------------------------| | snapshotIds          | Match contexts with snapshotIds in this comma-separated list.                                                  | | dasIds               | Match snapshots created from any of these das ids.                                                             | | dasVersions          | Match snapshots where das version of original flow model is in this list. Useful with a singular id in dasIds. | | searchString         | Match snapshots with names matching this string.                                                               | | caseSensitive        | Specify if searches are case sensitive or not.                                                                 | | wholeWord            | Specify if searches match whole word or not.                                                                   | (required)
     * @param domain  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFilteredContextsAsync(FlowModelContextFilterRequest filterRequest, String domain, final ApiCallback<PageResponseFlowModelContextSnapshot> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFilteredContextsValidateBeforeCall(filterRequest, domain, _callback);
        Type localVarReturnType = new TypeToken<PageResponseFlowModelContextSnapshot>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPublished
     * @param domain Domain id (required)
     * @param flowModelContextId Flow context id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Content of flow model context returned successfully </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Flow model context not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPublishedCall(String domain, UUID flowModelContextId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/flow-model-contexts/{domain}/published/{flowModelContextId}"
            .replace("{" + "domain" + "}", localVarApiClient.escapeString(domain.toString()))
            .replace("{" + "flowModelContextId" + "}", localVarApiClient.escapeString(flowModelContextId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPublishedValidateBeforeCall(String domain, UUID flowModelContextId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling getPublished(Async)");
        }

        // verify the required parameter 'flowModelContextId' is set
        if (flowModelContextId == null) {
            throw new ApiException("Missing the required parameter 'flowModelContextId' when calling getPublished(Async)");
        }

        return getPublishedCall(domain, flowModelContextId, _callback);

    }

    /**
     * Get published flow context content
     * Get content of specified published flow context version from orchestration runtime environment.
     * @param domain Domain id (required)
     * @param flowModelContextId Flow context id (required)
     * @return DataResponseFlowModelContextSnapshot
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Content of flow model context returned successfully </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Flow model context not found </td><td>  -  </td></tr>
     </table>
     */
    public DataResponseFlowModelContextSnapshot getPublished(String domain, UUID flowModelContextId) throws ApiException {
        ApiResponse<DataResponseFlowModelContextSnapshot> localVarResp = getPublishedWithHttpInfo(domain, flowModelContextId);
        return localVarResp.getData();
    }

    /**
     * Get published flow context content
     * Get content of specified published flow context version from orchestration runtime environment.
     * @param domain Domain id (required)
     * @param flowModelContextId Flow context id (required)
     * @return ApiResponse&lt;DataResponseFlowModelContextSnapshot&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Content of flow model context returned successfully </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Flow model context not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DataResponseFlowModelContextSnapshot> getPublishedWithHttpInfo(String domain, UUID flowModelContextId) throws ApiException {
        okhttp3.Call localVarCall = getPublishedValidateBeforeCall(domain, flowModelContextId, null);
        Type localVarReturnType = new TypeToken<DataResponseFlowModelContextSnapshot>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get published flow context content (asynchronously)
     * Get content of specified published flow context version from orchestration runtime environment.
     * @param domain Domain id (required)
     * @param flowModelContextId Flow context id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Content of flow model context returned successfully </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Flow model context not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPublishedAsync(String domain, UUID flowModelContextId, final ApiCallback<DataResponseFlowModelContextSnapshot> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPublishedValidateBeforeCall(domain, flowModelContextId, _callback);
        Type localVarReturnType = new TypeToken<DataResponseFlowModelContextSnapshot>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for isDeletable1
     * @param domain Domain id (required)
     * @param flowContextId Flow context id (required)
     * @param version Specify version (optional). If omitted, any version will match. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Says whether the flow context can be safely deleted or not </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call isDeletable1Call(String domain, UUID flowContextId, Integer version, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/flow-model-contexts/{domain}/{flowContextId}/deletable"
            .replace("{" + "domain" + "}", localVarApiClient.escapeString(domain.toString()))
            .replace("{" + "flowContextId" + "}", localVarApiClient.escapeString(flowContextId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("version", version));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call isDeletable1ValidateBeforeCall(String domain, UUID flowContextId, Integer version, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling isDeletable1(Async)");
        }

        // verify the required parameter 'flowContextId' is set
        if (flowContextId == null) {
            throw new ApiException("Missing the required parameter 'flowContextId' when calling isDeletable1(Async)");
        }

        return isDeletable1Call(domain, flowContextId, version, _callback);

    }

    /**
     * Says whether this flow context can be safely deleted
     * It will not be deletable if it is published in at least one domain, maybe one to which the user has no access
     * @param domain Domain id (required)
     * @param flowContextId Flow context id (required)
     * @param version Specify version (optional). If omitted, any version will match. (optional)
     * @return DataResponseDeletableResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Says whether the flow context can be safely deleted or not </td><td>  -  </td></tr>
     </table>
     */
    public DataResponseDeletableResource isDeletable1(String domain, UUID flowContextId, Integer version) throws ApiException {
        ApiResponse<DataResponseDeletableResource> localVarResp = isDeletable1WithHttpInfo(domain, flowContextId, version);
        return localVarResp.getData();
    }

    /**
     * Says whether this flow context can be safely deleted
     * It will not be deletable if it is published in at least one domain, maybe one to which the user has no access
     * @param domain Domain id (required)
     * @param flowContextId Flow context id (required)
     * @param version Specify version (optional). If omitted, any version will match. (optional)
     * @return ApiResponse&lt;DataResponseDeletableResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Says whether the flow context can be safely deleted or not </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DataResponseDeletableResource> isDeletable1WithHttpInfo(String domain, UUID flowContextId, Integer version) throws ApiException {
        okhttp3.Call localVarCall = isDeletable1ValidateBeforeCall(domain, flowContextId, version, null);
        Type localVarReturnType = new TypeToken<DataResponseDeletableResource>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Says whether this flow context can be safely deleted (asynchronously)
     * It will not be deletable if it is published in at least one domain, maybe one to which the user has no access
     * @param domain Domain id (required)
     * @param flowContextId Flow context id (required)
     * @param version Specify version (optional). If omitted, any version will match. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Says whether the flow context can be safely deleted or not </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call isDeletable1Async(String domain, UUID flowContextId, Integer version, final ApiCallback<DataResponseDeletableResource> _callback) throws ApiException {

        okhttp3.Call localVarCall = isDeletable1ValidateBeforeCall(domain, flowContextId, version, _callback);
        Type localVarReturnType = new TypeToken<DataResponseDeletableResource>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listPublished1
     * @param domain Domain id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of published flow model contexts, the list may be empty </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listPublished1Call(String domain, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/flow-model-contexts/{domain}/published"
            .replace("{" + "domain" + "}", localVarApiClient.escapeString(domain.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listPublished1ValidateBeforeCall(String domain, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling listPublished1(Async)");
        }

        return listPublished1Call(domain, _callback);

    }

    /**
     * List published flow contexts
     * Get a list of current published flow contexts in this orchestration runtime environment context.
     * @param domain Domain id (required)
     * @return ListResponseFlowModelContextSnapshot
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of published flow model contexts, the list may be empty </td><td>  -  </td></tr>
     </table>
     */
    public ListResponseFlowModelContextSnapshot listPublished1(String domain) throws ApiException {
        ApiResponse<ListResponseFlowModelContextSnapshot> localVarResp = listPublished1WithHttpInfo(domain);
        return localVarResp.getData();
    }

    /**
     * List published flow contexts
     * Get a list of current published flow contexts in this orchestration runtime environment context.
     * @param domain Domain id (required)
     * @return ApiResponse&lt;ListResponseFlowModelContextSnapshot&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of published flow model contexts, the list may be empty </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListResponseFlowModelContextSnapshot> listPublished1WithHttpInfo(String domain) throws ApiException {
        okhttp3.Call localVarCall = listPublished1ValidateBeforeCall(domain, null);
        Type localVarReturnType = new TypeToken<ListResponseFlowModelContextSnapshot>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List published flow contexts (asynchronously)
     * Get a list of current published flow contexts in this orchestration runtime environment context.
     * @param domain Domain id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of published flow model contexts, the list may be empty </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listPublished1Async(String domain, final ApiCallback<ListResponseFlowModelContextSnapshot> _callback) throws ApiException {

        okhttp3.Call localVarCall = listPublished1ValidateBeforeCall(domain, _callback);
        Type localVarReturnType = new TypeToken<ListResponseFlowModelContextSnapshot>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for publish1
     * @param domain Domain id (required)
     * @param flowModelContextId Flow context id (required)
     * @param version Specify version (optional). If omitted, latest version will be published. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Flow model context published successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Flow model context not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call publish1Call(String domain, UUID flowModelContextId, Integer version, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/flow-model-contexts/{domain}/{flowModelContextId}/publish"
            .replace("{" + "domain" + "}", localVarApiClient.escapeString(domain.toString()))
            .replace("{" + "flowModelContextId" + "}", localVarApiClient.escapeString(flowModelContextId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("version", version));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call publish1ValidateBeforeCall(String domain, UUID flowModelContextId, Integer version, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling publish1(Async)");
        }

        // verify the required parameter 'flowModelContextId' is set
        if (flowModelContextId == null) {
            throw new ApiException("Missing the required parameter 'flowModelContextId' when calling publish1(Async)");
        }

        return publish1Call(domain, flowModelContextId, version, _callback);

    }

    /**
     * Publish flow context
     * Publish specified flow context version to orchestration runtime environment.
     * @param domain Domain id (required)
     * @param flowModelContextId Flow context id (required)
     * @param version Specify version (optional). If omitted, latest version will be published. (optional)
     * @return DataResponseFlowModelContextSnapshot
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Flow model context published successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Flow model context not found. </td><td>  -  </td></tr>
     </table>
     */
    public DataResponseFlowModelContextSnapshot publish1(String domain, UUID flowModelContextId, Integer version) throws ApiException {
        ApiResponse<DataResponseFlowModelContextSnapshot> localVarResp = publish1WithHttpInfo(domain, flowModelContextId, version);
        return localVarResp.getData();
    }

    /**
     * Publish flow context
     * Publish specified flow context version to orchestration runtime environment.
     * @param domain Domain id (required)
     * @param flowModelContextId Flow context id (required)
     * @param version Specify version (optional). If omitted, latest version will be published. (optional)
     * @return ApiResponse&lt;DataResponseFlowModelContextSnapshot&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Flow model context published successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Flow model context not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DataResponseFlowModelContextSnapshot> publish1WithHttpInfo(String domain, UUID flowModelContextId, Integer version) throws ApiException {
        okhttp3.Call localVarCall = publish1ValidateBeforeCall(domain, flowModelContextId, version, null);
        Type localVarReturnType = new TypeToken<DataResponseFlowModelContextSnapshot>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Publish flow context (asynchronously)
     * Publish specified flow context version to orchestration runtime environment.
     * @param domain Domain id (required)
     * @param flowModelContextId Flow context id (required)
     * @param version Specify version (optional). If omitted, latest version will be published. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Flow model context published successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Flow model context not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call publish1Async(String domain, UUID flowModelContextId, Integer version, final ApiCallback<DataResponseFlowModelContextSnapshot> _callback) throws ApiException {

        okhttp3.Call localVarCall = publish1ValidateBeforeCall(domain, flowModelContextId, version, _callback);
        Type localVarReturnType = new TypeToken<DataResponseFlowModelContextSnapshot>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for unpublish2
     * @param domain Domain id (required)
     * @param flowModelContextId Flow context id (required)
     * @param version Specify version (optional). If omitted, latest version will be unpublished. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Flow model context unpublished successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Flow model context not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call unpublish2Call(String domain, UUID flowModelContextId, Integer version, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/flow-model-contexts/{domain}/{flowModelContextId}/unpublish"
            .replace("{" + "domain" + "}", localVarApiClient.escapeString(domain.toString()))
            .replace("{" + "flowModelContextId" + "}", localVarApiClient.escapeString(flowModelContextId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("version", version));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call unpublish2ValidateBeforeCall(String domain, UUID flowModelContextId, Integer version, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling unpublish2(Async)");
        }

        // verify the required parameter 'flowModelContextId' is set
        if (flowModelContextId == null) {
            throw new ApiException("Missing the required parameter 'flowModelContextId' when calling unpublish2(Async)");
        }

        return unpublish2Call(domain, flowModelContextId, version, _callback);

    }

    /**
     * Unpublish flow context
     * Unpublish specified flow context version from orchestration runtime environment. 
     * @param domain Domain id (required)
     * @param flowModelContextId Flow context id (required)
     * @param version Specify version (optional). If omitted, latest version will be unpublished. (optional)
     * @return GenericResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Flow model context unpublished successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Flow model context not found </td><td>  -  </td></tr>
     </table>
     */
    public GenericResponse unpublish2(String domain, UUID flowModelContextId, Integer version) throws ApiException {
        ApiResponse<GenericResponse> localVarResp = unpublish2WithHttpInfo(domain, flowModelContextId, version);
        return localVarResp.getData();
    }

    /**
     * Unpublish flow context
     * Unpublish specified flow context version from orchestration runtime environment. 
     * @param domain Domain id (required)
     * @param flowModelContextId Flow context id (required)
     * @param version Specify version (optional). If omitted, latest version will be unpublished. (optional)
     * @return ApiResponse&lt;GenericResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Flow model context unpublished successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Flow model context not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GenericResponse> unpublish2WithHttpInfo(String domain, UUID flowModelContextId, Integer version) throws ApiException {
        okhttp3.Call localVarCall = unpublish2ValidateBeforeCall(domain, flowModelContextId, version, null);
        Type localVarReturnType = new TypeToken<GenericResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Unpublish flow context (asynchronously)
     * Unpublish specified flow context version from orchestration runtime environment. 
     * @param domain Domain id (required)
     * @param flowModelContextId Flow context id (required)
     * @param version Specify version (optional). If omitted, latest version will be unpublished. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Flow model context unpublished successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Flow model context not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call unpublish2Async(String domain, UUID flowModelContextId, Integer version, final ApiCallback<GenericResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = unpublish2ValidateBeforeCall(domain, flowModelContextId, version, _callback);
        Type localVarReturnType = new TypeToken<GenericResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for unpublish3
     * @param domain Domain id (required)
     * @param flowObjectsRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call unpublish3Call(String domain, FlowObjectsRequest flowObjectsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = flowObjectsRequest;

        // create path and map variables
        String localVarPath = "/api/v1/flow-model-contexts/{domain}/unpublish"
            .replace("{" + "domain" + "}", localVarApiClient.escapeString(domain.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call unpublish3ValidateBeforeCall(String domain, FlowObjectsRequest flowObjectsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling unpublish3(Async)");
        }

        // verify the required parameter 'flowObjectsRequest' is set
        if (flowObjectsRequest == null) {
            throw new ApiException("Missing the required parameter 'flowObjectsRequest' when calling unpublish3(Async)");
        }

        return unpublish3Call(domain, flowObjectsRequest, _callback);

    }

    /**
     * Unpublish list of flow contexts
     * Unpublish specified flow contexts from orchestration runtime environment. 
     * @param domain Domain id (required)
     * @param flowObjectsRequest  (required)
     * @return GenericResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public GenericResponse unpublish3(String domain, FlowObjectsRequest flowObjectsRequest) throws ApiException {
        ApiResponse<GenericResponse> localVarResp = unpublish3WithHttpInfo(domain, flowObjectsRequest);
        return localVarResp.getData();
    }

    /**
     * Unpublish list of flow contexts
     * Unpublish specified flow contexts from orchestration runtime environment. 
     * @param domain Domain id (required)
     * @param flowObjectsRequest  (required)
     * @return ApiResponse&lt;GenericResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GenericResponse> unpublish3WithHttpInfo(String domain, FlowObjectsRequest flowObjectsRequest) throws ApiException {
        okhttp3.Call localVarCall = unpublish3ValidateBeforeCall(domain, flowObjectsRequest, null);
        Type localVarReturnType = new TypeToken<GenericResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Unpublish list of flow contexts (asynchronously)
     * Unpublish specified flow contexts from orchestration runtime environment. 
     * @param domain Domain id (required)
     * @param flowObjectsRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call unpublish3Async(String domain, FlowObjectsRequest flowObjectsRequest, final ApiCallback<GenericResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = unpublish3ValidateBeforeCall(domain, flowObjectsRequest, _callback);
        Type localVarReturnType = new TypeToken<GenericResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
