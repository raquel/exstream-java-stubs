/*
 * Exstream Orchestration
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ConfigurationFilterRequest;
import org.openapitools.client.model.DataResponseConfiguration;
import org.openapitools.client.model.GenericResponse;
import org.openapitools.client.model.ModelConfiguration;
import org.openapitools.client.model.PageResponseConfiguration;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ConfigurationControllerApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ConfigurationControllerApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ConfigurationControllerApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for addConfiguration
     * @param domainId  (required)
     * @param modelConfiguration  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addConfigurationCall(String domainId, ModelConfiguration modelConfiguration, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modelConfiguration;

        // create path and map variables
        String localVarPath = "/api/v1/configuration/{domainId}"
            .replace("{" + "domainId" + "}", localVarApiClient.escapeString(domainId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addConfigurationValidateBeforeCall(String domainId, ModelConfiguration modelConfiguration, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'domainId' is set
        if (domainId == null) {
            throw new ApiException("Missing the required parameter 'domainId' when calling addConfiguration(Async)");
        }

        // verify the required parameter 'modelConfiguration' is set
        if (modelConfiguration == null) {
            throw new ApiException("Missing the required parameter 'modelConfiguration' when calling addConfiguration(Async)");
        }

        return addConfigurationCall(domainId, modelConfiguration, _callback);

    }

    /**
     * 
     * 
     * @param domainId  (required)
     * @param modelConfiguration  (required)
     * @return DataResponseConfiguration
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public DataResponseConfiguration addConfiguration(String domainId, ModelConfiguration modelConfiguration) throws ApiException {
        ApiResponse<DataResponseConfiguration> localVarResp = addConfigurationWithHttpInfo(domainId, modelConfiguration);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param domainId  (required)
     * @param modelConfiguration  (required)
     * @return ApiResponse&lt;DataResponseConfiguration&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DataResponseConfiguration> addConfigurationWithHttpInfo(String domainId, ModelConfiguration modelConfiguration) throws ApiException {
        okhttp3.Call localVarCall = addConfigurationValidateBeforeCall(domainId, modelConfiguration, null);
        Type localVarReturnType = new TypeToken<DataResponseConfiguration>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param domainId  (required)
     * @param modelConfiguration  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addConfigurationAsync(String domainId, ModelConfiguration modelConfiguration, final ApiCallback<DataResponseConfiguration> _callback) throws ApiException {

        okhttp3.Call localVarCall = addConfigurationValidateBeforeCall(domainId, modelConfiguration, _callback);
        Type localVarReturnType = new TypeToken<DataResponseConfiguration>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteConfiguration
     * @param domainId  (required)
     * @param configType Specify the configuration type. (required)
     * @param configName Specify the configuration name. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteConfigurationCall(String domainId, String configType, String configName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/configuration/{domainId}/{configType}/{configName}"
            .replace("{" + "domainId" + "}", localVarApiClient.escapeString(domainId.toString()))
            .replace("{" + "configType" + "}", localVarApiClient.escapeString(configType.toString()))
            .replace("{" + "configName" + "}", localVarApiClient.escapeString(configName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteConfigurationValidateBeforeCall(String domainId, String configType, String configName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'domainId' is set
        if (domainId == null) {
            throw new ApiException("Missing the required parameter 'domainId' when calling deleteConfiguration(Async)");
        }

        // verify the required parameter 'configType' is set
        if (configType == null) {
            throw new ApiException("Missing the required parameter 'configType' when calling deleteConfiguration(Async)");
        }

        // verify the required parameter 'configName' is set
        if (configName == null) {
            throw new ApiException("Missing the required parameter 'configName' when calling deleteConfiguration(Async)");
        }

        return deleteConfigurationCall(domainId, configType, configName, _callback);

    }

    /**
     * 
     * 
     * @param domainId  (required)
     * @param configType Specify the configuration type. (required)
     * @param configName Specify the configuration name. (required)
     * @return GenericResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public GenericResponse deleteConfiguration(String domainId, String configType, String configName) throws ApiException {
        ApiResponse<GenericResponse> localVarResp = deleteConfigurationWithHttpInfo(domainId, configType, configName);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param domainId  (required)
     * @param configType Specify the configuration type. (required)
     * @param configName Specify the configuration name. (required)
     * @return ApiResponse&lt;GenericResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GenericResponse> deleteConfigurationWithHttpInfo(String domainId, String configType, String configName) throws ApiException {
        okhttp3.Call localVarCall = deleteConfigurationValidateBeforeCall(domainId, configType, configName, null);
        Type localVarReturnType = new TypeToken<GenericResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param domainId  (required)
     * @param configType Specify the configuration type. (required)
     * @param configName Specify the configuration name. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteConfigurationAsync(String domainId, String configType, String configName, final ApiCallback<GenericResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteConfigurationValidateBeforeCall(domainId, configType, configName, _callback);
        Type localVarReturnType = new TypeToken<GenericResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getConfiguration
     * @param domainId  (required)
     * @param configType Specify the configuration type. (required)
     * @param configName Specify the configuration name. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getConfigurationCall(String domainId, String configType, String configName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/configuration/{domainId}/{configType}/{configName}"
            .replace("{" + "domainId" + "}", localVarApiClient.escapeString(domainId.toString()))
            .replace("{" + "configType" + "}", localVarApiClient.escapeString(configType.toString()))
            .replace("{" + "configName" + "}", localVarApiClient.escapeString(configName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getConfigurationValidateBeforeCall(String domainId, String configType, String configName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'domainId' is set
        if (domainId == null) {
            throw new ApiException("Missing the required parameter 'domainId' when calling getConfiguration(Async)");
        }

        // verify the required parameter 'configType' is set
        if (configType == null) {
            throw new ApiException("Missing the required parameter 'configType' when calling getConfiguration(Async)");
        }

        // verify the required parameter 'configName' is set
        if (configName == null) {
            throw new ApiException("Missing the required parameter 'configName' when calling getConfiguration(Async)");
        }

        return getConfigurationCall(domainId, configType, configName, _callback);

    }

    /**
     * 
     * 
     * @param domainId  (required)
     * @param configType Specify the configuration type. (required)
     * @param configName Specify the configuration name. (required)
     * @return ModelConfiguration
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ModelConfiguration getConfiguration(String domainId, String configType, String configName) throws ApiException {
        ApiResponse<ModelConfiguration> localVarResp = getConfigurationWithHttpInfo(domainId, configType, configName);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param domainId  (required)
     * @param configType Specify the configuration type. (required)
     * @param configName Specify the configuration name. (required)
     * @return ApiResponse&lt;ModelConfiguration&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelConfiguration> getConfigurationWithHttpInfo(String domainId, String configType, String configName) throws ApiException {
        okhttp3.Call localVarCall = getConfigurationValidateBeforeCall(domainId, configType, configName, null);
        Type localVarReturnType = new TypeToken<ModelConfiguration>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param domainId  (required)
     * @param configType Specify the configuration type. (required)
     * @param configName Specify the configuration name. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getConfigurationAsync(String domainId, String configType, String configName, final ApiCallback<ModelConfiguration> _callback) throws ApiException {

        okhttp3.Call localVarCall = getConfigurationValidateBeforeCall(domainId, configType, configName, _callback);
        Type localVarReturnType = new TypeToken<ModelConfiguration>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getConfigurations
     * @param filterRequest The filter value is a semicolon delimited list of key value pairs. List values separate possible values with commas. Keys include: | filter name          | Filter value description                                                                                       | |----------------------|----------------------------------------------------------------------------------------------------------------| | configType           | Match configurations with this configType.                                                                     | | configName           | Match configurations with this configName.                                                                     | (required)
     * @param domainId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getConfigurationsCall(ConfigurationFilterRequest filterRequest, String domainId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/configuration/{domainId}"
            .replace("{" + "domainId" + "}", localVarApiClient.escapeString(domainId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (filterRequest != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filterRequest", filterRequest));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getConfigurationsValidateBeforeCall(ConfigurationFilterRequest filterRequest, String domainId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'filterRequest' is set
        if (filterRequest == null) {
            throw new ApiException("Missing the required parameter 'filterRequest' when calling getConfigurations(Async)");
        }

        // verify the required parameter 'domainId' is set
        if (domainId == null) {
            throw new ApiException("Missing the required parameter 'domainId' when calling getConfigurations(Async)");
        }

        return getConfigurationsCall(filterRequest, domainId, _callback);

    }

    /**
     * Get all matching configurations
     * Get all configurations (no filter) or all the configurations matching the filter. &lt;br/&gt;Filter example: filter&#x3D;configType:myConfigType (domain is taken from the URL)
     * @param filterRequest The filter value is a semicolon delimited list of key value pairs. List values separate possible values with commas. Keys include: | filter name          | Filter value description                                                                                       | |----------------------|----------------------------------------------------------------------------------------------------------------| | configType           | Match configurations with this configType.                                                                     | | configName           | Match configurations with this configName.                                                                     | (required)
     * @param domainId  (required)
     * @return PageResponseConfiguration
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public PageResponseConfiguration getConfigurations(ConfigurationFilterRequest filterRequest, String domainId) throws ApiException {
        ApiResponse<PageResponseConfiguration> localVarResp = getConfigurationsWithHttpInfo(filterRequest, domainId);
        return localVarResp.getData();
    }

    /**
     * Get all matching configurations
     * Get all configurations (no filter) or all the configurations matching the filter. &lt;br/&gt;Filter example: filter&#x3D;configType:myConfigType (domain is taken from the URL)
     * @param filterRequest The filter value is a semicolon delimited list of key value pairs. List values separate possible values with commas. Keys include: | filter name          | Filter value description                                                                                       | |----------------------|----------------------------------------------------------------------------------------------------------------| | configType           | Match configurations with this configType.                                                                     | | configName           | Match configurations with this configName.                                                                     | (required)
     * @param domainId  (required)
     * @return ApiResponse&lt;PageResponseConfiguration&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PageResponseConfiguration> getConfigurationsWithHttpInfo(ConfigurationFilterRequest filterRequest, String domainId) throws ApiException {
        okhttp3.Call localVarCall = getConfigurationsValidateBeforeCall(filterRequest, domainId, null);
        Type localVarReturnType = new TypeToken<PageResponseConfiguration>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all matching configurations (asynchronously)
     * Get all configurations (no filter) or all the configurations matching the filter. &lt;br/&gt;Filter example: filter&#x3D;configType:myConfigType (domain is taken from the URL)
     * @param filterRequest The filter value is a semicolon delimited list of key value pairs. List values separate possible values with commas. Keys include: | filter name          | Filter value description                                                                                       | |----------------------|----------------------------------------------------------------------------------------------------------------| | configType           | Match configurations with this configType.                                                                     | | configName           | Match configurations with this configName.                                                                     | (required)
     * @param domainId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getConfigurationsAsync(ConfigurationFilterRequest filterRequest, String domainId, final ApiCallback<PageResponseConfiguration> _callback) throws ApiException {

        okhttp3.Call localVarCall = getConfigurationsValidateBeforeCall(filterRequest, domainId, _callback);
        Type localVarReturnType = new TypeToken<PageResponseConfiguration>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateConfiguration
     * @param domainId  (required)
     * @param modelConfiguration  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateConfigurationCall(String domainId, ModelConfiguration modelConfiguration, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modelConfiguration;

        // create path and map variables
        String localVarPath = "/api/v1/configuration/{domainId}"
            .replace("{" + "domainId" + "}", localVarApiClient.escapeString(domainId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateConfigurationValidateBeforeCall(String domainId, ModelConfiguration modelConfiguration, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'domainId' is set
        if (domainId == null) {
            throw new ApiException("Missing the required parameter 'domainId' when calling updateConfiguration(Async)");
        }

        // verify the required parameter 'modelConfiguration' is set
        if (modelConfiguration == null) {
            throw new ApiException("Missing the required parameter 'modelConfiguration' when calling updateConfiguration(Async)");
        }

        return updateConfigurationCall(domainId, modelConfiguration, _callback);

    }

    /**
     * 
     * 
     * @param domainId  (required)
     * @param modelConfiguration  (required)
     * @return DataResponseConfiguration
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public DataResponseConfiguration updateConfiguration(String domainId, ModelConfiguration modelConfiguration) throws ApiException {
        ApiResponse<DataResponseConfiguration> localVarResp = updateConfigurationWithHttpInfo(domainId, modelConfiguration);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param domainId  (required)
     * @param modelConfiguration  (required)
     * @return ApiResponse&lt;DataResponseConfiguration&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DataResponseConfiguration> updateConfigurationWithHttpInfo(String domainId, ModelConfiguration modelConfiguration) throws ApiException {
        okhttp3.Call localVarCall = updateConfigurationValidateBeforeCall(domainId, modelConfiguration, null);
        Type localVarReturnType = new TypeToken<DataResponseConfiguration>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param domainId  (required)
     * @param modelConfiguration  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateConfigurationAsync(String domainId, ModelConfiguration modelConfiguration, final ApiCallback<DataResponseConfiguration> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateConfigurationValidateBeforeCall(domainId, modelConfiguration, _callback);
        Type localVarReturnType = new TypeToken<DataResponseConfiguration>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
