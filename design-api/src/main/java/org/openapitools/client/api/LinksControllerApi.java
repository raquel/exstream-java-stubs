/*
 * Exstream CE Design API (21.2.0)
 * The Exstream CE Design API allows developers to query, create, modify, or delete Exstream CE resources and their links outside of the Exstream CE user inferface. This API requires authentication in order to be used - to authenticate requests, supply a valid OTDS token with `Authorization: Bearer OTDS_TOKEN` in the request header.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.DataResponseLinkDTO;
import org.openapitools.client.model.GenericResponse;
import org.openapitools.client.model.LinkDTO;
import org.openapitools.client.model.ListResponseLinkDTO;
import org.openapitools.client.model.MultipleLinksBody;
import java.time.OffsetDateTime;
import org.openapitools.client.model.PageResponseLinkDTO;
import org.openapitools.client.model.PageResponseResourceVersion;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class LinksControllerApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public LinksControllerApi() {
        this(Configuration.getDefaultApiClient());
    }

    public LinksControllerApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createLinkUsingPOST
     * @param domain domain (required)
     * @param link link (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createLinkUsingPOSTCall(String domain, LinkDTO link, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = link;

        // create path and map variables
        String localVarPath = "/api/v1/links/{domain}"
            .replace("{" + "domain" + "}", localVarApiClient.escapeString(domain.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createLinkUsingPOSTValidateBeforeCall(String domain, LinkDTO link, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling createLinkUsingPOST(Async)");
        }

        // verify the required parameter 'link' is set
        if (link == null) {
            throw new ApiException("Missing the required parameter 'link' when calling createLinkUsingPOST(Async)");
        }

        return createLinkUsingPOSTCall(domain, link, _callback);

    }

    /**
     * Create a resource link
     * 
     * @param domain domain (required)
     * @param link link (required)
     * @return DataResponseLinkDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public DataResponseLinkDTO createLinkUsingPOST(String domain, LinkDTO link) throws ApiException {
        ApiResponse<DataResponseLinkDTO> localVarResp = createLinkUsingPOSTWithHttpInfo(domain, link);
        return localVarResp.getData();
    }

    /**
     * Create a resource link
     * 
     * @param domain domain (required)
     * @param link link (required)
     * @return ApiResponse&lt;DataResponseLinkDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DataResponseLinkDTO> createLinkUsingPOSTWithHttpInfo(String domain, LinkDTO link) throws ApiException {
        okhttp3.Call localVarCall = createLinkUsingPOSTValidateBeforeCall(domain, link, null);
        Type localVarReturnType = new TypeToken<DataResponseLinkDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a resource link (asynchronously)
     * 
     * @param domain domain (required)
     * @param link link (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createLinkUsingPOSTAsync(String domain, LinkDTO link, final ApiCallback<DataResponseLinkDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = createLinkUsingPOSTValidateBeforeCall(domain, link, _callback);
        Type localVarReturnType = new TypeToken<DataResponseLinkDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createLinksUsingPOST
     * @param domain domain (required)
     * @param body body (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createLinksUsingPOSTCall(String domain, MultipleLinksBody body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/api/v1/links/{domain}/multiple"
            .replace("{" + "domain" + "}", localVarApiClient.escapeString(domain.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createLinksUsingPOSTValidateBeforeCall(String domain, MultipleLinksBody body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling createLinksUsingPOST(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createLinksUsingPOST(Async)");
        }

        return createLinksUsingPOSTCall(domain, body, _callback);

    }

    /**
     * Create multiple resource links
     * 
     * @param domain domain (required)
     * @param body body (required)
     * @return ListResponseLinkDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ListResponseLinkDTO createLinksUsingPOST(String domain, MultipleLinksBody body) throws ApiException {
        ApiResponse<ListResponseLinkDTO> localVarResp = createLinksUsingPOSTWithHttpInfo(domain, body);
        return localVarResp.getData();
    }

    /**
     * Create multiple resource links
     * 
     * @param domain domain (required)
     * @param body body (required)
     * @return ApiResponse&lt;ListResponseLinkDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListResponseLinkDTO> createLinksUsingPOSTWithHttpInfo(String domain, MultipleLinksBody body) throws ApiException {
        okhttp3.Call localVarCall = createLinksUsingPOSTValidateBeforeCall(domain, body, null);
        Type localVarReturnType = new TypeToken<ListResponseLinkDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create multiple resource links (asynchronously)
     * 
     * @param domain domain (required)
     * @param body body (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createLinksUsingPOSTAsync(String domain, MultipleLinksBody body, final ApiCallback<ListResponseLinkDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = createLinksUsingPOSTValidateBeforeCall(domain, body, _callback);
        Type localVarReturnType = new TypeToken<ListResponseLinkDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteLinkUsingDELETE
     * @param domain domain (required)
     * @param link link (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteLinkUsingDELETECall(String domain, LinkDTO link, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = link;

        // create path and map variables
        String localVarPath = "/api/v1/links/{domain}"
            .replace("{" + "domain" + "}", localVarApiClient.escapeString(domain.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteLinkUsingDELETEValidateBeforeCall(String domain, LinkDTO link, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling deleteLinkUsingDELETE(Async)");
        }

        // verify the required parameter 'link' is set
        if (link == null) {
            throw new ApiException("Missing the required parameter 'link' when calling deleteLinkUsingDELETE(Async)");
        }

        return deleteLinkUsingDELETECall(domain, link, _callback);

    }

    /**
     * Delete a resource link
     * 
     * @param domain domain (required)
     * @param link link (required)
     * @return GenericResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public GenericResponse deleteLinkUsingDELETE(String domain, LinkDTO link) throws ApiException {
        ApiResponse<GenericResponse> localVarResp = deleteLinkUsingDELETEWithHttpInfo(domain, link);
        return localVarResp.getData();
    }

    /**
     * Delete a resource link
     * 
     * @param domain domain (required)
     * @param link link (required)
     * @return ApiResponse&lt;GenericResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GenericResponse> deleteLinkUsingDELETEWithHttpInfo(String domain, LinkDTO link) throws ApiException {
        okhttp3.Call localVarCall = deleteLinkUsingDELETEValidateBeforeCall(domain, link, null);
        Type localVarReturnType = new TypeToken<GenericResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete a resource link (asynchronously)
     * 
     * @param domain domain (required)
     * @param link link (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteLinkUsingDELETEAsync(String domain, LinkDTO link, final ApiCallback<GenericResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteLinkUsingDELETEValidateBeforeCall(domain, link, _callback);
        Type localVarReturnType = new TypeToken<GenericResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteLinksUsingDELETE
     * @param domain domain (required)
     * @param body body (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteLinksUsingDELETECall(String domain, MultipleLinksBody body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/api/v1/links/{domain}/multiple"
            .replace("{" + "domain" + "}", localVarApiClient.escapeString(domain.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteLinksUsingDELETEValidateBeforeCall(String domain, MultipleLinksBody body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling deleteLinksUsingDELETE(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling deleteLinksUsingDELETE(Async)");
        }

        return deleteLinksUsingDELETECall(domain, body, _callback);

    }

    /**
     * Delete multiple resource links
     * 
     * @param domain domain (required)
     * @param body body (required)
     * @return GenericResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public GenericResponse deleteLinksUsingDELETE(String domain, MultipleLinksBody body) throws ApiException {
        ApiResponse<GenericResponse> localVarResp = deleteLinksUsingDELETEWithHttpInfo(domain, body);
        return localVarResp.getData();
    }

    /**
     * Delete multiple resource links
     * 
     * @param domain domain (required)
     * @param body body (required)
     * @return ApiResponse&lt;GenericResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GenericResponse> deleteLinksUsingDELETEWithHttpInfo(String domain, MultipleLinksBody body) throws ApiException {
        okhttp3.Call localVarCall = deleteLinksUsingDELETEValidateBeforeCall(domain, body, null);
        Type localVarReturnType = new TypeToken<GenericResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete multiple resource links (asynchronously)
     * 
     * @param domain domain (required)
     * @param body body (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteLinksUsingDELETEAsync(String domain, MultipleLinksBody body, final ApiCallback<GenericResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteLinksUsingDELETEValidateBeforeCall(domain, body, _callback);
        Type localVarReturnType = new TypeToken<GenericResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getLinksUsingGET
     * @param domain domain (required)
     * @param count For pagination, the number of entities per page (optional)
     * @param effectiveDate  (optional)
     * @param filter A simple filter that can be used in place of the complex filters. If the query asks for the latest version (which is the default), this filter&#39;s domains, types, states, and override ids are applied when determining the latest version. All other attributes of this filter are applied when building the link tree. The filter value is a semicolon delimited list of key value pairs. For example:  name:Example;states:DRAFT,APPROVED;searchString:*ample List values separate possible values with commas. Keys include: | filter name           | Filter value description                                                                        | |-----------------------|-------------------------------------------------------------------------------------------------| | description           | Match resources with this description.                                                          | | excludedTypes         | Match resources whose types do not appear in this comma-separated list.                         | | variableIsArray       | Matches resources against this value.                                                           | | variableType          | Match resources whose variableType is one of these specified.                                   | | ids                   | Match resources with ids in this comma-separated list.                                          | | excludedIds           | Match resources with ids that are NOT in this comma-separated list.                             | | parentId              | Exclude this resource and others directly linked to it. Only usable in the resources API.       | | parentVersion         | For use with parentId. Must use both.                                                           | | name                  | Match resources with this name.                                                                 | | overrideIds           | When matching by states, do not apply the states filter to resources with ids in this list.     | | overrideStates        | When matching by states, apply this states filter to resources with ids in the overrideIds list.| | resourcePackId        | Match resources with this resource pack id.                                                     | | searchString          | Match resources with names or descriptions matching this string. Use a &amp;ast; as a wildcard.     | | caseSensitive         | Specify if searches (name, description, searchString) are case sensitive or not.                | | wholeWord             | Specify if searches (name, description, searchString) match whole word or not.                  | | createdBy             | Match resources created by this user.                                                           | | lastModifiedBy        | Match resources last modified by this user.                                                     | | createdDateStart      | Match resources created on or after this date. (yyyy-MM-dd format).                                   | | createdDateEnd        | Match resources created before this date. (yyyy-MM-dd format).                                  | | lastModifiedDateStart | Match resources last modified on or after this date. (yyyy-MM-dd format).                             | | lastModifiedDateEnd   | Match resources last modified before this date. (yyyy-MM-dd format).                            | | states                | Match resources with states in this list. States include: DRAFT,REVIEW,APPROVED,REJECTED      | | latestVersion         | Set to false to fetch all versions of resources matching the rest of this filter. Only usable in the resources API.| | types                 | Match resources with types in this list. Types include: resourcepack, exstrapplication, exstrdocument, exstrpage, exstrcomponentobj, exstremail, exstrengine, exstrvariablebase, exstrpackage, exstrgraphicalmessage, exstrtextmessage, exstrparagraph, exstrparagraphsection, image, samplefile, exstrdatasource, exstrhtml5, versionedtemplate, documentdefinition, enginerundef, font, fontdefinition, exstrbarcode, exstrpapertype, exstrmessagetype, exstrmetadata, exstrcommunicationset, exstroutputqueue, exstroutput, exstrmigrationset, exstrmessaging         | | systemResource        | Match resources that are (or are not) system resources.                                         | | hasApprovedVersion    | Match resources where a previously approved version of the resources exist.                     | | hidden                | Match resources that are (or are not) hidden.                                                   | | includeVariants       | Set to true to include variants in the response. By default they are excluded unless standardVariantId is specified.| | standardVariantId     | Match resources that are variants of this specified one. Can not be used when includeVariants is explicitly false.  | | categories            | Match resources that are contain at least one of the categories from this list.                 | (optional)
     * @param linkDepth Optionally specify the maximum depth for a recursive traversal of a link tree. (optional, default to 1)
     * @param linkObjectId  (optional)
     * @param linkSubjectId  (optional)
     * @param linkSubjectVersion  (optional)
     * @param offset For pagination, fetch entities after this many (optional)
     * @param rfilter The query will use this value to filter resources after it has determined latest versions and traversed the link tree. This stepwise filter can be combined with the other stepwise filters. It cannot be combined with the simple filter parameter. See filter for details of this filter&#39;s possible values. (optional)
     * @param sort Comma separated list of {asc|desc}_{field name} (optional)
     * @param tfilter The query will use this value to filter resources as the query traverses the link tree. This stepwise filter can be combined with the other stepwise filters. It cannot be combined with the simple filter parameter. See filter for details of this filter&#39;s possible values. (optional)
     * @param useEffectiveDate  (optional)
     * @param vfilter The query will use this value to filter resources as the query determines latest versions. This stepwise filter can be combined with the other stepwise filters. It cannot be combined with the simple filter parameter. See filter for details of this filter&#39;s possible values. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getLinksUsingGETCall(String domain, Integer count, OffsetDateTime effectiveDate, String filter, Integer linkDepth, UUID linkObjectId, UUID linkSubjectId, Integer linkSubjectVersion, Integer offset, String rfilter, String sort, String tfilter, Boolean useEffectiveDate, String vfilter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/links/{domain}"
            .replace("{" + "domain" + "}", localVarApiClient.escapeString(domain.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (effectiveDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("effectiveDate", effectiveDate));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (linkDepth != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("linkDepth", linkDepth));
        }

        if (linkObjectId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("linkObjectId", linkObjectId));
        }

        if (linkSubjectId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("linkSubjectId", linkSubjectId));
        }

        if (linkSubjectVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("linkSubjectVersion", linkSubjectVersion));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (rfilter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rfilter", rfilter));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (tfilter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tfilter", tfilter));
        }

        if (useEffectiveDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("useEffectiveDate", useEffectiveDate));
        }

        if (vfilter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vfilter", vfilter));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getLinksUsingGETValidateBeforeCall(String domain, Integer count, OffsetDateTime effectiveDate, String filter, Integer linkDepth, UUID linkObjectId, UUID linkSubjectId, Integer linkSubjectVersion, Integer offset, String rfilter, String sort, String tfilter, Boolean useEffectiveDate, String vfilter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling getLinksUsingGET(Async)");
        }

        return getLinksUsingGETCall(domain, count, effectiveDate, filter, linkDepth, linkObjectId, linkSubjectId, linkSubjectVersion, offset, rfilter, sort, tfilter, useEffectiveDate, vfilter, _callback);

    }

    /**
     * Fetch links to/from a resource
     * 
     * @param domain domain (required)
     * @param count For pagination, the number of entities per page (optional)
     * @param effectiveDate  (optional)
     * @param filter A simple filter that can be used in place of the complex filters. If the query asks for the latest version (which is the default), this filter&#39;s domains, types, states, and override ids are applied when determining the latest version. All other attributes of this filter are applied when building the link tree. The filter value is a semicolon delimited list of key value pairs. For example:  name:Example;states:DRAFT,APPROVED;searchString:*ample List values separate possible values with commas. Keys include: | filter name           | Filter value description                                                                        | |-----------------------|-------------------------------------------------------------------------------------------------| | description           | Match resources with this description.                                                          | | excludedTypes         | Match resources whose types do not appear in this comma-separated list.                         | | variableIsArray       | Matches resources against this value.                                                           | | variableType          | Match resources whose variableType is one of these specified.                                   | | ids                   | Match resources with ids in this comma-separated list.                                          | | excludedIds           | Match resources with ids that are NOT in this comma-separated list.                             | | parentId              | Exclude this resource and others directly linked to it. Only usable in the resources API.       | | parentVersion         | For use with parentId. Must use both.                                                           | | name                  | Match resources with this name.                                                                 | | overrideIds           | When matching by states, do not apply the states filter to resources with ids in this list.     | | overrideStates        | When matching by states, apply this states filter to resources with ids in the overrideIds list.| | resourcePackId        | Match resources with this resource pack id.                                                     | | searchString          | Match resources with names or descriptions matching this string. Use a &amp;ast; as a wildcard.     | | caseSensitive         | Specify if searches (name, description, searchString) are case sensitive or not.                | | wholeWord             | Specify if searches (name, description, searchString) match whole word or not.                  | | createdBy             | Match resources created by this user.                                                           | | lastModifiedBy        | Match resources last modified by this user.                                                     | | createdDateStart      | Match resources created on or after this date. (yyyy-MM-dd format).                                   | | createdDateEnd        | Match resources created before this date. (yyyy-MM-dd format).                                  | | lastModifiedDateStart | Match resources last modified on or after this date. (yyyy-MM-dd format).                             | | lastModifiedDateEnd   | Match resources last modified before this date. (yyyy-MM-dd format).                            | | states                | Match resources with states in this list. States include: DRAFT,REVIEW,APPROVED,REJECTED      | | latestVersion         | Set to false to fetch all versions of resources matching the rest of this filter. Only usable in the resources API.| | types                 | Match resources with types in this list. Types include: resourcepack, exstrapplication, exstrdocument, exstrpage, exstrcomponentobj, exstremail, exstrengine, exstrvariablebase, exstrpackage, exstrgraphicalmessage, exstrtextmessage, exstrparagraph, exstrparagraphsection, image, samplefile, exstrdatasource, exstrhtml5, versionedtemplate, documentdefinition, enginerundef, font, fontdefinition, exstrbarcode, exstrpapertype, exstrmessagetype, exstrmetadata, exstrcommunicationset, exstroutputqueue, exstroutput, exstrmigrationset, exstrmessaging         | | systemResource        | Match resources that are (or are not) system resources.                                         | | hasApprovedVersion    | Match resources where a previously approved version of the resources exist.                     | | hidden                | Match resources that are (or are not) hidden.                                                   | | includeVariants       | Set to true to include variants in the response. By default they are excluded unless standardVariantId is specified.| | standardVariantId     | Match resources that are variants of this specified one. Can not be used when includeVariants is explicitly false.  | | categories            | Match resources that are contain at least one of the categories from this list.                 | (optional)
     * @param linkDepth Optionally specify the maximum depth for a recursive traversal of a link tree. (optional, default to 1)
     * @param linkObjectId  (optional)
     * @param linkSubjectId  (optional)
     * @param linkSubjectVersion  (optional)
     * @param offset For pagination, fetch entities after this many (optional)
     * @param rfilter The query will use this value to filter resources after it has determined latest versions and traversed the link tree. This stepwise filter can be combined with the other stepwise filters. It cannot be combined with the simple filter parameter. See filter for details of this filter&#39;s possible values. (optional)
     * @param sort Comma separated list of {asc|desc}_{field name} (optional)
     * @param tfilter The query will use this value to filter resources as the query traverses the link tree. This stepwise filter can be combined with the other stepwise filters. It cannot be combined with the simple filter parameter. See filter for details of this filter&#39;s possible values. (optional)
     * @param useEffectiveDate  (optional)
     * @param vfilter The query will use this value to filter resources as the query determines latest versions. This stepwise filter can be combined with the other stepwise filters. It cannot be combined with the simple filter parameter. See filter for details of this filter&#39;s possible values. (optional)
     * @return PageResponseLinkDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public PageResponseLinkDTO getLinksUsingGET(String domain, Integer count, OffsetDateTime effectiveDate, String filter, Integer linkDepth, UUID linkObjectId, UUID linkSubjectId, Integer linkSubjectVersion, Integer offset, String rfilter, String sort, String tfilter, Boolean useEffectiveDate, String vfilter) throws ApiException {
        ApiResponse<PageResponseLinkDTO> localVarResp = getLinksUsingGETWithHttpInfo(domain, count, effectiveDate, filter, linkDepth, linkObjectId, linkSubjectId, linkSubjectVersion, offset, rfilter, sort, tfilter, useEffectiveDate, vfilter);
        return localVarResp.getData();
    }

    /**
     * Fetch links to/from a resource
     * 
     * @param domain domain (required)
     * @param count For pagination, the number of entities per page (optional)
     * @param effectiveDate  (optional)
     * @param filter A simple filter that can be used in place of the complex filters. If the query asks for the latest version (which is the default), this filter&#39;s domains, types, states, and override ids are applied when determining the latest version. All other attributes of this filter are applied when building the link tree. The filter value is a semicolon delimited list of key value pairs. For example:  name:Example;states:DRAFT,APPROVED;searchString:*ample List values separate possible values with commas. Keys include: | filter name           | Filter value description                                                                        | |-----------------------|-------------------------------------------------------------------------------------------------| | description           | Match resources with this description.                                                          | | excludedTypes         | Match resources whose types do not appear in this comma-separated list.                         | | variableIsArray       | Matches resources against this value.                                                           | | variableType          | Match resources whose variableType is one of these specified.                                   | | ids                   | Match resources with ids in this comma-separated list.                                          | | excludedIds           | Match resources with ids that are NOT in this comma-separated list.                             | | parentId              | Exclude this resource and others directly linked to it. Only usable in the resources API.       | | parentVersion         | For use with parentId. Must use both.                                                           | | name                  | Match resources with this name.                                                                 | | overrideIds           | When matching by states, do not apply the states filter to resources with ids in this list.     | | overrideStates        | When matching by states, apply this states filter to resources with ids in the overrideIds list.| | resourcePackId        | Match resources with this resource pack id.                                                     | | searchString          | Match resources with names or descriptions matching this string. Use a &amp;ast; as a wildcard.     | | caseSensitive         | Specify if searches (name, description, searchString) are case sensitive or not.                | | wholeWord             | Specify if searches (name, description, searchString) match whole word or not.                  | | createdBy             | Match resources created by this user.                                                           | | lastModifiedBy        | Match resources last modified by this user.                                                     | | createdDateStart      | Match resources created on or after this date. (yyyy-MM-dd format).                                   | | createdDateEnd        | Match resources created before this date. (yyyy-MM-dd format).                                  | | lastModifiedDateStart | Match resources last modified on or after this date. (yyyy-MM-dd format).                             | | lastModifiedDateEnd   | Match resources last modified before this date. (yyyy-MM-dd format).                            | | states                | Match resources with states in this list. States include: DRAFT,REVIEW,APPROVED,REJECTED      | | latestVersion         | Set to false to fetch all versions of resources matching the rest of this filter. Only usable in the resources API.| | types                 | Match resources with types in this list. Types include: resourcepack, exstrapplication, exstrdocument, exstrpage, exstrcomponentobj, exstremail, exstrengine, exstrvariablebase, exstrpackage, exstrgraphicalmessage, exstrtextmessage, exstrparagraph, exstrparagraphsection, image, samplefile, exstrdatasource, exstrhtml5, versionedtemplate, documentdefinition, enginerundef, font, fontdefinition, exstrbarcode, exstrpapertype, exstrmessagetype, exstrmetadata, exstrcommunicationset, exstroutputqueue, exstroutput, exstrmigrationset, exstrmessaging         | | systemResource        | Match resources that are (or are not) system resources.                                         | | hasApprovedVersion    | Match resources where a previously approved version of the resources exist.                     | | hidden                | Match resources that are (or are not) hidden.                                                   | | includeVariants       | Set to true to include variants in the response. By default they are excluded unless standardVariantId is specified.| | standardVariantId     | Match resources that are variants of this specified one. Can not be used when includeVariants is explicitly false.  | | categories            | Match resources that are contain at least one of the categories from this list.                 | (optional)
     * @param linkDepth Optionally specify the maximum depth for a recursive traversal of a link tree. (optional, default to 1)
     * @param linkObjectId  (optional)
     * @param linkSubjectId  (optional)
     * @param linkSubjectVersion  (optional)
     * @param offset For pagination, fetch entities after this many (optional)
     * @param rfilter The query will use this value to filter resources after it has determined latest versions and traversed the link tree. This stepwise filter can be combined with the other stepwise filters. It cannot be combined with the simple filter parameter. See filter for details of this filter&#39;s possible values. (optional)
     * @param sort Comma separated list of {asc|desc}_{field name} (optional)
     * @param tfilter The query will use this value to filter resources as the query traverses the link tree. This stepwise filter can be combined with the other stepwise filters. It cannot be combined with the simple filter parameter. See filter for details of this filter&#39;s possible values. (optional)
     * @param useEffectiveDate  (optional)
     * @param vfilter The query will use this value to filter resources as the query determines latest versions. This stepwise filter can be combined with the other stepwise filters. It cannot be combined with the simple filter parameter. See filter for details of this filter&#39;s possible values. (optional)
     * @return ApiResponse&lt;PageResponseLinkDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PageResponseLinkDTO> getLinksUsingGETWithHttpInfo(String domain, Integer count, OffsetDateTime effectiveDate, String filter, Integer linkDepth, UUID linkObjectId, UUID linkSubjectId, Integer linkSubjectVersion, Integer offset, String rfilter, String sort, String tfilter, Boolean useEffectiveDate, String vfilter) throws ApiException {
        okhttp3.Call localVarCall = getLinksUsingGETValidateBeforeCall(domain, count, effectiveDate, filter, linkDepth, linkObjectId, linkSubjectId, linkSubjectVersion, offset, rfilter, sort, tfilter, useEffectiveDate, vfilter, null);
        Type localVarReturnType = new TypeToken<PageResponseLinkDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Fetch links to/from a resource (asynchronously)
     * 
     * @param domain domain (required)
     * @param count For pagination, the number of entities per page (optional)
     * @param effectiveDate  (optional)
     * @param filter A simple filter that can be used in place of the complex filters. If the query asks for the latest version (which is the default), this filter&#39;s domains, types, states, and override ids are applied when determining the latest version. All other attributes of this filter are applied when building the link tree. The filter value is a semicolon delimited list of key value pairs. For example:  name:Example;states:DRAFT,APPROVED;searchString:*ample List values separate possible values with commas. Keys include: | filter name           | Filter value description                                                                        | |-----------------------|-------------------------------------------------------------------------------------------------| | description           | Match resources with this description.                                                          | | excludedTypes         | Match resources whose types do not appear in this comma-separated list.                         | | variableIsArray       | Matches resources against this value.                                                           | | variableType          | Match resources whose variableType is one of these specified.                                   | | ids                   | Match resources with ids in this comma-separated list.                                          | | excludedIds           | Match resources with ids that are NOT in this comma-separated list.                             | | parentId              | Exclude this resource and others directly linked to it. Only usable in the resources API.       | | parentVersion         | For use with parentId. Must use both.                                                           | | name                  | Match resources with this name.                                                                 | | overrideIds           | When matching by states, do not apply the states filter to resources with ids in this list.     | | overrideStates        | When matching by states, apply this states filter to resources with ids in the overrideIds list.| | resourcePackId        | Match resources with this resource pack id.                                                     | | searchString          | Match resources with names or descriptions matching this string. Use a &amp;ast; as a wildcard.     | | caseSensitive         | Specify if searches (name, description, searchString) are case sensitive or not.                | | wholeWord             | Specify if searches (name, description, searchString) match whole word or not.                  | | createdBy             | Match resources created by this user.                                                           | | lastModifiedBy        | Match resources last modified by this user.                                                     | | createdDateStart      | Match resources created on or after this date. (yyyy-MM-dd format).                                   | | createdDateEnd        | Match resources created before this date. (yyyy-MM-dd format).                                  | | lastModifiedDateStart | Match resources last modified on or after this date. (yyyy-MM-dd format).                             | | lastModifiedDateEnd   | Match resources last modified before this date. (yyyy-MM-dd format).                            | | states                | Match resources with states in this list. States include: DRAFT,REVIEW,APPROVED,REJECTED      | | latestVersion         | Set to false to fetch all versions of resources matching the rest of this filter. Only usable in the resources API.| | types                 | Match resources with types in this list. Types include: resourcepack, exstrapplication, exstrdocument, exstrpage, exstrcomponentobj, exstremail, exstrengine, exstrvariablebase, exstrpackage, exstrgraphicalmessage, exstrtextmessage, exstrparagraph, exstrparagraphsection, image, samplefile, exstrdatasource, exstrhtml5, versionedtemplate, documentdefinition, enginerundef, font, fontdefinition, exstrbarcode, exstrpapertype, exstrmessagetype, exstrmetadata, exstrcommunicationset, exstroutputqueue, exstroutput, exstrmigrationset, exstrmessaging         | | systemResource        | Match resources that are (or are not) system resources.                                         | | hasApprovedVersion    | Match resources where a previously approved version of the resources exist.                     | | hidden                | Match resources that are (or are not) hidden.                                                   | | includeVariants       | Set to true to include variants in the response. By default they are excluded unless standardVariantId is specified.| | standardVariantId     | Match resources that are variants of this specified one. Can not be used when includeVariants is explicitly false.  | | categories            | Match resources that are contain at least one of the categories from this list.                 | (optional)
     * @param linkDepth Optionally specify the maximum depth for a recursive traversal of a link tree. (optional, default to 1)
     * @param linkObjectId  (optional)
     * @param linkSubjectId  (optional)
     * @param linkSubjectVersion  (optional)
     * @param offset For pagination, fetch entities after this many (optional)
     * @param rfilter The query will use this value to filter resources after it has determined latest versions and traversed the link tree. This stepwise filter can be combined with the other stepwise filters. It cannot be combined with the simple filter parameter. See filter for details of this filter&#39;s possible values. (optional)
     * @param sort Comma separated list of {asc|desc}_{field name} (optional)
     * @param tfilter The query will use this value to filter resources as the query traverses the link tree. This stepwise filter can be combined with the other stepwise filters. It cannot be combined with the simple filter parameter. See filter for details of this filter&#39;s possible values. (optional)
     * @param useEffectiveDate  (optional)
     * @param vfilter The query will use this value to filter resources as the query determines latest versions. This stepwise filter can be combined with the other stepwise filters. It cannot be combined with the simple filter parameter. See filter for details of this filter&#39;s possible values. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getLinksUsingGETAsync(String domain, Integer count, OffsetDateTime effectiveDate, String filter, Integer linkDepth, UUID linkObjectId, UUID linkSubjectId, Integer linkSubjectVersion, Integer offset, String rfilter, String sort, String tfilter, Boolean useEffectiveDate, String vfilter, final ApiCallback<PageResponseLinkDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = getLinksUsingGETValidateBeforeCall(domain, count, effectiveDate, filter, linkDepth, linkObjectId, linkSubjectId, linkSubjectVersion, offset, rfilter, sort, tfilter, useEffectiveDate, vfilter, _callback);
        Type localVarReturnType = new TypeToken<PageResponseLinkDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getResourcesUsingGET
     * @param domain domain (required)
     * @param count For pagination, the number of entities per page (optional)
     * @param effectiveDate  (optional)
     * @param filter A simple filter that can be used in place of the complex filters. If the query asks for the latest version (which is the default), this filter&#39;s domains, types, states, and override ids are applied when determining the latest version. All other attributes of this filter are applied when building the link tree. The filter value is a semicolon delimited list of key value pairs. For example:  name:Example;states:DRAFT,APPROVED;searchString:*ample List values separate possible values with commas. Keys include: | filter name           | Filter value description                                                                        | |-----------------------|-------------------------------------------------------------------------------------------------| | description           | Match resources with this description.                                                          | | excludedTypes         | Match resources whose types do not appear in this comma-separated list.                         | | variableIsArray       | Matches resources against this value.                                                           | | variableType          | Match resources whose variableType is one of these specified.                                   | | ids                   | Match resources with ids in this comma-separated list.                                          | | excludedIds           | Match resources with ids that are NOT in this comma-separated list.                             | | parentId              | Exclude this resource and others directly linked to it. Only usable in the resources API.       | | parentVersion         | For use with parentId. Must use both.                                                           | | name                  | Match resources with this name.                                                                 | | overrideIds           | When matching by states, do not apply the states filter to resources with ids in this list.     | | overrideStates        | When matching by states, apply this states filter to resources with ids in the overrideIds list.| | resourcePackId        | Match resources with this resource pack id.                                                     | | searchString          | Match resources with names or descriptions matching this string. Use a &amp;ast; as a wildcard.     | | caseSensitive         | Specify if searches (name, description, searchString) are case sensitive or not.                | | wholeWord             | Specify if searches (name, description, searchString) match whole word or not.                  | | createdBy             | Match resources created by this user.                                                           | | lastModifiedBy        | Match resources last modified by this user.                                                     | | createdDateStart      | Match resources created on or after this date. (yyyy-MM-dd format).                                   | | createdDateEnd        | Match resources created before this date. (yyyy-MM-dd format).                                  | | lastModifiedDateStart | Match resources last modified on or after this date. (yyyy-MM-dd format).                             | | lastModifiedDateEnd   | Match resources last modified before this date. (yyyy-MM-dd format).                            | | states                | Match resources with states in this list. States include: DRAFT,REVIEW,APPROVED,REJECTED      | | latestVersion         | Set to false to fetch all versions of resources matching the rest of this filter. Only usable in the resources API.| | types                 | Match resources with types in this list. Types include: resourcepack, exstrapplication, exstrdocument, exstrpage, exstrcomponentobj, exstremail, exstrengine, exstrvariablebase, exstrpackage, exstrgraphicalmessage, exstrtextmessage, exstrparagraph, exstrparagraphsection, image, samplefile, exstrdatasource, exstrhtml5, versionedtemplate, documentdefinition, enginerundef, font, fontdefinition, exstrbarcode, exstrpapertype, exstrmessagetype, exstrmetadata, exstrcommunicationset, exstroutputqueue, exstroutput, exstrmigrationset, exstrmessaging         | | systemResource        | Match resources that are (or are not) system resources.                                         | | hasApprovedVersion    | Match resources where a previously approved version of the resources exist.                     | | hidden                | Match resources that are (or are not) hidden.                                                   | | includeVariants       | Set to true to include variants in the response. By default they are excluded unless standardVariantId is specified.| | standardVariantId     | Match resources that are variants of this specified one. Can not be used when includeVariants is explicitly false.  | | categories            | Match resources that are contain at least one of the categories from this list.                 | (optional)
     * @param linkDepth Optionally specify the maximum depth for a recursive traversal of a link tree. (optional, default to 1)
     * @param linkObjectId  (optional)
     * @param linkSubjectId  (optional)
     * @param offset For pagination, fetch entities after this many (optional)
     * @param rfilter The query will use this value to filter resources after it has determined latest versions and traversed the link tree. This stepwise filter can be combined with the other stepwise filters. It cannot be combined with the simple filter parameter. See filter for details of this filter&#39;s possible values. (optional)
     * @param sort Comma separated list of {asc|desc}_{field name} (optional)
     * @param tfilter The query will use this value to filter resources as the query traverses the link tree. This stepwise filter can be combined with the other stepwise filters. It cannot be combined with the simple filter parameter. See filter for details of this filter&#39;s possible values. (optional)
     * @param useEffectiveDate  (optional)
     * @param vfilter The query will use this value to filter resources as the query determines latest versions. This stepwise filter can be combined with the other stepwise filters. It cannot be combined with the simple filter parameter. See filter for details of this filter&#39;s possible values. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getResourcesUsingGETCall(String domain, Integer count, OffsetDateTime effectiveDate, String filter, Integer linkDepth, UUID linkObjectId, UUID linkSubjectId, Integer offset, String rfilter, String sort, String tfilter, Boolean useEffectiveDate, String vfilter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/links/{domain}/resources"
            .replace("{" + "domain" + "}", localVarApiClient.escapeString(domain.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (effectiveDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("effectiveDate", effectiveDate));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (linkDepth != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("linkDepth", linkDepth));
        }

        if (linkObjectId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("linkObjectId", linkObjectId));
        }

        if (linkSubjectId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("linkSubjectId", linkSubjectId));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (rfilter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rfilter", rfilter));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (tfilter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tfilter", tfilter));
        }

        if (useEffectiveDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("useEffectiveDate", useEffectiveDate));
        }

        if (vfilter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vfilter", vfilter));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getResourcesUsingGETValidateBeforeCall(String domain, Integer count, OffsetDateTime effectiveDate, String filter, Integer linkDepth, UUID linkObjectId, UUID linkSubjectId, Integer offset, String rfilter, String sort, String tfilter, Boolean useEffectiveDate, String vfilter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling getResourcesUsingGET(Async)");
        }

        return getResourcesUsingGETCall(domain, count, effectiveDate, filter, linkDepth, linkObjectId, linkSubjectId, offset, rfilter, sort, tfilter, useEffectiveDate, vfilter, _callback);

    }

    /**
     * Fetch resources that are linked to/from another resource
     * 
     * @param domain domain (required)
     * @param count For pagination, the number of entities per page (optional)
     * @param effectiveDate  (optional)
     * @param filter A simple filter that can be used in place of the complex filters. If the query asks for the latest version (which is the default), this filter&#39;s domains, types, states, and override ids are applied when determining the latest version. All other attributes of this filter are applied when building the link tree. The filter value is a semicolon delimited list of key value pairs. For example:  name:Example;states:DRAFT,APPROVED;searchString:*ample List values separate possible values with commas. Keys include: | filter name           | Filter value description                                                                        | |-----------------------|-------------------------------------------------------------------------------------------------| | description           | Match resources with this description.                                                          | | excludedTypes         | Match resources whose types do not appear in this comma-separated list.                         | | variableIsArray       | Matches resources against this value.                                                           | | variableType          | Match resources whose variableType is one of these specified.                                   | | ids                   | Match resources with ids in this comma-separated list.                                          | | excludedIds           | Match resources with ids that are NOT in this comma-separated list.                             | | parentId              | Exclude this resource and others directly linked to it. Only usable in the resources API.       | | parentVersion         | For use with parentId. Must use both.                                                           | | name                  | Match resources with this name.                                                                 | | overrideIds           | When matching by states, do not apply the states filter to resources with ids in this list.     | | overrideStates        | When matching by states, apply this states filter to resources with ids in the overrideIds list.| | resourcePackId        | Match resources with this resource pack id.                                                     | | searchString          | Match resources with names or descriptions matching this string. Use a &amp;ast; as a wildcard.     | | caseSensitive         | Specify if searches (name, description, searchString) are case sensitive or not.                | | wholeWord             | Specify if searches (name, description, searchString) match whole word or not.                  | | createdBy             | Match resources created by this user.                                                           | | lastModifiedBy        | Match resources last modified by this user.                                                     | | createdDateStart      | Match resources created on or after this date. (yyyy-MM-dd format).                                   | | createdDateEnd        | Match resources created before this date. (yyyy-MM-dd format).                                  | | lastModifiedDateStart | Match resources last modified on or after this date. (yyyy-MM-dd format).                             | | lastModifiedDateEnd   | Match resources last modified before this date. (yyyy-MM-dd format).                            | | states                | Match resources with states in this list. States include: DRAFT,REVIEW,APPROVED,REJECTED      | | latestVersion         | Set to false to fetch all versions of resources matching the rest of this filter. Only usable in the resources API.| | types                 | Match resources with types in this list. Types include: resourcepack, exstrapplication, exstrdocument, exstrpage, exstrcomponentobj, exstremail, exstrengine, exstrvariablebase, exstrpackage, exstrgraphicalmessage, exstrtextmessage, exstrparagraph, exstrparagraphsection, image, samplefile, exstrdatasource, exstrhtml5, versionedtemplate, documentdefinition, enginerundef, font, fontdefinition, exstrbarcode, exstrpapertype, exstrmessagetype, exstrmetadata, exstrcommunicationset, exstroutputqueue, exstroutput, exstrmigrationset, exstrmessaging         | | systemResource        | Match resources that are (or are not) system resources.                                         | | hasApprovedVersion    | Match resources where a previously approved version of the resources exist.                     | | hidden                | Match resources that are (or are not) hidden.                                                   | | includeVariants       | Set to true to include variants in the response. By default they are excluded unless standardVariantId is specified.| | standardVariantId     | Match resources that are variants of this specified one. Can not be used when includeVariants is explicitly false.  | | categories            | Match resources that are contain at least one of the categories from this list.                 | (optional)
     * @param linkDepth Optionally specify the maximum depth for a recursive traversal of a link tree. (optional, default to 1)
     * @param linkObjectId  (optional)
     * @param linkSubjectId  (optional)
     * @param offset For pagination, fetch entities after this many (optional)
     * @param rfilter The query will use this value to filter resources after it has determined latest versions and traversed the link tree. This stepwise filter can be combined with the other stepwise filters. It cannot be combined with the simple filter parameter. See filter for details of this filter&#39;s possible values. (optional)
     * @param sort Comma separated list of {asc|desc}_{field name} (optional)
     * @param tfilter The query will use this value to filter resources as the query traverses the link tree. This stepwise filter can be combined with the other stepwise filters. It cannot be combined with the simple filter parameter. See filter for details of this filter&#39;s possible values. (optional)
     * @param useEffectiveDate  (optional)
     * @param vfilter The query will use this value to filter resources as the query determines latest versions. This stepwise filter can be combined with the other stepwise filters. It cannot be combined with the simple filter parameter. See filter for details of this filter&#39;s possible values. (optional)
     * @return PageResponseResourceVersion
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public PageResponseResourceVersion getResourcesUsingGET(String domain, Integer count, OffsetDateTime effectiveDate, String filter, Integer linkDepth, UUID linkObjectId, UUID linkSubjectId, Integer offset, String rfilter, String sort, String tfilter, Boolean useEffectiveDate, String vfilter) throws ApiException {
        ApiResponse<PageResponseResourceVersion> localVarResp = getResourcesUsingGETWithHttpInfo(domain, count, effectiveDate, filter, linkDepth, linkObjectId, linkSubjectId, offset, rfilter, sort, tfilter, useEffectiveDate, vfilter);
        return localVarResp.getData();
    }

    /**
     * Fetch resources that are linked to/from another resource
     * 
     * @param domain domain (required)
     * @param count For pagination, the number of entities per page (optional)
     * @param effectiveDate  (optional)
     * @param filter A simple filter that can be used in place of the complex filters. If the query asks for the latest version (which is the default), this filter&#39;s domains, types, states, and override ids are applied when determining the latest version. All other attributes of this filter are applied when building the link tree. The filter value is a semicolon delimited list of key value pairs. For example:  name:Example;states:DRAFT,APPROVED;searchString:*ample List values separate possible values with commas. Keys include: | filter name           | Filter value description                                                                        | |-----------------------|-------------------------------------------------------------------------------------------------| | description           | Match resources with this description.                                                          | | excludedTypes         | Match resources whose types do not appear in this comma-separated list.                         | | variableIsArray       | Matches resources against this value.                                                           | | variableType          | Match resources whose variableType is one of these specified.                                   | | ids                   | Match resources with ids in this comma-separated list.                                          | | excludedIds           | Match resources with ids that are NOT in this comma-separated list.                             | | parentId              | Exclude this resource and others directly linked to it. Only usable in the resources API.       | | parentVersion         | For use with parentId. Must use both.                                                           | | name                  | Match resources with this name.                                                                 | | overrideIds           | When matching by states, do not apply the states filter to resources with ids in this list.     | | overrideStates        | When matching by states, apply this states filter to resources with ids in the overrideIds list.| | resourcePackId        | Match resources with this resource pack id.                                                     | | searchString          | Match resources with names or descriptions matching this string. Use a &amp;ast; as a wildcard.     | | caseSensitive         | Specify if searches (name, description, searchString) are case sensitive or not.                | | wholeWord             | Specify if searches (name, description, searchString) match whole word or not.                  | | createdBy             | Match resources created by this user.                                                           | | lastModifiedBy        | Match resources last modified by this user.                                                     | | createdDateStart      | Match resources created on or after this date. (yyyy-MM-dd format).                                   | | createdDateEnd        | Match resources created before this date. (yyyy-MM-dd format).                                  | | lastModifiedDateStart | Match resources last modified on or after this date. (yyyy-MM-dd format).                             | | lastModifiedDateEnd   | Match resources last modified before this date. (yyyy-MM-dd format).                            | | states                | Match resources with states in this list. States include: DRAFT,REVIEW,APPROVED,REJECTED      | | latestVersion         | Set to false to fetch all versions of resources matching the rest of this filter. Only usable in the resources API.| | types                 | Match resources with types in this list. Types include: resourcepack, exstrapplication, exstrdocument, exstrpage, exstrcomponentobj, exstremail, exstrengine, exstrvariablebase, exstrpackage, exstrgraphicalmessage, exstrtextmessage, exstrparagraph, exstrparagraphsection, image, samplefile, exstrdatasource, exstrhtml5, versionedtemplate, documentdefinition, enginerundef, font, fontdefinition, exstrbarcode, exstrpapertype, exstrmessagetype, exstrmetadata, exstrcommunicationset, exstroutputqueue, exstroutput, exstrmigrationset, exstrmessaging         | | systemResource        | Match resources that are (or are not) system resources.                                         | | hasApprovedVersion    | Match resources where a previously approved version of the resources exist.                     | | hidden                | Match resources that are (or are not) hidden.                                                   | | includeVariants       | Set to true to include variants in the response. By default they are excluded unless standardVariantId is specified.| | standardVariantId     | Match resources that are variants of this specified one. Can not be used when includeVariants is explicitly false.  | | categories            | Match resources that are contain at least one of the categories from this list.                 | (optional)
     * @param linkDepth Optionally specify the maximum depth for a recursive traversal of a link tree. (optional, default to 1)
     * @param linkObjectId  (optional)
     * @param linkSubjectId  (optional)
     * @param offset For pagination, fetch entities after this many (optional)
     * @param rfilter The query will use this value to filter resources after it has determined latest versions and traversed the link tree. This stepwise filter can be combined with the other stepwise filters. It cannot be combined with the simple filter parameter. See filter for details of this filter&#39;s possible values. (optional)
     * @param sort Comma separated list of {asc|desc}_{field name} (optional)
     * @param tfilter The query will use this value to filter resources as the query traverses the link tree. This stepwise filter can be combined with the other stepwise filters. It cannot be combined with the simple filter parameter. See filter for details of this filter&#39;s possible values. (optional)
     * @param useEffectiveDate  (optional)
     * @param vfilter The query will use this value to filter resources as the query determines latest versions. This stepwise filter can be combined with the other stepwise filters. It cannot be combined with the simple filter parameter. See filter for details of this filter&#39;s possible values. (optional)
     * @return ApiResponse&lt;PageResponseResourceVersion&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PageResponseResourceVersion> getResourcesUsingGETWithHttpInfo(String domain, Integer count, OffsetDateTime effectiveDate, String filter, Integer linkDepth, UUID linkObjectId, UUID linkSubjectId, Integer offset, String rfilter, String sort, String tfilter, Boolean useEffectiveDate, String vfilter) throws ApiException {
        okhttp3.Call localVarCall = getResourcesUsingGETValidateBeforeCall(domain, count, effectiveDate, filter, linkDepth, linkObjectId, linkSubjectId, offset, rfilter, sort, tfilter, useEffectiveDate, vfilter, null);
        Type localVarReturnType = new TypeToken<PageResponseResourceVersion>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Fetch resources that are linked to/from another resource (asynchronously)
     * 
     * @param domain domain (required)
     * @param count For pagination, the number of entities per page (optional)
     * @param effectiveDate  (optional)
     * @param filter A simple filter that can be used in place of the complex filters. If the query asks for the latest version (which is the default), this filter&#39;s domains, types, states, and override ids are applied when determining the latest version. All other attributes of this filter are applied when building the link tree. The filter value is a semicolon delimited list of key value pairs. For example:  name:Example;states:DRAFT,APPROVED;searchString:*ample List values separate possible values with commas. Keys include: | filter name           | Filter value description                                                                        | |-----------------------|-------------------------------------------------------------------------------------------------| | description           | Match resources with this description.                                                          | | excludedTypes         | Match resources whose types do not appear in this comma-separated list.                         | | variableIsArray       | Matches resources against this value.                                                           | | variableType          | Match resources whose variableType is one of these specified.                                   | | ids                   | Match resources with ids in this comma-separated list.                                          | | excludedIds           | Match resources with ids that are NOT in this comma-separated list.                             | | parentId              | Exclude this resource and others directly linked to it. Only usable in the resources API.       | | parentVersion         | For use with parentId. Must use both.                                                           | | name                  | Match resources with this name.                                                                 | | overrideIds           | When matching by states, do not apply the states filter to resources with ids in this list.     | | overrideStates        | When matching by states, apply this states filter to resources with ids in the overrideIds list.| | resourcePackId        | Match resources with this resource pack id.                                                     | | searchString          | Match resources with names or descriptions matching this string. Use a &amp;ast; as a wildcard.     | | caseSensitive         | Specify if searches (name, description, searchString) are case sensitive or not.                | | wholeWord             | Specify if searches (name, description, searchString) match whole word or not.                  | | createdBy             | Match resources created by this user.                                                           | | lastModifiedBy        | Match resources last modified by this user.                                                     | | createdDateStart      | Match resources created on or after this date. (yyyy-MM-dd format).                                   | | createdDateEnd        | Match resources created before this date. (yyyy-MM-dd format).                                  | | lastModifiedDateStart | Match resources last modified on or after this date. (yyyy-MM-dd format).                             | | lastModifiedDateEnd   | Match resources last modified before this date. (yyyy-MM-dd format).                            | | states                | Match resources with states in this list. States include: DRAFT,REVIEW,APPROVED,REJECTED      | | latestVersion         | Set to false to fetch all versions of resources matching the rest of this filter. Only usable in the resources API.| | types                 | Match resources with types in this list. Types include: resourcepack, exstrapplication, exstrdocument, exstrpage, exstrcomponentobj, exstremail, exstrengine, exstrvariablebase, exstrpackage, exstrgraphicalmessage, exstrtextmessage, exstrparagraph, exstrparagraphsection, image, samplefile, exstrdatasource, exstrhtml5, versionedtemplate, documentdefinition, enginerundef, font, fontdefinition, exstrbarcode, exstrpapertype, exstrmessagetype, exstrmetadata, exstrcommunicationset, exstroutputqueue, exstroutput, exstrmigrationset, exstrmessaging         | | systemResource        | Match resources that are (or are not) system resources.                                         | | hasApprovedVersion    | Match resources where a previously approved version of the resources exist.                     | | hidden                | Match resources that are (or are not) hidden.                                                   | | includeVariants       | Set to true to include variants in the response. By default they are excluded unless standardVariantId is specified.| | standardVariantId     | Match resources that are variants of this specified one. Can not be used when includeVariants is explicitly false.  | | categories            | Match resources that are contain at least one of the categories from this list.                 | (optional)
     * @param linkDepth Optionally specify the maximum depth for a recursive traversal of a link tree. (optional, default to 1)
     * @param linkObjectId  (optional)
     * @param linkSubjectId  (optional)
     * @param offset For pagination, fetch entities after this many (optional)
     * @param rfilter The query will use this value to filter resources after it has determined latest versions and traversed the link tree. This stepwise filter can be combined with the other stepwise filters. It cannot be combined with the simple filter parameter. See filter for details of this filter&#39;s possible values. (optional)
     * @param sort Comma separated list of {asc|desc}_{field name} (optional)
     * @param tfilter The query will use this value to filter resources as the query traverses the link tree. This stepwise filter can be combined with the other stepwise filters. It cannot be combined with the simple filter parameter. See filter for details of this filter&#39;s possible values. (optional)
     * @param useEffectiveDate  (optional)
     * @param vfilter The query will use this value to filter resources as the query determines latest versions. This stepwise filter can be combined with the other stepwise filters. It cannot be combined with the simple filter parameter. See filter for details of this filter&#39;s possible values. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getResourcesUsingGETAsync(String domain, Integer count, OffsetDateTime effectiveDate, String filter, Integer linkDepth, UUID linkObjectId, UUID linkSubjectId, Integer offset, String rfilter, String sort, String tfilter, Boolean useEffectiveDate, String vfilter, final ApiCallback<PageResponseResourceVersion> _callback) throws ApiException {

        okhttp3.Call localVarCall = getResourcesUsingGETValidateBeforeCall(domain, count, effectiveDate, filter, linkDepth, linkObjectId, linkSubjectId, offset, rfilter, sort, tfilter, useEffectiveDate, vfilter, _callback);
        Type localVarReturnType = new TypeToken<PageResponseResourceVersion>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
