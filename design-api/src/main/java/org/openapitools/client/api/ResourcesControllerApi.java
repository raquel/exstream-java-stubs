/*
 * Exstream CE Design API (21.2.0)
 * The Exstream CE Design API allows developers to query, create, modify, or delete Exstream CE resources and their links outside of the Exstream CE user inferface. This API requires authentication in order to be used - to authenticate requests, supply a valid OTDS token with `Authorization: Bearer OTDS_TOKEN` in the request header.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.DataResponseResource;
import org.openapitools.client.model.DataResponseResourceVersion;
import org.openapitools.client.model.Domain;
import java.io.File;
import org.openapitools.client.model.GenericResponse;
import org.openapitools.client.model.ListResponseResourceHistory;
import org.openapitools.client.model.PageResponseResourceVersion;
import org.openapitools.client.model.ResourceVersion;
import java.util.UUID;
import org.openapitools.client.model.WorkflowRequestBody;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ResourcesControllerApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ResourcesControllerApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ResourcesControllerApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createResourceFromFileUsingPOST
     * @param domain domain (required)
     * @param name The name of the resource to create. (required)
     * @param type The type of resource to create. (required)
     * @param _file The binary file to upload. (required)
     * @param subtype The subtype of resource to create. Appears in metadata. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createResourceFromFileUsingPOSTCall(String domain, String name, String type, File _file, String subtype, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/resources/{domain}/content"
            .replace("{" + "domain" + "}", localVarApiClient.escapeString(domain.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (_file != null) {
            localVarFormParams.put("file", _file);
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (subtype != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("subtype", subtype));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createResourceFromFileUsingPOSTValidateBeforeCall(String domain, String name, String type, File _file, String subtype, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling createResourceFromFileUsingPOST(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling createResourceFromFileUsingPOST(Async)");
        }

        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling createResourceFromFileUsingPOST(Async)");
        }

        // verify the required parameter '_file' is set
        if (_file == null) {
            throw new ApiException("Missing the required parameter '_file' when calling createResourceFromFileUsingPOST(Async)");
        }

        return createResourceFromFileUsingPOSTCall(domain, name, type, _file, subtype, _callback);

    }

    /**
     * Create resource from file
     * 
     * @param domain domain (required)
     * @param name The name of the resource to create. (required)
     * @param type The type of resource to create. (required)
     * @param _file The binary file to upload. (required)
     * @param subtype The subtype of resource to create. Appears in metadata. (optional)
     * @return DataResponseResourceVersion
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public DataResponseResourceVersion createResourceFromFileUsingPOST(String domain, String name, String type, File _file, String subtype) throws ApiException {
        ApiResponse<DataResponseResourceVersion> localVarResp = createResourceFromFileUsingPOSTWithHttpInfo(domain, name, type, _file, subtype);
        return localVarResp.getData();
    }

    /**
     * Create resource from file
     * 
     * @param domain domain (required)
     * @param name The name of the resource to create. (required)
     * @param type The type of resource to create. (required)
     * @param _file The binary file to upload. (required)
     * @param subtype The subtype of resource to create. Appears in metadata. (optional)
     * @return ApiResponse&lt;DataResponseResourceVersion&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DataResponseResourceVersion> createResourceFromFileUsingPOSTWithHttpInfo(String domain, String name, String type, File _file, String subtype) throws ApiException {
        okhttp3.Call localVarCall = createResourceFromFileUsingPOSTValidateBeforeCall(domain, name, type, _file, subtype, null);
        Type localVarReturnType = new TypeToken<DataResponseResourceVersion>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create resource from file (asynchronously)
     * 
     * @param domain domain (required)
     * @param name The name of the resource to create. (required)
     * @param type The type of resource to create. (required)
     * @param _file The binary file to upload. (required)
     * @param subtype The subtype of resource to create. Appears in metadata. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createResourceFromFileUsingPOSTAsync(String domain, String name, String type, File _file, String subtype, final ApiCallback<DataResponseResourceVersion> _callback) throws ApiException {

        okhttp3.Call localVarCall = createResourceFromFileUsingPOSTValidateBeforeCall(domain, name, type, _file, subtype, _callback);
        Type localVarReturnType = new TypeToken<DataResponseResourceVersion>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createResourceUsingPOST
     * @param domain domain (required)
     * @param body body (required)
     * @param charsetRegistered  (optional)
     * @param concrete  (optional)
     * @param contentMimeType contentMimeType (optional)
     * @param qualityValue  (optional)
     * @param subtype  (optional)
     * @param type  (optional)
     * @param wildcardSubtype  (optional)
     * @param wildcardType  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createResourceUsingPOSTCall(String domain, ResourceVersion body, Boolean charsetRegistered, Boolean concrete, String contentMimeType, Double qualityValue, String subtype, String type, Boolean wildcardSubtype, Boolean wildcardType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/api/v1/resources/{domain}"
            .replace("{" + "domain" + "}", localVarApiClient.escapeString(domain.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (charsetRegistered != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("charset.registered", charsetRegistered));
        }

        if (concrete != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("concrete", concrete));
        }

        if (contentMimeType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contentMimeType", contentMimeType));
        }

        if (qualityValue != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("qualityValue", qualityValue));
        }

        if (subtype != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("subtype", subtype));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (wildcardSubtype != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("wildcardSubtype", wildcardSubtype));
        }

        if (wildcardType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("wildcardType", wildcardType));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createResourceUsingPOSTValidateBeforeCall(String domain, ResourceVersion body, Boolean charsetRegistered, Boolean concrete, String contentMimeType, Double qualityValue, String subtype, String type, Boolean wildcardSubtype, Boolean wildcardType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling createResourceUsingPOST(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createResourceUsingPOST(Async)");
        }

        return createResourceUsingPOSTCall(domain, body, charsetRegistered, concrete, contentMimeType, qualityValue, subtype, type, wildcardSubtype, wildcardType, _callback);

    }

    /**
     * Create a new resource
     * 
     * @param domain domain (required)
     * @param body body (required)
     * @param charsetRegistered  (optional)
     * @param concrete  (optional)
     * @param contentMimeType contentMimeType (optional)
     * @param qualityValue  (optional)
     * @param subtype  (optional)
     * @param type  (optional)
     * @param wildcardSubtype  (optional)
     * @param wildcardType  (optional)
     * @return DataResponseResourceVersion
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public DataResponseResourceVersion createResourceUsingPOST(String domain, ResourceVersion body, Boolean charsetRegistered, Boolean concrete, String contentMimeType, Double qualityValue, String subtype, String type, Boolean wildcardSubtype, Boolean wildcardType) throws ApiException {
        ApiResponse<DataResponseResourceVersion> localVarResp = createResourceUsingPOSTWithHttpInfo(domain, body, charsetRegistered, concrete, contentMimeType, qualityValue, subtype, type, wildcardSubtype, wildcardType);
        return localVarResp.getData();
    }

    /**
     * Create a new resource
     * 
     * @param domain domain (required)
     * @param body body (required)
     * @param charsetRegistered  (optional)
     * @param concrete  (optional)
     * @param contentMimeType contentMimeType (optional)
     * @param qualityValue  (optional)
     * @param subtype  (optional)
     * @param type  (optional)
     * @param wildcardSubtype  (optional)
     * @param wildcardType  (optional)
     * @return ApiResponse&lt;DataResponseResourceVersion&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DataResponseResourceVersion> createResourceUsingPOSTWithHttpInfo(String domain, ResourceVersion body, Boolean charsetRegistered, Boolean concrete, String contentMimeType, Double qualityValue, String subtype, String type, Boolean wildcardSubtype, Boolean wildcardType) throws ApiException {
        okhttp3.Call localVarCall = createResourceUsingPOSTValidateBeforeCall(domain, body, charsetRegistered, concrete, contentMimeType, qualityValue, subtype, type, wildcardSubtype, wildcardType, null);
        Type localVarReturnType = new TypeToken<DataResponseResourceVersion>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a new resource (asynchronously)
     * 
     * @param domain domain (required)
     * @param body body (required)
     * @param charsetRegistered  (optional)
     * @param concrete  (optional)
     * @param contentMimeType contentMimeType (optional)
     * @param qualityValue  (optional)
     * @param subtype  (optional)
     * @param type  (optional)
     * @param wildcardSubtype  (optional)
     * @param wildcardType  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createResourceUsingPOSTAsync(String domain, ResourceVersion body, Boolean charsetRegistered, Boolean concrete, String contentMimeType, Double qualityValue, String subtype, String type, Boolean wildcardSubtype, Boolean wildcardType, final ApiCallback<DataResponseResourceVersion> _callback) throws ApiException {

        okhttp3.Call localVarCall = createResourceUsingPOSTValidateBeforeCall(domain, body, charsetRegistered, concrete, contentMimeType, qualityValue, subtype, type, wildcardSubtype, wildcardType, _callback);
        Type localVarReturnType = new TypeToken<DataResponseResourceVersion>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteResourceUsingDELETE
     * @param domain domain (required)
     * @param id id (required)
     * @param version Valid values are LATEST, ALL, or an actual version number. If not specified, will use LATEST. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteResourceUsingDELETECall(String domain, UUID id, String version, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/resources/{domain}/{id}"
            .replace("{" + "domain" + "}", localVarApiClient.escapeString(domain.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("version", version));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteResourceUsingDELETEValidateBeforeCall(String domain, UUID id, String version, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling deleteResourceUsingDELETE(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteResourceUsingDELETE(Async)");
        }

        return deleteResourceUsingDELETECall(domain, id, version, _callback);

    }

    /**
     * Delete a resource
     * 
     * @param domain domain (required)
     * @param id id (required)
     * @param version Valid values are LATEST, ALL, or an actual version number. If not specified, will use LATEST. (optional)
     * @return GenericResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public GenericResponse deleteResourceUsingDELETE(String domain, UUID id, String version) throws ApiException {
        ApiResponse<GenericResponse> localVarResp = deleteResourceUsingDELETEWithHttpInfo(domain, id, version);
        return localVarResp.getData();
    }

    /**
     * Delete a resource
     * 
     * @param domain domain (required)
     * @param id id (required)
     * @param version Valid values are LATEST, ALL, or an actual version number. If not specified, will use LATEST. (optional)
     * @return ApiResponse&lt;GenericResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GenericResponse> deleteResourceUsingDELETEWithHttpInfo(String domain, UUID id, String version) throws ApiException {
        okhttp3.Call localVarCall = deleteResourceUsingDELETEValidateBeforeCall(domain, id, version, null);
        Type localVarReturnType = new TypeToken<GenericResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete a resource (asynchronously)
     * 
     * @param domain domain (required)
     * @param id id (required)
     * @param version Valid values are LATEST, ALL, or an actual version number. If not specified, will use LATEST. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteResourceUsingDELETEAsync(String domain, UUID id, String version, final ApiCallback<GenericResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteResourceUsingDELETEValidateBeforeCall(domain, id, version, _callback);
        Type localVarReturnType = new TypeToken<GenericResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for demoteUsingPUT
     * @param domain domain (required)
     * @param id id (required)
     * @param toDomain toDomain (required)
     * @param version version (optional, default to -1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call demoteUsingPUTCall(String domain, UUID id, Domain toDomain, Integer version, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = toDomain;

        // create path and map variables
        String localVarPath = "/api/v1/resources/{domain}/{id}/demote"
            .replace("{" + "domain" + "}", localVarApiClient.escapeString(domain.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("version", version));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call demoteUsingPUTValidateBeforeCall(String domain, UUID id, Domain toDomain, Integer version, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling demoteUsingPUT(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling demoteUsingPUT(Async)");
        }

        // verify the required parameter 'toDomain' is set
        if (toDomain == null) {
            throw new ApiException("Missing the required parameter 'toDomain' when calling demoteUsingPUT(Async)");
        }

        return demoteUsingPUTCall(domain, id, toDomain, version, _callback);

    }

    /**
     * Disassociate (demote) resource from a domain
     * 
     * @param domain domain (required)
     * @param id id (required)
     * @param toDomain toDomain (required)
     * @param version version (optional, default to -1)
     * @return DataResponseResourceVersion
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public DataResponseResourceVersion demoteUsingPUT(String domain, UUID id, Domain toDomain, Integer version) throws ApiException {
        ApiResponse<DataResponseResourceVersion> localVarResp = demoteUsingPUTWithHttpInfo(domain, id, toDomain, version);
        return localVarResp.getData();
    }

    /**
     * Disassociate (demote) resource from a domain
     * 
     * @param domain domain (required)
     * @param id id (required)
     * @param toDomain toDomain (required)
     * @param version version (optional, default to -1)
     * @return ApiResponse&lt;DataResponseResourceVersion&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DataResponseResourceVersion> demoteUsingPUTWithHttpInfo(String domain, UUID id, Domain toDomain, Integer version) throws ApiException {
        okhttp3.Call localVarCall = demoteUsingPUTValidateBeforeCall(domain, id, toDomain, version, null);
        Type localVarReturnType = new TypeToken<DataResponseResourceVersion>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Disassociate (demote) resource from a domain (asynchronously)
     * 
     * @param domain domain (required)
     * @param id id (required)
     * @param toDomain toDomain (required)
     * @param version version (optional, default to -1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call demoteUsingPUTAsync(String domain, UUID id, Domain toDomain, Integer version, final ApiCallback<DataResponseResourceVersion> _callback) throws ApiException {

        okhttp3.Call localVarCall = demoteUsingPUTValidateBeforeCall(domain, id, toDomain, version, _callback);
        Type localVarReturnType = new TypeToken<DataResponseResourceVersion>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getContentUsingGET
     * @param domain domain (required)
     * @param id id (required)
     * @param state state (optional)
     * @param version version (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getContentUsingGETCall(String domain, UUID id, String state, Integer version, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/resources/{domain}/{id}/content"
            .replace("{" + "domain" + "}", localVarApiClient.escapeString(domain.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (state != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("state", state));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("version", version));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getContentUsingGETValidateBeforeCall(String domain, UUID id, String state, Integer version, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling getContentUsingGET(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getContentUsingGET(Async)");
        }

        return getContentUsingGETCall(domain, id, state, version, _callback);

    }

    /**
     * Fetch resource content
     * 
     * @param domain domain (required)
     * @param id id (required)
     * @param state state (optional)
     * @param version version (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public Object getContentUsingGET(String domain, UUID id, String state, Integer version) throws ApiException {
        ApiResponse<Object> localVarResp = getContentUsingGETWithHttpInfo(domain, id, state, version);
        return localVarResp.getData();
    }

    /**
     * Fetch resource content
     * 
     * @param domain domain (required)
     * @param id id (required)
     * @param state state (optional)
     * @param version version (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getContentUsingGETWithHttpInfo(String domain, UUID id, String state, Integer version) throws ApiException {
        okhttp3.Call localVarCall = getContentUsingGETValidateBeforeCall(domain, id, state, version, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Fetch resource content (asynchronously)
     * 
     * @param domain domain (required)
     * @param id id (required)
     * @param state state (optional)
     * @param version version (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getContentUsingGETAsync(String domain, UUID id, String state, Integer version, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getContentUsingGETValidateBeforeCall(domain, id, state, version, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getResourceContentUsingGET
     * @param domain domain (required)
     * @param id id (required)
     * @param type type (required)
     * @param state state (optional)
     * @param version version (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getResourceContentUsingGETCall(String domain, UUID id, String type, String state, Integer version, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/resources/{domain}/{id}/content/{type}"
            .replace("{" + "domain" + "}", localVarApiClient.escapeString(domain.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "type" + "}", localVarApiClient.escapeString(type.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (state != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("state", state));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("version", version));
        }

        final String[] localVarAccepts = {
            "application/xml",
            "image/png",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getResourceContentUsingGETValidateBeforeCall(String domain, UUID id, String type, String state, Integer version, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling getResourceContentUsingGET(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getResourceContentUsingGET(Async)");
        }

        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling getResourceContentUsingGET(Async)");
        }

        return getResourceContentUsingGETCall(domain, id, type, state, version, _callback);

    }

    /**
     * Get additional resource content
     * Thumbnails for resources are included here as additional content.
     * @param domain domain (required)
     * @param id id (required)
     * @param type type (required)
     * @param state state (optional)
     * @param version version (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public Object getResourceContentUsingGET(String domain, UUID id, String type, String state, Integer version) throws ApiException {
        ApiResponse<Object> localVarResp = getResourceContentUsingGETWithHttpInfo(domain, id, type, state, version);
        return localVarResp.getData();
    }

    /**
     * Get additional resource content
     * Thumbnails for resources are included here as additional content.
     * @param domain domain (required)
     * @param id id (required)
     * @param type type (required)
     * @param state state (optional)
     * @param version version (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getResourceContentUsingGETWithHttpInfo(String domain, UUID id, String type, String state, Integer version) throws ApiException {
        okhttp3.Call localVarCall = getResourceContentUsingGETValidateBeforeCall(domain, id, type, state, version, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get additional resource content (asynchronously)
     * Thumbnails for resources are included here as additional content.
     * @param domain domain (required)
     * @param id id (required)
     * @param type type (required)
     * @param state state (optional)
     * @param version version (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getResourceContentUsingGETAsync(String domain, UUID id, String type, String state, Integer version, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getResourceContentUsingGETValidateBeforeCall(domain, id, type, state, version, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getResourceHistoryUsingGET
     * @param domain domain (required)
     * @param resourceId resourceId (required)
     * @param fetchAcrossDomains fetchAcrossDomains (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getResourceHistoryUsingGETCall(String domain, UUID resourceId, Boolean fetchAcrossDomains, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/resources/{domain}/history/{resourceId}"
            .replace("{" + "domain" + "}", localVarApiClient.escapeString(domain.toString()))
            .replace("{" + "resourceId" + "}", localVarApiClient.escapeString(resourceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fetchAcrossDomains != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fetchAcrossDomains", fetchAcrossDomains));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getResourceHistoryUsingGETValidateBeforeCall(String domain, UUID resourceId, Boolean fetchAcrossDomains, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling getResourceHistoryUsingGET(Async)");
        }

        // verify the required parameter 'resourceId' is set
        if (resourceId == null) {
            throw new ApiException("Missing the required parameter 'resourceId' when calling getResourceHistoryUsingGET(Async)");
        }

        return getResourceHistoryUsingGETCall(domain, resourceId, fetchAcrossDomains, _callback);

    }

    /**
     * Fetch the history information of a resource
     * 
     * @param domain domain (required)
     * @param resourceId resourceId (required)
     * @param fetchAcrossDomains fetchAcrossDomains (optional)
     * @return ListResponseResourceHistory
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ListResponseResourceHistory getResourceHistoryUsingGET(String domain, UUID resourceId, Boolean fetchAcrossDomains) throws ApiException {
        ApiResponse<ListResponseResourceHistory> localVarResp = getResourceHistoryUsingGETWithHttpInfo(domain, resourceId, fetchAcrossDomains);
        return localVarResp.getData();
    }

    /**
     * Fetch the history information of a resource
     * 
     * @param domain domain (required)
     * @param resourceId resourceId (required)
     * @param fetchAcrossDomains fetchAcrossDomains (optional)
     * @return ApiResponse&lt;ListResponseResourceHistory&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListResponseResourceHistory> getResourceHistoryUsingGETWithHttpInfo(String domain, UUID resourceId, Boolean fetchAcrossDomains) throws ApiException {
        okhttp3.Call localVarCall = getResourceHistoryUsingGETValidateBeforeCall(domain, resourceId, fetchAcrossDomains, null);
        Type localVarReturnType = new TypeToken<ListResponseResourceHistory>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Fetch the history information of a resource (asynchronously)
     * 
     * @param domain domain (required)
     * @param resourceId resourceId (required)
     * @param fetchAcrossDomains fetchAcrossDomains (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getResourceHistoryUsingGETAsync(String domain, UUID resourceId, Boolean fetchAcrossDomains, final ApiCallback<ListResponseResourceHistory> _callback) throws ApiException {

        okhttp3.Call localVarCall = getResourceHistoryUsingGETValidateBeforeCall(domain, resourceId, fetchAcrossDomains, _callback);
        Type localVarReturnType = new TypeToken<ListResponseResourceHistory>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getResourceUsingGET
     * @param domain domain (required)
     * @param id id (required)
     * @param checkIfLatestVersion checkIfLatestVersion (optional, default to false)
     * @param expand expand (optional)
     * @param state state (optional)
     * @param version version (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getResourceUsingGETCall(String domain, UUID id, Boolean checkIfLatestVersion, String expand, String state, Integer version, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/resources/{domain}/{id}"
            .replace("{" + "domain" + "}", localVarApiClient.escapeString(domain.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (checkIfLatestVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("checkIfLatestVersion", checkIfLatestVersion));
        }

        if (expand != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("expand", expand));
        }

        if (state != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("state", state));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("version", version));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getResourceUsingGETValidateBeforeCall(String domain, UUID id, Boolean checkIfLatestVersion, String expand, String state, Integer version, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling getResourceUsingGET(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getResourceUsingGET(Async)");
        }

        return getResourceUsingGETCall(domain, id, checkIfLatestVersion, expand, state, version, _callback);

    }

    /**
     * Fetch resource information
     * 
     * @param domain domain (required)
     * @param id id (required)
     * @param checkIfLatestVersion checkIfLatestVersion (optional, default to false)
     * @param expand expand (optional)
     * @param state state (optional)
     * @param version version (optional)
     * @return DataResponseResourceVersion
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public DataResponseResourceVersion getResourceUsingGET(String domain, UUID id, Boolean checkIfLatestVersion, String expand, String state, Integer version) throws ApiException {
        ApiResponse<DataResponseResourceVersion> localVarResp = getResourceUsingGETWithHttpInfo(domain, id, checkIfLatestVersion, expand, state, version);
        return localVarResp.getData();
    }

    /**
     * Fetch resource information
     * 
     * @param domain domain (required)
     * @param id id (required)
     * @param checkIfLatestVersion checkIfLatestVersion (optional, default to false)
     * @param expand expand (optional)
     * @param state state (optional)
     * @param version version (optional)
     * @return ApiResponse&lt;DataResponseResourceVersion&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DataResponseResourceVersion> getResourceUsingGETWithHttpInfo(String domain, UUID id, Boolean checkIfLatestVersion, String expand, String state, Integer version) throws ApiException {
        okhttp3.Call localVarCall = getResourceUsingGETValidateBeforeCall(domain, id, checkIfLatestVersion, expand, state, version, null);
        Type localVarReturnType = new TypeToken<DataResponseResourceVersion>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Fetch resource information (asynchronously)
     * 
     * @param domain domain (required)
     * @param id id (required)
     * @param checkIfLatestVersion checkIfLatestVersion (optional, default to false)
     * @param expand expand (optional)
     * @param state state (optional)
     * @param version version (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getResourceUsingGETAsync(String domain, UUID id, Boolean checkIfLatestVersion, String expand, String state, Integer version, final ApiCallback<DataResponseResourceVersion> _callback) throws ApiException {

        okhttp3.Call localVarCall = getResourceUsingGETValidateBeforeCall(domain, id, checkIfLatestVersion, expand, state, version, _callback);
        Type localVarReturnType = new TypeToken<DataResponseResourceVersion>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getResourcesUsingGET1
     * @param domain domain (required)
     * @param advancedFilter  (optional)
     * @param count For pagination, the number of entities per page (optional)
     * @param expand expand (optional)
     * @param fetchCategories fetchCategories (optional, default to false)
     * @param fetchDomains fetchDomains (optional, default to false)
     * @param fetchPermissions fetchPermissions (optional, default to false)
     * @param fetchVariants fetchVariants (optional, default to false)
     * @param filter The filter value is a semicolon delimited list of key value pairs. For example:  name:Example;states:DRAFT,APPROVED;searchString:*ample List values separate possible values with commas. Keys include: | filter name           | Filter value description                                                                        | |-----------------------|-------------------------------------------------------------------------------------------------| | description           | Match resources with this description.                                                          | | excludedTypes         | Match resources whose types do not appear in this comma-separated list.                         | | variableIsArray       | Matches resources against this value.                                                           | | variableType          | Match resources whose variableType is one of these specified.                                   | | ids                   | Match resources with ids in this comma-separated list.                                          | | excludedIds           | Match resources with ids that are NOT in this comma-separated list.                             | | parentId              | Exclude this resource and others directly linked to it. Only usable in the resources API.       | | parentVersion         | For use with parentId. Must use both.                                                           | | name                  | Match resources with this name.                                                                 | | overrideIds           | When matching by states, do not apply the states filter to resources with ids in this list.     | | overrideStates        | When matching by states, apply this states filter to resources with ids in the overrideIds list.| | resourcePackId        | Match resources with this resource pack id.                                                     | | searchString          | Match resources with names or descriptions matching this string. Use a &amp;ast; as a wildcard.     | | caseSensitive         | Specify if searches (name, description, searchString) are case sensitive or not.                | | wholeWord             | Specify if searches (name, description, searchString) match whole word or not.                  | | createdBy             | Match resources created by this user.                                                           | | lastModifiedBy        | Match resources last modified by this user.                                                     | | createdDateStart      | Match resources created on or after this date. (yyyy-MM-dd format).                                   | | createdDateEnd        | Match resources created before this date. (yyyy-MM-dd format).                                  | | lastModifiedDateStart | Match resources last modified on or after this date. (yyyy-MM-dd format).                             | | lastModifiedDateEnd   | Match resources last modified before this date. (yyyy-MM-dd format).                            | | states                | Match resources with states in this list. States include: DRAFT,REVIEW,APPROVED,REJECTED      | | latestVersion         | Set to false to fetch all versions of resources matching the rest of this filter. Only usable in the resources API.| | types                 | Match resources with types in this list. Types include: resourcepack, exstrapplication, exstrdocument, exstrpage, exstrcomponentobj, exstremail, exstrengine, exstrvariablebase, exstrpackage, exstrgraphicalmessage, exstrtextmessage, exstrparagraph, exstrparagraphsection, image, samplefile, exstrdatasource, exstrhtml5, versionedtemplate, documentdefinition, enginerundef, font, fontdefinition, exstrbarcode, exstrpapertype, exstrmessagetype, exstrmetadata, exstrcommunicationset, exstroutputqueue, exstroutput, exstrmigrationset, exstrmessaging         | | systemResource        | Match resources that are (or are not) system resources.                                         | | hasApprovedVersion    | Match resources where a previously approved version of the resources exist.                     | | hidden                | Match resources that are (or are not) hidden.                                                   | | includeVariants       | Set to true to include variants in the response. By default they are excluded unless standardVariantId is specified.| | standardVariantId     | Match resources that are variants of this specified one. Can not be used when includeVariants is explicitly false.  | | categories            | Match resources that are contain at least one of the categories from this list.                 | (optional)
     * @param offset For pagination, fetch entities after this many (optional)
     * @param sort Comma separated list of {asc|desc}_{field name} (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getResourcesUsingGET1Call(String domain, String advancedFilter, Integer count, String expand, Boolean fetchCategories, Boolean fetchDomains, Boolean fetchPermissions, Boolean fetchVariants, String filter, Integer offset, String sort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/resources/{domain}"
            .replace("{" + "domain" + "}", localVarApiClient.escapeString(domain.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (advancedFilter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("advancedFilter", advancedFilter));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (expand != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("expand", expand));
        }

        if (fetchCategories != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fetchCategories", fetchCategories));
        }

        if (fetchDomains != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fetchDomains", fetchDomains));
        }

        if (fetchPermissions != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fetchPermissions", fetchPermissions));
        }

        if (fetchVariants != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fetchVariants", fetchVariants));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getResourcesUsingGET1ValidateBeforeCall(String domain, String advancedFilter, Integer count, String expand, Boolean fetchCategories, Boolean fetchDomains, Boolean fetchPermissions, Boolean fetchVariants, String filter, Integer offset, String sort, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling getResourcesUsingGET1(Async)");
        }

        return getResourcesUsingGET1Call(domain, advancedFilter, count, expand, fetchCategories, fetchDomains, fetchPermissions, fetchVariants, filter, offset, sort, _callback);

    }

    /**
     * Fetch resources
     * 
     * @param domain domain (required)
     * @param advancedFilter  (optional)
     * @param count For pagination, the number of entities per page (optional)
     * @param expand expand (optional)
     * @param fetchCategories fetchCategories (optional, default to false)
     * @param fetchDomains fetchDomains (optional, default to false)
     * @param fetchPermissions fetchPermissions (optional, default to false)
     * @param fetchVariants fetchVariants (optional, default to false)
     * @param filter The filter value is a semicolon delimited list of key value pairs. For example:  name:Example;states:DRAFT,APPROVED;searchString:*ample List values separate possible values with commas. Keys include: | filter name           | Filter value description                                                                        | |-----------------------|-------------------------------------------------------------------------------------------------| | description           | Match resources with this description.                                                          | | excludedTypes         | Match resources whose types do not appear in this comma-separated list.                         | | variableIsArray       | Matches resources against this value.                                                           | | variableType          | Match resources whose variableType is one of these specified.                                   | | ids                   | Match resources with ids in this comma-separated list.                                          | | excludedIds           | Match resources with ids that are NOT in this comma-separated list.                             | | parentId              | Exclude this resource and others directly linked to it. Only usable in the resources API.       | | parentVersion         | For use with parentId. Must use both.                                                           | | name                  | Match resources with this name.                                                                 | | overrideIds           | When matching by states, do not apply the states filter to resources with ids in this list.     | | overrideStates        | When matching by states, apply this states filter to resources with ids in the overrideIds list.| | resourcePackId        | Match resources with this resource pack id.                                                     | | searchString          | Match resources with names or descriptions matching this string. Use a &amp;ast; as a wildcard.     | | caseSensitive         | Specify if searches (name, description, searchString) are case sensitive or not.                | | wholeWord             | Specify if searches (name, description, searchString) match whole word or not.                  | | createdBy             | Match resources created by this user.                                                           | | lastModifiedBy        | Match resources last modified by this user.                                                     | | createdDateStart      | Match resources created on or after this date. (yyyy-MM-dd format).                                   | | createdDateEnd        | Match resources created before this date. (yyyy-MM-dd format).                                  | | lastModifiedDateStart | Match resources last modified on or after this date. (yyyy-MM-dd format).                             | | lastModifiedDateEnd   | Match resources last modified before this date. (yyyy-MM-dd format).                            | | states                | Match resources with states in this list. States include: DRAFT,REVIEW,APPROVED,REJECTED      | | latestVersion         | Set to false to fetch all versions of resources matching the rest of this filter. Only usable in the resources API.| | types                 | Match resources with types in this list. Types include: resourcepack, exstrapplication, exstrdocument, exstrpage, exstrcomponentobj, exstremail, exstrengine, exstrvariablebase, exstrpackage, exstrgraphicalmessage, exstrtextmessage, exstrparagraph, exstrparagraphsection, image, samplefile, exstrdatasource, exstrhtml5, versionedtemplate, documentdefinition, enginerundef, font, fontdefinition, exstrbarcode, exstrpapertype, exstrmessagetype, exstrmetadata, exstrcommunicationset, exstroutputqueue, exstroutput, exstrmigrationset, exstrmessaging         | | systemResource        | Match resources that are (or are not) system resources.                                         | | hasApprovedVersion    | Match resources where a previously approved version of the resources exist.                     | | hidden                | Match resources that are (or are not) hidden.                                                   | | includeVariants       | Set to true to include variants in the response. By default they are excluded unless standardVariantId is specified.| | standardVariantId     | Match resources that are variants of this specified one. Can not be used when includeVariants is explicitly false.  | | categories            | Match resources that are contain at least one of the categories from this list.                 | (optional)
     * @param offset For pagination, fetch entities after this many (optional)
     * @param sort Comma separated list of {asc|desc}_{field name} (optional)
     * @return PageResponseResourceVersion
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public PageResponseResourceVersion getResourcesUsingGET1(String domain, String advancedFilter, Integer count, String expand, Boolean fetchCategories, Boolean fetchDomains, Boolean fetchPermissions, Boolean fetchVariants, String filter, Integer offset, String sort) throws ApiException {
        ApiResponse<PageResponseResourceVersion> localVarResp = getResourcesUsingGET1WithHttpInfo(domain, advancedFilter, count, expand, fetchCategories, fetchDomains, fetchPermissions, fetchVariants, filter, offset, sort);
        return localVarResp.getData();
    }

    /**
     * Fetch resources
     * 
     * @param domain domain (required)
     * @param advancedFilter  (optional)
     * @param count For pagination, the number of entities per page (optional)
     * @param expand expand (optional)
     * @param fetchCategories fetchCategories (optional, default to false)
     * @param fetchDomains fetchDomains (optional, default to false)
     * @param fetchPermissions fetchPermissions (optional, default to false)
     * @param fetchVariants fetchVariants (optional, default to false)
     * @param filter The filter value is a semicolon delimited list of key value pairs. For example:  name:Example;states:DRAFT,APPROVED;searchString:*ample List values separate possible values with commas. Keys include: | filter name           | Filter value description                                                                        | |-----------------------|-------------------------------------------------------------------------------------------------| | description           | Match resources with this description.                                                          | | excludedTypes         | Match resources whose types do not appear in this comma-separated list.                         | | variableIsArray       | Matches resources against this value.                                                           | | variableType          | Match resources whose variableType is one of these specified.                                   | | ids                   | Match resources with ids in this comma-separated list.                                          | | excludedIds           | Match resources with ids that are NOT in this comma-separated list.                             | | parentId              | Exclude this resource and others directly linked to it. Only usable in the resources API.       | | parentVersion         | For use with parentId. Must use both.                                                           | | name                  | Match resources with this name.                                                                 | | overrideIds           | When matching by states, do not apply the states filter to resources with ids in this list.     | | overrideStates        | When matching by states, apply this states filter to resources with ids in the overrideIds list.| | resourcePackId        | Match resources with this resource pack id.                                                     | | searchString          | Match resources with names or descriptions matching this string. Use a &amp;ast; as a wildcard.     | | caseSensitive         | Specify if searches (name, description, searchString) are case sensitive or not.                | | wholeWord             | Specify if searches (name, description, searchString) match whole word or not.                  | | createdBy             | Match resources created by this user.                                                           | | lastModifiedBy        | Match resources last modified by this user.                                                     | | createdDateStart      | Match resources created on or after this date. (yyyy-MM-dd format).                                   | | createdDateEnd        | Match resources created before this date. (yyyy-MM-dd format).                                  | | lastModifiedDateStart | Match resources last modified on or after this date. (yyyy-MM-dd format).                             | | lastModifiedDateEnd   | Match resources last modified before this date. (yyyy-MM-dd format).                            | | states                | Match resources with states in this list. States include: DRAFT,REVIEW,APPROVED,REJECTED      | | latestVersion         | Set to false to fetch all versions of resources matching the rest of this filter. Only usable in the resources API.| | types                 | Match resources with types in this list. Types include: resourcepack, exstrapplication, exstrdocument, exstrpage, exstrcomponentobj, exstremail, exstrengine, exstrvariablebase, exstrpackage, exstrgraphicalmessage, exstrtextmessage, exstrparagraph, exstrparagraphsection, image, samplefile, exstrdatasource, exstrhtml5, versionedtemplate, documentdefinition, enginerundef, font, fontdefinition, exstrbarcode, exstrpapertype, exstrmessagetype, exstrmetadata, exstrcommunicationset, exstroutputqueue, exstroutput, exstrmigrationset, exstrmessaging         | | systemResource        | Match resources that are (or are not) system resources.                                         | | hasApprovedVersion    | Match resources where a previously approved version of the resources exist.                     | | hidden                | Match resources that are (or are not) hidden.                                                   | | includeVariants       | Set to true to include variants in the response. By default they are excluded unless standardVariantId is specified.| | standardVariantId     | Match resources that are variants of this specified one. Can not be used when includeVariants is explicitly false.  | | categories            | Match resources that are contain at least one of the categories from this list.                 | (optional)
     * @param offset For pagination, fetch entities after this many (optional)
     * @param sort Comma separated list of {asc|desc}_{field name} (optional)
     * @return ApiResponse&lt;PageResponseResourceVersion&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PageResponseResourceVersion> getResourcesUsingGET1WithHttpInfo(String domain, String advancedFilter, Integer count, String expand, Boolean fetchCategories, Boolean fetchDomains, Boolean fetchPermissions, Boolean fetchVariants, String filter, Integer offset, String sort) throws ApiException {
        okhttp3.Call localVarCall = getResourcesUsingGET1ValidateBeforeCall(domain, advancedFilter, count, expand, fetchCategories, fetchDomains, fetchPermissions, fetchVariants, filter, offset, sort, null);
        Type localVarReturnType = new TypeToken<PageResponseResourceVersion>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Fetch resources (asynchronously)
     * 
     * @param domain domain (required)
     * @param advancedFilter  (optional)
     * @param count For pagination, the number of entities per page (optional)
     * @param expand expand (optional)
     * @param fetchCategories fetchCategories (optional, default to false)
     * @param fetchDomains fetchDomains (optional, default to false)
     * @param fetchPermissions fetchPermissions (optional, default to false)
     * @param fetchVariants fetchVariants (optional, default to false)
     * @param filter The filter value is a semicolon delimited list of key value pairs. For example:  name:Example;states:DRAFT,APPROVED;searchString:*ample List values separate possible values with commas. Keys include: | filter name           | Filter value description                                                                        | |-----------------------|-------------------------------------------------------------------------------------------------| | description           | Match resources with this description.                                                          | | excludedTypes         | Match resources whose types do not appear in this comma-separated list.                         | | variableIsArray       | Matches resources against this value.                                                           | | variableType          | Match resources whose variableType is one of these specified.                                   | | ids                   | Match resources with ids in this comma-separated list.                                          | | excludedIds           | Match resources with ids that are NOT in this comma-separated list.                             | | parentId              | Exclude this resource and others directly linked to it. Only usable in the resources API.       | | parentVersion         | For use with parentId. Must use both.                                                           | | name                  | Match resources with this name.                                                                 | | overrideIds           | When matching by states, do not apply the states filter to resources with ids in this list.     | | overrideStates        | When matching by states, apply this states filter to resources with ids in the overrideIds list.| | resourcePackId        | Match resources with this resource pack id.                                                     | | searchString          | Match resources with names or descriptions matching this string. Use a &amp;ast; as a wildcard.     | | caseSensitive         | Specify if searches (name, description, searchString) are case sensitive or not.                | | wholeWord             | Specify if searches (name, description, searchString) match whole word or not.                  | | createdBy             | Match resources created by this user.                                                           | | lastModifiedBy        | Match resources last modified by this user.                                                     | | createdDateStart      | Match resources created on or after this date. (yyyy-MM-dd format).                                   | | createdDateEnd        | Match resources created before this date. (yyyy-MM-dd format).                                  | | lastModifiedDateStart | Match resources last modified on or after this date. (yyyy-MM-dd format).                             | | lastModifiedDateEnd   | Match resources last modified before this date. (yyyy-MM-dd format).                            | | states                | Match resources with states in this list. States include: DRAFT,REVIEW,APPROVED,REJECTED      | | latestVersion         | Set to false to fetch all versions of resources matching the rest of this filter. Only usable in the resources API.| | types                 | Match resources with types in this list. Types include: resourcepack, exstrapplication, exstrdocument, exstrpage, exstrcomponentobj, exstremail, exstrengine, exstrvariablebase, exstrpackage, exstrgraphicalmessage, exstrtextmessage, exstrparagraph, exstrparagraphsection, image, samplefile, exstrdatasource, exstrhtml5, versionedtemplate, documentdefinition, enginerundef, font, fontdefinition, exstrbarcode, exstrpapertype, exstrmessagetype, exstrmetadata, exstrcommunicationset, exstroutputqueue, exstroutput, exstrmigrationset, exstrmessaging         | | systemResource        | Match resources that are (or are not) system resources.                                         | | hasApprovedVersion    | Match resources where a previously approved version of the resources exist.                     | | hidden                | Match resources that are (or are not) hidden.                                                   | | includeVariants       | Set to true to include variants in the response. By default they are excluded unless standardVariantId is specified.| | standardVariantId     | Match resources that are variants of this specified one. Can not be used when includeVariants is explicitly false.  | | categories            | Match resources that are contain at least one of the categories from this list.                 | (optional)
     * @param offset For pagination, fetch entities after this many (optional)
     * @param sort Comma separated list of {asc|desc}_{field name} (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getResourcesUsingGET1Async(String domain, String advancedFilter, Integer count, String expand, Boolean fetchCategories, Boolean fetchDomains, Boolean fetchPermissions, Boolean fetchVariants, String filter, Integer offset, String sort, final ApiCallback<PageResponseResourceVersion> _callback) throws ApiException {

        okhttp3.Call localVarCall = getResourcesUsingGET1ValidateBeforeCall(domain, advancedFilter, count, expand, fetchCategories, fetchDomains, fetchPermissions, fetchVariants, filter, offset, sort, _callback);
        Type localVarReturnType = new TypeToken<PageResponseResourceVersion>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for hideResourceUsingPUT
     * @param domain domain (required)
     * @param id id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call hideResourceUsingPUTCall(String domain, UUID id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/resources/{domain}/{id}/hide"
            .replace("{" + "domain" + "}", localVarApiClient.escapeString(domain.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call hideResourceUsingPUTValidateBeforeCall(String domain, UUID id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling hideResourceUsingPUT(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling hideResourceUsingPUT(Async)");
        }

        return hideResourceUsingPUTCall(domain, id, _callback);

    }

    /**
     * Hide resource
     * 
     * @param domain domain (required)
     * @param id id (required)
     * @return DataResponseResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public DataResponseResource hideResourceUsingPUT(String domain, UUID id) throws ApiException {
        ApiResponse<DataResponseResource> localVarResp = hideResourceUsingPUTWithHttpInfo(domain, id);
        return localVarResp.getData();
    }

    /**
     * Hide resource
     * 
     * @param domain domain (required)
     * @param id id (required)
     * @return ApiResponse&lt;DataResponseResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DataResponseResource> hideResourceUsingPUTWithHttpInfo(String domain, UUID id) throws ApiException {
        okhttp3.Call localVarCall = hideResourceUsingPUTValidateBeforeCall(domain, id, null);
        Type localVarReturnType = new TypeToken<DataResponseResource>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Hide resource (asynchronously)
     * 
     * @param domain domain (required)
     * @param id id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call hideResourceUsingPUTAsync(String domain, UUID id, final ApiCallback<DataResponseResource> _callback) throws ApiException {

        okhttp3.Call localVarCall = hideResourceUsingPUTValidateBeforeCall(domain, id, _callback);
        Type localVarReturnType = new TypeToken<DataResponseResource>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for lockResourceUsingPOST
     * @param domain domain (required)
     * @param id id (required)
     * @param version version (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call lockResourceUsingPOSTCall(String domain, UUID id, Integer version, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/resources/{domain}/{id}/lock"
            .replace("{" + "domain" + "}", localVarApiClient.escapeString(domain.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("version", version));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call lockResourceUsingPOSTValidateBeforeCall(String domain, UUID id, Integer version, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling lockResourceUsingPOST(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling lockResourceUsingPOST(Async)");
        }

        return lockResourceUsingPOSTCall(domain, id, version, _callback);

    }

    /**
     * Lock resource
     * 
     * @param domain domain (required)
     * @param id id (required)
     * @param version version (optional)
     * @return DataResponseResourceVersion
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public DataResponseResourceVersion lockResourceUsingPOST(String domain, UUID id, Integer version) throws ApiException {
        ApiResponse<DataResponseResourceVersion> localVarResp = lockResourceUsingPOSTWithHttpInfo(domain, id, version);
        return localVarResp.getData();
    }

    /**
     * Lock resource
     * 
     * @param domain domain (required)
     * @param id id (required)
     * @param version version (optional)
     * @return ApiResponse&lt;DataResponseResourceVersion&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DataResponseResourceVersion> lockResourceUsingPOSTWithHttpInfo(String domain, UUID id, Integer version) throws ApiException {
        okhttp3.Call localVarCall = lockResourceUsingPOSTValidateBeforeCall(domain, id, version, null);
        Type localVarReturnType = new TypeToken<DataResponseResourceVersion>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Lock resource (asynchronously)
     * 
     * @param domain domain (required)
     * @param id id (required)
     * @param version version (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call lockResourceUsingPOSTAsync(String domain, UUID id, Integer version, final ApiCallback<DataResponseResourceVersion> _callback) throws ApiException {

        okhttp3.Call localVarCall = lockResourceUsingPOSTValidateBeforeCall(domain, id, version, _callback);
        Type localVarReturnType = new TypeToken<DataResponseResourceVersion>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for promoteUsingPUT
     * @param domain domain (required)
     * @param id id (required)
     * @param toDomain toDomain (required)
     * @param version version (optional, default to -1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call promoteUsingPUTCall(String domain, UUID id, Domain toDomain, Integer version, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = toDomain;

        // create path and map variables
        String localVarPath = "/api/v1/resources/{domain}/{id}/promote"
            .replace("{" + "domain" + "}", localVarApiClient.escapeString(domain.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("version", version));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call promoteUsingPUTValidateBeforeCall(String domain, UUID id, Domain toDomain, Integer version, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling promoteUsingPUT(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling promoteUsingPUT(Async)");
        }

        // verify the required parameter 'toDomain' is set
        if (toDomain == null) {
            throw new ApiException("Missing the required parameter 'toDomain' when calling promoteUsingPUT(Async)");
        }

        return promoteUsingPUTCall(domain, id, toDomain, version, _callback);

    }

    /**
     * Associate (promote) resource to a domain
     * 
     * @param domain domain (required)
     * @param id id (required)
     * @param toDomain toDomain (required)
     * @param version version (optional, default to -1)
     * @return DataResponseResourceVersion
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public DataResponseResourceVersion promoteUsingPUT(String domain, UUID id, Domain toDomain, Integer version) throws ApiException {
        ApiResponse<DataResponseResourceVersion> localVarResp = promoteUsingPUTWithHttpInfo(domain, id, toDomain, version);
        return localVarResp.getData();
    }

    /**
     * Associate (promote) resource to a domain
     * 
     * @param domain domain (required)
     * @param id id (required)
     * @param toDomain toDomain (required)
     * @param version version (optional, default to -1)
     * @return ApiResponse&lt;DataResponseResourceVersion&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DataResponseResourceVersion> promoteUsingPUTWithHttpInfo(String domain, UUID id, Domain toDomain, Integer version) throws ApiException {
        okhttp3.Call localVarCall = promoteUsingPUTValidateBeforeCall(domain, id, toDomain, version, null);
        Type localVarReturnType = new TypeToken<DataResponseResourceVersion>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Associate (promote) resource to a domain (asynchronously)
     * 
     * @param domain domain (required)
     * @param id id (required)
     * @param toDomain toDomain (required)
     * @param version version (optional, default to -1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call promoteUsingPUTAsync(String domain, UUID id, Domain toDomain, Integer version, final ApiCallback<DataResponseResourceVersion> _callback) throws ApiException {

        okhttp3.Call localVarCall = promoteUsingPUTValidateBeforeCall(domain, id, toDomain, version, _callback);
        Type localVarReturnType = new TypeToken<DataResponseResourceVersion>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for revertToOldVersionUsingPUT
     * @param domain domain (required)
     * @param id id (required)
     * @param oldVersion oldVersion (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call revertToOldVersionUsingPUTCall(String domain, UUID id, Integer oldVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/resources/{domain}/{id}/revert/{oldVersion}"
            .replace("{" + "domain" + "}", localVarApiClient.escapeString(domain.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "oldVersion" + "}", localVarApiClient.escapeString(oldVersion.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call revertToOldVersionUsingPUTValidateBeforeCall(String domain, UUID id, Integer oldVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling revertToOldVersionUsingPUT(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling revertToOldVersionUsingPUT(Async)");
        }

        // verify the required parameter 'oldVersion' is set
        if (oldVersion == null) {
            throw new ApiException("Missing the required parameter 'oldVersion' when calling revertToOldVersionUsingPUT(Async)");
        }

        return revertToOldVersionUsingPUTCall(domain, id, oldVersion, _callback);

    }

    /**
     * Revert to an older resource version
     * Replaces the content of the current draft, or create a new draft with content of specified version. Copies links as well.
     * @param domain domain (required)
     * @param id id (required)
     * @param oldVersion oldVersion (required)
     * @return DataResponseResourceVersion
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public DataResponseResourceVersion revertToOldVersionUsingPUT(String domain, UUID id, Integer oldVersion) throws ApiException {
        ApiResponse<DataResponseResourceVersion> localVarResp = revertToOldVersionUsingPUTWithHttpInfo(domain, id, oldVersion);
        return localVarResp.getData();
    }

    /**
     * Revert to an older resource version
     * Replaces the content of the current draft, or create a new draft with content of specified version. Copies links as well.
     * @param domain domain (required)
     * @param id id (required)
     * @param oldVersion oldVersion (required)
     * @return ApiResponse&lt;DataResponseResourceVersion&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DataResponseResourceVersion> revertToOldVersionUsingPUTWithHttpInfo(String domain, UUID id, Integer oldVersion) throws ApiException {
        okhttp3.Call localVarCall = revertToOldVersionUsingPUTValidateBeforeCall(domain, id, oldVersion, null);
        Type localVarReturnType = new TypeToken<DataResponseResourceVersion>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Revert to an older resource version (asynchronously)
     * Replaces the content of the current draft, or create a new draft with content of specified version. Copies links as well.
     * @param domain domain (required)
     * @param id id (required)
     * @param oldVersion oldVersion (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call revertToOldVersionUsingPUTAsync(String domain, UUID id, Integer oldVersion, final ApiCallback<DataResponseResourceVersion> _callback) throws ApiException {

        okhttp3.Call localVarCall = revertToOldVersionUsingPUTValidateBeforeCall(domain, id, oldVersion, _callback);
        Type localVarReturnType = new TypeToken<DataResponseResourceVersion>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for showResourceUsingPUT
     * @param domain domain (required)
     * @param id id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call showResourceUsingPUTCall(String domain, UUID id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/resources/{domain}/{id}/show"
            .replace("{" + "domain" + "}", localVarApiClient.escapeString(domain.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call showResourceUsingPUTValidateBeforeCall(String domain, UUID id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling showResourceUsingPUT(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling showResourceUsingPUT(Async)");
        }

        return showResourceUsingPUTCall(domain, id, _callback);

    }

    /**
     * Show/Unhide resource
     * 
     * @param domain domain (required)
     * @param id id (required)
     * @return DataResponseResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public DataResponseResource showResourceUsingPUT(String domain, UUID id) throws ApiException {
        ApiResponse<DataResponseResource> localVarResp = showResourceUsingPUTWithHttpInfo(domain, id);
        return localVarResp.getData();
    }

    /**
     * Show/Unhide resource
     * 
     * @param domain domain (required)
     * @param id id (required)
     * @return ApiResponse&lt;DataResponseResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DataResponseResource> showResourceUsingPUTWithHttpInfo(String domain, UUID id) throws ApiException {
        okhttp3.Call localVarCall = showResourceUsingPUTValidateBeforeCall(domain, id, null);
        Type localVarReturnType = new TypeToken<DataResponseResource>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Show/Unhide resource (asynchronously)
     * 
     * @param domain domain (required)
     * @param id id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call showResourceUsingPUTAsync(String domain, UUID id, final ApiCallback<DataResponseResource> _callback) throws ApiException {

        okhttp3.Call localVarCall = showResourceUsingPUTValidateBeforeCall(domain, id, _callback);
        Type localVarReturnType = new TypeToken<DataResponseResource>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for unlockResourceUsingDELETE
     * @param domain domain (required)
     * @param id id (required)
     * @param force When set to true, this will break a lock held by another user if the current user is a tenant admin. (optional, default to false)
     * @param version version (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call unlockResourceUsingDELETECall(String domain, UUID id, Boolean force, Integer version, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/resources/{domain}/{id}/lock"
            .replace("{" + "domain" + "}", localVarApiClient.escapeString(domain.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (force != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("force", force));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("version", version));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call unlockResourceUsingDELETEValidateBeforeCall(String domain, UUID id, Boolean force, Integer version, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling unlockResourceUsingDELETE(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling unlockResourceUsingDELETE(Async)");
        }

        return unlockResourceUsingDELETECall(domain, id, force, version, _callback);

    }

    /**
     * Unlock resource
     * 
     * @param domain domain (required)
     * @param id id (required)
     * @param force When set to true, this will break a lock held by another user if the current user is a tenant admin. (optional, default to false)
     * @param version version (optional)
     * @return DataResponseResourceVersion
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public DataResponseResourceVersion unlockResourceUsingDELETE(String domain, UUID id, Boolean force, Integer version) throws ApiException {
        ApiResponse<DataResponseResourceVersion> localVarResp = unlockResourceUsingDELETEWithHttpInfo(domain, id, force, version);
        return localVarResp.getData();
    }

    /**
     * Unlock resource
     * 
     * @param domain domain (required)
     * @param id id (required)
     * @param force When set to true, this will break a lock held by another user if the current user is a tenant admin. (optional, default to false)
     * @param version version (optional)
     * @return ApiResponse&lt;DataResponseResourceVersion&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DataResponseResourceVersion> unlockResourceUsingDELETEWithHttpInfo(String domain, UUID id, Boolean force, Integer version) throws ApiException {
        okhttp3.Call localVarCall = unlockResourceUsingDELETEValidateBeforeCall(domain, id, force, version, null);
        Type localVarReturnType = new TypeToken<DataResponseResourceVersion>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Unlock resource (asynchronously)
     * 
     * @param domain domain (required)
     * @param id id (required)
     * @param force When set to true, this will break a lock held by another user if the current user is a tenant admin. (optional, default to false)
     * @param version version (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call unlockResourceUsingDELETEAsync(String domain, UUID id, Boolean force, Integer version, final ApiCallback<DataResponseResourceVersion> _callback) throws ApiException {

        okhttp3.Call localVarCall = unlockResourceUsingDELETEValidateBeforeCall(domain, id, force, version, _callback);
        Type localVarReturnType = new TypeToken<DataResponseResourceVersion>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateContentOfTypeViaFile
     * @param domain domain (required)
     * @param id id (required)
     * @param type type (required)
     * @param _file The binary file to upload. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateContentOfTypeViaFileCall(String domain, UUID id, String type, File _file, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/resources/{domain}/{id}/content/{type}"
            .replace("{" + "domain" + "}", localVarApiClient.escapeString(domain.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "type" + "}", localVarApiClient.escapeString(type.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (_file != null) {
            localVarFormParams.put("file", _file);
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateContentOfTypeViaFileValidateBeforeCall(String domain, UUID id, String type, File _file, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling updateContentOfTypeViaFile(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateContentOfTypeViaFile(Async)");
        }

        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling updateContentOfTypeViaFile(Async)");
        }

        // verify the required parameter '_file' is set
        if (_file == null) {
            throw new ApiException("Missing the required parameter '_file' when calling updateContentOfTypeViaFile(Async)");
        }

        return updateContentOfTypeViaFileCall(domain, id, type, _file, _callback);

    }

    /**
     * Update additional resource content
     * Thumbnails for resources are included here as additional content. Expects a form part in the request body with the name \&quot;file\&quot; and will use the contents of that file to update the specified resource.
     * @param domain domain (required)
     * @param id id (required)
     * @param type type (required)
     * @param _file The binary file to upload. (required)
     * @return DataResponseResourceVersion
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public DataResponseResourceVersion updateContentOfTypeViaFile(String domain, UUID id, String type, File _file) throws ApiException {
        ApiResponse<DataResponseResourceVersion> localVarResp = updateContentOfTypeViaFileWithHttpInfo(domain, id, type, _file);
        return localVarResp.getData();
    }

    /**
     * Update additional resource content
     * Thumbnails for resources are included here as additional content. Expects a form part in the request body with the name \&quot;file\&quot; and will use the contents of that file to update the specified resource.
     * @param domain domain (required)
     * @param id id (required)
     * @param type type (required)
     * @param _file The binary file to upload. (required)
     * @return ApiResponse&lt;DataResponseResourceVersion&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DataResponseResourceVersion> updateContentOfTypeViaFileWithHttpInfo(String domain, UUID id, String type, File _file) throws ApiException {
        okhttp3.Call localVarCall = updateContentOfTypeViaFileValidateBeforeCall(domain, id, type, _file, null);
        Type localVarReturnType = new TypeToken<DataResponseResourceVersion>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update additional resource content (asynchronously)
     * Thumbnails for resources are included here as additional content. Expects a form part in the request body with the name \&quot;file\&quot; and will use the contents of that file to update the specified resource.
     * @param domain domain (required)
     * @param id id (required)
     * @param type type (required)
     * @param _file The binary file to upload. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateContentOfTypeViaFileAsync(String domain, UUID id, String type, File _file, final ApiCallback<DataResponseResourceVersion> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateContentOfTypeViaFileValidateBeforeCall(domain, id, type, _file, _callback);
        Type localVarReturnType = new TypeToken<DataResponseResourceVersion>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateContentViaFileUsingPUT
     * @param domain domain (required)
     * @param id id (required)
     * @param _file The binary file to upload. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateContentViaFileUsingPUTCall(String domain, UUID id, File _file, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/resources/{domain}/{id}/content"
            .replace("{" + "domain" + "}", localVarApiClient.escapeString(domain.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (_file != null) {
            localVarFormParams.put("file", _file);
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateContentViaFileUsingPUTValidateBeforeCall(String domain, UUID id, File _file, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling updateContentViaFileUsingPUT(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateContentViaFileUsingPUT(Async)");
        }

        // verify the required parameter '_file' is set
        if (_file == null) {
            throw new ApiException("Missing the required parameter '_file' when calling updateContentViaFileUsingPUT(Async)");
        }

        return updateContentViaFileUsingPUTCall(domain, id, _file, _callback);

    }

    /**
     * Update resource content
     * Expects a form part in the request body with the name \&quot;file\&quot; and will use the contents of that file to update the specified resource.
     * @param domain domain (required)
     * @param id id (required)
     * @param _file The binary file to upload. (required)
     * @return DataResponseResourceVersion
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public DataResponseResourceVersion updateContentViaFileUsingPUT(String domain, UUID id, File _file) throws ApiException {
        ApiResponse<DataResponseResourceVersion> localVarResp = updateContentViaFileUsingPUTWithHttpInfo(domain, id, _file);
        return localVarResp.getData();
    }

    /**
     * Update resource content
     * Expects a form part in the request body with the name \&quot;file\&quot; and will use the contents of that file to update the specified resource.
     * @param domain domain (required)
     * @param id id (required)
     * @param _file The binary file to upload. (required)
     * @return ApiResponse&lt;DataResponseResourceVersion&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DataResponseResourceVersion> updateContentViaFileUsingPUTWithHttpInfo(String domain, UUID id, File _file) throws ApiException {
        okhttp3.Call localVarCall = updateContentViaFileUsingPUTValidateBeforeCall(domain, id, _file, null);
        Type localVarReturnType = new TypeToken<DataResponseResourceVersion>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update resource content (asynchronously)
     * Expects a form part in the request body with the name \&quot;file\&quot; and will use the contents of that file to update the specified resource.
     * @param domain domain (required)
     * @param id id (required)
     * @param _file The binary file to upload. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateContentViaFileUsingPUTAsync(String domain, UUID id, File _file, final ApiCallback<DataResponseResourceVersion> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateContentViaFileUsingPUTValidateBeforeCall(domain, id, _file, _callback);
        Type localVarReturnType = new TypeToken<DataResponseResourceVersion>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateResourceUsingPUT
     * @param domain domain (required)
     * @param id id (required)
     * @param body body (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateResourceUsingPUTCall(String domain, UUID id, Object body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/api/v1/resources/{domain}/{id}"
            .replace("{" + "domain" + "}", localVarApiClient.escapeString(domain.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateResourceUsingPUTValidateBeforeCall(String domain, UUID id, Object body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling updateResourceUsingPUT(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateResourceUsingPUT(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateResourceUsingPUT(Async)");
        }

        return updateResourceUsingPUTCall(domain, id, body, _callback);

    }

    /**
     * Upate resource information
     * 
     * @param domain domain (required)
     * @param id id (required)
     * @param body body (required)
     * @return DataResponseResourceVersion
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public DataResponseResourceVersion updateResourceUsingPUT(String domain, UUID id, Object body) throws ApiException {
        ApiResponse<DataResponseResourceVersion> localVarResp = updateResourceUsingPUTWithHttpInfo(domain, id, body);
        return localVarResp.getData();
    }

    /**
     * Upate resource information
     * 
     * @param domain domain (required)
     * @param id id (required)
     * @param body body (required)
     * @return ApiResponse&lt;DataResponseResourceVersion&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DataResponseResourceVersion> updateResourceUsingPUTWithHttpInfo(String domain, UUID id, Object body) throws ApiException {
        okhttp3.Call localVarCall = updateResourceUsingPUTValidateBeforeCall(domain, id, body, null);
        Type localVarReturnType = new TypeToken<DataResponseResourceVersion>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Upate resource information (asynchronously)
     * 
     * @param domain domain (required)
     * @param id id (required)
     * @param body body (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateResourceUsingPUTAsync(String domain, UUID id, Object body, final ApiCallback<DataResponseResourceVersion> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateResourceUsingPUTValidateBeforeCall(domain, id, body, _callback);
        Type localVarReturnType = new TypeToken<DataResponseResourceVersion>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateStateUsingPUT
     * @param domain domain (required)
     * @param id id (required)
     * @param stateRequest Resource states can be DRAFT, REVIEW, APPROVED, or REJECTED. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateStateUsingPUTCall(String domain, UUID id, WorkflowRequestBody stateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = stateRequest;

        // create path and map variables
        String localVarPath = "/api/v1/resources/{domain}/{id}/state"
            .replace("{" + "domain" + "}", localVarApiClient.escapeString(domain.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateStateUsingPUTValidateBeforeCall(String domain, UUID id, WorkflowRequestBody stateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling updateStateUsingPUT(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateStateUsingPUT(Async)");
        }

        // verify the required parameter 'stateRequest' is set
        if (stateRequest == null) {
            throw new ApiException("Missing the required parameter 'stateRequest' when calling updateStateUsingPUT(Async)");
        }

        return updateStateUsingPUTCall(domain, id, stateRequest, _callback);

    }

    /**
     * Update the workflow state of a resource
     * 
     * @param domain domain (required)
     * @param id id (required)
     * @param stateRequest Resource states can be DRAFT, REVIEW, APPROVED, or REJECTED. (required)
     * @return DataResponseResourceVersion
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public DataResponseResourceVersion updateStateUsingPUT(String domain, UUID id, WorkflowRequestBody stateRequest) throws ApiException {
        ApiResponse<DataResponseResourceVersion> localVarResp = updateStateUsingPUTWithHttpInfo(domain, id, stateRequest);
        return localVarResp.getData();
    }

    /**
     * Update the workflow state of a resource
     * 
     * @param domain domain (required)
     * @param id id (required)
     * @param stateRequest Resource states can be DRAFT, REVIEW, APPROVED, or REJECTED. (required)
     * @return ApiResponse&lt;DataResponseResourceVersion&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DataResponseResourceVersion> updateStateUsingPUTWithHttpInfo(String domain, UUID id, WorkflowRequestBody stateRequest) throws ApiException {
        okhttp3.Call localVarCall = updateStateUsingPUTValidateBeforeCall(domain, id, stateRequest, null);
        Type localVarReturnType = new TypeToken<DataResponseResourceVersion>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update the workflow state of a resource (asynchronously)
     * 
     * @param domain domain (required)
     * @param id id (required)
     * @param stateRequest Resource states can be DRAFT, REVIEW, APPROVED, or REJECTED. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateStateUsingPUTAsync(String domain, UUID id, WorkflowRequestBody stateRequest, final ApiCallback<DataResponseResourceVersion> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateStateUsingPUTValidateBeforeCall(domain, id, stateRequest, _callback);
        Type localVarReturnType = new TypeToken<DataResponseResourceVersion>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
