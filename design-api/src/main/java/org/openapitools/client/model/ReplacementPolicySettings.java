/*
 * Exstream CE Design API (21.2.0)
 * The Exstream CE Design API allows developers to query, create, modify, or delete Exstream CE resources and their links outside of the Exstream CE user inferface. This API requires authentication in order to be used - to authenticate requests, supply a valid OTDS token with `Authorization: Bearer OTDS_TOKEN` in the request header.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ReplacementPolicySettings
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-17T13:44:46.273765810Z[Europe/Lisbon]")
public class ReplacementPolicySettings {
  /**
   * Gets or Sets generalPolicy
   */
  @JsonAdapter(GeneralPolicyEnum.Adapter.class)
  public enum GeneralPolicyEnum {
    AUTO_RENAME("AUTO_RENAME"),
    
    ERROR("ERROR"),
    
    REPLACE("REPLACE"),
    
    SKIP("SKIP"),
    
    REPLACE_IF_NEWER("REPLACE_IF_NEWER"),
    
    EXISTING("EXISTING");

    private String value;

    GeneralPolicyEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static GeneralPolicyEnum fromValue(String value) {
      for (GeneralPolicyEnum b : GeneralPolicyEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<GeneralPolicyEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final GeneralPolicyEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public GeneralPolicyEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return GeneralPolicyEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      GeneralPolicyEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_GENERAL_POLICY = "generalPolicy";
  @SerializedName(SERIALIZED_NAME_GENERAL_POLICY)
  private GeneralPolicyEnum generalPolicy;

  public ReplacementPolicySettings() {
  }

  public ReplacementPolicySettings generalPolicy(GeneralPolicyEnum generalPolicy) {
    this.generalPolicy = generalPolicy;
    return this;
  }

   /**
   * Get generalPolicy
   * @return generalPolicy
  **/
  @javax.annotation.Nonnull
  public GeneralPolicyEnum getGeneralPolicy() {
    return generalPolicy;
  }

  public void setGeneralPolicy(GeneralPolicyEnum generalPolicy) {
    this.generalPolicy = generalPolicy;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReplacementPolicySettings replacementPolicySettings = (ReplacementPolicySettings) o;
    return Objects.equals(this.generalPolicy, replacementPolicySettings.generalPolicy);
  }

  @Override
  public int hashCode() {
    return Objects.hash(generalPolicy);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReplacementPolicySettings {\n");
    sb.append("    generalPolicy: ").append(toIndentedString(generalPolicy)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("generalPolicy");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("generalPolicy");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ReplacementPolicySettings
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ReplacementPolicySettings.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ReplacementPolicySettings is not found in the empty JSON string", ReplacementPolicySettings.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ReplacementPolicySettings.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ReplacementPolicySettings` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ReplacementPolicySettings.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("generalPolicy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `generalPolicy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("generalPolicy").toString()));
      }
      // validate the required field `generalPolicy`
      GeneralPolicyEnum.validateJsonElement(jsonObj.get("generalPolicy"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ReplacementPolicySettings.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ReplacementPolicySettings' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ReplacementPolicySettings> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ReplacementPolicySettings.class));

       return (TypeAdapter<T>) new TypeAdapter<ReplacementPolicySettings>() {
           @Override
           public void write(JsonWriter out, ReplacementPolicySettings value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ReplacementPolicySettings read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ReplacementPolicySettings given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ReplacementPolicySettings
  * @throws IOException if the JSON string is invalid with respect to ReplacementPolicySettings
  */
  public static ReplacementPolicySettings fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ReplacementPolicySettings.class);
  }

 /**
  * Convert an instance of ReplacementPolicySettings to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

