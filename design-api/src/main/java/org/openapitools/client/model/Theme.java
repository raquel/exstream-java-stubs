/*
 * Exstream CE Design API (21.2.0)
 * The Exstream CE Design API allows developers to query, create, modify, or delete Exstream CE resources and their links outside of the Exstream CE user inferface. This API requires authentication in order to be used - to authenticate requests, supply a valid OTDS token with `Authorization: Bearer OTDS_TOKEN` in the request header.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;
import org.openapitools.client.model.AugmentedAuthoring;
import org.openapitools.client.model.BasicResourceVersion;
import org.openapitools.client.model.Domain;
import org.openapitools.client.model.ResourceCategory;
import org.openapitools.client.model.ResourceMetadata;
import org.openapitools.client.model.ResourceVersion;
import org.openapitools.client.model.Rule;
import org.openapitools.client.model.Structure;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Theme
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-17T13:44:46.273765810Z[Europe/Lisbon]")
public class Theme {
  public static final String SERIALIZED_NAME_AUGMENTED_AUTHORING = "augmented_authoring";
  @SerializedName(SERIALIZED_NAME_AUGMENTED_AUTHORING)
  private AugmentedAuthoring augmentedAuthoring;

  public static final String SERIALIZED_NAME_AUGMENTED_AUTHORING_LANG = "augmented_authoring_lang";
  @SerializedName(SERIALIZED_NAME_AUGMENTED_AUTHORING_LANG)
  private Map<String, AugmentedAuthoring> augmentedAuthoringLang = new HashMap<>();

  public static final String SERIALIZED_NAME_CATEGORIES = "categories";
  @SerializedName(SERIALIZED_NAME_CATEGORIES)
  private List<ResourceCategory> categories;

  public static final String SERIALIZED_NAME_CONTAINS_ACTIVE_REVISIONS = "containsActiveRevisions";
  @SerializedName(SERIALIZED_NAME_CONTAINS_ACTIVE_REVISIONS)
  private Boolean containsActiveRevisions;

  public static final String SERIALIZED_NAME_CONTENT = "content";
  @SerializedName(SERIALIZED_NAME_CONTENT)
  private Object content;

  public static final String SERIALIZED_NAME_CONTENT_MIME_TYPE = "contentMimeType";
  @SerializedName(SERIALIZED_NAME_CONTENT_MIME_TYPE)
  private String contentMimeType;

  public static final String SERIALIZED_NAME_CONTENT_TYPE = "contentType";
  @SerializedName(SERIALIZED_NAME_CONTENT_TYPE)
  private String contentType;

  public static final String SERIALIZED_NAME_CREATED_BY = "createdBy";
  @SerializedName(SERIALIZED_NAME_CREATED_BY)
  private String createdBy;

  public static final String SERIALIZED_NAME_CREATED_DATE = "createdDate";
  @SerializedName(SERIALIZED_NAME_CREATED_DATE)
  private OffsetDateTime createdDate;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DOMAINS = "domains";
  @SerializedName(SERIALIZED_NAME_DOMAINS)
  private List<Domain> domains;

  public static final String SERIALIZED_NAME_EFFECTIVE_END = "effectiveEnd";
  @SerializedName(SERIALIZED_NAME_EFFECTIVE_END)
  private OffsetDateTime effectiveEnd;

  public static final String SERIALIZED_NAME_EFFECTIVE_START = "effectiveStart";
  @SerializedName(SERIALIZED_NAME_EFFECTIVE_START)
  private OffsetDateTime effectiveStart;

  public static final String SERIALIZED_NAME_HIDDEN = "hidden";
  @SerializedName(SERIALIZED_NAME_HIDDEN)
  private Boolean hidden;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private UUID id;

  public static final String SERIALIZED_NAME_IS_TRACKING_REVISIONS = "isTrackingRevisions";
  @SerializedName(SERIALIZED_NAME_IS_TRACKING_REVISIONS)
  private Boolean isTrackingRevisions;

  public static final String SERIALIZED_NAME_LAST_MODIFIED_BY = "lastModifiedBy";
  @SerializedName(SERIALIZED_NAME_LAST_MODIFIED_BY)
  private String lastModifiedBy;

  public static final String SERIALIZED_NAME_LAST_MODIFIED_DATE = "lastModifiedDate";
  @SerializedName(SERIALIZED_NAME_LAST_MODIFIED_DATE)
  private OffsetDateTime lastModifiedDate;

  public static final String SERIALIZED_NAME_LATEST_VERSION = "latestVersion";
  @SerializedName(SERIALIZED_NAME_LATEST_VERSION)
  private Boolean latestVersion;

  public static final String SERIALIZED_NAME_LOCKED = "locked";
  @SerializedName(SERIALIZED_NAME_LOCKED)
  private Boolean locked;

  public static final String SERIALIZED_NAME_LOCKED_BY = "lockedBy";
  @SerializedName(SERIALIZED_NAME_LOCKED_BY)
  private String lockedBy;

  public static final String SERIALIZED_NAME_METADATA = "metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  private ResourceMetadata metadata;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PERMISSIONS = "permissions";
  @SerializedName(SERIALIZED_NAME_PERMISSIONS)
  private List<String> permissions;

  public static final String SERIALIZED_NAME_RESOURCE_PACK_ID = "resourcePackId";
  @SerializedName(SERIALIZED_NAME_RESOURCE_PACK_ID)
  private UUID resourcePackId;

  public static final String SERIALIZED_NAME_RULE = "rule";
  @SerializedName(SERIALIZED_NAME_RULE)
  private Rule rule;

  public static final String SERIALIZED_NAME_SAMPLE_FILES = "sampleFiles";
  @SerializedName(SERIALIZED_NAME_SAMPLE_FILES)
  private List<BasicResourceVersion> sampleFiles;

  public static final String SERIALIZED_NAME_STANDARD_VARIANT_ID = "standardVariantId";
  @SerializedName(SERIALIZED_NAME_STANDARD_VARIANT_ID)
  private UUID standardVariantId;

  /**
   * Gets or Sets state
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    DRAFT("DRAFT"),
    
    REVIEW("REVIEW"),
    
    APPROVED("APPROVED"),
    
    REJECTED("REJECTED");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private StateEnum state;

  public static final String SERIALIZED_NAME_STATE_COMMENT = "stateComment";
  @SerializedName(SERIALIZED_NAME_STATE_COMMENT)
  private String stateComment;

  public static final String SERIALIZED_NAME_STRUCTURE = "structure";
  @SerializedName(SERIALIZED_NAME_STRUCTURE)
  private Structure structure;

  public static final String SERIALIZED_NAME_SUBTYPE = "subtype";
  @SerializedName(SERIALIZED_NAME_SUBTYPE)
  private String subtype;

  public static final String SERIALIZED_NAME_SYSTEM_RESOURCE = "systemResource";
  @SerializedName(SERIALIZED_NAME_SYSTEM_RESOURCE)
  private Boolean systemResource;

  /**
   * Gets or Sets type
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    ALL("all"),
    
    DESIGNER("designer"),
    
    AUTHOR("author"),
    
    DESIGNASSET("designAsset"),
    
    COMMASSET("commAsset"),
    
    ORCHESTRATOR("orchestrator"),
    
    RESOURCEPACK("resourcepack"),
    
    EXSTRAPPLICATION("exstrapplication"),
    
    EXSTRDOCUMENT("exstrdocument"),
    
    EXSTRPAGE("exstrpage"),
    
    EXSTRCOMPONENTOBJ("exstrcomponentobj"),
    
    EXSTREMAIL("exstremail"),
    
    EXSTRENGINE("exstrengine"),
    
    EXSTRVARIABLEBASE("exstrvariablebase"),
    
    EXSTRPACKAGE("exstrpackage"),
    
    EXSTRGRAPHICALMESSAGE("exstrgraphicalmessage"),
    
    EXSTRTEXTMESSAGE("exstrtextmessage"),
    
    EXSTRPARAGRAPH("exstrparagraph"),
    
    EXSTRPARAGRAPHSECTION("exstrparagraphsection"),
    
    IMAGE("image"),
    
    SAMPLEFILE("samplefile"),
    
    EXSTRDATASOURCE("exstrdatasource"),
    
    EXSTRHTML5("exstrhtml5"),
    
    VERSIONEDTEMPLATE("versionedtemplate"),
    
    DOCUMENTDEFINITION("documentdefinition"),
    
    ENGINERUNDEF("enginerundef"),
    
    FONT("font"),
    
    FONTDEFINITION("fontdefinition"),
    
    EXSTRBARCODE("exstrbarcode"),
    
    EXSTRPAPERTYPE("exstrpapertype"),
    
    EXSTRMESSAGETYPE("exstrmessagetype"),
    
    EXSTRMETADATA("exstrmetadata"),
    
    ORCSETTINGS("orcsettings"),
    
    FLOWMODEL("flowmodel"),
    
    EXSTRCOMMUNICATIONSET("exstrcommunicationset"),
    
    EXSTROUTPUTQUEUE("exstroutputqueue"),
    
    EXSTROUTPUT("exstroutput"),
    
    EXSTRMIGRATIONSET("exstrmigrationset"),
    
    EXSTRMESSAGING("exstrmessaging");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public static final String SERIALIZED_NAME_VARIANTS = "variants";
  @SerializedName(SERIALIZED_NAME_VARIANTS)
  private List<ResourceVersion> variants;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private Integer version;

  public Theme() {
  }

  public Theme augmentedAuthoring(AugmentedAuthoring augmentedAuthoring) {
    this.augmentedAuthoring = augmentedAuthoring;
    return this;
  }

   /**
   * Get augmentedAuthoring
   * @return augmentedAuthoring
  **/
  @javax.annotation.Nullable
  public AugmentedAuthoring getAugmentedAuthoring() {
    return augmentedAuthoring;
  }

  public void setAugmentedAuthoring(AugmentedAuthoring augmentedAuthoring) {
    this.augmentedAuthoring = augmentedAuthoring;
  }


  public Theme augmentedAuthoringLang(Map<String, AugmentedAuthoring> augmentedAuthoringLang) {
    this.augmentedAuthoringLang = augmentedAuthoringLang;
    return this;
  }

  public Theme putAugmentedAuthoringLangItem(String key, AugmentedAuthoring augmentedAuthoringLangItem) {
    if (this.augmentedAuthoringLang == null) {
      this.augmentedAuthoringLang = new HashMap<>();
    }
    this.augmentedAuthoringLang.put(key, augmentedAuthoringLangItem);
    return this;
  }

   /**
   * Get augmentedAuthoringLang
   * @return augmentedAuthoringLang
  **/
  @javax.annotation.Nullable
  public Map<String, AugmentedAuthoring> getAugmentedAuthoringLang() {
    return augmentedAuthoringLang;
  }

  public void setAugmentedAuthoringLang(Map<String, AugmentedAuthoring> augmentedAuthoringLang) {
    this.augmentedAuthoringLang = augmentedAuthoringLang;
  }


  public Theme categories(List<ResourceCategory> categories) {
    this.categories = categories;
    return this;
  }

  public Theme addCategoriesItem(ResourceCategory categoriesItem) {
    if (this.categories == null) {
      this.categories = new ArrayList<>();
    }
    this.categories.add(categoriesItem);
    return this;
  }

   /**
   * Get categories
   * @return categories
  **/
  @javax.annotation.Nullable
  public List<ResourceCategory> getCategories() {
    return categories;
  }

  public void setCategories(List<ResourceCategory> categories) {
    this.categories = categories;
  }


  public Theme containsActiveRevisions(Boolean containsActiveRevisions) {
    this.containsActiveRevisions = containsActiveRevisions;
    return this;
  }

   /**
   * Get containsActiveRevisions
   * @return containsActiveRevisions
  **/
  @javax.annotation.Nullable
  public Boolean getContainsActiveRevisions() {
    return containsActiveRevisions;
  }

  public void setContainsActiveRevisions(Boolean containsActiveRevisions) {
    this.containsActiveRevisions = containsActiveRevisions;
  }


  public Theme content(Object content) {
    this.content = content;
    return this;
  }

   /**
   * Get content
   * @return content
  **/
  @javax.annotation.Nullable
  public Object getContent() {
    return content;
  }

  public void setContent(Object content) {
    this.content = content;
  }


  public Theme contentMimeType(String contentMimeType) {
    this.contentMimeType = contentMimeType;
    return this;
  }

   /**
   * Get contentMimeType
   * @return contentMimeType
  **/
  @javax.annotation.Nullable
  public String getContentMimeType() {
    return contentMimeType;
  }

  public void setContentMimeType(String contentMimeType) {
    this.contentMimeType = contentMimeType;
  }


  public Theme contentType(String contentType) {
    this.contentType = contentType;
    return this;
  }

   /**
   * Get contentType
   * @return contentType
  **/
  @javax.annotation.Nullable
  public String getContentType() {
    return contentType;
  }

  public void setContentType(String contentType) {
    this.contentType = contentType;
  }


  public Theme createdBy(String createdBy) {
    this.createdBy = createdBy;
    return this;
  }

   /**
   * Get createdBy
   * @return createdBy
  **/
  @javax.annotation.Nullable
  public String getCreatedBy() {
    return createdBy;
  }

  public void setCreatedBy(String createdBy) {
    this.createdBy = createdBy;
  }


  public Theme createdDate(OffsetDateTime createdDate) {
    this.createdDate = createdDate;
    return this;
  }

   /**
   * Get createdDate
   * @return createdDate
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedDate() {
    return createdDate;
  }

  public void setCreatedDate(OffsetDateTime createdDate) {
    this.createdDate = createdDate;
  }


  public Theme description(String description) {
    this.description = description;
    return this;
  }

   /**
   * Get description
   * @return description
  **/
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public Theme domains(List<Domain> domains) {
    this.domains = domains;
    return this;
  }

  public Theme addDomainsItem(Domain domainsItem) {
    if (this.domains == null) {
      this.domains = new ArrayList<>();
    }
    this.domains.add(domainsItem);
    return this;
  }

   /**
   * Get domains
   * @return domains
  **/
  @javax.annotation.Nullable
  public List<Domain> getDomains() {
    return domains;
  }

  public void setDomains(List<Domain> domains) {
    this.domains = domains;
  }


  public Theme effectiveEnd(OffsetDateTime effectiveEnd) {
    this.effectiveEnd = effectiveEnd;
    return this;
  }

   /**
   * Get effectiveEnd
   * @return effectiveEnd
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getEffectiveEnd() {
    return effectiveEnd;
  }

  public void setEffectiveEnd(OffsetDateTime effectiveEnd) {
    this.effectiveEnd = effectiveEnd;
  }


  public Theme effectiveStart(OffsetDateTime effectiveStart) {
    this.effectiveStart = effectiveStart;
    return this;
  }

   /**
   * Get effectiveStart
   * @return effectiveStart
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getEffectiveStart() {
    return effectiveStart;
  }

  public void setEffectiveStart(OffsetDateTime effectiveStart) {
    this.effectiveStart = effectiveStart;
  }


  public Theme hidden(Boolean hidden) {
    this.hidden = hidden;
    return this;
  }

   /**
   * Get hidden
   * @return hidden
  **/
  @javax.annotation.Nullable
  public Boolean getHidden() {
    return hidden;
  }

  public void setHidden(Boolean hidden) {
    this.hidden = hidden;
  }


  public Theme id(UUID id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nullable
  public UUID getId() {
    return id;
  }

  public void setId(UUID id) {
    this.id = id;
  }


  public Theme isTrackingRevisions(Boolean isTrackingRevisions) {
    this.isTrackingRevisions = isTrackingRevisions;
    return this;
  }

   /**
   * Get isTrackingRevisions
   * @return isTrackingRevisions
  **/
  @javax.annotation.Nullable
  public Boolean getIsTrackingRevisions() {
    return isTrackingRevisions;
  }

  public void setIsTrackingRevisions(Boolean isTrackingRevisions) {
    this.isTrackingRevisions = isTrackingRevisions;
  }


  public Theme lastModifiedBy(String lastModifiedBy) {
    this.lastModifiedBy = lastModifiedBy;
    return this;
  }

   /**
   * Get lastModifiedBy
   * @return lastModifiedBy
  **/
  @javax.annotation.Nullable
  public String getLastModifiedBy() {
    return lastModifiedBy;
  }

  public void setLastModifiedBy(String lastModifiedBy) {
    this.lastModifiedBy = lastModifiedBy;
  }


  public Theme lastModifiedDate(OffsetDateTime lastModifiedDate) {
    this.lastModifiedDate = lastModifiedDate;
    return this;
  }

   /**
   * Get lastModifiedDate
   * @return lastModifiedDate
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getLastModifiedDate() {
    return lastModifiedDate;
  }

  public void setLastModifiedDate(OffsetDateTime lastModifiedDate) {
    this.lastModifiedDate = lastModifiedDate;
  }


  public Theme latestVersion(Boolean latestVersion) {
    this.latestVersion = latestVersion;
    return this;
  }

   /**
   * Get latestVersion
   * @return latestVersion
  **/
  @javax.annotation.Nullable
  public Boolean getLatestVersion() {
    return latestVersion;
  }

  public void setLatestVersion(Boolean latestVersion) {
    this.latestVersion = latestVersion;
  }


  public Theme locked(Boolean locked) {
    this.locked = locked;
    return this;
  }

   /**
   * Get locked
   * @return locked
  **/
  @javax.annotation.Nullable
  public Boolean getLocked() {
    return locked;
  }

  public void setLocked(Boolean locked) {
    this.locked = locked;
  }


  public Theme lockedBy(String lockedBy) {
    this.lockedBy = lockedBy;
    return this;
  }

   /**
   * Get lockedBy
   * @return lockedBy
  **/
  @javax.annotation.Nullable
  public String getLockedBy() {
    return lockedBy;
  }

  public void setLockedBy(String lockedBy) {
    this.lockedBy = lockedBy;
  }


  public Theme metadata(ResourceMetadata metadata) {
    this.metadata = metadata;
    return this;
  }

   /**
   * Get metadata
   * @return metadata
  **/
  @javax.annotation.Nullable
  public ResourceMetadata getMetadata() {
    return metadata;
  }

  public void setMetadata(ResourceMetadata metadata) {
    this.metadata = metadata;
  }


  public Theme name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Theme permissions(List<String> permissions) {
    this.permissions = permissions;
    return this;
  }

  public Theme addPermissionsItem(String permissionsItem) {
    if (this.permissions == null) {
      this.permissions = new ArrayList<>();
    }
    this.permissions.add(permissionsItem);
    return this;
  }

   /**
   * Get permissions
   * @return permissions
  **/
  @javax.annotation.Nullable
  public List<String> getPermissions() {
    return permissions;
  }

  public void setPermissions(List<String> permissions) {
    this.permissions = permissions;
  }


  public Theme resourcePackId(UUID resourcePackId) {
    this.resourcePackId = resourcePackId;
    return this;
  }

   /**
   * Get resourcePackId
   * @return resourcePackId
  **/
  @javax.annotation.Nullable
  public UUID getResourcePackId() {
    return resourcePackId;
  }

  public void setResourcePackId(UUID resourcePackId) {
    this.resourcePackId = resourcePackId;
  }


  public Theme rule(Rule rule) {
    this.rule = rule;
    return this;
  }

   /**
   * Get rule
   * @return rule
  **/
  @javax.annotation.Nullable
  public Rule getRule() {
    return rule;
  }

  public void setRule(Rule rule) {
    this.rule = rule;
  }


  public Theme sampleFiles(List<BasicResourceVersion> sampleFiles) {
    this.sampleFiles = sampleFiles;
    return this;
  }

  public Theme addSampleFilesItem(BasicResourceVersion sampleFilesItem) {
    if (this.sampleFiles == null) {
      this.sampleFiles = new ArrayList<>();
    }
    this.sampleFiles.add(sampleFilesItem);
    return this;
  }

   /**
   * Get sampleFiles
   * @return sampleFiles
  **/
  @javax.annotation.Nullable
  public List<BasicResourceVersion> getSampleFiles() {
    return sampleFiles;
  }

  public void setSampleFiles(List<BasicResourceVersion> sampleFiles) {
    this.sampleFiles = sampleFiles;
  }


  public Theme standardVariantId(UUID standardVariantId) {
    this.standardVariantId = standardVariantId;
    return this;
  }

   /**
   * Get standardVariantId
   * @return standardVariantId
  **/
  @javax.annotation.Nullable
  public UUID getStandardVariantId() {
    return standardVariantId;
  }

  public void setStandardVariantId(UUID standardVariantId) {
    this.standardVariantId = standardVariantId;
  }


  public Theme state(StateEnum state) {
    this.state = state;
    return this;
  }

   /**
   * Get state
   * @return state
  **/
  @javax.annotation.Nullable
  public StateEnum getState() {
    return state;
  }

  public void setState(StateEnum state) {
    this.state = state;
  }


  public Theme stateComment(String stateComment) {
    this.stateComment = stateComment;
    return this;
  }

   /**
   * Get stateComment
   * @return stateComment
  **/
  @javax.annotation.Nullable
  public String getStateComment() {
    return stateComment;
  }

  public void setStateComment(String stateComment) {
    this.stateComment = stateComment;
  }


  public Theme structure(Structure structure) {
    this.structure = structure;
    return this;
  }

   /**
   * Get structure
   * @return structure
  **/
  @javax.annotation.Nullable
  public Structure getStructure() {
    return structure;
  }

  public void setStructure(Structure structure) {
    this.structure = structure;
  }


  public Theme subtype(String subtype) {
    this.subtype = subtype;
    return this;
  }

   /**
   * Get subtype
   * @return subtype
  **/
  @javax.annotation.Nullable
  public String getSubtype() {
    return subtype;
  }

  public void setSubtype(String subtype) {
    this.subtype = subtype;
  }


  public Theme systemResource(Boolean systemResource) {
    this.systemResource = systemResource;
    return this;
  }

   /**
   * Get systemResource
   * @return systemResource
  **/
  @javax.annotation.Nullable
  public Boolean getSystemResource() {
    return systemResource;
  }

  public void setSystemResource(Boolean systemResource) {
    this.systemResource = systemResource;
  }


  public Theme type(TypeEnum type) {
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @javax.annotation.Nullable
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }


  public Theme variants(List<ResourceVersion> variants) {
    this.variants = variants;
    return this;
  }

  public Theme addVariantsItem(ResourceVersion variantsItem) {
    if (this.variants == null) {
      this.variants = new ArrayList<>();
    }
    this.variants.add(variantsItem);
    return this;
  }

   /**
   * Get variants
   * @return variants
  **/
  @javax.annotation.Nullable
  public List<ResourceVersion> getVariants() {
    return variants;
  }

  public void setVariants(List<ResourceVersion> variants) {
    this.variants = variants;
  }


  public Theme version(Integer version) {
    this.version = version;
    return this;
  }

   /**
   * Get version
   * @return version
  **/
  @javax.annotation.Nullable
  public Integer getVersion() {
    return version;
  }

  public void setVersion(Integer version) {
    this.version = version;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Theme theme = (Theme) o;
    return Objects.equals(this.augmentedAuthoring, theme.augmentedAuthoring) &&
        Objects.equals(this.augmentedAuthoringLang, theme.augmentedAuthoringLang) &&
        Objects.equals(this.categories, theme.categories) &&
        Objects.equals(this.containsActiveRevisions, theme.containsActiveRevisions) &&
        Objects.equals(this.content, theme.content) &&
        Objects.equals(this.contentMimeType, theme.contentMimeType) &&
        Objects.equals(this.contentType, theme.contentType) &&
        Objects.equals(this.createdBy, theme.createdBy) &&
        Objects.equals(this.createdDate, theme.createdDate) &&
        Objects.equals(this.description, theme.description) &&
        Objects.equals(this.domains, theme.domains) &&
        Objects.equals(this.effectiveEnd, theme.effectiveEnd) &&
        Objects.equals(this.effectiveStart, theme.effectiveStart) &&
        Objects.equals(this.hidden, theme.hidden) &&
        Objects.equals(this.id, theme.id) &&
        Objects.equals(this.isTrackingRevisions, theme.isTrackingRevisions) &&
        Objects.equals(this.lastModifiedBy, theme.lastModifiedBy) &&
        Objects.equals(this.lastModifiedDate, theme.lastModifiedDate) &&
        Objects.equals(this.latestVersion, theme.latestVersion) &&
        Objects.equals(this.locked, theme.locked) &&
        Objects.equals(this.lockedBy, theme.lockedBy) &&
        Objects.equals(this.metadata, theme.metadata) &&
        Objects.equals(this.name, theme.name) &&
        Objects.equals(this.permissions, theme.permissions) &&
        Objects.equals(this.resourcePackId, theme.resourcePackId) &&
        Objects.equals(this.rule, theme.rule) &&
        Objects.equals(this.sampleFiles, theme.sampleFiles) &&
        Objects.equals(this.standardVariantId, theme.standardVariantId) &&
        Objects.equals(this.state, theme.state) &&
        Objects.equals(this.stateComment, theme.stateComment) &&
        Objects.equals(this.structure, theme.structure) &&
        Objects.equals(this.subtype, theme.subtype) &&
        Objects.equals(this.systemResource, theme.systemResource) &&
        Objects.equals(this.type, theme.type) &&
        Objects.equals(this.variants, theme.variants) &&
        Objects.equals(this.version, theme.version);
  }

  @Override
  public int hashCode() {
    return Objects.hash(augmentedAuthoring, augmentedAuthoringLang, categories, containsActiveRevisions, content, contentMimeType, contentType, createdBy, createdDate, description, domains, effectiveEnd, effectiveStart, hidden, id, isTrackingRevisions, lastModifiedBy, lastModifiedDate, latestVersion, locked, lockedBy, metadata, name, permissions, resourcePackId, rule, sampleFiles, standardVariantId, state, stateComment, structure, subtype, systemResource, type, variants, version);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Theme {\n");
    sb.append("    augmentedAuthoring: ").append(toIndentedString(augmentedAuthoring)).append("\n");
    sb.append("    augmentedAuthoringLang: ").append(toIndentedString(augmentedAuthoringLang)).append("\n");
    sb.append("    categories: ").append(toIndentedString(categories)).append("\n");
    sb.append("    containsActiveRevisions: ").append(toIndentedString(containsActiveRevisions)).append("\n");
    sb.append("    content: ").append(toIndentedString(content)).append("\n");
    sb.append("    contentMimeType: ").append(toIndentedString(contentMimeType)).append("\n");
    sb.append("    contentType: ").append(toIndentedString(contentType)).append("\n");
    sb.append("    createdBy: ").append(toIndentedString(createdBy)).append("\n");
    sb.append("    createdDate: ").append(toIndentedString(createdDate)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    domains: ").append(toIndentedString(domains)).append("\n");
    sb.append("    effectiveEnd: ").append(toIndentedString(effectiveEnd)).append("\n");
    sb.append("    effectiveStart: ").append(toIndentedString(effectiveStart)).append("\n");
    sb.append("    hidden: ").append(toIndentedString(hidden)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    isTrackingRevisions: ").append(toIndentedString(isTrackingRevisions)).append("\n");
    sb.append("    lastModifiedBy: ").append(toIndentedString(lastModifiedBy)).append("\n");
    sb.append("    lastModifiedDate: ").append(toIndentedString(lastModifiedDate)).append("\n");
    sb.append("    latestVersion: ").append(toIndentedString(latestVersion)).append("\n");
    sb.append("    locked: ").append(toIndentedString(locked)).append("\n");
    sb.append("    lockedBy: ").append(toIndentedString(lockedBy)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    permissions: ").append(toIndentedString(permissions)).append("\n");
    sb.append("    resourcePackId: ").append(toIndentedString(resourcePackId)).append("\n");
    sb.append("    rule: ").append(toIndentedString(rule)).append("\n");
    sb.append("    sampleFiles: ").append(toIndentedString(sampleFiles)).append("\n");
    sb.append("    standardVariantId: ").append(toIndentedString(standardVariantId)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    stateComment: ").append(toIndentedString(stateComment)).append("\n");
    sb.append("    structure: ").append(toIndentedString(structure)).append("\n");
    sb.append("    subtype: ").append(toIndentedString(subtype)).append("\n");
    sb.append("    systemResource: ").append(toIndentedString(systemResource)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    variants: ").append(toIndentedString(variants)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("augmented_authoring");
    openapiFields.add("augmented_authoring_lang");
    openapiFields.add("categories");
    openapiFields.add("containsActiveRevisions");
    openapiFields.add("content");
    openapiFields.add("contentMimeType");
    openapiFields.add("contentType");
    openapiFields.add("createdBy");
    openapiFields.add("createdDate");
    openapiFields.add("description");
    openapiFields.add("domains");
    openapiFields.add("effectiveEnd");
    openapiFields.add("effectiveStart");
    openapiFields.add("hidden");
    openapiFields.add("id");
    openapiFields.add("isTrackingRevisions");
    openapiFields.add("lastModifiedBy");
    openapiFields.add("lastModifiedDate");
    openapiFields.add("latestVersion");
    openapiFields.add("locked");
    openapiFields.add("lockedBy");
    openapiFields.add("metadata");
    openapiFields.add("name");
    openapiFields.add("permissions");
    openapiFields.add("resourcePackId");
    openapiFields.add("rule");
    openapiFields.add("sampleFiles");
    openapiFields.add("standardVariantId");
    openapiFields.add("state");
    openapiFields.add("stateComment");
    openapiFields.add("structure");
    openapiFields.add("subtype");
    openapiFields.add("systemResource");
    openapiFields.add("type");
    openapiFields.add("variants");
    openapiFields.add("version");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to Theme
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Theme.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Theme is not found in the empty JSON string", Theme.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Theme.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Theme` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `augmented_authoring`
      if (jsonObj.get("augmented_authoring") != null && !jsonObj.get("augmented_authoring").isJsonNull()) {
        AugmentedAuthoring.validateJsonElement(jsonObj.get("augmented_authoring"));
      }
      if (jsonObj.get("categories") != null && !jsonObj.get("categories").isJsonNull()) {
        JsonArray jsonArraycategories = jsonObj.getAsJsonArray("categories");
        if (jsonArraycategories != null) {
          // ensure the json data is an array
          if (!jsonObj.get("categories").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `categories` to be an array in the JSON string but got `%s`", jsonObj.get("categories").toString()));
          }

          // validate the optional field `categories` (array)
          for (int i = 0; i < jsonArraycategories.size(); i++) {
            ResourceCategory.validateJsonElement(jsonArraycategories.get(i));
          };
        }
      }
      if ((jsonObj.get("contentMimeType") != null && !jsonObj.get("contentMimeType").isJsonNull()) && !jsonObj.get("contentMimeType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `contentMimeType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("contentMimeType").toString()));
      }
      if ((jsonObj.get("contentType") != null && !jsonObj.get("contentType").isJsonNull()) && !jsonObj.get("contentType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `contentType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("contentType").toString()));
      }
      if ((jsonObj.get("createdBy") != null && !jsonObj.get("createdBy").isJsonNull()) && !jsonObj.get("createdBy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createdBy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createdBy").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if (jsonObj.get("domains") != null && !jsonObj.get("domains").isJsonNull()) {
        JsonArray jsonArraydomains = jsonObj.getAsJsonArray("domains");
        if (jsonArraydomains != null) {
          // ensure the json data is an array
          if (!jsonObj.get("domains").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `domains` to be an array in the JSON string but got `%s`", jsonObj.get("domains").toString()));
          }

          // validate the optional field `domains` (array)
          for (int i = 0; i < jsonArraydomains.size(); i++) {
            Domain.validateJsonElement(jsonArraydomains.get(i));
          };
        }
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("lastModifiedBy") != null && !jsonObj.get("lastModifiedBy").isJsonNull()) && !jsonObj.get("lastModifiedBy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastModifiedBy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastModifiedBy").toString()));
      }
      if ((jsonObj.get("lockedBy") != null && !jsonObj.get("lockedBy").isJsonNull()) && !jsonObj.get("lockedBy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lockedBy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lockedBy").toString()));
      }
      // validate the optional field `metadata`
      if (jsonObj.get("metadata") != null && !jsonObj.get("metadata").isJsonNull()) {
        ResourceMetadata.validateJsonElement(jsonObj.get("metadata"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("permissions") != null && !jsonObj.get("permissions").isJsonNull() && !jsonObj.get("permissions").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `permissions` to be an array in the JSON string but got `%s`", jsonObj.get("permissions").toString()));
      }
      if ((jsonObj.get("resourcePackId") != null && !jsonObj.get("resourcePackId").isJsonNull()) && !jsonObj.get("resourcePackId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resourcePackId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resourcePackId").toString()));
      }
      // validate the optional field `rule`
      if (jsonObj.get("rule") != null && !jsonObj.get("rule").isJsonNull()) {
        Rule.validateJsonElement(jsonObj.get("rule"));
      }
      if (jsonObj.get("sampleFiles") != null && !jsonObj.get("sampleFiles").isJsonNull()) {
        JsonArray jsonArraysampleFiles = jsonObj.getAsJsonArray("sampleFiles");
        if (jsonArraysampleFiles != null) {
          // ensure the json data is an array
          if (!jsonObj.get("sampleFiles").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `sampleFiles` to be an array in the JSON string but got `%s`", jsonObj.get("sampleFiles").toString()));
          }

          // validate the optional field `sampleFiles` (array)
          for (int i = 0; i < jsonArraysampleFiles.size(); i++) {
            BasicResourceVersion.validateJsonElement(jsonArraysampleFiles.get(i));
          };
        }
      }
      if ((jsonObj.get("standardVariantId") != null && !jsonObj.get("standardVariantId").isJsonNull()) && !jsonObj.get("standardVariantId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `standardVariantId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("standardVariantId").toString()));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      // validate the optional field `state`
      if (jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) {
        StateEnum.validateJsonElement(jsonObj.get("state"));
      }
      if ((jsonObj.get("stateComment") != null && !jsonObj.get("stateComment").isJsonNull()) && !jsonObj.get("stateComment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `stateComment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("stateComment").toString()));
      }
      // validate the optional field `structure`
      if (jsonObj.get("structure") != null && !jsonObj.get("structure").isJsonNull()) {
        Structure.validateJsonElement(jsonObj.get("structure"));
      }
      if ((jsonObj.get("subtype") != null && !jsonObj.get("subtype").isJsonNull()) && !jsonObj.get("subtype").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subtype` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subtype").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        TypeEnum.validateJsonElement(jsonObj.get("type"));
      }
      if (jsonObj.get("variants") != null && !jsonObj.get("variants").isJsonNull()) {
        JsonArray jsonArrayvariants = jsonObj.getAsJsonArray("variants");
        if (jsonArrayvariants != null) {
          // ensure the json data is an array
          if (!jsonObj.get("variants").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `variants` to be an array in the JSON string but got `%s`", jsonObj.get("variants").toString()));
          }

          // validate the optional field `variants` (array)
          for (int i = 0; i < jsonArrayvariants.size(); i++) {
            ResourceVersion.validateJsonElement(jsonArrayvariants.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Theme.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Theme' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Theme> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Theme.class));

       return (TypeAdapter<T>) new TypeAdapter<Theme>() {
           @Override
           public void write(JsonWriter out, Theme value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Theme read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Theme given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Theme
  * @throws IOException if the JSON string is invalid with respect to Theme
  */
  public static Theme fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Theme.class);
  }

 /**
  * Convert an instance of Theme to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

