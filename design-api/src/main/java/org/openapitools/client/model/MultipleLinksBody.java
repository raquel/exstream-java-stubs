/*
 * Exstream CE Design API (21.2.0)
 * The Exstream CE Design API allows developers to query, create, modify, or delete Exstream CE resources and their links outside of the Exstream CE user inferface. This API requires authentication in order to be used - to authenticate requests, supply a valid OTDS token with `Authorization: Bearer OTDS_TOKEN` in the request header.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * MultipleLinksBody
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-17T13:44:46.273765810Z[Europe/Lisbon]")
public class MultipleLinksBody {
  public static final String SERIALIZED_NAME_LINK_OBJECT_IDS = "linkObjectIds";
  @SerializedName(SERIALIZED_NAME_LINK_OBJECT_IDS)
  private List<UUID> linkObjectIds;

  public static final String SERIALIZED_NAME_LINK_SUBJECT_ID = "linkSubjectId";
  @SerializedName(SERIALIZED_NAME_LINK_SUBJECT_ID)
  private UUID linkSubjectId;

  public static final String SERIALIZED_NAME_SUBJECT_VERSION = "subjectVersion";
  @SerializedName(SERIALIZED_NAME_SUBJECT_VERSION)
  private Integer subjectVersion;

  public MultipleLinksBody() {
  }

  public MultipleLinksBody linkObjectIds(List<UUID> linkObjectIds) {
    this.linkObjectIds = linkObjectIds;
    return this;
  }

  public MultipleLinksBody addLinkObjectIdsItem(UUID linkObjectIdsItem) {
    if (this.linkObjectIds == null) {
      this.linkObjectIds = new ArrayList<>();
    }
    this.linkObjectIds.add(linkObjectIdsItem);
    return this;
  }

   /**
   * Get linkObjectIds
   * @return linkObjectIds
  **/
  @javax.annotation.Nullable
  public List<UUID> getLinkObjectIds() {
    return linkObjectIds;
  }

  public void setLinkObjectIds(List<UUID> linkObjectIds) {
    this.linkObjectIds = linkObjectIds;
  }


  public MultipleLinksBody linkSubjectId(UUID linkSubjectId) {
    this.linkSubjectId = linkSubjectId;
    return this;
  }

   /**
   * Get linkSubjectId
   * @return linkSubjectId
  **/
  @javax.annotation.Nullable
  public UUID getLinkSubjectId() {
    return linkSubjectId;
  }

  public void setLinkSubjectId(UUID linkSubjectId) {
    this.linkSubjectId = linkSubjectId;
  }


  public MultipleLinksBody subjectVersion(Integer subjectVersion) {
    this.subjectVersion = subjectVersion;
    return this;
  }

   /**
   * Get subjectVersion
   * @return subjectVersion
  **/
  @javax.annotation.Nullable
  public Integer getSubjectVersion() {
    return subjectVersion;
  }

  public void setSubjectVersion(Integer subjectVersion) {
    this.subjectVersion = subjectVersion;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MultipleLinksBody multipleLinksBody = (MultipleLinksBody) o;
    return Objects.equals(this.linkObjectIds, multipleLinksBody.linkObjectIds) &&
        Objects.equals(this.linkSubjectId, multipleLinksBody.linkSubjectId) &&
        Objects.equals(this.subjectVersion, multipleLinksBody.subjectVersion);
  }

  @Override
  public int hashCode() {
    return Objects.hash(linkObjectIds, linkSubjectId, subjectVersion);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MultipleLinksBody {\n");
    sb.append("    linkObjectIds: ").append(toIndentedString(linkObjectIds)).append("\n");
    sb.append("    linkSubjectId: ").append(toIndentedString(linkSubjectId)).append("\n");
    sb.append("    subjectVersion: ").append(toIndentedString(subjectVersion)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("linkObjectIds");
    openapiFields.add("linkSubjectId");
    openapiFields.add("subjectVersion");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to MultipleLinksBody
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MultipleLinksBody.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MultipleLinksBody is not found in the empty JSON string", MultipleLinksBody.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MultipleLinksBody.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MultipleLinksBody` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("linkObjectIds") != null && !jsonObj.get("linkObjectIds").isJsonNull() && !jsonObj.get("linkObjectIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `linkObjectIds` to be an array in the JSON string but got `%s`", jsonObj.get("linkObjectIds").toString()));
      }
      if ((jsonObj.get("linkSubjectId") != null && !jsonObj.get("linkSubjectId").isJsonNull()) && !jsonObj.get("linkSubjectId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `linkSubjectId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("linkSubjectId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MultipleLinksBody.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MultipleLinksBody' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MultipleLinksBody> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MultipleLinksBody.class));

       return (TypeAdapter<T>) new TypeAdapter<MultipleLinksBody>() {
           @Override
           public void write(JsonWriter out, MultipleLinksBody value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MultipleLinksBody read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of MultipleLinksBody given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of MultipleLinksBody
  * @throws IOException if the JSON string is invalid with respect to MultipleLinksBody
  */
  public static MultipleLinksBody fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MultipleLinksBody.class);
  }

 /**
  * Convert an instance of MultipleLinksBody to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

