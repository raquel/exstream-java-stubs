/*
 * Exstream CE Design API (21.2.0)
 * The Exstream CE Design API allows developers to query, create, modify, or delete Exstream CE resources and their links outside of the Exstream CE user inferface. This API requires authentication in order to be used - to authenticate requests, supply a valid OTDS token with `Authorization: Bearer OTDS_TOKEN` in the request header.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.DataResponseResource;
import org.openapitools.client.model.DataResponseResourceVersion;
import org.openapitools.client.model.Domain;
import java.io.File;
import org.openapitools.client.model.GenericResponse;
import org.openapitools.client.model.ListResponseResourceHistory;
import org.openapitools.client.model.PageResponseResourceVersion;
import org.openapitools.client.model.ResourceVersion;
import java.util.UUID;
import org.openapitools.client.model.WorkflowRequestBody;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ResourcesControllerApi
 */
@Disabled
public class ResourcesControllerApiTest {

    private final ResourcesControllerApi api = new ResourcesControllerApi();

    /**
     * Create resource from file
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createResourceFromFileUsingPOSTTest() throws ApiException {
        String domain = null;
        String name = null;
        String type = null;
        File _file = null;
        String subtype = null;
        DataResponseResourceVersion response = api.createResourceFromFileUsingPOST(domain, name, type, _file, subtype);
        // TODO: test validations
    }

    /**
     * Create a new resource
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createResourceUsingPOSTTest() throws ApiException {
        String domain = null;
        ResourceVersion body = null;
        Boolean charsetRegistered = null;
        Boolean concrete = null;
        String contentMimeType = null;
        Double qualityValue = null;
        String subtype = null;
        String type = null;
        Boolean wildcardSubtype = null;
        Boolean wildcardType = null;
        DataResponseResourceVersion response = api.createResourceUsingPOST(domain, body, charsetRegistered, concrete, contentMimeType, qualityValue, subtype, type, wildcardSubtype, wildcardType);
        // TODO: test validations
    }

    /**
     * Delete a resource
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteResourceUsingDELETETest() throws ApiException {
        String domain = null;
        UUID id = null;
        String version = null;
        GenericResponse response = api.deleteResourceUsingDELETE(domain, id, version);
        // TODO: test validations
    }

    /**
     * Disassociate (demote) resource from a domain
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void demoteUsingPUTTest() throws ApiException {
        String domain = null;
        UUID id = null;
        Domain toDomain = null;
        Integer version = null;
        DataResponseResourceVersion response = api.demoteUsingPUT(domain, id, toDomain, version);
        // TODO: test validations
    }

    /**
     * Fetch resource content
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getContentUsingGETTest() throws ApiException {
        String domain = null;
        UUID id = null;
        String state = null;
        Integer version = null;
        Object response = api.getContentUsingGET(domain, id, state, version);
        // TODO: test validations
    }

    /**
     * Get additional resource content
     *
     * Thumbnails for resources are included here as additional content.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getResourceContentUsingGETTest() throws ApiException {
        String domain = null;
        UUID id = null;
        String type = null;
        String state = null;
        Integer version = null;
        Object response = api.getResourceContentUsingGET(domain, id, type, state, version);
        // TODO: test validations
    }

    /**
     * Fetch the history information of a resource
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getResourceHistoryUsingGETTest() throws ApiException {
        String domain = null;
        UUID resourceId = null;
        Boolean fetchAcrossDomains = null;
        ListResponseResourceHistory response = api.getResourceHistoryUsingGET(domain, resourceId, fetchAcrossDomains);
        // TODO: test validations
    }

    /**
     * Fetch resource information
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getResourceUsingGETTest() throws ApiException {
        String domain = null;
        UUID id = null;
        Boolean checkIfLatestVersion = null;
        String expand = null;
        String state = null;
        Integer version = null;
        DataResponseResourceVersion response = api.getResourceUsingGET(domain, id, checkIfLatestVersion, expand, state, version);
        // TODO: test validations
    }

    /**
     * Fetch resources
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getResourcesUsingGET1Test() throws ApiException {
        String domain = null;
        String advancedFilter = null;
        Integer count = null;
        String expand = null;
        Boolean fetchCategories = null;
        Boolean fetchDomains = null;
        Boolean fetchPermissions = null;
        Boolean fetchVariants = null;
        String filter = null;
        Integer offset = null;
        String sort = null;
        PageResponseResourceVersion response = api.getResourcesUsingGET1(domain, advancedFilter, count, expand, fetchCategories, fetchDomains, fetchPermissions, fetchVariants, filter, offset, sort);
        // TODO: test validations
    }

    /**
     * Hide resource
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void hideResourceUsingPUTTest() throws ApiException {
        String domain = null;
        UUID id = null;
        DataResponseResource response = api.hideResourceUsingPUT(domain, id);
        // TODO: test validations
    }

    /**
     * Lock resource
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void lockResourceUsingPOSTTest() throws ApiException {
        String domain = null;
        UUID id = null;
        Integer version = null;
        DataResponseResourceVersion response = api.lockResourceUsingPOST(domain, id, version);
        // TODO: test validations
    }

    /**
     * Associate (promote) resource to a domain
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void promoteUsingPUTTest() throws ApiException {
        String domain = null;
        UUID id = null;
        Domain toDomain = null;
        Integer version = null;
        DataResponseResourceVersion response = api.promoteUsingPUT(domain, id, toDomain, version);
        // TODO: test validations
    }

    /**
     * Revert to an older resource version
     *
     * Replaces the content of the current draft, or create a new draft with content of specified version. Copies links as well.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void revertToOldVersionUsingPUTTest() throws ApiException {
        String domain = null;
        UUID id = null;
        Integer oldVersion = null;
        DataResponseResourceVersion response = api.revertToOldVersionUsingPUT(domain, id, oldVersion);
        // TODO: test validations
    }

    /**
     * Show/Unhide resource
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void showResourceUsingPUTTest() throws ApiException {
        String domain = null;
        UUID id = null;
        DataResponseResource response = api.showResourceUsingPUT(domain, id);
        // TODO: test validations
    }

    /**
     * Unlock resource
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void unlockResourceUsingDELETETest() throws ApiException {
        String domain = null;
        UUID id = null;
        Boolean force = null;
        Integer version = null;
        DataResponseResourceVersion response = api.unlockResourceUsingDELETE(domain, id, force, version);
        // TODO: test validations
    }

    /**
     * Update additional resource content
     *
     * Thumbnails for resources are included here as additional content. Expects a form part in the request body with the name \&quot;file\&quot; and will use the contents of that file to update the specified resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateContentOfTypeViaFileTest() throws ApiException {
        String domain = null;
        UUID id = null;
        String type = null;
        File _file = null;
        DataResponseResourceVersion response = api.updateContentOfTypeViaFile(domain, id, type, _file);
        // TODO: test validations
    }

    /**
     * Update resource content
     *
     * Expects a form part in the request body with the name \&quot;file\&quot; and will use the contents of that file to update the specified resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateContentViaFileUsingPUTTest() throws ApiException {
        String domain = null;
        UUID id = null;
        File _file = null;
        DataResponseResourceVersion response = api.updateContentViaFileUsingPUT(domain, id, _file);
        // TODO: test validations
    }

    /**
     * Upate resource information
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateResourceUsingPUTTest() throws ApiException {
        String domain = null;
        UUID id = null;
        Object body = null;
        DataResponseResourceVersion response = api.updateResourceUsingPUT(domain, id, body);
        // TODO: test validations
    }

    /**
     * Update the workflow state of a resource
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateStateUsingPUTTest() throws ApiException {
        String domain = null;
        UUID id = null;
        WorkflowRequestBody stateRequest = null;
        DataResponseResourceVersion response = api.updateStateUsingPUT(domain, id, stateRequest);
        // TODO: test validations
    }

}
