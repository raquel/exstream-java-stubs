/*
 * Exstream CE Design API (21.2.0)
 * The Exstream CE Design API allows developers to query, create, modify, or delete Exstream CE resources and their links outside of the Exstream CE user inferface. This API requires authentication in order to be used - to authenticate requests, supply a valid OTDS token with `Authorization: Bearer OTDS_TOKEN` in the request header.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.DataResponseLinkDTO;
import org.openapitools.client.model.GenericResponse;
import org.openapitools.client.model.LinkDTO;
import org.openapitools.client.model.ListResponseLinkDTO;
import org.openapitools.client.model.MultipleLinksBody;
import java.time.OffsetDateTime;
import org.openapitools.client.model.PageResponseLinkDTO;
import org.openapitools.client.model.PageResponseResourceVersion;
import java.util.UUID;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for LinksControllerApi
 */
@Disabled
public class LinksControllerApiTest {

    private final LinksControllerApi api = new LinksControllerApi();

    /**
     * Create a resource link
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createLinkUsingPOSTTest() throws ApiException {
        String domain = null;
        LinkDTO link = null;
        DataResponseLinkDTO response = api.createLinkUsingPOST(domain, link);
        // TODO: test validations
    }

    /**
     * Create multiple resource links
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createLinksUsingPOSTTest() throws ApiException {
        String domain = null;
        MultipleLinksBody body = null;
        ListResponseLinkDTO response = api.createLinksUsingPOST(domain, body);
        // TODO: test validations
    }

    /**
     * Delete a resource link
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteLinkUsingDELETETest() throws ApiException {
        String domain = null;
        LinkDTO link = null;
        GenericResponse response = api.deleteLinkUsingDELETE(domain, link);
        // TODO: test validations
    }

    /**
     * Delete multiple resource links
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteLinksUsingDELETETest() throws ApiException {
        String domain = null;
        MultipleLinksBody body = null;
        GenericResponse response = api.deleteLinksUsingDELETE(domain, body);
        // TODO: test validations
    }

    /**
     * Fetch links to/from a resource
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getLinksUsingGETTest() throws ApiException {
        String domain = null;
        Integer count = null;
        OffsetDateTime effectiveDate = null;
        String filter = null;
        Integer linkDepth = null;
        UUID linkObjectId = null;
        UUID linkSubjectId = null;
        Integer linkSubjectVersion = null;
        Integer offset = null;
        String rfilter = null;
        String sort = null;
        String tfilter = null;
        Boolean useEffectiveDate = null;
        String vfilter = null;
        PageResponseLinkDTO response = api.getLinksUsingGET(domain, count, effectiveDate, filter, linkDepth, linkObjectId, linkSubjectId, linkSubjectVersion, offset, rfilter, sort, tfilter, useEffectiveDate, vfilter);
        // TODO: test validations
    }

    /**
     * Fetch resources that are linked to/from another resource
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getResourcesUsingGETTest() throws ApiException {
        String domain = null;
        Integer count = null;
        OffsetDateTime effectiveDate = null;
        String filter = null;
        Integer linkDepth = null;
        UUID linkObjectId = null;
        UUID linkSubjectId = null;
        Integer offset = null;
        String rfilter = null;
        String sort = null;
        String tfilter = null;
        Boolean useEffectiveDate = null;
        String vfilter = null;
        PageResponseResourceVersion response = api.getResourcesUsingGET(domain, count, effectiveDate, filter, linkDepth, linkObjectId, linkSubjectId, offset, rfilter, sort, tfilter, useEffectiveDate, vfilter);
        // TODO: test validations
    }

}
