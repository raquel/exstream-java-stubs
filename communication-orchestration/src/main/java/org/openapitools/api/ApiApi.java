/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.2.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-06-17T13:59:54.039766395+01:00[Europe/Lisbon]")
@Validated
@Tag(name = "Orchestration Ondemand Requests", description = "the Orchestration Ondemand Requests API")
public interface ApiApi {

    /**
     * POST /api/v1/inputs/fulfillment/ondemand/{domain}/fulfill : Fulfill Empower output
     *
     * @param communicationId The id of the communication that is being fulfilled. (required)
     * @param driverDataSource The \&quot;prodDsn\&quot; value for this communication. (required)
     * @param preserveDocuments preserveDocuments&#x3D;false removes the documents from the Empower database.  This prevents duplicate storage of documents. (required)
     * @param domain  (required)
     * @param accept  (optional)
     * @param body  (optional)
     * @return Successful response (status code 200)
     */
    @Operation(
        operationId = "fulfillEmpowerOutput",
        summary = "Fulfill Empower output",
        tags = { "Orchestration Ondemand Requests" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful response")
        },
        security = {
            @SecurityRequirement(name = "tenant")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v1/inputs/fulfillment/ondemand/{domain}/fulfill",
        produces = "application/pdf",
        consumes = "application/json"
    )
    
    ResponseEntity<Void> fulfillEmpowerOutput(
        @NotNull @Parameter(name = "communicationId", description = "The id of the communication that is being fulfilled.", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "communicationId", required = true) String communicationId,
        @NotNull @Parameter(name = "driverDataSource", description = "The \"prodDsn\" value for this communication.", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "driverDataSource", required = true) String driverDataSource,
        @NotNull @Parameter(name = "preserveDocuments", description = "preserveDocuments=false removes the documents from the Empower database.  This prevents duplicate storage of documents.", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "preserveDocuments", required = true) Boolean preserveDocuments,
        @Parameter(name = "domain", description = "", required = true, in = ParameterIn.PATH) @PathVariable("domain") String domain,
        @Parameter(name = "Accept", description = "", in = ParameterIn.HEADER) @RequestHeader(value = "Accept", required = false) String accept,
        @Parameter(name = "body", description = "") @Valid @RequestBody(required = false) Object body
    );


    /**
     * POST /api/v1/inputs/ondemand/{domain}/generate : Generate document output
     *
     * @param communicationId The id of the communication to generate. (required)
     * @param driverDataSource The \&quot;prodDsn\&quot; value for this communication. (required)
     * @param domain  (required)
     * @param empowerUser This should be a system account, not the account of the user making the request.  Using a system account allows end users to have fewer permissions. (optional)
     * @param accept  (optional)
     * @param body  (optional)
     * @return Successful response (status code 200)
     */
    @Operation(
        operationId = "generateDocumentOutput",
        summary = "Generate document output",
        tags = { "Orchestration Ondemand Requests" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful response")
        },
        security = {
            @SecurityRequirement(name = "tenant")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v1/inputs/ondemand/{domain}/generate",
        produces = "application/json",
        consumes = "application/json"
    )
    
    ResponseEntity<Void> generateDocumentOutput(
        @NotNull @Parameter(name = "communicationId", description = "The id of the communication to generate.", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "communicationId", required = true) String communicationId,
        @NotNull @Parameter(name = "driverDataSource", description = "The \"prodDsn\" value for this communication.", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "driverDataSource", required = true) String driverDataSource,
        @Parameter(name = "domain", description = "", required = true, in = ParameterIn.PATH) @PathVariable("domain") String domain,
        @Parameter(name = "empowerUser", description = "This should be a system account, not the account of the user making the request.  Using a system account allows end users to have fewer permissions.", in = ParameterIn.HEADER) @RequestHeader(value = "empowerUser", required = false) String empowerUser,
        @Parameter(name = "Accept", description = "", in = ParameterIn.HEADER) @RequestHeader(value = "Accept", required = false) String accept,
        @Parameter(name = "body", description = "") @Valid @RequestBody(required = false) Object body
    );

}
