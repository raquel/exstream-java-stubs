/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.2.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.BulkDeleteRequest;
import org.openapitools.model.BulkWorkflowRequestBody;
import org.openapitools.model.CollectionResourceFilter;
import org.openapitools.model.CommentRequestBody;
import org.openapitools.model.CreateTenantBody;
import org.openapitools.model.CreateThemeRequest;
import org.openapitools.model.DataResponseBulkDeleteResponse;
import org.openapitools.model.DataResponseBulkFavoriteResponse;
import org.openapitools.model.DataResponseBulkUnfavoriteResponse;
import org.openapitools.model.DataResponseBulkWorkflowStateChangeResponse;
import org.openapitools.model.DataResponseConfigurationResponse;
import org.openapitools.model.DataResponseCurrentUserResponse;
import org.openapitools.model.DataResponseDictionary;
import org.openapitools.model.DataResponseDomain;
import org.openapitools.model.DataResponseFlowContextOutputChannelMappingsResponse;
import org.openapitools.model.DataResponseGroupRole;
import org.openapitools.model.DataResponseImportResponse;
import org.openapitools.model.DataResponseLinkDTO;
import org.openapitools.model.DataResponseListGroupRole;
import org.openapitools.model.DataResponseMapStringListOutcome;
import org.openapitools.model.DataResponseRealtimeService;
import org.openapitools.model.DataResponseResource;
import org.openapitools.model.DataResponseResourceCategory;
import org.openapitools.model.DataResponseResourceVersion;
import org.openapitools.model.DataResponseRole;
import org.openapitools.model.DataResponseRolePermissions;
import org.openapitools.model.DataResponseSettingsObj;
import org.openapitools.model.DataResponseSolrCollection;
import org.openapitools.model.DataResponseTenant;
import org.openapitools.model.DataResponseTenantsConfiguration;
import org.openapitools.model.DataResponseTheme;
import org.openapitools.model.DataResponseTreeResourceVersion;
import org.openapitools.model.DataResponseWebappPermissionResponse;
import org.springframework.format.annotation.DateTimeFormat;
import org.openapitools.model.Domain;
import org.openapitools.model.EtagDescriptorRequest;
import org.openapitools.model.EtagDescriptorResponse;
import org.openapitools.model.ExportRequest;
import org.openapitools.model.FavoriteResourcesInput;
import org.openapitools.model.GenericResponse;
import org.openapitools.model.GroupRole;
import org.openapitools.model.LinkDTO;
import org.openapitools.model.ListResponseCollectionResource;
import org.openapitools.model.ListResponseDictionary;
import org.openapitools.model.ListResponseGroupRole;
import org.openapitools.model.ListResponseImportHistory;
import org.openapitools.model.ListResponseLinkDTO;
import org.openapitools.model.ListResponseRealtimeService;
import org.openapitools.model.ListResponseResourceCategory;
import org.openapitools.model.ListResponseResourceHistory;
import org.openapitools.model.ListResponseResourceVersion;
import org.openapitools.model.ListResponseRolePermissions;
import org.openapitools.model.ListResponseSettingsObj;
import org.openapitools.model.ListResponseTenant;
import org.openapitools.model.Manifest;
import org.openapitools.model.MultipleLinksBody;
import org.openapitools.model.Node;
import org.openapitools.model.NodeFilterRequest;
import java.time.OffsetDateTime;
import org.openapitools.model.OtmmSetting;
import org.openapitools.model.PackageOptions;
import org.openapitools.model.PageResponseCollectionResourceDetailResponse;
import org.openapitools.model.PageResponseDomain;
import org.openapitools.model.PageResponseLinkDTO;
import org.openapitools.model.PageResponseResourceVersion;
import org.openapitools.model.PageResponseRole;
import org.openapitools.model.PdfFragmentResponse;
import org.openapitools.model.PostGetThemeWithOptionsPayload;
import org.openapitools.model.RawDataResponse;
import org.openapitools.model.RealtimeService;
import org.openapitools.model.ResourceCategory;
import org.openapitools.model.ResourceFilter;
import org.openapitools.model.ResourceFilterRequest;
import org.openapitools.model.ResourceVersion;
import org.openapitools.model.Role;
import org.openapitools.model.RolePermissions;
import org.openapitools.model.RunDef;
import org.openapitools.model.SavedResource;
import org.openapitools.model.SavedResourceInput;
import org.openapitools.model.SettingsObj;
import org.openapitools.model.Theme;
import java.util.UUID;
import org.openapitools.model.UserProfileResponse;
import org.openapitools.model.VersionConfig;
import org.openapitools.model.VersionedId;
import org.openapitools.model.WorkflowRequestBody;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-03-25T22:31:49.764173764Z[Europe/Lisbon]")
@Validated
@Tag(name = "realtime-services-controller", description = "the realtime-services-controller API")
public interface ApiApi {

    /**
     * POST /api/v1/realtime-services : Add a new realtime service
     *
     * @param realtimeService  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "add",
        summary = "Add a new realtime service",
        tags = { "realtime-services-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = DataResponseRealtimeService.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v1/realtime-services",
        produces = "*/*",
        consumes = "application/json"
    )
    
    ResponseEntity<DataResponseRealtimeService> add(
        @Parameter(name = "RealtimeService", description = "", required = true) @Valid @RequestBody RealtimeService realtimeService
    );


    /**
     * POST /api/v1/user-profiles/{domain}/favorite
     *
     * @param domain  (required)
     * @param savedResourceInput  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "addFavorite",
        tags = { "user-profile-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = SavedResource.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v1/user-profiles/{domain}/favorite",
        produces = "*/*",
        consumes = "application/json"
    )
    
    ResponseEntity<SavedResource> addFavorite(
        @Parameter(name = "domain", description = "", required = true, in = ParameterIn.PATH) @PathVariable("domain") String domain,
        @Parameter(name = "SavedResourceInput", description = "", required = true) @Valid @RequestBody SavedResourceInput savedResourceInput
    );


    /**
     * POST /api/v1/user-profiles/{domain}/favorites
     * Marks the given list of resources as favorite for the current user.
     *
     * @param domain  (required)
     * @param favoriteResourcesInput  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "addFavorites",
        description = "Marks the given list of resources as favorite for the current user.",
        tags = { "user-profile-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = DataResponseBulkFavoriteResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v1/user-profiles/{domain}/favorites",
        produces = "*/*",
        consumes = "application/json"
    )
    
    ResponseEntity<DataResponseBulkFavoriteResponse> addFavorites(
        @Parameter(name = "domain", description = "", required = true, in = ParameterIn.PATH) @PathVariable("domain") String domain,
        @Parameter(name = "FavoriteResourcesInput", description = "", required = true) @Valid @RequestBody FavoriteResourcesInput favoriteResourcesInput
    );


    /**
     * POST /api/v1/user-profiles/{domain}/recent
     *
     * @param domain  (required)
     * @param savedResourceInput  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "addRecent",
        tags = { "user-profile-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = SavedResource.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v1/user-profiles/{domain}/recent",
        produces = "*/*",
        consumes = "application/json"
    )
    
    ResponseEntity<SavedResource> addRecent(
        @Parameter(name = "domain", description = "", required = true, in = ParameterIn.PATH) @PathVariable("domain") String domain,
        @Parameter(name = "SavedResourceInput", description = "", required = true) @Valid @RequestBody SavedResourceInput savedResourceInput
    );


    /**
     * POST /api/v1/collection-resources/collection-details : Get the list of resources and versions, including additional detail information, for the specified list of collection ids
     *
     * @param requestFilter  (required)
     * @param requestBody  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "collectionDetails",
        summary = "Get the list of resources and versions, including additional detail information, for the specified list of collection ids",
        tags = { "collection-resources-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = PageResponseCollectionResourceDetailResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v1/collection-resources/collection-details",
        produces = "*/*",
        consumes = "application/json"
    )
    
    ResponseEntity<PageResponseCollectionResourceDetailResponse> collectionDetails(
        @NotNull @Parameter(name = "requestFilter", description = "", required = true, in = ParameterIn.QUERY) @Valid CollectionResourceFilter requestFilter,
        @Parameter(name = "request_body", description = "", required = true) @Valid @RequestBody List<String> requestBody
    );


    /**
     * POST /api/v1/search/create/{tenantId}
     *
     * @param tenantId  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "create",
        tags = { "search-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = DataResponseSolrCollection.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v1/search/create/{tenantId}",
        produces = "*/*"
    )
    
    ResponseEntity<DataResponseSolrCollection> create(
        @Parameter(name = "tenantId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("tenantId") String tenantId
    );


    /**
     * POST /api/v1/run-definitions/{domain}/template/{templateId}
     *
     * @param domain  (required)
     * @param templateId  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "create1",
        tags = { "engine-run-def-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = RunDef.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v1/run-definitions/{domain}/template/{templateId}",
        produces = "*/*"
    )
    
    ResponseEntity<RunDef> create1(
        @Parameter(name = "domain", description = "", required = true, in = ParameterIn.PATH) @PathVariable("domain") String domain,
        @Parameter(name = "templateId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("templateId") UUID templateId
    );


    /**
     * POST /api/v1/collection-resources/create : Create a new collection resource containing the specified ResourceVersions
     *
     * @param versionedId  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "create2",
        summary = "Create a new collection resource containing the specified ResourceVersions",
        tags = { "collection-resources-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = ListResponseCollectionResource.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v1/collection-resources/create",
        produces = "*/*",
        consumes = "application/json"
    )
    
    ResponseEntity<ListResponseCollectionResource> create2(
        @Parameter(name = "VersionedId", description = "", required = true) @Valid @RequestBody List<@Valid VersionedId> versionedId
    );


    /**
     * POST /api/v1/dictionaries
     *
     * @param languageCode The language code of the dictionary. e.g. en-us (required)
     * @param locale The locale of the dictionary. e.g. English - United States (required)
     * @param dicFile The dictionary&#39;s dic file to upload (optional)
     * @param affFile The dictionary&#39;s aff file to upload (optional)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "createDictionaryFromFiles",
        tags = { "dictionary-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = DataResponseDictionary.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v1/dictionaries",
        produces = "*/*",
        consumes = "multipart/form-data"
    )
    
    ResponseEntity<DataResponseDictionary> createDictionaryFromFiles(
        @NotNull @Parameter(name = "languageCode", description = "The language code of the dictionary. e.g. en-us", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "languageCode", required = true) String languageCode,
        @NotNull @Parameter(name = "locale", description = "The locale of the dictionary. e.g. English - United States", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "locale", required = true) String locale,
        @Parameter(name = "dicFile", description = "The dictionary's dic file to upload") @RequestPart(value = "dicFile", required = false) MultipartFile dicFile,
        @Parameter(name = "affFile", description = "The dictionary's aff file to upload") @RequestPart(value = "affFile", required = false) MultipartFile affFile
    );


    /**
     * POST /api/v1/domains
     *
     * @param domain  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "createDomains",
        tags = { "domain-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = DataResponseDomain.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v1/domains",
        produces = "*/*",
        consumes = "application/json"
    )
    
    ResponseEntity<DataResponseDomain> createDomains(
        @Parameter(name = "Domain", description = "", required = true) @Valid @RequestBody Domain domain
    );


    /**
     * POST /api/v1/links/{domain}
     *
     * @param domain  (required)
     * @param linkDTO  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "createLink",
        tags = { "links-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = DataResponseLinkDTO.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v1/links/{domain}",
        produces = "*/*",
        consumes = "application/json"
    )
    
    ResponseEntity<DataResponseLinkDTO> createLink(
        @Parameter(name = "domain", description = "", required = true, in = ParameterIn.PATH) @PathVariable("domain") String domain,
        @Parameter(name = "LinkDTO", description = "", required = true) @Valid @RequestBody LinkDTO linkDTO
    );


    /**
     * POST /api/v1/links/{domain}/multiple
     *
     * @param domain  (required)
     * @param multipleLinksBody  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "createLinks",
        tags = { "links-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = ListResponseLinkDTO.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v1/links/{domain}/multiple",
        produces = "*/*",
        consumes = "application/json"
    )
    
    ResponseEntity<ListResponseLinkDTO> createLinks(
        @Parameter(name = "domain", description = "", required = true, in = ParameterIn.PATH) @PathVariable("domain") String domain,
        @Parameter(name = "MultipleLinksBody", description = "", required = true) @Valid @RequestBody MultipleLinksBody multipleLinksBody
    );


    /**
     * PUT /api/v1/settings/multiple
     *
     * @param settingsObj  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "createMultipleSettings",
        tags = { "settings-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ListResponseSettingsObj.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/api/v1/settings/multiple",
        produces = "application/json",
        consumes = "application/json"
    )
    
    ResponseEntity<ListResponseSettingsObj> createMultipleSettings(
        @Parameter(name = "SettingsObj", description = "", required = true) @Valid @RequestBody List<@Valid SettingsObj> settingsObj
    );


    /**
     * POST /api/v1/settings/multiple
     *
     * @param settingsObj  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "createMultipleSettings1",
        tags = { "settings-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ListResponseSettingsObj.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v1/settings/multiple",
        produces = "application/json",
        consumes = "application/json"
    )
    
    ResponseEntity<ListResponseSettingsObj> createMultipleSettings1(
        @Parameter(name = "SettingsObj", description = "", required = true) @Valid @RequestBody List<@Valid SettingsObj> settingsObj
    );


    /**
     * POST /api/v1/resources/{domain}
     *
     * @param domain  (required)
     * @param contentType  (required)
     * @param resourceVersion  (required)
     * @param contentMimeType  (optional)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "createResource",
        tags = { "resources-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = DataResponseResourceVersion.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v1/resources/{domain}",
        produces = "*/*",
        consumes = "application/json"
    )
    
    ResponseEntity<DataResponseResourceVersion> createResource(
        @Parameter(name = "domain", description = "", required = true, in = ParameterIn.PATH) @PathVariable("domain") String domain,
        @NotNull @Parameter(name = "Content-Type", description = "", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "Content-Type", required = true) String contentType,
        @Parameter(name = "ResourceVersion", description = "", required = true) @Valid @RequestBody ResourceVersion resourceVersion,
        @Parameter(name = "contentMimeType", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "contentMimeType", required = false) String contentMimeType
    );


    /**
     * POST /api/v1/resource-categories/{name}
     *
     * @param name  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "createResourceCategory",
        tags = { "resource-category-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = DataResponseResourceCategory.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v1/resource-categories/{name}",
        produces = "*/*"
    )
    
    ResponseEntity<DataResponseResourceCategory> createResourceCategory(
        @Size(min = 1, max = 255) @Parameter(name = "name", description = "", required = true, in = ParameterIn.PATH) @PathVariable("name") String name
    );


    /**
     * POST /api/v1/resources/{domain}/content
     *
     * @param domain  (required)
     * @param name The name of the resource to create. (required)
     * @param type The type of resource to create. (required)
     * @param subtype The subtype of resource to create. Appears in metadata. (optional)
     * @param file The binary file to upload (optional)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "createResourceFromFile",
        tags = { "resources-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = DataResponseResourceVersion.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v1/resources/{domain}/content",
        produces = "*/*",
        consumes = "multipart/form-data"
    )
    
    ResponseEntity<DataResponseResourceVersion> createResourceFromFile(
        @Parameter(name = "domain", description = "", required = true, in = ParameterIn.PATH) @PathVariable("domain") String domain,
        @NotNull @Parameter(name = "name", description = "The name of the resource to create.", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "name", required = true) String name,
        @NotNull @Parameter(name = "type", description = "The type of resource to create.", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "type", required = true) String type,
        @Parameter(name = "subtype", description = "The subtype of resource to create. Appears in metadata.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "subtype", required = false) String subtype,
        @Parameter(name = "file", description = "The binary file to upload") @RequestPart(value = "file", required = false) MultipartFile file
    );


    /**
     * POST /api/v1/roles
     *
     * @param role  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "createRole",
        tags = { "role-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = DataResponseRole.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v1/roles",
        produces = "*/*",
        consumes = "application/json"
    )
    
    ResponseEntity<DataResponseRole> createRole(
        @Parameter(name = "Role", description = "", required = true) @Valid @RequestBody Role role
    );


    /**
     * POST /api/v1/role-permissions
     *
     * @param rolePermissions  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "createRole1",
        tags = { "role-permissions-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = DataResponseRolePermissions.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v1/role-permissions",
        produces = "*/*",
        consumes = "application/json"
    )
    
    ResponseEntity<DataResponseRolePermissions> createRole1(
        @Parameter(name = "RolePermissions", description = "", required = true) @Valid @RequestBody RolePermissions rolePermissions
    );


    /**
     * POST /api/v1/group-roles
     *
     * @param groupRole  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "createRole2",
        tags = { "group-role-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = DataResponseGroupRole.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v1/group-roles",
        produces = "*/*",
        consumes = "application/json"
    )
    
    ResponseEntity<DataResponseGroupRole> createRole2(
        @Parameter(name = "GroupRole", description = "", required = true) @Valid @RequestBody GroupRole groupRole
    );


    /**
     * PUT /api/v1/settings
     *
     * @param settingsObj  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "createSetting",
        tags = { "settings-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = DataResponseSettingsObj.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/api/v1/settings",
        produces = "application/json",
        consumes = "application/json"
    )
    
    ResponseEntity<DataResponseSettingsObj> createSetting(
        @Parameter(name = "SettingsObj", description = "", required = true) @Valid @RequestBody SettingsObj settingsObj
    );


    /**
     * POST /api/v1/settings
     *
     * @param settingsObj  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "createSetting1",
        tags = { "settings-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = DataResponseSettingsObj.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v1/settings",
        produces = "application/json",
        consumes = "application/json"
    )
    
    ResponseEntity<DataResponseSettingsObj> createSetting1(
        @Parameter(name = "SettingsObj", description = "", required = true) @Valid @RequestBody SettingsObj settingsObj
    );


    /**
     * POST /api/v1/tenants/{tenantId}
     *
     * @param tenantId  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "createTenantSchema",
        tags = { "tenant-admin-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = DataResponseTenant.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v1/tenants/{tenantId}",
        produces = "application/json"
    )
    
    ResponseEntity<DataResponseTenant> createTenantSchema(
        @Size(min = 1, max = 40) @Parameter(name = "tenantId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("tenantId") String tenantId
    );


    /**
     * POST /api/v1/tenants/addTenant
     *
     * @param createTenantBody  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "createTenantWithExistingSchema",
        tags = { "tenant-admin-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = DataResponseTenant.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v1/tenants/addTenant",
        produces = "application/json",
        consumes = "application/json"
    )
    
    ResponseEntity<DataResponseTenant> createTenantWithExistingSchema(
        @Parameter(name = "CreateTenantBody", description = "", required = true) @Valid @RequestBody CreateTenantBody createTenantBody
    );


    /**
     * POST /api/v1/themes/{domain}
     *
     * @param domain  (required)
     * @param createThemeRequest  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "createTheme",
        tags = { "theme-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = DataResponseResourceVersion.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v1/themes/{domain}",
        produces = "*/*",
        consumes = "application/json"
    )
    
    ResponseEntity<DataResponseResourceVersion> createTheme(
        @Parameter(name = "domain", description = "", required = true, in = ParameterIn.PATH) @PathVariable("domain") String domain,
        @Parameter(name = "CreateThemeRequest", description = "", required = true) @Valid @RequestBody CreateThemeRequest createThemeRequest
    );


    /**
     * POST /api/v1/pdf/{domain}/{id}/content/thumbnail
     * Expects a resource id , resource content type and version.
     *
     * @param domain  (required)
     * @param id  (required)
     * @param version  (optional, default to 1)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "createThumbnailContentForResource",
        description = "Expects a resource id , resource content type and version.",
        tags = { "pdf-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = DataResponseResourceVersion.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v1/pdf/{domain}/{id}/content/thumbnail",
        produces = "*/*"
    )
    
    ResponseEntity<DataResponseResourceVersion> createThumbnailContentForResource(
        @Parameter(name = "domain", description = "", required = true, in = ParameterIn.PATH) @PathVariable("domain") String domain,
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") UUID id,
        @Parameter(name = "version", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "version", required = false, defaultValue = "1") Integer version
    );


    /**
     * GET /api/v1/authentication/{domain}/current-user
     *
     * @param domain  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "currentUser",
        tags = { "authentication-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = DataResponseCurrentUserResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/authentication/{domain}/current-user",
        produces = "*/*"
    )
    
    ResponseEntity<DataResponseCurrentUserResponse> currentUser(
        @Parameter(name = "domain", description = "", required = true, in = ParameterIn.PATH) @PathVariable("domain") String domain
    );


    /**
     * GET /api/v1/authentication/current-user
     *
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "currentUser1",
        tags = { "authentication-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = DataResponseCurrentUserResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/authentication/current-user",
        produces = "*/*"
    )
    
    ResponseEntity<DataResponseCurrentUserResponse> currentUser1(
        
    );


    /**
     * DELETE /api/v1/search/{tenantId}
     *
     * @param tenantId  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "delete",
        tags = { "search-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = DataResponseSolrCollection.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/api/v1/search/{tenantId}",
        produces = "*/*"
    )
    
    ResponseEntity<DataResponseSolrCollection> delete(
        @Parameter(name = "tenantId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("tenantId") String tenantId
    );


    /**
     * DELETE /api/v1/realtime-services/{realtimeServiceId} : Deletes the realtime service with the specified id
     *
     * @param realtimeServiceId Filter for deleting the realtime service (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "delete1",
        summary = "Deletes the realtime service with the specified id",
        tags = { "realtime-services-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = GenericResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/api/v1/realtime-services/{realtimeServiceId}",
        produces = "*/*"
    )
    
    ResponseEntity<GenericResponse> delete1(
        @Parameter(name = "realtimeServiceId", description = "Filter for deleting the realtime service", required = true, in = ParameterIn.PATH) @PathVariable("realtimeServiceId") UUID realtimeServiceId
    );


    /**
     * DELETE /api/v1/otmm
     *
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "delete2",
        tags = { "otmm-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/api/v1/otmm"
    )
    
    ResponseEntity<Void> delete2(
        
    );


    /**
     * DELETE /api/v1/collection-resources/delete/{collectionId} : Deletes the set of resources for the specified collection id
     *
     * @param collectionId Filter for deleting the collection resources (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "delete3",
        summary = "Deletes the set of resources for the specified collection id",
        tags = { "collection-resources-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/api/v1/collection-resources/delete/{collectionId}"
    )
    
    ResponseEntity<Void> delete3(
        @Parameter(name = "collectionId", description = "Filter for deleting the collection resources", required = true, in = ParameterIn.PATH) @PathVariable("collectionId") String collectionId
    );


    /**
     * DELETE /api/v1/collection-resources/delete-bulk : Deletes the set of resources for the specified collection ids
     *
     * @param requestBody  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "deleteBulk",
        summary = "Deletes the set of resources for the specified collection ids",
        tags = { "collection-resources-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/api/v1/collection-resources/delete-bulk",
        consumes = "application/json"
    )
    
    ResponseEntity<Void> deleteBulk(
        @Parameter(name = "request_body", description = "", required = true) @Valid @RequestBody List<String> requestBody
    );


    /**
     * DELETE /api/v1/dictionaries/{languageCode}
     *
     * @param languageCode  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "deleteDictionary",
        tags = { "dictionary-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = GenericResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/api/v1/dictionaries/{languageCode}",
        produces = "*/*"
    )
    
    ResponseEntity<GenericResponse> deleteDictionary(
        @Parameter(name = "languageCode", description = "", required = true, in = ParameterIn.PATH) @PathVariable("languageCode") String languageCode
    );


    /**
     * DELETE /api/v1/domains/{domainName}
     *
     * @param domainName  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "deleteDomain",
        tags = { "domain-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = GenericResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/api/v1/domains/{domainName}",
        produces = "*/*"
    )
    
    ResponseEntity<GenericResponse> deleteDomain(
        @Parameter(name = "domainName", description = "", required = true, in = ParameterIn.PATH) @PathVariable("domainName") String domainName
    );


    /**
     * DELETE /api/v1/user-profiles/{domain}/favorite
     *
     * @param domain  (required)
     * @param savedResourceInput  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "deleteFavorite",
        tags = { "user-profile-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/api/v1/user-profiles/{domain}/favorite",
        consumes = "application/json"
    )
    
    ResponseEntity<Void> deleteFavorite(
        @Parameter(name = "domain", description = "", required = true, in = ParameterIn.PATH) @PathVariable("domain") String domain,
        @Parameter(name = "SavedResourceInput", description = "", required = true) @Valid @RequestBody SavedResourceInput savedResourceInput
    );


    /**
     * DELETE /api/v1/user-profiles/{domain}/favorites
     * Removes the given list of resources from the favorites.
     *
     * @param domain  (required)
     * @param favoriteResourcesInput  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "deleteFavorites",
        description = "Removes the given list of resources from the favorites.",
        tags = { "user-profile-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = DataResponseBulkUnfavoriteResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/api/v1/user-profiles/{domain}/favorites",
        produces = "*/*",
        consumes = "application/json"
    )
    
    ResponseEntity<DataResponseBulkUnfavoriteResponse> deleteFavorites(
        @Parameter(name = "domain", description = "", required = true, in = ParameterIn.PATH) @PathVariable("domain") String domain,
        @Parameter(name = "FavoriteResourcesInput", description = "", required = true) @Valid @RequestBody FavoriteResourcesInput favoriteResourcesInput
    );


    /**
     * DELETE /api/v1/links/{domain}
     *
     * @param domain  (required)
     * @param linkDTO  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "deleteLink",
        tags = { "links-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = GenericResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/api/v1/links/{domain}",
        produces = "*/*",
        consumes = "application/json"
    )
    
    ResponseEntity<GenericResponse> deleteLink(
        @Parameter(name = "domain", description = "", required = true, in = ParameterIn.PATH) @PathVariable("domain") String domain,
        @Parameter(name = "LinkDTO", description = "", required = true) @Valid @RequestBody LinkDTO linkDTO
    );


    /**
     * DELETE /api/v1/links/{domain}/multiple
     *
     * @param domain  (required)
     * @param multipleLinksBody  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "deleteLinks",
        tags = { "links-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = GenericResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/api/v1/links/{domain}/multiple",
        produces = "*/*",
        consumes = "application/json"
    )
    
    ResponseEntity<GenericResponse> deleteLinks(
        @Parameter(name = "domain", description = "", required = true, in = ParameterIn.PATH) @PathVariable("domain") String domain,
        @Parameter(name = "MultipleLinksBody", description = "", required = true) @Valid @RequestBody MultipleLinksBody multipleLinksBody
    );


    /**
     * DELETE /api/v1/resources/{domain}/{id}
     *
     * @param domain  (required)
     * @param id  (required)
     * @param version Valid values are LATEST, ALL, or an actual version number. If not specified, will use LATEST. (optional)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "deleteResource",
        tags = { "resources-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = GenericResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/api/v1/resources/{domain}/{id}",
        produces = "*/*"
    )
    
    ResponseEntity<GenericResponse> deleteResource(
        @Parameter(name = "domain", description = "", required = true, in = ParameterIn.PATH) @PathVariable("domain") String domain,
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") UUID id,
        @Parameter(name = "version", description = "Valid values are LATEST, ALL, or an actual version number. If not specified, will use LATEST.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "version", required = false) String version
    );


    /**
     * DELETE /api/v1/resource-categories/{id}
     *
     * @param id  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "deleteResourceCategory",
        tags = { "resource-category-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = GenericResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/api/v1/resource-categories/{id}",
        produces = "*/*"
    )
    
    ResponseEntity<GenericResponse> deleteResourceCategory(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") UUID id
    );


    /**
     * DELETE /api/v1/resource-categories/name/{name}
     *
     * @param name  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "deleteResourceCategoryByName",
        tags = { "resource-category-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = GenericResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/api/v1/resource-categories/name/{name}",
        produces = "*/*"
    )
    
    ResponseEntity<GenericResponse> deleteResourceCategoryByName(
        @Parameter(name = "name", description = "", required = true, in = ParameterIn.PATH) @PathVariable("name") String name
    );


    /**
     * DELETE /api/v1/resources/{domain}/delete-bulk
     * Deletes a list of resources. The version can be LATEST, ALL or an actual version number. If not specified, LATEST is used.
     *
     * @param domain  (required)
     * @param bulkDeleteRequest  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "deleteResources",
        description = "Deletes a list of resources. The version can be LATEST, ALL or an actual version number. If not specified, LATEST is used.",
        tags = { "resources-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = DataResponseBulkDeleteResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/api/v1/resources/{domain}/delete-bulk",
        produces = "*/*",
        consumes = "application/json"
    )
    
    ResponseEntity<DataResponseBulkDeleteResponse> deleteResources(
        @Parameter(name = "domain", description = "", required = true, in = ParameterIn.PATH) @PathVariable("domain") String domain,
        @Parameter(name = "BulkDeleteRequest", description = "", required = true) @Valid @RequestBody BulkDeleteRequest bulkDeleteRequest
    );


    /**
     * DELETE /api/v1/roles/{id}
     *
     * @param id  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "deleteRole",
        tags = { "role-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = GenericResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/api/v1/roles/{id}",
        produces = "*/*"
    )
    
    ResponseEntity<GenericResponse> deleteRole(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") UUID id
    );


    /**
     * DELETE /api/v1/group-roles
     *
     * @param groupRole  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "deleteRole1",
        tags = { "group-role-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = GenericResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/api/v1/group-roles",
        produces = "*/*",
        consumes = "application/json"
    )
    
    ResponseEntity<GenericResponse> deleteRole1(
        @Parameter(name = "GroupRole", description = "", required = true) @Valid @RequestBody GroupRole groupRole
    );


    /**
     * DELETE /api/v1/settings/{application}/{name}
     *
     * @param application  (required)
     * @param name  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "deleteSetting",
        tags = { "settings-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = GenericResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/api/v1/settings/{application}/{name}",
        produces = "application/json"
    )
    
    ResponseEntity<GenericResponse> deleteSetting(
        @Parameter(name = "application", description = "", required = true, in = ParameterIn.PATH) @PathVariable("application") String application,
        @Parameter(name = "name", description = "", required = true, in = ParameterIn.PATH) @PathVariable("name") String name
    );


    /**
     * DELETE /api/v1/otds-tenants/{tenant}
     *
     * @param tenant  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "deleteTenantSchema",
        tags = { "otds-tenant-admin-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = String.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/api/v1/otds-tenants/{tenant}",
        produces = "application/json"
    )
    
    ResponseEntity<String> deleteTenantSchema(
        @Parameter(name = "tenant", description = "", required = true, in = ParameterIn.PATH) @PathVariable("tenant") String tenant
    );


    /**
     * PUT /api/v1/resources/{domain}/{id}/demote
     *
     * @param domain  (required)
     * @param id  (required)
     * @param domain2  (required)
     * @param version  (optional, default to -1)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "demote",
        tags = { "resources-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = DataResponseResourceVersion.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/api/v1/resources/{domain}/{id}/demote",
        produces = "*/*",
        consumes = "application/json"
    )
    
    ResponseEntity<DataResponseResourceVersion> demote(
        @Parameter(name = "domain", description = "", required = true, in = ParameterIn.PATH) @PathVariable("domain") String domain,
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") UUID id,
        @Parameter(name = "Domain", description = "", required = true) @Valid @RequestBody Domain domain2,
        @Parameter(name = "version", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "version", required = false, defaultValue = "-1") Integer version
    );


    /**
     * POST /api/v1/export/{domain}
     *
     * @param domain  (required)
     * @param exportRequest  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "exportAllResourcesFromDomain",
        tags = { "export-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v1/export/{domain}",
        consumes = "application/json"
    )
    
    ResponseEntity<Void> exportAllResourcesFromDomain(
        @Parameter(name = "domain", description = "", required = true, in = ParameterIn.PATH) @PathVariable("domain") String domain,
        @Parameter(name = "ExportRequest", description = "", required = true) @Valid @RequestBody ExportRequest exportRequest
    );


    /**
     * GET /api/v1/export/{domain}
     *
     * @param domain  (required)
     * @param versions  (optional, default to LATEST_APPROVED)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "exportAllResourcesFromDomain1",
        tags = { "export-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/export/{domain}"
    )
    
    ResponseEntity<Void> exportAllResourcesFromDomain1(
        @Parameter(name = "domain", description = "", required = true, in = ParameterIn.PATH) @PathVariable("domain") String domain,
        @Parameter(name = "versions", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "versions", required = false, defaultValue = "LATEST_APPROVED") String versions
    );


    /**
     * POST /api/v1/export/{domain}/{rootId}
     *
     * @param domain  (required)
     * @param rootId  (required)
     * @param exportRequest  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "exportResourcesFromRootInDomain",
        tags = { "export-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v1/export/{domain}/{rootId}",
        consumes = "application/json"
    )
    
    ResponseEntity<Void> exportResourcesFromRootInDomain(
        @Parameter(name = "domain", description = "", required = true, in = ParameterIn.PATH) @PathVariable("domain") String domain,
        @Parameter(name = "rootId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("rootId") UUID rootId,
        @Parameter(name = "ExportRequest", description = "", required = true) @Valid @RequestBody ExportRequest exportRequest
    );


    /**
     * GET /api/v1/export/{domain}/{rootId}
     *
     * @param domain  (required)
     * @param rootId  (required)
     * @param versions  (optional, default to LATEST_APPROVED)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "exportResourcesFromRootInDomain1",
        tags = { "export-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/export/{domain}/{rootId}"
    )
    
    ResponseEntity<Void> exportResourcesFromRootInDomain1(
        @Parameter(name = "domain", description = "", required = true, in = ParameterIn.PATH) @PathVariable("domain") String domain,
        @Parameter(name = "rootId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("rootId") UUID rootId,
        @Parameter(name = "versions", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "versions", required = false, defaultValue = "LATEST_APPROVED") String versions
    );


    /**
     * GET /api/v1/pdf/{domain}/contents/{id}/fragments
     * Expects a resource id, version and state as request parameter and return fragments ( paragraph, image ) for Pdf type resource
     *
     * @param domain  (required)
     * @param id  (required)
     * @param version  (required)
     * @param state  (required)
     * @param pageNum  (optional)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "extractPdf",
        description = "Expects a resource id, version and state as request parameter and return fragments ( paragraph, image ) for Pdf type resource",
        tags = { "pdf-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = PdfFragmentResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/pdf/{domain}/contents/{id}/fragments",
        produces = "*/*"
    )
    
    ResponseEntity<PdfFragmentResponse> extractPdf(
        @Parameter(name = "domain", description = "", required = true, in = ParameterIn.PATH) @PathVariable("domain") String domain,
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") UUID id,
        @NotNull @Parameter(name = "version", description = "", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "version", required = true) Integer version,
        @NotNull @Parameter(name = "state", description = "", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "state", required = true) String state,
        @Parameter(name = "pageNum", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "pageNum", required = false) Integer pageNum
    );


    /**
     * POST /api/v1/import/resource-graph/{packagetype}
     *
     * @param packagetype  (required)
     * @param nodeFormat  (optional)
     * @param expandSystemResources  (optional)
     * @param exportPackage The zip of the export to import (optional)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "generateGraph",
        tags = { "import-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v1/import/resource-graph/{packagetype}",
        consumes = "multipart/form-data"
    )
    
    ResponseEntity<Void> generateGraph(
        @Parameter(name = "packagetype", description = "", required = true, in = ParameterIn.PATH) @PathVariable("packagetype") String packagetype,
        @Parameter(name = "nodeFormat", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "nodeFormat", required = false) String nodeFormat,
        @Parameter(name = "expandSystemResources", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "expandSystemResources", required = false) Boolean expandSystemResources,
        @Parameter(name = "exportPackage", description = "The zip of the export to import") @RequestPart(value = "exportPackage", required = false) MultipartFile exportPackage
    );


    /**
     * GET /api/v1/export/{domain}/resource-graph
     *
     * @param domain  (required)
     * @param nodeFormat  (optional)
     * @param expandSystemResources  (optional)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "generateResourceGraph",
        tags = { "export-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/export/{domain}/resource-graph"
    )
    
    ResponseEntity<Void> generateResourceGraph(
        @Parameter(name = "domain", description = "", required = true, in = ParameterIn.PATH) @PathVariable("domain") String domain,
        @Parameter(name = "nodeFormat", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "nodeFormat", required = false) String nodeFormat,
        @Parameter(name = "expandSystemResources", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "expandSystemResources", required = false) Boolean expandSystemResources
    );


    /**
     * GET /api/v1/export/{domain}/resource-graph/{rootId}
     *
     * @param domain  (required)
     * @param rootId Resource id of the &#39;top&#39; of the resource tree (required)
     * @param nodeFormat  (optional)
     * @param expandSystemResources  (optional)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "generateResourceGraph1",
        tags = { "export-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/export/{domain}/resource-graph/{rootId}"
    )
    
    ResponseEntity<Void> generateResourceGraph1(
        @Parameter(name = "domain", description = "", required = true, in = ParameterIn.PATH) @PathVariable("domain") String domain,
        @Parameter(name = "rootId", description = "Resource id of the 'top' of the resource tree", required = true, in = ParameterIn.PATH) @PathVariable("rootId") UUID rootId,
        @Parameter(name = "nodeFormat", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "nodeFormat", required = false) String nodeFormat,
        @Parameter(name = "expandSystemResources", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "expandSystemResources", required = false) Boolean expandSystemResources
    );


    /**
     * GET /api/v1/realtime-services/{realtimeServiceName} : Gets the realtime service with the specified name
     *
     * @param realtimeServiceName The realtime service to get information regarding (required)
     * @param domainId  (optional)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "get",
        summary = "Gets the realtime service with the specified name",
        tags = { "realtime-services-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = DataResponseRealtimeService.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/realtime-services/{realtimeServiceName}",
        produces = "*/*"
    )
    
    ResponseEntity<DataResponseRealtimeService> get(
        @Parameter(name = "realtimeServiceName", description = "The realtime service to get information regarding", required = true, in = ParameterIn.PATH) @PathVariable("realtimeServiceName") String realtimeServiceName,
        @Parameter(name = "domainId", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "domainId", required = false) String domainId
    );


    /**
     * GET /api/v1/dictionaries/{languageCode}/aff
     *
     * @param languageCode  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "getAffFile",
        tags = { "dictionary-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = Object.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/dictionaries/{languageCode}/aff",
        produces = "*/*"
    )
    
    ResponseEntity<Object> getAffFile(
        @Parameter(name = "languageCode", description = "", required = true, in = ParameterIn.PATH) @PathVariable("languageCode") String languageCode
    );


    /**
     * GET /api/v1/realtime-services : Gets a list of all realtime services
     *
     * @param domainId  (optional)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "getAll",
        summary = "Gets a list of all realtime services",
        tags = { "realtime-services-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = ListResponseRealtimeService.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/realtime-services",
        produces = "*/*"
    )
    
    ResponseEntity<ListResponseRealtimeService> getAll(
        @Parameter(name = "domainId", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "domainId", required = false) String domainId
    );


    /**
     * GET /api/v1/role-permissions
     *
     * @param roleName  (optional)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "getAllPermissions",
        tags = { "role-permissions-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = ListResponseRolePermissions.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/role-permissions",
        produces = "*/*"
    )
    
    ResponseEntity<ListResponseRolePermissions> getAllPermissions(
        @Parameter(name = "roleName", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "roleName", required = false) String roleName
    );


    /**
     * GET /api/v1/settings
     *
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "getAllSettings",
        tags = { "settings-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ListResponseSettingsObj.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/settings",
        produces = "application/json"
    )
    
    ResponseEntity<ListResponseSettingsObj> getAllSettings(
        
    );


    /**
     * GET /api/v1/version/api : Get version information for the gateway
     *
     * @return successful operation (status code 200)
     */
    @Operation(
        operationId = "getApiVersion",
        summary = "Get version information for the gateway",
        tags = { "version-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = String.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/version/api",
        produces = "application/json"
    )
    
    ResponseEntity<String> getApiVersion(
        
    );


    /**
     * GET /api/v1/run-definitions/{domain}/engines
     *
     * @param domain  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "getAvailableEngines",
        tags = { "engine-run-def-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = PageResponseResourceVersion.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/run-definitions/{domain}/engines",
        produces = "*/*"
    )
    
    ResponseEntity<PageResponseResourceVersion> getAvailableEngines(
        @Parameter(name = "domain", description = "", required = true, in = ParameterIn.PATH) @PathVariable("domain") String domain
    );


    /**
     * GET /api/v1/configurations/config.json
     *
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "getConfiguration",
        tags = { "configurations-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = DataResponseConfigurationResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/configurations/config.json",
        produces = "application/json"
    )
    
    ResponseEntity<DataResponseConfigurationResponse> getConfiguration(
        
    );


    /**
     * GET /api/v1/resources/{domain}/{id}/content
     *
     * @param domain  (required)
     * @param id  (required)
     * @param version  (optional)
     * @param state  (optional)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "getContent",
        tags = { "resources-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = Object.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/resources/{domain}/{id}/content",
        produces = "*/*"
    )
    
    ResponseEntity<Object> getContent(
        @Parameter(name = "domain", description = "", required = true, in = ParameterIn.PATH) @PathVariable("domain") String domain,
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") UUID id,
        @Parameter(name = "version", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "version", required = false) Integer version,
        @Parameter(name = "state", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "state", required = false) String state
    );


    /**
     * GET /api/v1/run-definitions/{domain}/preview/{id}
     *
     * @param domain  (required)
     * @param id  (required)
     * @param useApprovedTemplate  (optional)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "getDefForPreview",
        tags = { "engine-run-def-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = RunDef.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/run-definitions/{domain}/preview/{id}",
        produces = "*/*"
    )
    
    ResponseEntity<RunDef> getDefForPreview(
        @Parameter(name = "domain", description = "", required = true, in = ParameterIn.PATH) @PathVariable("domain") String domain,
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") UUID id,
        @Parameter(name = "useApprovedTemplate", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "useApprovedTemplate", required = false) Boolean useApprovedTemplate
    );


    /**
     * GET /api/v1/run-definitions/{domain}/engine/default
     *
     * @param domain  (required)
     * @param encoding  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "getDefaultEngine",
        tags = { "engine-run-def-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = DataResponseResourceVersion.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/run-definitions/{domain}/engine/default",
        produces = "*/*"
    )
    
    ResponseEntity<DataResponseResourceVersion> getDefaultEngine(
        @Parameter(name = "domain", description = "", required = true, in = ParameterIn.PATH) @PathVariable("domain") String domain,
        @NotNull @Parameter(name = "encoding", description = "", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "encoding", required = true) String encoding
    );


    /**
     * GET /api/v1/dictionaries/{languageCode}/dic
     *
     * @param languageCode  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "getDicFile",
        tags = { "dictionary-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = Object.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/dictionaries/{languageCode}/dic",
        produces = "*/*"
    )
    
    ResponseEntity<Object> getDicFile(
        @Parameter(name = "languageCode", description = "", required = true, in = ParameterIn.PATH) @PathVariable("languageCode") String languageCode
    );


    /**
     * GET /api/v1/dictionaries
     *
     * @param includeBinaries  (optional)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "getDictionaries",
        tags = { "dictionary-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = ListResponseDictionary.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/dictionaries",
        produces = "*/*"
    )
    
    ResponseEntity<ListResponseDictionary> getDictionaries(
        @Parameter(name = "includeBinaries", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "includeBinaries", required = false) Boolean includeBinaries
    );


    /**
     * GET /api/v1/dictionaries/{languageCode}
     *
     * @param languageCode  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "getDictionary",
        tags = { "dictionary-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = DataResponseDictionary.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/dictionaries/{languageCode}",
        produces = "*/*"
    )
    
    ResponseEntity<DataResponseDictionary> getDictionary(
        @Parameter(name = "languageCode", description = "", required = true, in = ParameterIn.PATH) @PathVariable("languageCode") String languageCode
    );


    /**
     * GET /api/v1/domains
     *
     * @param filterSearchString  (optional)
     * @param filterCaseSensitive  (optional)
     * @param filterWholeWord  (optional)
     * @param filterCurrentUser  (optional)
     * @param offset For pagination, fetch entities after this many (optional)
     * @param count For pagination, the number of entities per page (optional)
     * @param fetchChildren  (optional)
     * @param fetchApprovalGroups  (optional)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "getDomains",
        tags = { "domain-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = PageResponseDomain.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/domains",
        produces = "*/*"
    )
    
    ResponseEntity<PageResponseDomain> getDomains(
        @Parameter(name = "filter.searchString", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter.searchString", required = false) String filterSearchString,
        @Parameter(name = "filter.caseSensitive", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter.caseSensitive", required = false) Boolean filterCaseSensitive,
        @Parameter(name = "filter.wholeWord", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter.wholeWord", required = false) Boolean filterWholeWord,
        @Parameter(name = "filter.currentUser", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter.currentUser", required = false) Boolean filterCurrentUser,
        @Parameter(name = "offset", description = "For pagination, fetch entities after this many", in = ParameterIn.QUERY) @Valid @RequestParam(value = "offset", required = false) Integer offset,
        @Parameter(name = "count", description = "For pagination, the number of entities per page", in = ParameterIn.QUERY) @Valid @RequestParam(value = "count", required = false) Integer count,
        @Parameter(name = "fetchChildren", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fetchChildren", required = false) Boolean fetchChildren,
        @Parameter(name = "fetchApprovalGroups", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fetchApprovalGroups", required = false) Boolean fetchApprovalGroups
    );


    /**
     * GET /api/v1/realtime-services/{realtimeServiceName}/enginerundef : Gets the engine rundef content for the realtime service with the specified name
     *
     * @param realtimeServiceName The realtime service to get information regarding (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "getEngineRundef",
        summary = "Gets the engine rundef content for the realtime service with the specified name",
        tags = { "realtime-services-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/realtime-services/{realtimeServiceName}/enginerundef"
    )
    
    ResponseEntity<Void> getEngineRundef(
        @Parameter(name = "realtimeServiceName", description = "The realtime service to get information regarding", required = true, in = ParameterIn.PATH) @PathVariable("realtimeServiceName") String realtimeServiceName
    );


    /**
     * GET /api/v1/import/logs
     *
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "getImportHistory",
        tags = { "import-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = ListResponseImportHistory.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/import/logs",
        produces = "*/*"
    )
    
    ResponseEntity<ListResponseImportHistory> getImportHistory(
        
    );


    /**
     * GET /api/v1/permissions/{domain}/licenses
     *
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "getLicensePermissions",
        tags = { "permissions-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = DataResponseWebappPermissionResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/permissions/{domain}/licenses",
        produces = "*/*"
    )
    
    ResponseEntity<DataResponseWebappPermissionResponse> getLicensePermissions(
        
    );


    /**
     * GET /api/v1/links/{domain}
     *
     * @param domain  (required)
     * @param linkSubjectId  (optional)
     * @param linkSubjectVersion  (optional)
     * @param linkObjectId  (optional)
     * @param linkDepth Optionally specify the maximum depth for a recursive traversal of a link tree. (optional)
     * @param filterIds  (optional)
     * @param filterExcludedIds  (optional)
     * @param filterTypes  (optional)
     * @param filterExcludedTypes  (optional)
     * @param filterName  (optional)
     * @param filterDescription  (optional)
     * @param filterCreatedBy  (optional)
     * @param filterLastModifiedBy  (optional)
     * @param filterCreatedDateStart  (optional)
     * @param filterCreatedDateEnd  (optional)
     * @param filterLastModifiedDateStart  (optional)
     * @param filterLastModifiedDateEnd  (optional)
     * @param filterSearchString This is equivalent to searching where the name OR the description is LIKE this value (optional)
     * @param filterCaseSensitive  (optional)
     * @param filterWholeWord  (optional)
     * @param filterResourcePackId  (optional)
     * @param filterSystemResource  (optional)
     * @param filterHidden  (optional)
     * @param filterHasApprovedVersion  (optional)
     * @param filterStandardVariantId  (optional)
     * @param filterUseEffectiveDate  (optional)
     * @param filterEffectiveDate  (optional)
     * @param filterCategories  (optional)
     * @param filterCategoryObjects  (optional)
     * @param filterVfilterLastModifiedDateEnd  (optional)
     * @param filterDomainId only include resources in this domain (optional)
     * @param filterLatestVersion only include the latest version of objects (optional)
     * @param filterLocked  (optional)
     * @param filterStates  (optional)
     * @param filterOverrideIds  (optional)
     * @param filterOverrideStates  (optional)
     * @param vfilterIds  (optional)
     * @param vfilterExcludedIds  (optional)
     * @param vfilterTypes  (optional)
     * @param vfilterExcludedTypes  (optional)
     * @param vfilterName  (optional)
     * @param vfilterDescription  (optional)
     * @param vfilterCreatedBy  (optional)
     * @param vfilterLastModifiedBy  (optional)
     * @param vfilterCreatedDateStart  (optional)
     * @param vfilterCreatedDateEnd  (optional)
     * @param vfilterLastModifiedDateStart  (optional)
     * @param vfilterLastModifiedDateEnd  (optional)
     * @param vfilterSearchString This is equivalent to searching where the name OR the description is LIKE this value (optional)
     * @param vfilterCaseSensitive  (optional)
     * @param vfilterWholeWord  (optional)
     * @param vfilterResourcePackId  (optional)
     * @param vfilterSystemResource  (optional)
     * @param vfilterHidden  (optional)
     * @param vfilterHasApprovedVersion  (optional)
     * @param vfilterStandardVariantId  (optional)
     * @param vfilterUseEffectiveDate  (optional)
     * @param vfilterEffectiveDate  (optional)
     * @param vfilterCategories  (optional)
     * @param vfilterCategoryObjects  (optional)
     * @param vfilterVfilterLastModifiedDateEnd  (optional)
     * @param vfilterDomainId only include resources in this domain (optional)
     * @param vfilterLatestVersion only include the latest version of objects (optional)
     * @param vfilterLocked  (optional)
     * @param vfilterStates  (optional)
     * @param vfilterOverrideIds  (optional)
     * @param vfilterOverrideStates  (optional)
     * @param tfilterIds  (optional)
     * @param tfilterExcludedIds  (optional)
     * @param tfilterTypes  (optional)
     * @param tfilterExcludedTypes  (optional)
     * @param tfilterName  (optional)
     * @param tfilterDescription  (optional)
     * @param tfilterCreatedBy  (optional)
     * @param tfilterLastModifiedBy  (optional)
     * @param tfilterCreatedDateStart  (optional)
     * @param tfilterCreatedDateEnd  (optional)
     * @param tfilterLastModifiedDateStart  (optional)
     * @param tfilterLastModifiedDateEnd  (optional)
     * @param tfilterSearchString This is equivalent to searching where the name OR the description is LIKE this value (optional)
     * @param tfilterCaseSensitive  (optional)
     * @param tfilterWholeWord  (optional)
     * @param tfilterResourcePackId  (optional)
     * @param tfilterSystemResource  (optional)
     * @param tfilterHidden  (optional)
     * @param tfilterHasApprovedVersion  (optional)
     * @param tfilterStandardVariantId  (optional)
     * @param tfilterUseEffectiveDate  (optional)
     * @param tfilterEffectiveDate  (optional)
     * @param tfilterCategories  (optional)
     * @param tfilterCategoryObjects  (optional)
     * @param tfilterVfilterLastModifiedDateEnd  (optional)
     * @param tfilterDomainId only include resources in this domain (optional)
     * @param tfilterLatestVersion only include the latest version of objects (optional)
     * @param tfilterLocked  (optional)
     * @param tfilterStates  (optional)
     * @param tfilterOverrideIds  (optional)
     * @param tfilterOverrideStates  (optional)
     * @param rfilterIds  (optional)
     * @param rfilterExcludedIds  (optional)
     * @param rfilterTypes  (optional)
     * @param rfilterExcludedTypes  (optional)
     * @param rfilterName  (optional)
     * @param rfilterDescription  (optional)
     * @param rfilterCreatedBy  (optional)
     * @param rfilterLastModifiedBy  (optional)
     * @param rfilterCreatedDateStart  (optional)
     * @param rfilterCreatedDateEnd  (optional)
     * @param rfilterLastModifiedDateStart  (optional)
     * @param rfilterLastModifiedDateEnd  (optional)
     * @param rfilterSearchString This is equivalent to searching where the name OR the description is LIKE this value (optional)
     * @param rfilterCaseSensitive  (optional)
     * @param rfilterWholeWord  (optional)
     * @param rfilterResourcePackId  (optional)
     * @param rfilterSystemResource  (optional)
     * @param rfilterHidden  (optional)
     * @param rfilterHasApprovedVersion  (optional)
     * @param rfilterStandardVariantId  (optional)
     * @param rfilterUseEffectiveDate  (optional)
     * @param rfilterEffectiveDate  (optional)
     * @param rfilterCategories  (optional)
     * @param rfilterCategoryObjects  (optional)
     * @param rfilterVfilterLastModifiedDateEnd  (optional)
     * @param rfilterDomainId only include resources in this domain (optional)
     * @param rfilterLatestVersion only include the latest version of objects (optional)
     * @param rfilterLocked  (optional)
     * @param rfilterStates  (optional)
     * @param rfilterOverrideIds  (optional)
     * @param rfilterOverrideStates  (optional)
     * @param useEffectiveDate  (optional)
     * @param effectiveDate  (optional)
     * @param offset For pagination, fetch entities after this many (optional)
     * @param count For pagination, the number of entities per page (optional)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "getLinks",
        tags = { "links-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = PageResponseLinkDTO.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/links/{domain}",
        produces = "*/*"
    )
    
    ResponseEntity<PageResponseLinkDTO> getLinks(
        @Parameter(name = "domain", description = "", required = true, in = ParameterIn.PATH) @PathVariable("domain") String domain,
        @Parameter(name = "linkSubjectId", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "linkSubjectId", required = false) UUID linkSubjectId,
        @Parameter(name = "linkSubjectVersion", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "linkSubjectVersion", required = false) Integer linkSubjectVersion,
        @Parameter(name = "linkObjectId", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "linkObjectId", required = false) UUID linkObjectId,
        @Parameter(name = "linkDepth", description = "Optionally specify the maximum depth for a recursive traversal of a link tree.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "linkDepth", required = false) Integer linkDepth,
        @Parameter(name = "filter.ids", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter.ids", required = false) List<UUID> filterIds,
        @Parameter(name = "filter.excludedIds", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter.excludedIds", required = false) List<UUID> filterExcludedIds,
        @Parameter(name = "filter.types", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter.types", required = false) List<String> filterTypes,
        @Parameter(name = "filter.excludedTypes", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter.excludedTypes", required = false) List<String> filterExcludedTypes,
        @Parameter(name = "filter.name", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter.name", required = false) String filterName,
        @Parameter(name = "filter.description", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter.description", required = false) String filterDescription,
        @Parameter(name = "filter.createdBy", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter.createdBy", required = false) String filterCreatedBy,
        @Parameter(name = "filter.lastModifiedBy", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter.lastModifiedBy", required = false) String filterLastModifiedBy,
        @Parameter(name = "filter.createdDateStart", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter.createdDateStart", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime filterCreatedDateStart,
        @Parameter(name = "filter.createdDateEnd", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter.createdDateEnd", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime filterCreatedDateEnd,
        @Parameter(name = "filter.lastModifiedDateStart", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter.lastModifiedDateStart", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime filterLastModifiedDateStart,
        @Parameter(name = "filter.lastModifiedDateEnd", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter.lastModifiedDateEnd", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime filterLastModifiedDateEnd,
        @Parameter(name = "filter.searchString", description = "This is equivalent to searching where the name OR the description is LIKE this value", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter.searchString", required = false) String filterSearchString,
        @Parameter(name = "filter.caseSensitive", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter.caseSensitive", required = false) Boolean filterCaseSensitive,
        @Parameter(name = "filter.wholeWord", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter.wholeWord", required = false) Boolean filterWholeWord,
        @Parameter(name = "filter.resourcePackId", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter.resourcePackId", required = false) UUID filterResourcePackId,
        @Parameter(name = "filter.systemResource", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter.systemResource", required = false) Boolean filterSystemResource,
        @Parameter(name = "filter.hidden", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter.hidden", required = false) Boolean filterHidden,
        @Parameter(name = "filter.hasApprovedVersion", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter.hasApprovedVersion", required = false) Boolean filterHasApprovedVersion,
        @Parameter(name = "filter.standardVariantId", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter.standardVariantId", required = false) UUID filterStandardVariantId,
        @Parameter(name = "filter.useEffectiveDate", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter.useEffectiveDate", required = false) Boolean filterUseEffectiveDate,
        @Parameter(name = "filter.effectiveDate", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter.effectiveDate", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime filterEffectiveDate,
        @Parameter(name = "filter.categories", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter.categories", required = false) List<String> filterCategories,
        @Parameter(name = "filter.categoryObjects", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter.categoryObjects", required = false) List<@Valid ResourceCategory> filterCategoryObjects,
        @Parameter(name = "filter.vfilter_lastModifiedDateEnd", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter.vfilter_lastModifiedDateEnd", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime filterVfilterLastModifiedDateEnd,
        @Parameter(name = "filter.domainId", description = "only include resources in this domain", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter.domainId", required = false) String filterDomainId,
        @Parameter(name = "filter.latestVersion", description = "only include the latest version of objects", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter.latestVersion", required = false) Boolean filterLatestVersion,
        @Parameter(name = "filter.locked", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter.locked", required = false) Boolean filterLocked,
        @Parameter(name = "filter.states", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter.states", required = false) List<String> filterStates,
        @Parameter(name = "filter.overrideIds", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter.overrideIds", required = false) List<UUID> filterOverrideIds,
        @Parameter(name = "filter.overrideStates", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter.overrideStates", required = false) List<String> filterOverrideStates,
        @Parameter(name = "vfilter.ids", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "vfilter.ids", required = false) List<UUID> vfilterIds,
        @Parameter(name = "vfilter.excludedIds", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "vfilter.excludedIds", required = false) List<UUID> vfilterExcludedIds,
        @Parameter(name = "vfilter.types", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "vfilter.types", required = false) List<String> vfilterTypes,
        @Parameter(name = "vfilter.excludedTypes", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "vfilter.excludedTypes", required = false) List<String> vfilterExcludedTypes,
        @Parameter(name = "vfilter.name", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "vfilter.name", required = false) String vfilterName,
        @Parameter(name = "vfilter.description", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "vfilter.description", required = false) String vfilterDescription,
        @Parameter(name = "vfilter.createdBy", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "vfilter.createdBy", required = false) String vfilterCreatedBy,
        @Parameter(name = "vfilter.lastModifiedBy", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "vfilter.lastModifiedBy", required = false) String vfilterLastModifiedBy,
        @Parameter(name = "vfilter.createdDateStart", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "vfilter.createdDateStart", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime vfilterCreatedDateStart,
        @Parameter(name = "vfilter.createdDateEnd", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "vfilter.createdDateEnd", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime vfilterCreatedDateEnd,
        @Parameter(name = "vfilter.lastModifiedDateStart", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "vfilter.lastModifiedDateStart", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime vfilterLastModifiedDateStart,
        @Parameter(name = "vfilter.lastModifiedDateEnd", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "vfilter.lastModifiedDateEnd", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime vfilterLastModifiedDateEnd,
        @Parameter(name = "vfilter.searchString", description = "This is equivalent to searching where the name OR the description is LIKE this value", in = ParameterIn.QUERY) @Valid @RequestParam(value = "vfilter.searchString", required = false) String vfilterSearchString,
        @Parameter(name = "vfilter.caseSensitive", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "vfilter.caseSensitive", required = false) Boolean vfilterCaseSensitive,
        @Parameter(name = "vfilter.wholeWord", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "vfilter.wholeWord", required = false) Boolean vfilterWholeWord,
        @Parameter(name = "vfilter.resourcePackId", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "vfilter.resourcePackId", required = false) UUID vfilterResourcePackId,
        @Parameter(name = "vfilter.systemResource", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "vfilter.systemResource", required = false) Boolean vfilterSystemResource,
        @Parameter(name = "vfilter.hidden", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "vfilter.hidden", required = false) Boolean vfilterHidden,
        @Parameter(name = "vfilter.hasApprovedVersion", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "vfilter.hasApprovedVersion", required = false) Boolean vfilterHasApprovedVersion,
        @Parameter(name = "vfilter.standardVariantId", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "vfilter.standardVariantId", required = false) UUID vfilterStandardVariantId,
        @Parameter(name = "vfilter.useEffectiveDate", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "vfilter.useEffectiveDate", required = false) Boolean vfilterUseEffectiveDate,
        @Parameter(name = "vfilter.effectiveDate", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "vfilter.effectiveDate", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime vfilterEffectiveDate,
        @Parameter(name = "vfilter.categories", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "vfilter.categories", required = false) List<String> vfilterCategories,
        @Parameter(name = "vfilter.categoryObjects", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "vfilter.categoryObjects", required = false) List<@Valid ResourceCategory> vfilterCategoryObjects,
        @Parameter(name = "vfilter.vfilter_lastModifiedDateEnd", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "vfilter.vfilter_lastModifiedDateEnd", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime vfilterVfilterLastModifiedDateEnd,
        @Parameter(name = "vfilter.domainId", description = "only include resources in this domain", in = ParameterIn.QUERY) @Valid @RequestParam(value = "vfilter.domainId", required = false) String vfilterDomainId,
        @Parameter(name = "vfilter.latestVersion", description = "only include the latest version of objects", in = ParameterIn.QUERY) @Valid @RequestParam(value = "vfilter.latestVersion", required = false) Boolean vfilterLatestVersion,
        @Parameter(name = "vfilter.locked", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "vfilter.locked", required = false) Boolean vfilterLocked,
        @Parameter(name = "vfilter.states", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "vfilter.states", required = false) List<String> vfilterStates,
        @Parameter(name = "vfilter.overrideIds", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "vfilter.overrideIds", required = false) List<UUID> vfilterOverrideIds,
        @Parameter(name = "vfilter.overrideStates", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "vfilter.overrideStates", required = false) List<String> vfilterOverrideStates,
        @Parameter(name = "tfilter.ids", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "tfilter.ids", required = false) List<UUID> tfilterIds,
        @Parameter(name = "tfilter.excludedIds", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "tfilter.excludedIds", required = false) List<UUID> tfilterExcludedIds,
        @Parameter(name = "tfilter.types", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "tfilter.types", required = false) List<String> tfilterTypes,
        @Parameter(name = "tfilter.excludedTypes", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "tfilter.excludedTypes", required = false) List<String> tfilterExcludedTypes,
        @Parameter(name = "tfilter.name", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "tfilter.name", required = false) String tfilterName,
        @Parameter(name = "tfilter.description", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "tfilter.description", required = false) String tfilterDescription,
        @Parameter(name = "tfilter.createdBy", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "tfilter.createdBy", required = false) String tfilterCreatedBy,
        @Parameter(name = "tfilter.lastModifiedBy", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "tfilter.lastModifiedBy", required = false) String tfilterLastModifiedBy,
        @Parameter(name = "tfilter.createdDateStart", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "tfilter.createdDateStart", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime tfilterCreatedDateStart,
        @Parameter(name = "tfilter.createdDateEnd", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "tfilter.createdDateEnd", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime tfilterCreatedDateEnd,
        @Parameter(name = "tfilter.lastModifiedDateStart", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "tfilter.lastModifiedDateStart", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime tfilterLastModifiedDateStart,
        @Parameter(name = "tfilter.lastModifiedDateEnd", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "tfilter.lastModifiedDateEnd", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime tfilterLastModifiedDateEnd,
        @Parameter(name = "tfilter.searchString", description = "This is equivalent to searching where the name OR the description is LIKE this value", in = ParameterIn.QUERY) @Valid @RequestParam(value = "tfilter.searchString", required = false) String tfilterSearchString,
        @Parameter(name = "tfilter.caseSensitive", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "tfilter.caseSensitive", required = false) Boolean tfilterCaseSensitive,
        @Parameter(name = "tfilter.wholeWord", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "tfilter.wholeWord", required = false) Boolean tfilterWholeWord,
        @Parameter(name = "tfilter.resourcePackId", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "tfilter.resourcePackId", required = false) UUID tfilterResourcePackId,
        @Parameter(name = "tfilter.systemResource", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "tfilter.systemResource", required = false) Boolean tfilterSystemResource,
        @Parameter(name = "tfilter.hidden", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "tfilter.hidden", required = false) Boolean tfilterHidden,
        @Parameter(name = "tfilter.hasApprovedVersion", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "tfilter.hasApprovedVersion", required = false) Boolean tfilterHasApprovedVersion,
        @Parameter(name = "tfilter.standardVariantId", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "tfilter.standardVariantId", required = false) UUID tfilterStandardVariantId,
        @Parameter(name = "tfilter.useEffectiveDate", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "tfilter.useEffectiveDate", required = false) Boolean tfilterUseEffectiveDate,
        @Parameter(name = "tfilter.effectiveDate", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "tfilter.effectiveDate", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime tfilterEffectiveDate,
        @Parameter(name = "tfilter.categories", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "tfilter.categories", required = false) List<String> tfilterCategories,
        @Parameter(name = "tfilter.categoryObjects", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "tfilter.categoryObjects", required = false) List<@Valid ResourceCategory> tfilterCategoryObjects,
        @Parameter(name = "tfilter.vfilter_lastModifiedDateEnd", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "tfilter.vfilter_lastModifiedDateEnd", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime tfilterVfilterLastModifiedDateEnd,
        @Parameter(name = "tfilter.domainId", description = "only include resources in this domain", in = ParameterIn.QUERY) @Valid @RequestParam(value = "tfilter.domainId", required = false) String tfilterDomainId,
        @Parameter(name = "tfilter.latestVersion", description = "only include the latest version of objects", in = ParameterIn.QUERY) @Valid @RequestParam(value = "tfilter.latestVersion", required = false) Boolean tfilterLatestVersion,
        @Parameter(name = "tfilter.locked", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "tfilter.locked", required = false) Boolean tfilterLocked,
        @Parameter(name = "tfilter.states", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "tfilter.states", required = false) List<String> tfilterStates,
        @Parameter(name = "tfilter.overrideIds", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "tfilter.overrideIds", required = false) List<UUID> tfilterOverrideIds,
        @Parameter(name = "tfilter.overrideStates", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "tfilter.overrideStates", required = false) List<String> tfilterOverrideStates,
        @Parameter(name = "rfilter.ids", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "rfilter.ids", required = false) List<UUID> rfilterIds,
        @Parameter(name = "rfilter.excludedIds", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "rfilter.excludedIds", required = false) List<UUID> rfilterExcludedIds,
        @Parameter(name = "rfilter.types", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "rfilter.types", required = false) List<String> rfilterTypes,
        @Parameter(name = "rfilter.excludedTypes", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "rfilter.excludedTypes", required = false) List<String> rfilterExcludedTypes,
        @Parameter(name = "rfilter.name", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "rfilter.name", required = false) String rfilterName,
        @Parameter(name = "rfilter.description", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "rfilter.description", required = false) String rfilterDescription,
        @Parameter(name = "rfilter.createdBy", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "rfilter.createdBy", required = false) String rfilterCreatedBy,
        @Parameter(name = "rfilter.lastModifiedBy", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "rfilter.lastModifiedBy", required = false) String rfilterLastModifiedBy,
        @Parameter(name = "rfilter.createdDateStart", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "rfilter.createdDateStart", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime rfilterCreatedDateStart,
        @Parameter(name = "rfilter.createdDateEnd", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "rfilter.createdDateEnd", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime rfilterCreatedDateEnd,
        @Parameter(name = "rfilter.lastModifiedDateStart", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "rfilter.lastModifiedDateStart", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime rfilterLastModifiedDateStart,
        @Parameter(name = "rfilter.lastModifiedDateEnd", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "rfilter.lastModifiedDateEnd", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime rfilterLastModifiedDateEnd,
        @Parameter(name = "rfilter.searchString", description = "This is equivalent to searching where the name OR the description is LIKE this value", in = ParameterIn.QUERY) @Valid @RequestParam(value = "rfilter.searchString", required = false) String rfilterSearchString,
        @Parameter(name = "rfilter.caseSensitive", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "rfilter.caseSensitive", required = false) Boolean rfilterCaseSensitive,
        @Parameter(name = "rfilter.wholeWord", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "rfilter.wholeWord", required = false) Boolean rfilterWholeWord,
        @Parameter(name = "rfilter.resourcePackId", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "rfilter.resourcePackId", required = false) UUID rfilterResourcePackId,
        @Parameter(name = "rfilter.systemResource", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "rfilter.systemResource", required = false) Boolean rfilterSystemResource,
        @Parameter(name = "rfilter.hidden", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "rfilter.hidden", required = false) Boolean rfilterHidden,
        @Parameter(name = "rfilter.hasApprovedVersion", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "rfilter.hasApprovedVersion", required = false) Boolean rfilterHasApprovedVersion,
        @Parameter(name = "rfilter.standardVariantId", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "rfilter.standardVariantId", required = false) UUID rfilterStandardVariantId,
        @Parameter(name = "rfilter.useEffectiveDate", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "rfilter.useEffectiveDate", required = false) Boolean rfilterUseEffectiveDate,
        @Parameter(name = "rfilter.effectiveDate", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "rfilter.effectiveDate", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime rfilterEffectiveDate,
        @Parameter(name = "rfilter.categories", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "rfilter.categories", required = false) List<String> rfilterCategories,
        @Parameter(name = "rfilter.categoryObjects", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "rfilter.categoryObjects", required = false) List<@Valid ResourceCategory> rfilterCategoryObjects,
        @Parameter(name = "rfilter.vfilter_lastModifiedDateEnd", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "rfilter.vfilter_lastModifiedDateEnd", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime rfilterVfilterLastModifiedDateEnd,
        @Parameter(name = "rfilter.domainId", description = "only include resources in this domain", in = ParameterIn.QUERY) @Valid @RequestParam(value = "rfilter.domainId", required = false) String rfilterDomainId,
        @Parameter(name = "rfilter.latestVersion", description = "only include the latest version of objects", in = ParameterIn.QUERY) @Valid @RequestParam(value = "rfilter.latestVersion", required = false) Boolean rfilterLatestVersion,
        @Parameter(name = "rfilter.locked", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "rfilter.locked", required = false) Boolean rfilterLocked,
        @Parameter(name = "rfilter.states", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "rfilter.states", required = false) List<String> rfilterStates,
        @Parameter(name = "rfilter.overrideIds", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "rfilter.overrideIds", required = false) List<UUID> rfilterOverrideIds,
        @Parameter(name = "rfilter.overrideStates", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "rfilter.overrideStates", required = false) List<String> rfilterOverrideStates,
        @Parameter(name = "useEffectiveDate", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "useEffectiveDate", required = false) Boolean useEffectiveDate,
        @Parameter(name = "effectiveDate", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "effectiveDate", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime effectiveDate,
        @Parameter(name = "offset", description = "For pagination, fetch entities after this many", in = ParameterIn.QUERY) @Valid @RequestParam(value = "offset", required = false) Integer offset,
        @Parameter(name = "count", description = "For pagination, the number of entities per page", in = ParameterIn.QUERY) @Valid @RequestParam(value = "count", required = false) Integer count
    );


    /**
     * GET /api/v1/manifests/{domain}/communication-set/{communicationSetId}
     *
     * @param domain  (required)
     * @param communicationSetId  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "getManifestForCommunicationSet",
        tags = { "manifest-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = Manifest.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/manifests/{domain}/communication-set/{communicationSetId}",
        produces = "*/*"
    )
    
    ResponseEntity<Manifest> getManifestForCommunicationSet(
        @Parameter(name = "domain", description = "", required = true, in = ParameterIn.PATH) @PathVariable("domain") String domain,
        @Parameter(name = "communicationSetId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("communicationSetId") UUID communicationSetId
    );


    /**
     * GET /api/v1/manifests/{domain}/{packageId}
     *
     * @param domain  (required)
     * @param packageId  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "getManifestForPackage",
        tags = { "manifest-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = Manifest.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/manifests/{domain}/{packageId}",
        produces = "*/*"
    )
    
    ResponseEntity<Manifest> getManifestForPackage(
        @Parameter(name = "domain", description = "", required = true, in = ParameterIn.PATH) @PathVariable("domain") String domain,
        @Parameter(name = "packageId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("packageId") UUID packageId
    );


    /**
     * GET /api/v1/run-definitions/{domain}/engine
     *
     * @param domain  (required)
     * @param engineName  (required)
     * @param encoding  (optional)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "getNamedEngine",
        tags = { "engine-run-def-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = DataResponseResourceVersion.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/run-definitions/{domain}/engine",
        produces = "*/*"
    )
    
    ResponseEntity<DataResponseResourceVersion> getNamedEngine(
        @Parameter(name = "domain", description = "", required = true, in = ParameterIn.PATH) @PathVariable("domain") String domain,
        @NotNull @Parameter(name = "engineName", description = "", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "engineName", required = true) String engineName,
        @Parameter(name = "encoding", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "encoding", required = false) String encoding
    );


    /**
     * GET /api/v1/licenses : Internal only. Get license information of a tenant. User must belong to a group having privileges to retrieve license information.
     *
     * @param domainId Retrieves license info based on the configuration of the current domain (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "getOTDSLicense",
        summary = "Internal only. Get license information of a tenant. User must belong to a group having privileges to retrieve license information.",
        tags = { "license-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = RawDataResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/licenses",
        produces = "*/*"
    )
    
    ResponseEntity<RawDataResponse> getOTDSLicense(
        @NotNull @Parameter(name = "domainId", description = "Retrieves license info based on the configuration of the current domain", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "domainId", required = true) String domainId
    );


    /**
     * GET /api/v1/package/{domain}/root/{id}
     *
     * @param domain  (required)
     * @param id  (required)
     * @param version  (optional)
     * @param latestVersions  (optional, default to false)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "getPackage",
        tags = { "package-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/package/{domain}/root/{id}"
    )
    
    ResponseEntity<Void> getPackage(
        @Parameter(name = "domain", description = "", required = true, in = ParameterIn.PATH) @PathVariable("domain") String domain,
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") UUID id,
        @Parameter(name = "version", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "version", required = false) Integer version,
        @Parameter(name = "latestVersions", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "latestVersions", required = false, defaultValue = "false") Boolean latestVersions
    );


    /**
     * GET /api/v1/package/{domain}/type
     *
     * @param domain  (required)
     * @param resourceType  (required)
     * @param latestVersions  (optional, default to false)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "getPackageAllResourceType",
        tags = { "package-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/package/{domain}/type"
    )
    
    ResponseEntity<Void> getPackageAllResourceType(
        @Parameter(name = "domain", description = "", required = true, in = ParameterIn.PATH) @PathVariable("domain") String domain,
        @NotNull @Parameter(name = "resourceType", description = "", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "resourceType", required = true) String resourceType,
        @Parameter(name = "latestVersions", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "latestVersions", required = false, defaultValue = "false") Boolean latestVersions
    );


    /**
     * POST /api/v1/package/{domain}/root/{id}
     *
     * @param domain  (required)
     * @param id  (required)
     * @param version  (optional)
     * @param latestVersions  (optional, default to false)
     * @param packageOptions  (optional)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "getPackageWithPayload",
        tags = { "package-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v1/package/{domain}/root/{id}",
        consumes = "application/json"
    )
    
    ResponseEntity<Void> getPackageWithPayload(
        @Parameter(name = "domain", description = "", required = true, in = ParameterIn.PATH) @PathVariable("domain") String domain,
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") UUID id,
        @Parameter(name = "version", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "version", required = false) Integer version,
        @Parameter(name = "latestVersions", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "latestVersions", required = false, defaultValue = "false") Boolean latestVersions,
        @Parameter(name = "PackageOptions", description = "") @Valid @RequestBody(required = false) PackageOptions packageOptions
    );


    /**
     * GET /api/v1/resources/{domain}/{id}
     *
     * @param domain  (required)
     * @param id  (required)
     * @param version  (optional)
     * @param expand  (optional)
     * @param checkIfLatestVersion  (optional, default to false)
     * @param state  (optional)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "getResource",
        tags = { "resources-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = DataResponseResourceVersion.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/resources/{domain}/{id}",
        produces = "*/*"
    )
    
    ResponseEntity<DataResponseResourceVersion> getResource(
        @Parameter(name = "domain", description = "", required = true, in = ParameterIn.PATH) @PathVariable("domain") String domain,
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") UUID id,
        @Parameter(name = "version", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "version", required = false) Integer version,
        @Parameter(name = "expand", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "expand", required = false) String expand,
        @Parameter(name = "checkIfLatestVersion", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "checkIfLatestVersion", required = false, defaultValue = "false") Boolean checkIfLatestVersion,
        @Parameter(name = "state", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "state", required = false) String state
    );


    /**
     * GET /api/v1/resource-categories
     *
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "getResourceCategories",
        tags = { "resource-category-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = ListResponseResourceCategory.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/resource-categories",
        produces = "*/*"
    )
    
    ResponseEntity<ListResponseResourceCategory> getResourceCategories(
        
    );


    /**
     * GET /api/v1/resource-categories/{id}
     *
     * @param id  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "getResourceCategory",
        tags = { "resource-category-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = DataResponseResourceCategory.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/resource-categories/{id}",
        produces = "*/*"
    )
    
    ResponseEntity<DataResponseResourceCategory> getResourceCategory(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") UUID id
    );


    /**
     * GET /api/v1/resource-categories/name/{name}
     *
     * @param name  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "getResourceCategoryByName",
        tags = { "resource-category-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = DataResponseResourceCategory.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/resource-categories/name/{name}",
        produces = "*/*"
    )
    
    ResponseEntity<DataResponseResourceCategory> getResourceCategoryByName(
        @Parameter(name = "name", description = "", required = true, in = ParameterIn.PATH) @PathVariable("name") String name
    );


    /**
     * GET /api/v1/resources/{domain}/{id}/content/{type}
     *
     * @param domain  (required)
     * @param id  (required)
     * @param type  (required)
     * @param version  (optional)
     * @param state  (optional)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "getResourceContent",
        tags = { "resources-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/xml", schema = @Schema(implementation = Object.class)),
                @Content(mediaType = "image/png", schema = @Schema(implementation = Object.class)),
                @Content(mediaType = "text/xml", schema = @Schema(implementation = Object.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/resources/{domain}/{id}/content/{type}",
        produces = "application/xml,image/png,text/xml"
    )
    
    ResponseEntity<Object> getResourceContent(
        @Parameter(name = "domain", description = "", required = true, in = ParameterIn.PATH) @PathVariable("domain") String domain,
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") UUID id,
        @Parameter(name = "type", description = "", required = true, in = ParameterIn.PATH) @PathVariable("type") String type,
        @Parameter(name = "version", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "version", required = false) Integer version,
        @Parameter(name = "state", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "state", required = false) String state
    );


    /**
     * GET /api/v1/resources/{domain}/history/{resourceId}
     *
     * @param domain  (required)
     * @param resourceId  (required)
     * @param fetchAcrossDomains  (optional)
     * @param historyType  (optional)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "getResourceHistory",
        tags = { "resources-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = ListResponseResourceHistory.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/resources/{domain}/history/{resourceId}",
        produces = "*/*"
    )
    
    ResponseEntity<ListResponseResourceHistory> getResourceHistory(
        @Parameter(name = "domain", description = "", required = true, in = ParameterIn.PATH) @PathVariable("domain") String domain,
        @Parameter(name = "resourceId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("resourceId") UUID resourceId,
        @Parameter(name = "fetchAcrossDomains", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fetchAcrossDomains", required = false) Boolean fetchAcrossDomains,
        @Parameter(name = "historyType", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "historyType", required = false) String historyType
    );


    /**
     * GET /api/v1/resources/{domain}
     *
     * @param domain  (required)
     * @param filterIds  (optional)
     * @param filterExcludedIds  (optional)
     * @param filterTypes  (optional)
     * @param filterExcludedTypes  (optional)
     * @param filterName  (optional)
     * @param filterDescription  (optional)
     * @param filterCreatedBy  (optional)
     * @param filterLastModifiedBy  (optional)
     * @param filterCreatedDateStart  (optional)
     * @param filterCreatedDateEnd  (optional)
     * @param filterLastModifiedDateStart  (optional)
     * @param filterLastModifiedDateEnd  (optional)
     * @param filterSearchString This is equivalent to searching where the name OR the description is LIKE this value (optional)
     * @param filterCaseSensitive  (optional)
     * @param filterWholeWord  (optional)
     * @param filterResourcePackId  (optional)
     * @param filterSystemResource  (optional)
     * @param filterHidden  (optional)
     * @param filterHasApprovedVersion  (optional)
     * @param filterStandardVariantId  (optional)
     * @param filterUseEffectiveDate  (optional)
     * @param filterEffectiveDate  (optional)
     * @param filterCategories  (optional)
     * @param filterCategoryObjects  (optional)
     * @param filterVfilterLastModifiedDateEnd  (optional)
     * @param filterDomainId only include resources in this domain (optional)
     * @param filterLatestVersion only include the latest version of objects (optional)
     * @param filterLocked  (optional)
     * @param filterStates  (optional)
     * @param filterOverrideIds  (optional)
     * @param filterOverrideStates  (optional)
     * @param advancedFilter  (optional)
     * @param offset For pagination, fetch entities after this many (optional)
     * @param count For pagination, the number of entities per page (optional)
     * @param fetchDomains  (optional, default to false)
     * @param fetchPermissions  (optional, default to false)
     * @param fetchCategories  (optional, default to false)
     * @param fetchVariants  (optional, default to false)
     * @param fetchApproval  (optional, default to false)
     * @param expand  (optional)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "getResources",
        tags = { "resources-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = PageResponseResourceVersion.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/resources/{domain}",
        produces = "*/*"
    )
    
    ResponseEntity<PageResponseResourceVersion> getResources(
        @Parameter(name = "domain", description = "", required = true, in = ParameterIn.PATH) @PathVariable("domain") String domain,
        @Parameter(name = "filter.ids", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter.ids", required = false) List<UUID> filterIds,
        @Parameter(name = "filter.excludedIds", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter.excludedIds", required = false) List<UUID> filterExcludedIds,
        @Parameter(name = "filter.types", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter.types", required = false) List<String> filterTypes,
        @Parameter(name = "filter.excludedTypes", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter.excludedTypes", required = false) List<String> filterExcludedTypes,
        @Parameter(name = "filter.name", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter.name", required = false) String filterName,
        @Parameter(name = "filter.description", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter.description", required = false) String filterDescription,
        @Parameter(name = "filter.createdBy", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter.createdBy", required = false) String filterCreatedBy,
        @Parameter(name = "filter.lastModifiedBy", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter.lastModifiedBy", required = false) String filterLastModifiedBy,
        @Parameter(name = "filter.createdDateStart", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter.createdDateStart", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime filterCreatedDateStart,
        @Parameter(name = "filter.createdDateEnd", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter.createdDateEnd", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime filterCreatedDateEnd,
        @Parameter(name = "filter.lastModifiedDateStart", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter.lastModifiedDateStart", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime filterLastModifiedDateStart,
        @Parameter(name = "filter.lastModifiedDateEnd", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter.lastModifiedDateEnd", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime filterLastModifiedDateEnd,
        @Parameter(name = "filter.searchString", description = "This is equivalent to searching where the name OR the description is LIKE this value", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter.searchString", required = false) String filterSearchString,
        @Parameter(name = "filter.caseSensitive", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter.caseSensitive", required = false) Boolean filterCaseSensitive,
        @Parameter(name = "filter.wholeWord", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter.wholeWord", required = false) Boolean filterWholeWord,
        @Parameter(name = "filter.resourcePackId", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter.resourcePackId", required = false) UUID filterResourcePackId,
        @Parameter(name = "filter.systemResource", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter.systemResource", required = false) Boolean filterSystemResource,
        @Parameter(name = "filter.hidden", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter.hidden", required = false) Boolean filterHidden,
        @Parameter(name = "filter.hasApprovedVersion", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter.hasApprovedVersion", required = false) Boolean filterHasApprovedVersion,
        @Parameter(name = "filter.standardVariantId", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter.standardVariantId", required = false) UUID filterStandardVariantId,
        @Parameter(name = "filter.useEffectiveDate", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter.useEffectiveDate", required = false) Boolean filterUseEffectiveDate,
        @Parameter(name = "filter.effectiveDate", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter.effectiveDate", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime filterEffectiveDate,
        @Parameter(name = "filter.categories", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter.categories", required = false) List<String> filterCategories,
        @Parameter(name = "filter.categoryObjects", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter.categoryObjects", required = false) List<@Valid ResourceCategory> filterCategoryObjects,
        @Parameter(name = "filter.vfilter_lastModifiedDateEnd", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter.vfilter_lastModifiedDateEnd", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime filterVfilterLastModifiedDateEnd,
        @Parameter(name = "filter.domainId", description = "only include resources in this domain", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter.domainId", required = false) String filterDomainId,
        @Parameter(name = "filter.latestVersion", description = "only include the latest version of objects", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter.latestVersion", required = false) Boolean filterLatestVersion,
        @Parameter(name = "filter.locked", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter.locked", required = false) Boolean filterLocked,
        @Parameter(name = "filter.states", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter.states", required = false) List<String> filterStates,
        @Parameter(name = "filter.overrideIds", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter.overrideIds", required = false) List<UUID> filterOverrideIds,
        @Parameter(name = "filter.overrideStates", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter.overrideStates", required = false) List<String> filterOverrideStates,
        @Parameter(name = "advancedFilter", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "advancedFilter", required = false) String advancedFilter,
        @Parameter(name = "offset", description = "For pagination, fetch entities after this many", in = ParameterIn.QUERY) @Valid @RequestParam(value = "offset", required = false) Integer offset,
        @Parameter(name = "count", description = "For pagination, the number of entities per page", in = ParameterIn.QUERY) @Valid @RequestParam(value = "count", required = false) Integer count,
        @Parameter(name = "fetchDomains", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fetchDomains", required = false, defaultValue = "false") Boolean fetchDomains,
        @Parameter(name = "fetchPermissions", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fetchPermissions", required = false, defaultValue = "false") Boolean fetchPermissions,
        @Parameter(name = "fetchCategories", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fetchCategories", required = false, defaultValue = "false") Boolean fetchCategories,
        @Parameter(name = "fetchVariants", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fetchVariants", required = false, defaultValue = "false") Boolean fetchVariants,
        @Parameter(name = "fetchApproval", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fetchApproval", required = false, defaultValue = "false") Boolean fetchApproval,
        @Parameter(name = "expand", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "expand", required = false) String expand
    );


    /**
     * GET /api/v1/links/{domain}/resources
     *
     * @param domain  (required)
     * @param linkSubjectId  (optional)
     * @param linkSubjectVersion  (optional)
     * @param linkObjectId  (optional)
     * @param linkDepth Optionally specify the maximum depth for a recursive traversal of a link tree. (optional)
     * @param filterIds  (optional)
     * @param filterExcludedIds  (optional)
     * @param filterTypes  (optional)
     * @param filterExcludedTypes  (optional)
     * @param filterName  (optional)
     * @param filterDescription  (optional)
     * @param filterCreatedBy  (optional)
     * @param filterLastModifiedBy  (optional)
     * @param filterCreatedDateStart  (optional)
     * @param filterCreatedDateEnd  (optional)
     * @param filterLastModifiedDateStart  (optional)
     * @param filterLastModifiedDateEnd  (optional)
     * @param filterSearchString This is equivalent to searching where the name OR the description is LIKE this value (optional)
     * @param filterCaseSensitive  (optional)
     * @param filterWholeWord  (optional)
     * @param filterResourcePackId  (optional)
     * @param filterSystemResource  (optional)
     * @param filterHidden  (optional)
     * @param filterHasApprovedVersion  (optional)
     * @param filterStandardVariantId  (optional)
     * @param filterUseEffectiveDate  (optional)
     * @param filterEffectiveDate  (optional)
     * @param filterCategories  (optional)
     * @param filterCategoryObjects  (optional)
     * @param filterVfilterLastModifiedDateEnd  (optional)
     * @param filterDomainId only include resources in this domain (optional)
     * @param filterLatestVersion only include the latest version of objects (optional)
     * @param filterLocked  (optional)
     * @param filterStates  (optional)
     * @param filterOverrideIds  (optional)
     * @param filterOverrideStates  (optional)
     * @param vfilterIds  (optional)
     * @param vfilterExcludedIds  (optional)
     * @param vfilterTypes  (optional)
     * @param vfilterExcludedTypes  (optional)
     * @param vfilterName  (optional)
     * @param vfilterDescription  (optional)
     * @param vfilterCreatedBy  (optional)
     * @param vfilterLastModifiedBy  (optional)
     * @param vfilterCreatedDateStart  (optional)
     * @param vfilterCreatedDateEnd  (optional)
     * @param vfilterLastModifiedDateStart  (optional)
     * @param vfilterLastModifiedDateEnd  (optional)
     * @param vfilterSearchString This is equivalent to searching where the name OR the description is LIKE this value (optional)
     * @param vfilterCaseSensitive  (optional)
     * @param vfilterWholeWord  (optional)
     * @param vfilterResourcePackId  (optional)
     * @param vfilterSystemResource  (optional)
     * @param vfilterHidden  (optional)
     * @param vfilterHasApprovedVersion  (optional)
     * @param vfilterStandardVariantId  (optional)
     * @param vfilterUseEffectiveDate  (optional)
     * @param vfilterEffectiveDate  (optional)
     * @param vfilterCategories  (optional)
     * @param vfilterCategoryObjects  (optional)
     * @param vfilterVfilterLastModifiedDateEnd  (optional)
     * @param vfilterDomainId only include resources in this domain (optional)
     * @param vfilterLatestVersion only include the latest version of objects (optional)
     * @param vfilterLocked  (optional)
     * @param vfilterStates  (optional)
     * @param vfilterOverrideIds  (optional)
     * @param vfilterOverrideStates  (optional)
     * @param tfilterIds  (optional)
     * @param tfilterExcludedIds  (optional)
     * @param tfilterTypes  (optional)
     * @param tfilterExcludedTypes  (optional)
     * @param tfilterName  (optional)
     * @param tfilterDescription  (optional)
     * @param tfilterCreatedBy  (optional)
     * @param tfilterLastModifiedBy  (optional)
     * @param tfilterCreatedDateStart  (optional)
     * @param tfilterCreatedDateEnd  (optional)
     * @param tfilterLastModifiedDateStart  (optional)
     * @param tfilterLastModifiedDateEnd  (optional)
     * @param tfilterSearchString This is equivalent to searching where the name OR the description is LIKE this value (optional)
     * @param tfilterCaseSensitive  (optional)
     * @param tfilterWholeWord  (optional)
     * @param tfilterResourcePackId  (optional)
     * @param tfilterSystemResource  (optional)
     * @param tfilterHidden  (optional)
     * @param tfilterHasApprovedVersion  (optional)
     * @param tfilterStandardVariantId  (optional)
     * @param tfilterUseEffectiveDate  (optional)
     * @param tfilterEffectiveDate  (optional)
     * @param tfilterCategories  (optional)
     * @param tfilterCategoryObjects  (optional)
     * @param tfilterVfilterLastModifiedDateEnd  (optional)
     * @param tfilterDomainId only include resources in this domain (optional)
     * @param tfilterLatestVersion only include the latest version of objects (optional)
     * @param tfilterLocked  (optional)
     * @param tfilterStates  (optional)
     * @param tfilterOverrideIds  (optional)
     * @param tfilterOverrideStates  (optional)
     * @param rfilterIds  (optional)
     * @param rfilterExcludedIds  (optional)
     * @param rfilterTypes  (optional)
     * @param rfilterExcludedTypes  (optional)
     * @param rfilterName  (optional)
     * @param rfilterDescription  (optional)
     * @param rfilterCreatedBy  (optional)
     * @param rfilterLastModifiedBy  (optional)
     * @param rfilterCreatedDateStart  (optional)
     * @param rfilterCreatedDateEnd  (optional)
     * @param rfilterLastModifiedDateStart  (optional)
     * @param rfilterLastModifiedDateEnd  (optional)
     * @param rfilterSearchString This is equivalent to searching where the name OR the description is LIKE this value (optional)
     * @param rfilterCaseSensitive  (optional)
     * @param rfilterWholeWord  (optional)
     * @param rfilterResourcePackId  (optional)
     * @param rfilterSystemResource  (optional)
     * @param rfilterHidden  (optional)
     * @param rfilterHasApprovedVersion  (optional)
     * @param rfilterStandardVariantId  (optional)
     * @param rfilterUseEffectiveDate  (optional)
     * @param rfilterEffectiveDate  (optional)
     * @param rfilterCategories  (optional)
     * @param rfilterCategoryObjects  (optional)
     * @param rfilterVfilterLastModifiedDateEnd  (optional)
     * @param rfilterDomainId only include resources in this domain (optional)
     * @param rfilterLatestVersion only include the latest version of objects (optional)
     * @param rfilterLocked  (optional)
     * @param rfilterStates  (optional)
     * @param rfilterOverrideIds  (optional)
     * @param rfilterOverrideStates  (optional)
     * @param useEffectiveDate  (optional)
     * @param effectiveDate  (optional)
     * @param offset For pagination, fetch entities after this many (optional)
     * @param count For pagination, the number of entities per page (optional)
     * @param fetchApproval  (optional, default to false)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "getResources1",
        tags = { "links-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = PageResponseResourceVersion.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/links/{domain}/resources",
        produces = "*/*"
    )
    
    ResponseEntity<PageResponseResourceVersion> getResources1(
        @Parameter(name = "domain", description = "", required = true, in = ParameterIn.PATH) @PathVariable("domain") String domain,
        @Parameter(name = "linkSubjectId", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "linkSubjectId", required = false) UUID linkSubjectId,
        @Parameter(name = "linkSubjectVersion", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "linkSubjectVersion", required = false) Integer linkSubjectVersion,
        @Parameter(name = "linkObjectId", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "linkObjectId", required = false) UUID linkObjectId,
        @Parameter(name = "linkDepth", description = "Optionally specify the maximum depth for a recursive traversal of a link tree.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "linkDepth", required = false) Integer linkDepth,
        @Parameter(name = "filter.ids", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter.ids", required = false) List<UUID> filterIds,
        @Parameter(name = "filter.excludedIds", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter.excludedIds", required = false) List<UUID> filterExcludedIds,
        @Parameter(name = "filter.types", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter.types", required = false) List<String> filterTypes,
        @Parameter(name = "filter.excludedTypes", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter.excludedTypes", required = false) List<String> filterExcludedTypes,
        @Parameter(name = "filter.name", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter.name", required = false) String filterName,
        @Parameter(name = "filter.description", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter.description", required = false) String filterDescription,
        @Parameter(name = "filter.createdBy", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter.createdBy", required = false) String filterCreatedBy,
        @Parameter(name = "filter.lastModifiedBy", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter.lastModifiedBy", required = false) String filterLastModifiedBy,
        @Parameter(name = "filter.createdDateStart", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter.createdDateStart", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime filterCreatedDateStart,
        @Parameter(name = "filter.createdDateEnd", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter.createdDateEnd", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime filterCreatedDateEnd,
        @Parameter(name = "filter.lastModifiedDateStart", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter.lastModifiedDateStart", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime filterLastModifiedDateStart,
        @Parameter(name = "filter.lastModifiedDateEnd", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter.lastModifiedDateEnd", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime filterLastModifiedDateEnd,
        @Parameter(name = "filter.searchString", description = "This is equivalent to searching where the name OR the description is LIKE this value", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter.searchString", required = false) String filterSearchString,
        @Parameter(name = "filter.caseSensitive", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter.caseSensitive", required = false) Boolean filterCaseSensitive,
        @Parameter(name = "filter.wholeWord", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter.wholeWord", required = false) Boolean filterWholeWord,
        @Parameter(name = "filter.resourcePackId", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter.resourcePackId", required = false) UUID filterResourcePackId,
        @Parameter(name = "filter.systemResource", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter.systemResource", required = false) Boolean filterSystemResource,
        @Parameter(name = "filter.hidden", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter.hidden", required = false) Boolean filterHidden,
        @Parameter(name = "filter.hasApprovedVersion", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter.hasApprovedVersion", required = false) Boolean filterHasApprovedVersion,
        @Parameter(name = "filter.standardVariantId", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter.standardVariantId", required = false) UUID filterStandardVariantId,
        @Parameter(name = "filter.useEffectiveDate", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter.useEffectiveDate", required = false) Boolean filterUseEffectiveDate,
        @Parameter(name = "filter.effectiveDate", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter.effectiveDate", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime filterEffectiveDate,
        @Parameter(name = "filter.categories", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter.categories", required = false) List<String> filterCategories,
        @Parameter(name = "filter.categoryObjects", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter.categoryObjects", required = false) List<@Valid ResourceCategory> filterCategoryObjects,
        @Parameter(name = "filter.vfilter_lastModifiedDateEnd", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter.vfilter_lastModifiedDateEnd", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime filterVfilterLastModifiedDateEnd,
        @Parameter(name = "filter.domainId", description = "only include resources in this domain", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter.domainId", required = false) String filterDomainId,
        @Parameter(name = "filter.latestVersion", description = "only include the latest version of objects", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter.latestVersion", required = false) Boolean filterLatestVersion,
        @Parameter(name = "filter.locked", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter.locked", required = false) Boolean filterLocked,
        @Parameter(name = "filter.states", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter.states", required = false) List<String> filterStates,
        @Parameter(name = "filter.overrideIds", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter.overrideIds", required = false) List<UUID> filterOverrideIds,
        @Parameter(name = "filter.overrideStates", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter.overrideStates", required = false) List<String> filterOverrideStates,
        @Parameter(name = "vfilter.ids", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "vfilter.ids", required = false) List<UUID> vfilterIds,
        @Parameter(name = "vfilter.excludedIds", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "vfilter.excludedIds", required = false) List<UUID> vfilterExcludedIds,
        @Parameter(name = "vfilter.types", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "vfilter.types", required = false) List<String> vfilterTypes,
        @Parameter(name = "vfilter.excludedTypes", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "vfilter.excludedTypes", required = false) List<String> vfilterExcludedTypes,
        @Parameter(name = "vfilter.name", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "vfilter.name", required = false) String vfilterName,
        @Parameter(name = "vfilter.description", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "vfilter.description", required = false) String vfilterDescription,
        @Parameter(name = "vfilter.createdBy", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "vfilter.createdBy", required = false) String vfilterCreatedBy,
        @Parameter(name = "vfilter.lastModifiedBy", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "vfilter.lastModifiedBy", required = false) String vfilterLastModifiedBy,
        @Parameter(name = "vfilter.createdDateStart", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "vfilter.createdDateStart", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime vfilterCreatedDateStart,
        @Parameter(name = "vfilter.createdDateEnd", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "vfilter.createdDateEnd", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime vfilterCreatedDateEnd,
        @Parameter(name = "vfilter.lastModifiedDateStart", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "vfilter.lastModifiedDateStart", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime vfilterLastModifiedDateStart,
        @Parameter(name = "vfilter.lastModifiedDateEnd", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "vfilter.lastModifiedDateEnd", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime vfilterLastModifiedDateEnd,
        @Parameter(name = "vfilter.searchString", description = "This is equivalent to searching where the name OR the description is LIKE this value", in = ParameterIn.QUERY) @Valid @RequestParam(value = "vfilter.searchString", required = false) String vfilterSearchString,
        @Parameter(name = "vfilter.caseSensitive", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "vfilter.caseSensitive", required = false) Boolean vfilterCaseSensitive,
        @Parameter(name = "vfilter.wholeWord", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "vfilter.wholeWord", required = false) Boolean vfilterWholeWord,
        @Parameter(name = "vfilter.resourcePackId", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "vfilter.resourcePackId", required = false) UUID vfilterResourcePackId,
        @Parameter(name = "vfilter.systemResource", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "vfilter.systemResource", required = false) Boolean vfilterSystemResource,
        @Parameter(name = "vfilter.hidden", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "vfilter.hidden", required = false) Boolean vfilterHidden,
        @Parameter(name = "vfilter.hasApprovedVersion", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "vfilter.hasApprovedVersion", required = false) Boolean vfilterHasApprovedVersion,
        @Parameter(name = "vfilter.standardVariantId", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "vfilter.standardVariantId", required = false) UUID vfilterStandardVariantId,
        @Parameter(name = "vfilter.useEffectiveDate", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "vfilter.useEffectiveDate", required = false) Boolean vfilterUseEffectiveDate,
        @Parameter(name = "vfilter.effectiveDate", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "vfilter.effectiveDate", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime vfilterEffectiveDate,
        @Parameter(name = "vfilter.categories", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "vfilter.categories", required = false) List<String> vfilterCategories,
        @Parameter(name = "vfilter.categoryObjects", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "vfilter.categoryObjects", required = false) List<@Valid ResourceCategory> vfilterCategoryObjects,
        @Parameter(name = "vfilter.vfilter_lastModifiedDateEnd", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "vfilter.vfilter_lastModifiedDateEnd", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime vfilterVfilterLastModifiedDateEnd,
        @Parameter(name = "vfilter.domainId", description = "only include resources in this domain", in = ParameterIn.QUERY) @Valid @RequestParam(value = "vfilter.domainId", required = false) String vfilterDomainId,
        @Parameter(name = "vfilter.latestVersion", description = "only include the latest version of objects", in = ParameterIn.QUERY) @Valid @RequestParam(value = "vfilter.latestVersion", required = false) Boolean vfilterLatestVersion,
        @Parameter(name = "vfilter.locked", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "vfilter.locked", required = false) Boolean vfilterLocked,
        @Parameter(name = "vfilter.states", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "vfilter.states", required = false) List<String> vfilterStates,
        @Parameter(name = "vfilter.overrideIds", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "vfilter.overrideIds", required = false) List<UUID> vfilterOverrideIds,
        @Parameter(name = "vfilter.overrideStates", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "vfilter.overrideStates", required = false) List<String> vfilterOverrideStates,
        @Parameter(name = "tfilter.ids", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "tfilter.ids", required = false) List<UUID> tfilterIds,
        @Parameter(name = "tfilter.excludedIds", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "tfilter.excludedIds", required = false) List<UUID> tfilterExcludedIds,
        @Parameter(name = "tfilter.types", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "tfilter.types", required = false) List<String> tfilterTypes,
        @Parameter(name = "tfilter.excludedTypes", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "tfilter.excludedTypes", required = false) List<String> tfilterExcludedTypes,
        @Parameter(name = "tfilter.name", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "tfilter.name", required = false) String tfilterName,
        @Parameter(name = "tfilter.description", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "tfilter.description", required = false) String tfilterDescription,
        @Parameter(name = "tfilter.createdBy", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "tfilter.createdBy", required = false) String tfilterCreatedBy,
        @Parameter(name = "tfilter.lastModifiedBy", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "tfilter.lastModifiedBy", required = false) String tfilterLastModifiedBy,
        @Parameter(name = "tfilter.createdDateStart", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "tfilter.createdDateStart", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime tfilterCreatedDateStart,
        @Parameter(name = "tfilter.createdDateEnd", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "tfilter.createdDateEnd", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime tfilterCreatedDateEnd,
        @Parameter(name = "tfilter.lastModifiedDateStart", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "tfilter.lastModifiedDateStart", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime tfilterLastModifiedDateStart,
        @Parameter(name = "tfilter.lastModifiedDateEnd", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "tfilter.lastModifiedDateEnd", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime tfilterLastModifiedDateEnd,
        @Parameter(name = "tfilter.searchString", description = "This is equivalent to searching where the name OR the description is LIKE this value", in = ParameterIn.QUERY) @Valid @RequestParam(value = "tfilter.searchString", required = false) String tfilterSearchString,
        @Parameter(name = "tfilter.caseSensitive", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "tfilter.caseSensitive", required = false) Boolean tfilterCaseSensitive,
        @Parameter(name = "tfilter.wholeWord", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "tfilter.wholeWord", required = false) Boolean tfilterWholeWord,
        @Parameter(name = "tfilter.resourcePackId", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "tfilter.resourcePackId", required = false) UUID tfilterResourcePackId,
        @Parameter(name = "tfilter.systemResource", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "tfilter.systemResource", required = false) Boolean tfilterSystemResource,
        @Parameter(name = "tfilter.hidden", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "tfilter.hidden", required = false) Boolean tfilterHidden,
        @Parameter(name = "tfilter.hasApprovedVersion", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "tfilter.hasApprovedVersion", required = false) Boolean tfilterHasApprovedVersion,
        @Parameter(name = "tfilter.standardVariantId", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "tfilter.standardVariantId", required = false) UUID tfilterStandardVariantId,
        @Parameter(name = "tfilter.useEffectiveDate", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "tfilter.useEffectiveDate", required = false) Boolean tfilterUseEffectiveDate,
        @Parameter(name = "tfilter.effectiveDate", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "tfilter.effectiveDate", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime tfilterEffectiveDate,
        @Parameter(name = "tfilter.categories", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "tfilter.categories", required = false) List<String> tfilterCategories,
        @Parameter(name = "tfilter.categoryObjects", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "tfilter.categoryObjects", required = false) List<@Valid ResourceCategory> tfilterCategoryObjects,
        @Parameter(name = "tfilter.vfilter_lastModifiedDateEnd", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "tfilter.vfilter_lastModifiedDateEnd", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime tfilterVfilterLastModifiedDateEnd,
        @Parameter(name = "tfilter.domainId", description = "only include resources in this domain", in = ParameterIn.QUERY) @Valid @RequestParam(value = "tfilter.domainId", required = false) String tfilterDomainId,
        @Parameter(name = "tfilter.latestVersion", description = "only include the latest version of objects", in = ParameterIn.QUERY) @Valid @RequestParam(value = "tfilter.latestVersion", required = false) Boolean tfilterLatestVersion,
        @Parameter(name = "tfilter.locked", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "tfilter.locked", required = false) Boolean tfilterLocked,
        @Parameter(name = "tfilter.states", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "tfilter.states", required = false) List<String> tfilterStates,
        @Parameter(name = "tfilter.overrideIds", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "tfilter.overrideIds", required = false) List<UUID> tfilterOverrideIds,
        @Parameter(name = "tfilter.overrideStates", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "tfilter.overrideStates", required = false) List<String> tfilterOverrideStates,
        @Parameter(name = "rfilter.ids", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "rfilter.ids", required = false) List<UUID> rfilterIds,
        @Parameter(name = "rfilter.excludedIds", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "rfilter.excludedIds", required = false) List<UUID> rfilterExcludedIds,
        @Parameter(name = "rfilter.types", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "rfilter.types", required = false) List<String> rfilterTypes,
        @Parameter(name = "rfilter.excludedTypes", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "rfilter.excludedTypes", required = false) List<String> rfilterExcludedTypes,
        @Parameter(name = "rfilter.name", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "rfilter.name", required = false) String rfilterName,
        @Parameter(name = "rfilter.description", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "rfilter.description", required = false) String rfilterDescription,
        @Parameter(name = "rfilter.createdBy", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "rfilter.createdBy", required = false) String rfilterCreatedBy,
        @Parameter(name = "rfilter.lastModifiedBy", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "rfilter.lastModifiedBy", required = false) String rfilterLastModifiedBy,
        @Parameter(name = "rfilter.createdDateStart", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "rfilter.createdDateStart", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime rfilterCreatedDateStart,
        @Parameter(name = "rfilter.createdDateEnd", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "rfilter.createdDateEnd", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime rfilterCreatedDateEnd,
        @Parameter(name = "rfilter.lastModifiedDateStart", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "rfilter.lastModifiedDateStart", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime rfilterLastModifiedDateStart,
        @Parameter(name = "rfilter.lastModifiedDateEnd", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "rfilter.lastModifiedDateEnd", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime rfilterLastModifiedDateEnd,
        @Parameter(name = "rfilter.searchString", description = "This is equivalent to searching where the name OR the description is LIKE this value", in = ParameterIn.QUERY) @Valid @RequestParam(value = "rfilter.searchString", required = false) String rfilterSearchString,
        @Parameter(name = "rfilter.caseSensitive", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "rfilter.caseSensitive", required = false) Boolean rfilterCaseSensitive,
        @Parameter(name = "rfilter.wholeWord", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "rfilter.wholeWord", required = false) Boolean rfilterWholeWord,
        @Parameter(name = "rfilter.resourcePackId", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "rfilter.resourcePackId", required = false) UUID rfilterResourcePackId,
        @Parameter(name = "rfilter.systemResource", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "rfilter.systemResource", required = false) Boolean rfilterSystemResource,
        @Parameter(name = "rfilter.hidden", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "rfilter.hidden", required = false) Boolean rfilterHidden,
        @Parameter(name = "rfilter.hasApprovedVersion", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "rfilter.hasApprovedVersion", required = false) Boolean rfilterHasApprovedVersion,
        @Parameter(name = "rfilter.standardVariantId", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "rfilter.standardVariantId", required = false) UUID rfilterStandardVariantId,
        @Parameter(name = "rfilter.useEffectiveDate", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "rfilter.useEffectiveDate", required = false) Boolean rfilterUseEffectiveDate,
        @Parameter(name = "rfilter.effectiveDate", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "rfilter.effectiveDate", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime rfilterEffectiveDate,
        @Parameter(name = "rfilter.categories", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "rfilter.categories", required = false) List<String> rfilterCategories,
        @Parameter(name = "rfilter.categoryObjects", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "rfilter.categoryObjects", required = false) List<@Valid ResourceCategory> rfilterCategoryObjects,
        @Parameter(name = "rfilter.vfilter_lastModifiedDateEnd", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "rfilter.vfilter_lastModifiedDateEnd", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime rfilterVfilterLastModifiedDateEnd,
        @Parameter(name = "rfilter.domainId", description = "only include resources in this domain", in = ParameterIn.QUERY) @Valid @RequestParam(value = "rfilter.domainId", required = false) String rfilterDomainId,
        @Parameter(name = "rfilter.latestVersion", description = "only include the latest version of objects", in = ParameterIn.QUERY) @Valid @RequestParam(value = "rfilter.latestVersion", required = false) Boolean rfilterLatestVersion,
        @Parameter(name = "rfilter.locked", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "rfilter.locked", required = false) Boolean rfilterLocked,
        @Parameter(name = "rfilter.states", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "rfilter.states", required = false) List<String> rfilterStates,
        @Parameter(name = "rfilter.overrideIds", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "rfilter.overrideIds", required = false) List<UUID> rfilterOverrideIds,
        @Parameter(name = "rfilter.overrideStates", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "rfilter.overrideStates", required = false) List<String> rfilterOverrideStates,
        @Parameter(name = "useEffectiveDate", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "useEffectiveDate", required = false) Boolean useEffectiveDate,
        @Parameter(name = "effectiveDate", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "effectiveDate", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime effectiveDate,
        @Parameter(name = "offset", description = "For pagination, fetch entities after this many", in = ParameterIn.QUERY) @Valid @RequestParam(value = "offset", required = false) Integer offset,
        @Parameter(name = "count", description = "For pagination, the number of entities per page", in = ParameterIn.QUERY) @Valid @RequestParam(value = "count", required = false) Integer count,
        @Parameter(name = "fetchApproval", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fetchApproval", required = false, defaultValue = "false") Boolean fetchApproval
    );


    /**
     * POST /api/v1/resources/{domain}/filter
     *
     * @param domain  (required)
     * @param resourceFilter  (required)
     * @param filterIds  (optional)
     * @param filterExcludedIds  (optional)
     * @param filterTypes  (optional)
     * @param filterExcludedTypes  (optional)
     * @param filterName  (optional)
     * @param filterDescription  (optional)
     * @param filterCreatedBy  (optional)
     * @param filterLastModifiedBy  (optional)
     * @param filterCreatedDateStart  (optional)
     * @param filterCreatedDateEnd  (optional)
     * @param filterLastModifiedDateStart  (optional)
     * @param filterLastModifiedDateEnd  (optional)
     * @param filterSearchString This is equivalent to searching where the name OR the description is LIKE this value (optional)
     * @param filterCaseSensitive  (optional)
     * @param filterWholeWord  (optional)
     * @param filterResourcePackId  (optional)
     * @param filterSystemResource  (optional)
     * @param filterHidden  (optional)
     * @param filterHasApprovedVersion  (optional)
     * @param filterStandardVariantId  (optional)
     * @param filterUseEffectiveDate  (optional)
     * @param filterEffectiveDate  (optional)
     * @param filterCategories  (optional)
     * @param filterCategoryObjects  (optional)
     * @param filterVfilterLastModifiedDateEnd  (optional)
     * @param filterDomainId only include resources in this domain (optional)
     * @param filterLatestVersion only include the latest version of objects (optional)
     * @param filterLocked  (optional)
     * @param filterStates  (optional)
     * @param filterOverrideIds  (optional)
     * @param filterOverrideStates  (optional)
     * @param advancedFilter  (optional)
     * @param offset For pagination, fetch entities after this many (optional)
     * @param count For pagination, the number of entities per page (optional)
     * @param fetchDomains  (optional, default to false)
     * @param fetchPermissions  (optional, default to false)
     * @param fetchCategories  (optional, default to false)
     * @param fetchVariants  (optional, default to false)
     * @param fetchApproval  (optional, default to false)
     * @param expand  (optional)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "getResourcesFilterBody",
        tags = { "resources-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = PageResponseResourceVersion.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v1/resources/{domain}/filter",
        produces = "*/*",
        consumes = "application/json"
    )
    
    ResponseEntity<PageResponseResourceVersion> getResourcesFilterBody(
        @Parameter(name = "domain", description = "", required = true, in = ParameterIn.PATH) @PathVariable("domain") String domain,
        @Parameter(name = "ResourceFilter", description = "", required = true) @Valid @RequestBody ResourceFilter resourceFilter,
        @Parameter(name = "filter.ids", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter.ids", required = false) List<UUID> filterIds,
        @Parameter(name = "filter.excludedIds", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter.excludedIds", required = false) List<UUID> filterExcludedIds,
        @Parameter(name = "filter.types", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter.types", required = false) List<String> filterTypes,
        @Parameter(name = "filter.excludedTypes", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter.excludedTypes", required = false) List<String> filterExcludedTypes,
        @Parameter(name = "filter.name", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter.name", required = false) String filterName,
        @Parameter(name = "filter.description", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter.description", required = false) String filterDescription,
        @Parameter(name = "filter.createdBy", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter.createdBy", required = false) String filterCreatedBy,
        @Parameter(name = "filter.lastModifiedBy", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter.lastModifiedBy", required = false) String filterLastModifiedBy,
        @Parameter(name = "filter.createdDateStart", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter.createdDateStart", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime filterCreatedDateStart,
        @Parameter(name = "filter.createdDateEnd", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter.createdDateEnd", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime filterCreatedDateEnd,
        @Parameter(name = "filter.lastModifiedDateStart", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter.lastModifiedDateStart", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime filterLastModifiedDateStart,
        @Parameter(name = "filter.lastModifiedDateEnd", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter.lastModifiedDateEnd", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime filterLastModifiedDateEnd,
        @Parameter(name = "filter.searchString", description = "This is equivalent to searching where the name OR the description is LIKE this value", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter.searchString", required = false) String filterSearchString,
        @Parameter(name = "filter.caseSensitive", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter.caseSensitive", required = false) Boolean filterCaseSensitive,
        @Parameter(name = "filter.wholeWord", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter.wholeWord", required = false) Boolean filterWholeWord,
        @Parameter(name = "filter.resourcePackId", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter.resourcePackId", required = false) UUID filterResourcePackId,
        @Parameter(name = "filter.systemResource", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter.systemResource", required = false) Boolean filterSystemResource,
        @Parameter(name = "filter.hidden", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter.hidden", required = false) Boolean filterHidden,
        @Parameter(name = "filter.hasApprovedVersion", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter.hasApprovedVersion", required = false) Boolean filterHasApprovedVersion,
        @Parameter(name = "filter.standardVariantId", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter.standardVariantId", required = false) UUID filterStandardVariantId,
        @Parameter(name = "filter.useEffectiveDate", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter.useEffectiveDate", required = false) Boolean filterUseEffectiveDate,
        @Parameter(name = "filter.effectiveDate", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter.effectiveDate", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime filterEffectiveDate,
        @Parameter(name = "filter.categories", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter.categories", required = false) List<String> filterCategories,
        @Parameter(name = "filter.categoryObjects", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter.categoryObjects", required = false) List<@Valid ResourceCategory> filterCategoryObjects,
        @Parameter(name = "filter.vfilter_lastModifiedDateEnd", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter.vfilter_lastModifiedDateEnd", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime filterVfilterLastModifiedDateEnd,
        @Parameter(name = "filter.domainId", description = "only include resources in this domain", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter.domainId", required = false) String filterDomainId,
        @Parameter(name = "filter.latestVersion", description = "only include the latest version of objects", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter.latestVersion", required = false) Boolean filterLatestVersion,
        @Parameter(name = "filter.locked", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter.locked", required = false) Boolean filterLocked,
        @Parameter(name = "filter.states", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter.states", required = false) List<String> filterStates,
        @Parameter(name = "filter.overrideIds", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter.overrideIds", required = false) List<UUID> filterOverrideIds,
        @Parameter(name = "filter.overrideStates", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter.overrideStates", required = false) List<String> filterOverrideStates,
        @Parameter(name = "advancedFilter", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "advancedFilter", required = false) String advancedFilter,
        @Parameter(name = "offset", description = "For pagination, fetch entities after this many", in = ParameterIn.QUERY) @Valid @RequestParam(value = "offset", required = false) Integer offset,
        @Parameter(name = "count", description = "For pagination, the number of entities per page", in = ParameterIn.QUERY) @Valid @RequestParam(value = "count", required = false) Integer count,
        @Parameter(name = "fetchDomains", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fetchDomains", required = false, defaultValue = "false") Boolean fetchDomains,
        @Parameter(name = "fetchPermissions", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fetchPermissions", required = false, defaultValue = "false") Boolean fetchPermissions,
        @Parameter(name = "fetchCategories", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fetchCategories", required = false, defaultValue = "false") Boolean fetchCategories,
        @Parameter(name = "fetchVariants", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fetchVariants", required = false, defaultValue = "false") Boolean fetchVariants,
        @Parameter(name = "fetchApproval", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fetchApproval", required = false, defaultValue = "false") Boolean fetchApproval,
        @Parameter(name = "expand", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "expand", required = false) String expand
    );


    /**
     * GET /api/v1/roles
     *
     * @param filterSearchString  (optional)
     * @param filterCaseSensitive  (optional)
     * @param filterWholeWord  (optional)
     * @param offset For pagination, fetch entities after this many (optional)
     * @param count For pagination, the number of entities per page (optional)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "getRoles",
        tags = { "role-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = PageResponseRole.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/roles",
        produces = "*/*"
    )
    
    ResponseEntity<PageResponseRole> getRoles(
        @Parameter(name = "filter.searchString", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter.searchString", required = false) String filterSearchString,
        @Parameter(name = "filter.caseSensitive", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter.caseSensitive", required = false) Boolean filterCaseSensitive,
        @Parameter(name = "filter.wholeWord", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter.wholeWord", required = false) Boolean filterWholeWord,
        @Parameter(name = "offset", description = "For pagination, fetch entities after this many", in = ParameterIn.QUERY) @Valid @RequestParam(value = "offset", required = false) Integer offset,
        @Parameter(name = "count", description = "For pagination, the number of entities per page", in = ParameterIn.QUERY) @Valid @RequestParam(value = "count", required = false) Integer count
    );


    /**
     * GET /api/v1/group-roles
     *
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "getRoles1",
        tags = { "group-role-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = ListResponseGroupRole.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/group-roles",
        produces = "*/*"
    )
    
    ResponseEntity<ListResponseGroupRole> getRoles1(
        
    );


    /**
     * GET /api/v1/group-roles/{domain}
     *
     * @param domain  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "getRoles2",
        tags = { "group-role-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = DataResponseListGroupRole.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/group-roles/{domain}",
        produces = "*/*"
    )
    
    ResponseEntity<DataResponseListGroupRole> getRoles2(
        @Parameter(name = "domain", description = "", required = true, in = ParameterIn.PATH) @PathVariable("domain") String domain
    );


    /**
     * GET /api/v1/settings/{application}/{name}
     *
     * @param application  (required)
     * @param name  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "getSetting",
        tags = { "settings-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = DataResponseSettingsObj.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/settings/{application}/{name}",
        produces = "application/json"
    )
    
    ResponseEntity<DataResponseSettingsObj> getSetting(
        @Parameter(name = "application", description = "", required = true, in = ParameterIn.PATH) @PathVariable("application") String application,
        @Parameter(name = "name", description = "", required = true, in = ParameterIn.PATH) @PathVariable("name") String name
    );


    /**
     * GET /api/v1/otmm
     *
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "getSettings",
        tags = { "otmm-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = OtmmSetting.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/otmm",
        produces = "*/*"
    )
    
    ResponseEntity<OtmmSetting> getSettings(
        
    );


    /**
     * GET /api/v1/settings/{application}
     *
     * @param application  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "getSettingsForApp",
        tags = { "settings-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ListResponseSettingsObj.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/settings/{application}",
        produces = "application/json"
    )
    
    ResponseEntity<ListResponseSettingsObj> getSettingsForApp(
        @Parameter(name = "application", description = "", required = true, in = ParameterIn.PATH) @PathVariable("application") String application
    );


    /**
     * GET /api/v1/tenants/{tenantId}
     *
     * @param tenantId  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "getTenant",
        tags = { "tenant-admin-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = DataResponseTenant.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/tenants/{tenantId}",
        produces = "application/json"
    )
    
    ResponseEntity<DataResponseTenant> getTenant(
        @Parameter(name = "tenantId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("tenantId") String tenantId
    );


    /**
     * GET /api/v1/tenants/configuration
     *
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "getTenantConfiguration",
        tags = { "tenant-admin-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = DataResponseTenantsConfiguration.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/tenants/configuration",
        produces = "application/json"
    )
    
    ResponseEntity<DataResponseTenantsConfiguration> getTenantConfiguration(
        
    );


    /**
     * GET /api/v1/tenants
     *
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "getTenants",
        tags = { "tenant-admin-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ListResponseTenant.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/tenants",
        produces = "application/json"
    )
    
    ResponseEntity<ListResponseTenant> getTenants(
        
    );


    /**
     * GET /api/v1/themes/{domain}/{themeId}
     *
     * @param domain  (required)
     * @param themeId  (required)
     * @param version  (optional, default to -1)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "getTheme",
        tags = { "theme-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = DataResponseTheme.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/themes/{domain}/{themeId}",
        produces = "*/*"
    )
    
    ResponseEntity<DataResponseTheme> getTheme(
        @Parameter(name = "domain", description = "", required = true, in = ParameterIn.PATH) @PathVariable("domain") String domain,
        @Parameter(name = "themeId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("themeId") UUID themeId,
        @Parameter(name = "version", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "version", required = false, defaultValue = "-1") Integer version
    );


    /**
     * POST /api/v1/themes/{domain}/{themeId}
     *
     * @param domain  (required)
     * @param themeId  (required)
     * @param version  (optional, default to -1)
     * @param postGetThemeWithOptionsPayload  (optional)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "getThemeWithOptions",
        tags = { "theme-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = DataResponseTheme.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v1/themes/{domain}/{themeId}",
        produces = "*/*",
        consumes = "application/json"
    )
    
    ResponseEntity<DataResponseTheme> getThemeWithOptions(
        @Parameter(name = "domain", description = "", required = true, in = ParameterIn.PATH) @PathVariable("domain") String domain,
        @Parameter(name = "themeId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("themeId") UUID themeId,
        @Parameter(name = "version", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "version", required = false, defaultValue = "-1") Integer version,
        @Parameter(name = "PostGetThemeWithOptionsPayload", description = "") @Valid @RequestBody(required = false) PostGetThemeWithOptionsPayload postGetThemeWithOptionsPayload
    );


    /**
     * GET /api/v1/permissions/{domain}/resources
     *
     * @param domain  (required)
     * @param groupId  (optional)
     * @param resourceType  (optional)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "getUserPermissions",
        tags = { "permissions-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = ListResponseRolePermissions.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/permissions/{domain}/resources",
        produces = "*/*"
    )
    
    ResponseEntity<ListResponseRolePermissions> getUserPermissions(
        @Parameter(name = "domain", description = "", required = true, in = ParameterIn.PATH) @PathVariable("domain") String domain,
        @Parameter(name = "groupId", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "groupId", required = false) String groupId,
        @Parameter(name = "resourceType", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "resourceType", required = false) String resourceType
    );


    /**
     * GET /api/v1/user-profiles/{domain}
     *
     * @param domain  (required)
     * @param fetchSavedResources  (optional, default to false)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "getUserProfile",
        tags = { "user-profile-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = UserProfileResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/user-profiles/{domain}",
        produces = "*/*"
    )
    
    ResponseEntity<UserProfileResponse> getUserProfile(
        @Parameter(name = "domain", description = "", required = true, in = ParameterIn.PATH) @PathVariable("domain") String domain,
        @Parameter(name = "fetchSavedResources", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fetchSavedResources", required = false, defaultValue = "false") Boolean fetchSavedResources
    );


    /**
     * GET /api/v1/version : Get version information for the gateway
     *
     * @return successful operation (status code 200)
     */
    @Operation(
        operationId = "getVersion",
        summary = "Get version information for the gateway",
        tags = { "version-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = VersionConfig.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/version",
        produces = "application/json"
    )
    
    ResponseEntity<VersionConfig> getVersion(
        
    );


    /**
     * GET /api/v1/permissions/{domain}/webapps
     *
     * @param domain  (required)
     * @param groupId  (optional)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "getWebappPermissions",
        tags = { "permissions-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = DataResponseWebappPermissionResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/permissions/{domain}/webapps",
        produces = "*/*"
    )
    
    ResponseEntity<DataResponseWebappPermissionResponse> getWebappPermissions(
        @Parameter(name = "domain", description = "", required = true, in = ParameterIn.PATH) @PathVariable("domain") String domain,
        @Parameter(name = "groupId", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "groupId", required = false) String groupId
    );


    /**
     * GET /api/v1/search/healthCheck
     *
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "healthCheck",
        tags = { "search-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = String.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/search/healthCheck",
        produces = "*/*"
    )
    
    ResponseEntity<String> healthCheck(
        
    );


    /**
     * GET /api/v1/search/healthCheck/{tenantId}
     *
     * @param tenantId  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "healthCheck1",
        tags = { "search-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = String.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/search/healthCheck/{tenantId}",
        produces = "*/*"
    )
    
    ResponseEntity<String> healthCheck1(
        @Parameter(name = "tenantId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("tenantId") String tenantId
    );


    /**
     * PUT /api/v1/resources/{domain}/{id}/hide
     *
     * @param id  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "hideResource",
        tags = { "resources-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = DataResponseResource.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/api/v1/resources/{domain}/{id}/hide",
        produces = "*/*"
    )
    
    ResponseEntity<DataResponseResource> hideResource(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") UUID id
    );


    /**
     * POST /api/v1/import/{packagetype}/{domain}
     *
     * @param packagetype  (required)
     * @param domain  (required)
     * @param commit Set to false to do a dry run (optional, default to false)
     * @param previousExportPackage The id of a previously uploaded export package (optional)
     * @param exportPackage The zip of the export to import (optional)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "importPackage",
        tags = { "import-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = DataResponseImportResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v1/import/{packagetype}/{domain}",
        produces = "*/*",
        consumes = "multipart/form-data"
    )
    
    ResponseEntity<DataResponseImportResponse> importPackage(
        @Parameter(name = "packagetype", description = "", required = true, in = ParameterIn.PATH) @PathVariable("packagetype") String packagetype,
        @Parameter(name = "domain", description = "", required = true, in = ParameterIn.PATH) @PathVariable("domain") String domain,
        @Parameter(name = "commit", description = "Set to false to do a dry run", in = ParameterIn.QUERY) @Valid @RequestParam(value = "commit", required = false, defaultValue = "false") Boolean commit,
        @Parameter(name = "previousExportPackage", description = "The id of a previously uploaded export package", in = ParameterIn.QUERY) @Valid @RequestParam(value = "previousExportPackage", required = false) String previousExportPackage,
        @Parameter(name = "exportPackage", description = "The zip of the export to import") @RequestPart(value = "exportPackage", required = false) MultipartFile exportPackage
    );


    /**
     * POST /api/v1/search/indexAll/{tenantId}
     *
     * @param tenantId  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "indexResources",
        tags = { "search-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v1/search/indexAll/{tenantId}"
    )
    
    ResponseEntity<Void> indexResources(
        @Parameter(name = "tenantId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("tenantId") String tenantId
    );


    /**
     * GET /api/v1/flow-models/{domain}/channelmappings : Internal only. Do not use! Will likely be removed in the next release! Get list of channels and their associated outcome mappings and the referenced full outcome mappings
     *
     * @param domainId  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "listChannelMappings",
        summary = "Internal only. Do not use! Will likely be removed in the next release! Get list of channels and their associated outcome mappings and the referenced full outcome mappings",
        tags = { "flow-model-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = DataResponseFlowContextOutputChannelMappingsResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/flow-models/{domain}/channelmappings",
        produces = "*/*"
    )
    
    ResponseEntity<DataResponseFlowContextOutputChannelMappingsResponse> listChannelMappings(
        @Parameter(name = "Domain id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("Domain id") String domainId
    );


    /**
     * GET /api/v1/flow-models/{domain}/communications : Get list of flow model communications
     *
     * @param domainId  (required)
     * @param requestFilter  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "listCommunications",
        summary = "Get list of flow model communications",
        tags = { "flow-model-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "*/*", array = @ArraySchema(schema = @Schema(implementation = Node.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/flow-models/{domain}/communications",
        produces = "*/*"
    )
    
    ResponseEntity<List<Node>> listCommunications(
        @Parameter(name = "Domain id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("Domain id") String domainId,
        @NotNull @Parameter(name = "requestFilter", description = "", required = true, in = ParameterIn.QUERY) @Valid NodeFilterRequest requestFilter
    );


    /**
     * GET /api/v1/flow-models/{domain}/mappings : Get list of outcome mappings
     *
     * @param domainId  (required)
     * @param filterForAMappingSetWithASpecificGivenName  (optional)
     * @param returnMappingAssociatedToGivenChannelName  (optional)
     * @return A filter for an outcome mapping or channel name was specified but nothing was found. (status code 404)
     */
    @Operation(
        operationId = "listMappings",
        summary = "Get list of outcome mappings",
        tags = { "flow-model-controller" },
        responses = {
            @ApiResponse(responseCode = "404", description = "A filter for an outcome mapping or channel name was specified but nothing was found.", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = DataResponseMapStringListOutcome.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/flow-models/{domain}/mappings",
        produces = "*/*"
    )
    
    ResponseEntity<Void> listMappings(
        @Parameter(name = "Domain id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("Domain id") String domainId,
        @Parameter(name = "Filter for a mapping set with a specific given name.", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Filter for a mapping set with a specific given name.", required = false) String filterForAMappingSetWithASpecificGivenName,
        @Parameter(name = "Return mapping associated to given channel name.", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Return mapping associated to given channel name.", required = false) String returnMappingAssociatedToGivenChannelName
    );


    /**
     * GET /api/v1/flow-models/{domain}/nodes : Get list of flow model nodes
     *
     * @param domainId  (required)
     * @param requestFilter  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "listNodes",
        summary = "Get list of flow model nodes",
        tags = { "flow-model-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "*/*", array = @ArraySchema(schema = @Schema(implementation = Node.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/flow-models/{domain}/nodes",
        produces = "*/*"
    )
    
    ResponseEntity<List<Node>> listNodes(
        @Parameter(name = "Domain id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("Domain id") String domainId,
        @NotNull @Parameter(name = "requestFilter", description = "", required = true, in = ParameterIn.QUERY) @Valid NodeFilterRequest requestFilter
    );


    /**
     * POST /api/v1/resources/{domain}/{id}/lock
     *
     * @param domain  (required)
     * @param id  (required)
     * @param version  (optional)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "lockResource",
        tags = { "resources-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = DataResponseResourceVersion.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v1/resources/{domain}/{id}/lock",
        produces = "*/*"
    )
    
    ResponseEntity<DataResponseResourceVersion> lockResource(
        @Parameter(name = "domain", description = "", required = true, in = ParameterIn.PATH) @PathVariable("domain") String domain,
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") UUID id,
        @Parameter(name = "version", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "version", required = false) Integer version
    );


    /**
     * POST /api/v1/secrets/migrateVault : Migrate secrets to vault.
     *
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "migrateVault",
        summary = "Migrate secrets to vault.",
        tags = { "secrets-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = Boolean.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v1/secrets/migrateVault",
        produces = "*/*"
    )
    
    ResponseEntity<Boolean> migrateVault(
        
    );


    /**
     * POST /api/v1/package/{domain}/deployment
     * Handle a multi-part form request to deploy packages and their associated resources
     *
     * @param domain  (required)
     * @param resourcePackId  (optional)
     * @param templateId  (optional)
     * @param packageId  (optional)
     * @param rpFileName  (optional)
     * @param packageFileName  (optional)
     * @param templateFileName  (optional)
     * @param sampleFile1 Accepts any number of sample files with name matching pattern: ^sampleFile_.+ (optional)
     * @param sampleFile2 Accepts any number of sample files with name matching pattern: ^sampleFile_.+ (optional)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "packageDeploymentUpload",
        description = "Handle a multi-part form request to deploy packages and their associated resources",
        tags = { "package-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = ListResponseResourceVersion.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v1/package/{domain}/deployment",
        produces = "*/*",
        consumes = "multipart/form-data"
    )
    
    ResponseEntity<ListResponseResourceVersion> packageDeploymentUpload(
        @Parameter(name = "domain", description = "", required = true, in = ParameterIn.PATH) @PathVariable("domain") String domain,
        @Parameter(name = "resourcePackId", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "resourcePackId", required = false) List<UUID> resourcePackId,
        @Parameter(name = "templateId", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "templateId", required = false) UUID templateId,
        @Parameter(name = "packageId", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "packageId", required = false) UUID packageId,
        @Parameter(name = "rpFileName", description = "") @RequestPart(value = "rpFileName", required = false) MultipartFile rpFileName,
        @Parameter(name = "packageFileName", description = "") @RequestPart(value = "packageFileName", required = false) MultipartFile packageFileName,
        @Parameter(name = "templateFileName", description = "") @RequestPart(value = "templateFileName", required = false) MultipartFile templateFileName,
        @Parameter(name = "sampleFile_1", description = "Accepts any number of sample files with name matching pattern: ^sampleFile_.+") @RequestPart(value = "sampleFile_1", required = false) MultipartFile sampleFile1,
        @Parameter(name = "sampleFile_2", description = "Accepts any number of sample files with name matching pattern: ^sampleFile_.+") @RequestPart(value = "sampleFile_2", required = false) MultipartFile sampleFile2
    );


    /**
     * GET /api/v1/pdf/{domain}/contents/{resourceId}
     * Expects a resource id, version and state and page number as request parameter and return fragments image preview for Pdf type resource
     *
     * @param domain  (required)
     * @param resourceId  (required)
     * @param version  (required)
     * @param state  (required)
     * @param pageNum  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "pdfPreview",
        description = "Expects a resource id, version and state and page number as request parameter and return fragments image preview for Pdf type resource",
        tags = { "pdf-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = Object.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/pdf/{domain}/contents/{resourceId}",
        produces = "*/*"
    )
    
    ResponseEntity<Object> pdfPreview(
        @Parameter(name = "domain", description = "", required = true, in = ParameterIn.PATH) @PathVariable("domain") String domain,
        @Parameter(name = "resourceId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("resourceId") UUID resourceId,
        @NotNull @Parameter(name = "version", description = "", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "version", required = true) Integer version,
        @NotNull @Parameter(name = "state", description = "", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "state", required = true) String state,
        @NotNull @Parameter(name = "pageNum", description = "", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "pageNum", required = true) Integer pageNum
    );


    /**
     * PUT /api/v1/resources/{domain}/{id}/promote
     *
     * @param domain  (required)
     * @param id  (required)
     * @param domain2  (required)
     * @param version  (optional, default to -1)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "promote",
        tags = { "resources-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = DataResponseResourceVersion.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/api/v1/resources/{domain}/{id}/promote",
        produces = "*/*",
        consumes = "application/json"
    )
    
    ResponseEntity<DataResponseResourceVersion> promote(
        @Parameter(name = "domain", description = "", required = true, in = ParameterIn.PATH) @PathVariable("domain") String domain,
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") UUID id,
        @Parameter(name = "Domain", description = "", required = true) @Valid @RequestBody Domain domain2,
        @Parameter(name = "version", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "version", required = false, defaultValue = "-1") Integer version
    );


    /**
     * POST /api/v1/resources/{domain}/Etag/Descriptors
     *
     * @param domain  (required)
     * @param etagDescriptorRequest  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "resourceListEtags",
        tags = { "resources-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = EtagDescriptorResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v1/resources/{domain}/Etag/Descriptors",
        produces = "application/json",
        consumes = "application/json"
    )
    
    ResponseEntity<EtagDescriptorResponse> resourceListEtags(
        @Parameter(name = "domain", description = "", required = true, in = ParameterIn.PATH) @PathVariable("domain") String domain,
        @Parameter(name = "EtagDescriptorRequest", description = "", required = true) @Valid @RequestBody EtagDescriptorRequest etagDescriptorRequest
    );


    /**
     * PUT /api/v1/resources/{domain}/{id}/revert/{oldVersion}
     * Replace the content of the current draft, or create a new draft with content of specified version. Copies links as well.
     *
     * @param domain  (required)
     * @param id  (required)
     * @param oldVersion  (required)
     * @param commentRequestBody  (optional)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "revertToOldVersion",
        description = "Replace the content of the current draft, or create a new draft with content of specified version. Copies links as well.",
        tags = { "resources-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = DataResponseResourceVersion.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/api/v1/resources/{domain}/{id}/revert/{oldVersion}",
        produces = "*/*",
        consumes = "application/json"
    )
    
    ResponseEntity<DataResponseResourceVersion> revertToOldVersion(
        @Parameter(name = "domain", description = "", required = true, in = ParameterIn.PATH) @PathVariable("domain") String domain,
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") UUID id,
        @Parameter(name = "oldVersion", description = "", required = true, in = ParameterIn.PATH) @PathVariable("oldVersion") Integer oldVersion,
        @Parameter(name = "CommentRequestBody", description = "") @Valid @RequestBody(required = false) CommentRequestBody commentRequestBody
    );


    /**
     * POST /api/v1/secrets/rollover
     *
     * @param oldKeyId  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "rolloverKeys",
        tags = { "secrets-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = Integer.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v1/secrets/rollover",
        produces = "*/*"
    )
    
    ResponseEntity<Integer> rolloverKeys(
        @NotNull @Parameter(name = "oldKeyId", description = "", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "oldKeyId", required = true) String oldKeyId
    );


    /**
     * GET /api/v1/search/{domain}
     *
     * @param domain  (required)
     * @param requestFilter  (required)
     * @param lockedBy  (optional)
     * @param fetchPermissions  (optional, default to false)
     * @param fetchCategories  (optional, default to false)
     * @param fetchVariants  (optional, default to false)
     * @param fetchApproval  (optional, default to false)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "search",
        tags = { "search-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = PageResponseResourceVersion.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/search/{domain}",
        produces = "*/*"
    )
    
    ResponseEntity<PageResponseResourceVersion> search(
        @Parameter(name = "domain", description = "", required = true, in = ParameterIn.PATH) @PathVariable("domain") String domain,
        @NotNull @Parameter(name = "requestFilter", description = "", required = true, in = ParameterIn.QUERY) @Valid ResourceFilterRequest requestFilter,
        @Parameter(name = "lockedBy", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "lockedBy", required = false) String lockedBy,
        @Parameter(name = "fetchPermissions", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fetchPermissions", required = false, defaultValue = "false") Boolean fetchPermissions,
        @Parameter(name = "fetchCategories", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fetchCategories", required = false, defaultValue = "false") Boolean fetchCategories,
        @Parameter(name = "fetchVariants", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fetchVariants", required = false, defaultValue = "false") Boolean fetchVariants,
        @Parameter(name = "fetchApproval", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fetchApproval", required = false, defaultValue = "false") Boolean fetchApproval
    );


    /**
     * GET /api/v1/resources/{domain}/{id}/sectionDescendants
     *
     * @param domain  (required)
     * @param id  (required)
     * @param latestApproved  (optional, default to false)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "sectionDescendants",
        tags = { "resources-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = DataResponseTreeResourceVersion.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/resources/{domain}/{id}/sectionDescendants",
        produces = "*/*"
    )
    
    ResponseEntity<DataResponseTreeResourceVersion> sectionDescendants(
        @Parameter(name = "domain", description = "", required = true, in = ParameterIn.PATH) @PathVariable("domain") String domain,
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") UUID id,
        @Parameter(name = "latestApproved", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "latestApproved", required = false, defaultValue = "false") Boolean latestApproved
    );


    /**
     * PUT /api/v1/run-definitions/{domain}/engine/{id}
     *
     * @param domain  (required)
     * @param id  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "setEngineAsDefault",
        tags = { "engine-run-def-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = DataResponseResourceVersion.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/api/v1/run-definitions/{domain}/engine/{id}",
        produces = "*/*"
    )
    
    ResponseEntity<DataResponseResourceVersion> setEngineAsDefault(
        @Parameter(name = "domain", description = "", required = true, in = ParameterIn.PATH) @PathVariable("domain") String domain,
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") UUID id
    );


    /**
     * POST /api/v1/otmm
     *
     * @param otmmSetting  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "setSettings",
        tags = { "otmm-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v1/otmm",
        consumes = "application/json"
    )
    
    ResponseEntity<Void> setSettings(
        @Parameter(name = "OtmmSetting", description = "", required = true) @Valid @RequestBody OtmmSetting otmmSetting
    );


    /**
     * PUT /api/v1/resources/{domain}/{id}/show
     *
     * @param id  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "showResource",
        tags = { "resources-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = DataResponseResource.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/api/v1/resources/{domain}/{id}/show",
        produces = "*/*"
    )
    
    ResponseEntity<DataResponseResource> showResource(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") UUID id
    );


    /**
     * POST /api/v1/package/{domain}/deploySubPub
     * Handle a multi-part form request to deploy packages and their associated resources
     *
     * @param domain  (required)
     * @param packageId  (optional)
     * @param parentPackageId  (optional)
     * @param rpFileName  (optional)
     * @param packageFileName  (optional)
     * @param templateFileName  (optional)
     * @param sampleFile1 Accepts any number of sample files with name matching pattern: ^sampleFile_.+ (optional)
     * @param sampleFile2 Accepts any number of sample files with name matching pattern: ^sampleFile_.+ (optional)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "subPackageDeploymentUpload",
        description = "Handle a multi-part form request to deploy packages and their associated resources",
        tags = { "package-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = ListResponseResourceVersion.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v1/package/{domain}/deploySubPub",
        produces = "*/*",
        consumes = "multipart/form-data"
    )
    
    ResponseEntity<ListResponseResourceVersion> subPackageDeploymentUpload(
        @Parameter(name = "domain", description = "", required = true, in = ParameterIn.PATH) @PathVariable("domain") String domain,
        @Parameter(name = "packageId", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "packageId", required = false) UUID packageId,
        @Parameter(name = "parentPackageId", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "parentPackageId", required = false) UUID parentPackageId,
        @Parameter(name = "rpFileName", description = "") @RequestPart(value = "rpFileName", required = false) MultipartFile rpFileName,
        @Parameter(name = "packageFileName", description = "") @RequestPart(value = "packageFileName", required = false) MultipartFile packageFileName,
        @Parameter(name = "templateFileName", description = "") @RequestPart(value = "templateFileName", required = false) MultipartFile templateFileName,
        @Parameter(name = "sampleFile_1", description = "Accepts any number of sample files with name matching pattern: ^sampleFile_.+") @RequestPart(value = "sampleFile_1", required = false) MultipartFile sampleFile1,
        @Parameter(name = "sampleFile_2", description = "Accepts any number of sample files with name matching pattern: ^sampleFile_.+") @RequestPart(value = "sampleFile_2", required = false) MultipartFile sampleFile2
    );


    /**
     * DELETE /api/v1/resources/{domain}/{id}/lock
     *
     * @param domain  (required)
     * @param id  (required)
     * @param version  (optional)
     * @param force When set to true, this will break a lock held by another user if the current user is a tenant admin. (optional, default to false)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "unlockResource",
        tags = { "resources-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = DataResponseResourceVersion.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/api/v1/resources/{domain}/{id}/lock",
        produces = "*/*"
    )
    
    ResponseEntity<DataResponseResourceVersion> unlockResource(
        @Parameter(name = "domain", description = "", required = true, in = ParameterIn.PATH) @PathVariable("domain") String domain,
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") UUID id,
        @Parameter(name = "version", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "version", required = false) Integer version,
        @Parameter(name = "force", description = "When set to true, this will break a lock held by another user if the current user is a tenant admin.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "force", required = false, defaultValue = "false") Boolean force
    );


    /**
     * PUT /api/v1/realtime-services : Update an existing realtime service
     *
     * @param realtimeService  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "update",
        summary = "Update an existing realtime service",
        tags = { "realtime-services-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = DataResponseRealtimeService.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/api/v1/realtime-services",
        produces = "*/*",
        consumes = "application/json"
    )
    
    ResponseEntity<DataResponseRealtimeService> update(
        @Parameter(name = "RealtimeService", description = "", required = true) @Valid @RequestBody RealtimeService realtimeService
    );


    /**
     * PUT /api/v1/resources/{domain}/{id}/content/{type}
     * Expects a form part in the request body with the name \&quot;file\&quot; and will use the contents of that file to update the specified resource.
     *
     * @param domain  (required)
     * @param id  (required)
     * @param type  (required)
     * @param file The binary file to upload (optional)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "updateContentOfTypeViaFile",
        description = "Expects a form part in the request body with the name \"file\" and will use the contents of that file to update the specified resource.",
        tags = { "resources-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = DataResponseResourceVersion.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/api/v1/resources/{domain}/{id}/content/{type}",
        produces = "*/*",
        consumes = "multipart/form-data"
    )
    
    ResponseEntity<DataResponseResourceVersion> updateContentOfTypeViaFile(
        @Parameter(name = "domain", description = "", required = true, in = ParameterIn.PATH) @PathVariable("domain") String domain,
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") UUID id,
        @Parameter(name = "type", description = "", required = true, in = ParameterIn.PATH) @PathVariable("type") String type,
        @Parameter(name = "file", description = "The binary file to upload") @RequestPart(value = "file", required = false) MultipartFile file
    );


    /**
     * PUT /api/v1/resources/{domain}/{id}/content
     * Expects a form part in the request body with the name \&quot;file\&quot; and will use the contents of that file to update the specified resource.
     *
     * @param domain  (required)
     * @param id  (required)
     * @param file The binary file to upload (optional)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "updateContentViaFile",
        description = "Expects a form part in the request body with the name \"file\" and will use the contents of that file to update the specified resource.",
        tags = { "resources-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = DataResponseResourceVersion.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/api/v1/resources/{domain}/{id}/content",
        produces = "*/*",
        consumes = "multipart/form-data"
    )
    
    ResponseEntity<DataResponseResourceVersion> updateContentViaFile(
        @Parameter(name = "domain", description = "", required = true, in = ParameterIn.PATH) @PathVariable("domain") String domain,
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") UUID id,
        @Parameter(name = "file", description = "The binary file to upload") @RequestPart(value = "file", required = false) MultipartFile file
    );


    /**
     * PUT /api/v1/dictionaries/{languageCode}
     *
     * @param languageCode  (required)
     * @param locale The dictionary&#39;s locale (optional)
     * @param dicFile The dictionary&#39;s dic file to upload (optional)
     * @param affFile The dictionary&#39;s aff file to upload (optional)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "updateDictionaryFiles",
        tags = { "dictionary-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = DataResponseDictionary.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/api/v1/dictionaries/{languageCode}",
        produces = "*/*",
        consumes = "multipart/form-data"
    )
    
    ResponseEntity<DataResponseDictionary> updateDictionaryFiles(
        @Parameter(name = "languageCode", description = "", required = true, in = ParameterIn.PATH) @PathVariable("languageCode") String languageCode,
        @Parameter(name = "locale", description = "The dictionary's locale", in = ParameterIn.QUERY) @Valid @RequestParam(value = "locale", required = false) String locale,
        @Parameter(name = "dicFile", description = "The dictionary's dic file to upload") @RequestPart(value = "dicFile", required = false) MultipartFile dicFile,
        @Parameter(name = "affFile", description = "The dictionary's aff file to upload") @RequestPart(value = "affFile", required = false) MultipartFile affFile
    );


    /**
     * PUT /api/v1/domains/{id}
     *
     * @param id  (required)
     * @param body  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "updateDomain",
        tags = { "domain-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = DataResponseDomain.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/api/v1/domains/{id}",
        produces = "*/*",
        consumes = "application/json"
    )
    
    ResponseEntity<DataResponseDomain> updateDomain(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "body", description = "", required = true) @Valid @RequestBody Object body
    );


    /**
     * PUT /api/v1/resources/{domain}/{id}
     *
     * @param domain  (required)
     * @param id  (required)
     * @param body  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "updateResource",
        tags = { "resources-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = DataResponseResourceVersion.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/api/v1/resources/{domain}/{id}",
        produces = "*/*",
        consumes = "application/json"
    )
    
    ResponseEntity<DataResponseResourceVersion> updateResource(
        @Parameter(name = "domain", description = "", required = true, in = ParameterIn.PATH) @PathVariable("domain") String domain,
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") UUID id,
        @Parameter(name = "body", description = "", required = true) @Valid @RequestBody Object body
    );


    /**
     * PUT /api/v1/resource-categories
     *
     * @param resourceCategory  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "updateResourceCategory",
        tags = { "resource-category-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = DataResponseResourceCategory.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/api/v1/resource-categories",
        produces = "*/*",
        consumes = "application/json"
    )
    
    ResponseEntity<DataResponseResourceCategory> updateResourceCategory(
        @Parameter(name = "ResourceCategory", description = "", required = true) @Valid @RequestBody ResourceCategory resourceCategory
    );


    /**
     * PUT /api/v1/roles/{id}
     *
     * @param id  (required)
     * @param role  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "updateRole",
        tags = { "role-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = DataResponseRole.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/api/v1/roles/{id}",
        produces = "*/*",
        consumes = "application/json"
    )
    
    ResponseEntity<DataResponseRole> updateRole(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") UUID id,
        @Parameter(name = "Role", description = "", required = true) @Valid @RequestBody Role role
    );


    /**
     * PUT /api/v1/resources/{domain}/{id}/state
     *
     * @param domain  (required)
     * @param id  (required)
     * @param workflowRequestBody  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "updateState",
        tags = { "resources-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = DataResponseResourceVersion.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/api/v1/resources/{domain}/{id}/state",
        produces = "*/*",
        consumes = "application/json"
    )
    
    ResponseEntity<DataResponseResourceVersion> updateState(
        @Parameter(name = "domain", description = "", required = true, in = ParameterIn.PATH) @PathVariable("domain") String domain,
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") UUID id,
        @Parameter(name = "WorkflowRequestBody", description = "", required = true) @Valid @RequestBody WorkflowRequestBody workflowRequestBody
    );


    /**
     * PUT /api/v1/resources/{domain}/state
     *
     * @param domain  (required)
     * @param bulkWorkflowRequestBody  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "updateStates",
        tags = { "resources-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = DataResponseBulkWorkflowStateChangeResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/api/v1/resources/{domain}/state",
        produces = "*/*",
        consumes = "application/json"
    )
    
    ResponseEntity<DataResponseBulkWorkflowStateChangeResponse> updateStates(
        @Parameter(name = "domain", description = "", required = true, in = ParameterIn.PATH) @PathVariable("domain") String domain,
        @Parameter(name = "BulkWorkflowRequestBody", description = "", required = true) @Valid @RequestBody BulkWorkflowRequestBody bulkWorkflowRequestBody
    );


    /**
     * PUT /api/v1/themes/{domain}/{themeId}/template : Update the specified theme to be based on the latest approved version of its template.
     *
     * @param domain  (required)
     * @param themeId  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "updateTemplate",
        summary = "Update the specified theme to be based on the latest approved version of its template.",
        tags = { "theme-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = GenericResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/api/v1/themes/{domain}/{themeId}/template",
        produces = "*/*"
    )
    
    ResponseEntity<GenericResponse> updateTemplate(
        @Parameter(name = "domain", description = "", required = true, in = ParameterIn.PATH) @PathVariable("domain") String domain,
        @Parameter(name = "themeId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("themeId") UUID themeId
    );


    /**
     * PUT /api/v1/tenants/updateTenant
     *
     * @param createTenantBody  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "updateTenant",
        tags = { "tenant-admin-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = DataResponseTenant.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/api/v1/tenants/updateTenant",
        produces = "application/json",
        consumes = "application/json"
    )
    
    ResponseEntity<DataResponseTenant> updateTenant(
        @Parameter(name = "CreateTenantBody", description = "", required = true) @Valid @RequestBody CreateTenantBody createTenantBody
    );


    /**
     * PUT /api/v1/tenants/{tenantId}/schema
     *
     * @param tenantId  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "updateTenantSchema",
        tags = { "tenant-admin-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = DataResponseTenant.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/api/v1/tenants/{tenantId}/schema",
        produces = "application/json"
    )
    
    ResponseEntity<DataResponseTenant> updateTenantSchema(
        @Parameter(name = "tenantId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("tenantId") String tenantId
    );


    /**
     * PUT /api/v1/tenants/all/schema
     *
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "updateTenantSchemas",
        tags = { "tenant-admin-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ListResponseTenant.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/api/v1/tenants/all/schema",
        produces = "application/json"
    )
    
    ResponseEntity<ListResponseTenant> updateTenantSchemas(
        
    );


    /**
     * PUT /api/v1/themes/{domain}/{themeId}
     *
     * @param domain  (required)
     * @param themeId  (required)
     * @param theme  (required)
     * @param requireLock  (optional)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "updateTheme",
        tags = { "theme-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = GenericResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/api/v1/themes/{domain}/{themeId}",
        produces = "*/*",
        consumes = "application/json"
    )
    
    ResponseEntity<GenericResponse> updateTheme(
        @Parameter(name = "domain", description = "", required = true, in = ParameterIn.PATH) @PathVariable("domain") String domain,
        @Parameter(name = "themeId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("themeId") UUID themeId,
        @Parameter(name = "Theme", description = "", required = true) @Valid @RequestBody Theme theme,
        @Parameter(name = "requireLock", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "requireLock", required = false) Boolean requireLock
    );

}
