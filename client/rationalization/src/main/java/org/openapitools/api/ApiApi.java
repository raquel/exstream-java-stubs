/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.2.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.CreateTenantBody;
import org.openapitools.model.CustomFragmentRequest;
import org.openapitools.model.CustomSuperSetRequest;
import org.openapitools.model.DataResponseTenant;
import org.openapitools.model.DataResponseTenantsConfiguration;
import org.openapitools.model.FragmentRequest;
import org.openapitools.model.ListResponseTenant;
import org.openapitools.model.MigrationSetDomainRequest;
import org.openapitools.model.MigrationSetExportRequest;
import org.openapitools.model.MigrationSetLinkRequest;
import org.openapitools.model.MigrationSetPatchRequest;
import org.openapitools.model.MigrationSetRequest;
import org.openapitools.model.RationalisationFilter;
import org.openapitools.model.RationalizationResponseObject;
import org.openapitools.model.SseEmitter;
import java.util.UUID;
import org.openapitools.model.UpdateRationalizationActivityRequest;
import org.openapitools.model.VersionConfig;
import org.openapitools.model.WorkflowRequestBody;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-03-25T22:40:32.411824350Z[Europe/Lisbon]")
@Validated
@Tag(name = "migration-set-controller", description = "the migration-set-controller API")
public interface ApiApi {

    /**
     * PATCH /api/v1/migrationset/{domainId}/{msId}
     *
     * @param domainId  (required)
     * @param msId  (required)
     * @param migrationSetPatchRequest  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "applyPatchForMigrationSet",
        tags = { "migration-set-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = String.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PATCH,
        value = "/api/v1/migrationset/{domainId}/{msId}",
        produces = "*/*",
        consumes = "application/json"
    )
    
    ResponseEntity<String> applyPatchForMigrationSet(
        @Parameter(name = "domainId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("domainId") String domainId,
        @Parameter(name = "msId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("msId") UUID msId,
        @Parameter(name = "MigrationSetPatchRequest", description = "", required = true) @Valid @RequestBody MigrationSetPatchRequest migrationSetPatchRequest
    );


    /**
     * PUT /api/v1/migrationset/{id}/domains/{domainId}/associate
     *
     * @param domainId  (required)
     * @param id  (required)
     * @param migrationSetDomainRequest  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "associateMigrationSetToDomain",
        tags = { "migration-set-domains-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = RationalizationResponseObject.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/api/v1/migrationset/{id}/domains/{domainId}/associate",
        produces = "*/*",
        consumes = "application/json"
    )
    
    ResponseEntity<RationalizationResponseObject> associateMigrationSetToDomain(
        @Parameter(name = "domainId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("domainId") String domainId,
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") UUID id,
        @Parameter(name = "MigrationSetDomainRequest", description = "", required = true) @Valid @RequestBody MigrationSetDomainRequest migrationSetDomainRequest
    );


    /**
     * DELETE /api/v1/rationalization/{domainId}/{msId}
     *
     * @param domainId  (required)
     * @param msId  (required)
     * @param implicit  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "cancelOfflineJob",
        tags = { "rationalization-report-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = RationalizationResponseObject.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/api/v1/rationalization/{domainId}/{msId}",
        produces = "*/*"
    )
    
    ResponseEntity<RationalizationResponseObject> cancelOfflineJob(
        @Parameter(name = "domainId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("domainId") String domainId,
        @Parameter(name = "msId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("msId") UUID msId,
        @Parameter(name = "implicit", description = "", required = true, in = ParameterIn.PATH) @PathVariable("implicit") Boolean implicit
    );


    /**
     * DELETE /api/v1/rationalization/{domainId}/{msId}/{implicit}
     *
     * @param domainId  (required)
     * @param msId  (required)
     * @param implicit  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "cancelOfflineJob1",
        tags = { "rationalization-report-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = RationalizationResponseObject.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/api/v1/rationalization/{domainId}/{msId}/{implicit}",
        produces = "*/*"
    )
    
    ResponseEntity<RationalizationResponseObject> cancelOfflineJob1(
        @Parameter(name = "domainId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("domainId") String domainId,
        @Parameter(name = "msId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("msId") UUID msId,
        @Parameter(name = "implicit", description = "", required = true, in = ParameterIn.PATH) @PathVariable("implicit") Boolean implicit
    );


    /**
     * POST /api/v1/rationalization/{domainId}/preview/{msId}
     *
     * @param domainId  (required)
     * @param msId  (required)
     * @param customFragmentRequest  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "createCustomFragment",
        tags = { "rationalization-report-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = RationalizationResponseObject.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v1/rationalization/{domainId}/preview/{msId}",
        produces = "*/*",
        consumes = "application/json"
    )
    
    ResponseEntity<RationalizationResponseObject> createCustomFragment(
        @Parameter(name = "domainId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("domainId") String domainId,
        @Parameter(name = "msId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("msId") UUID msId,
        @Parameter(name = "CustomFragmentRequest", description = "", required = true) @Valid @RequestBody CustomFragmentRequest customFragmentRequest
    );


    /**
     * POST /api/v1/migrationset/{domain}/links
     *
     * @param domain  (required)
     * @param migrationSetLinkRequest  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "createLinkBtwRatAndDasMigrationSet",
        tags = { "migration-set-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = RationalizationResponseObject.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v1/migrationset/{domain}/links",
        produces = "*/*",
        consumes = "application/json"
    )
    
    ResponseEntity<RationalizationResponseObject> createLinkBtwRatAndDasMigrationSet(
        @Parameter(name = "domain", description = "", required = true, in = ParameterIn.PATH) @PathVariable("domain") String domain,
        @Parameter(name = "MigrationSetLinkRequest", description = "", required = true) @Valid @RequestBody MigrationSetLinkRequest migrationSetLinkRequest
    );


    /**
     * POST /api/v1/migrationset/{domain}
     *
     * @param domain  (required)
     * @param migrationSetRequest  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "createMigrationSet",
        tags = { "migration-set-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = RationalizationResponseObject.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v1/migrationset/{domain}",
        produces = "*/*",
        consumes = "application/json"
    )
    
    ResponseEntity<RationalizationResponseObject> createMigrationSet(
        @Parameter(name = "domain", description = "", required = true, in = ParameterIn.PATH) @PathVariable("domain") String domain,
        @Parameter(name = "MigrationSetRequest", description = "", required = true) @Valid @RequestBody MigrationSetRequest migrationSetRequest
    );


    /**
     * POST /api/v1/migrationset/{domain}/tmpfile
     *
     * @param domain  (required)
     * @param migrationType  (optional, default to CONTENT)
     * @param updateRationalizationActivityRequest  (optional)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "createRationalizationActivity",
        tags = { "migration-set-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = RationalizationResponseObject.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v1/migrationset/{domain}/tmpfile",
        produces = "*/*",
        consumes = "application/json"
    )
    
    ResponseEntity<RationalizationResponseObject> createRationalizationActivity(
        @Parameter(name = "domain", description = "", required = true, in = ParameterIn.PATH) @PathVariable("domain") String domain,
        @Parameter(name = "migrationType", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "migrationType", required = false, defaultValue = "CONTENT") String migrationType,
        @Parameter(name = "UpdateRationalizationActivityRequest", description = "") @Valid @RequestBody(required = false) UpdateRationalizationActivityRequest updateRationalizationActivityRequest
    );


    /**
     * POST /api/v1/tenants/{tenantId}
     *
     * @param tenantId  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "createTenantSchema",
        tags = { "Tenant Admin Controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = DataResponseTenant.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v1/tenants/{tenantId}",
        produces = "application/json"
    )
    
    ResponseEntity<DataResponseTenant> createTenantSchema(
        @Size(min = 1, max = 40) @Parameter(name = "tenantId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("tenantId") String tenantId
    );


    /**
     * POST /api/v1/tenants/addTenant
     *
     * @param createTenantBody  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "createTenantWithExistingSchema",
        tags = { "Tenant Admin Controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = DataResponseTenant.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v1/tenants/addTenant",
        produces = "application/json",
        consumes = "application/json"
    )
    
    ResponseEntity<DataResponseTenant> createTenantWithExistingSchema(
        @Parameter(name = "CreateTenantBody", description = "", required = true) @Valid @RequestBody CreateTenantBody createTenantBody
    );


    /**
     * DELETE /api/v1/migrationset/{domainId}/{msId}/{updateOnly}
     *
     * @param domainId  (required)
     * @param msId  (required)
     * @param updateOnly  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "deleteMigrationSet",
        tags = { "migration-set-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = RationalizationResponseObject.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/api/v1/migrationset/{domainId}/{msId}/{updateOnly}",
        produces = "*/*"
    )
    
    ResponseEntity<RationalizationResponseObject> deleteMigrationSet(
        @Parameter(name = "domainId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("domainId") String domainId,
        @Parameter(name = "msId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("msId") UUID msId,
        @Parameter(name = "updateOnly", description = "", required = true, in = ParameterIn.PATH) @PathVariable("updateOnly") Boolean updateOnly
    );


    /**
     * PUT /api/v1/migrationset/{id}/domains/{domainId}/disassociate
     *
     * @param domainId  (required)
     * @param id  (required)
     * @param migrationSetDomainRequest  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "disassociateMigrationSetToDomain",
        tags = { "migration-set-domains-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = RationalizationResponseObject.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/api/v1/migrationset/{id}/domains/{domainId}/disassociate",
        produces = "*/*",
        consumes = "application/json"
    )
    
    ResponseEntity<RationalizationResponseObject> disassociateMigrationSetToDomain(
        @Parameter(name = "domainId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("domainId") String domainId,
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") UUID id,
        @Parameter(name = "MigrationSetDomainRequest", description = "", required = true) @Valid @RequestBody MigrationSetDomainRequest migrationSetDomainRequest
    );


    /**
     * GET /api/v1/export/{domain}/{id}
     *
     * @param domain  (required)
     * @param id  (required)
     * @param version  (optional, default to LATEST_APPROVED)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "exportMigrationSet",
        tags = { "export-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/export/{domain}/{id}"
    )
    
    ResponseEntity<Void> exportMigrationSet(
        @Parameter(name = "domain", description = "", required = true, in = ParameterIn.PATH) @PathVariable("domain") String domain,
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") UUID id,
        @Parameter(name = "version", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "version", required = false, defaultValue = "LATEST_APPROVED") String version
    );


    /**
     * POST /api/v1/export/{domain}/{id}
     *
     * @param domain  (required)
     * @param id  (required)
     * @param migrationSetExportRequest  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "exportResourcesFromRootInDomain",
        tags = { "export-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v1/export/{domain}/{id}",
        consumes = "application/json"
    )
    
    ResponseEntity<Void> exportResourcesFromRootInDomain(
        @Parameter(name = "domain", description = "", required = true, in = ParameterIn.PATH) @PathVariable("domain") String domain,
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") UUID id,
        @Parameter(name = "MigrationSetExportRequest", description = "", required = true) @Valid @RequestBody MigrationSetExportRequest migrationSetExportRequest
    );


    /**
     * POST /api/v1/rationalization/{domainId}/{msId}
     *
     * @param domainId  (required)
     * @param msId  (required)
     * @param implicit  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "generateReportOffline",
        tags = { "rationalization-report-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = RationalizationResponseObject.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v1/rationalization/{domainId}/{msId}",
        produces = "*/*"
    )
    
    ResponseEntity<RationalizationResponseObject> generateReportOffline(
        @Parameter(name = "domainId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("domainId") String domainId,
        @Parameter(name = "msId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("msId") UUID msId,
        @Parameter(name = "implicit", description = "", required = true, in = ParameterIn.PATH) @PathVariable("implicit") Boolean implicit
    );


    /**
     * POST /api/v1/rationalization/{domainId}/{msId}/{implicit}
     *
     * @param domainId  (required)
     * @param msId  (required)
     * @param implicit  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "generateReportOffline1",
        tags = { "rationalization-report-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = RationalizationResponseObject.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v1/rationalization/{domainId}/{msId}/{implicit}",
        produces = "*/*"
    )
    
    ResponseEntity<RationalizationResponseObject> generateReportOffline1(
        @Parameter(name = "domainId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("domainId") String domainId,
        @Parameter(name = "msId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("msId") UUID msId,
        @Parameter(name = "implicit", description = "", required = true, in = ParameterIn.PATH) @PathVariable("implicit") Boolean implicit
    );


    /**
     * GET /api/v1/version/api
     *
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "getApiVersion",
        tags = { "version-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = String.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/version/api",
        produces = "application/json"
    )
    
    ResponseEntity<String> getApiVersion(
        
    );


    /**
     * GET /api/v1/migrationset/{domain}/{id}/deletion-eligibility
     *
     * @param domain  (required)
     * @param id  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "getCanDeleteMigrationSet",
        tags = { "migration-set-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = RationalizationResponseObject.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/migrationset/{domain}/{id}/deletion-eligibility",
        produces = "*/*"
    )
    
    ResponseEntity<RationalizationResponseObject> getCanDeleteMigrationSet(
        @Parameter(name = "domain", description = "", required = true, in = ParameterIn.PATH) @PathVariable("domain") String domain,
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") UUID id
    );


    /**
     * GET /api/v1/permissions/configurations
     *
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "getConfiguration",
        tags = { "permissions-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = RationalizationResponseObject.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/permissions/configurations",
        produces = "*/*"
    )
    
    ResponseEntity<RationalizationResponseObject> getConfiguration(
        
    );


    /**
     * GET /api/v1/rationalization/{domainId}/fragments/superset/{fragmentId}
     *
     * @param domainId  (required)
     * @param fragmentId  (required)
     * @param request  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "getCustomSuperSet",
        tags = { "rationalization-report-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = RationalizationResponseObject.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/rationalization/{domainId}/fragments/superset/{fragmentId}",
        produces = "*/*"
    )
    
    ResponseEntity<RationalizationResponseObject> getCustomSuperSet(
        @Parameter(name = "domainId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("domainId") String domainId,
        @Parameter(name = "fragmentId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("fragmentId") UUID fragmentId,
        @NotNull @Parameter(name = "request", description = "", required = true, in = ParameterIn.QUERY) @Valid CustomSuperSetRequest request
    );


    /**
     * GET /api/v1/rationalization/{domainId}/fragments/details/{fragmentId}
     *
     * @param domainId  (required)
     * @param fragmentId  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "getFragmentDetails",
        tags = { "rationalization-report-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = RationalizationResponseObject.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/rationalization/{domainId}/fragments/details/{fragmentId}",
        produces = "*/*"
    )
    
    ResponseEntity<RationalizationResponseObject> getFragmentDetails(
        @Parameter(name = "domainId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("domainId") String domainId,
        @Parameter(name = "fragmentId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("fragmentId") UUID fragmentId
    );


    /**
     * GET /api/v1/rationalization/{domainId}/fragments/order/{fragmentId}
     *
     * @param domainId  (required)
     * @param fragmentId  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "getFragmentOrder",
        tags = { "rationalization-report-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = RationalizationResponseObject.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/rationalization/{domainId}/fragments/order/{fragmentId}",
        produces = "*/*"
    )
    
    ResponseEntity<RationalizationResponseObject> getFragmentOrder(
        @Parameter(name = "domainId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("domainId") String domainId,
        @Parameter(name = "fragmentId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("fragmentId") UUID fragmentId
    );


    /**
     * GET /api/v1/migrationset/{domain}/fragments/refernce/{msId}/{varId}
     *
     * @param domain  (required)
     * @param msId  (required)
     * @param varId  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "getFragmentReference",
        tags = { "migration-set-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = RationalizationResponseObject.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/migrationset/{domain}/fragments/refernce/{msId}/{varId}",
        produces = "*/*"
    )
    
    ResponseEntity<RationalizationResponseObject> getFragmentReference(
        @Parameter(name = "domain", description = "", required = true, in = ParameterIn.PATH) @PathVariable("domain") String domain,
        @Parameter(name = "msId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("msId") UUID msId,
        @Parameter(name = "varId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("varId") UUID varId
    );


    /**
     * GET /api/v1/migrationset/fragments/{domain}/{msId}
     *
     * @param domain  (required)
     * @param msId  (required)
     * @param offset  (optional, default to 0)
     * @param limit  (optional, default to 10)
     * @param orderby  (optional)
     * @param filter  (optional)
     * @param hidden  (optional, default to false)
     * @param references  (optional, default to false)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "getFragmentsOfMigrationSet",
        tags = { "migration-set-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = RationalizationResponseObject.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/migrationset/fragments/{domain}/{msId}",
        produces = "*/*"
    )
    
    ResponseEntity<RationalizationResponseObject> getFragmentsOfMigrationSet(
        @Parameter(name = "domain", description = "", required = true, in = ParameterIn.PATH) @PathVariable("domain") String domain,
        @Parameter(name = "msId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("msId") UUID msId,
        @Min(0) @Parameter(name = "offset", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "offset", required = false, defaultValue = "0") Integer offset,
        @Parameter(name = "limit", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit", required = false, defaultValue = "10") Integer limit,
        @Parameter(name = "orderby", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "", required = false) Object orderby,
        @Parameter(name = "filter", description = "", in = ParameterIn.QUERY) @Valid RationalisationFilter filter,
        @Parameter(name = "hidden", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "hidden", required = false, defaultValue = "false") Boolean hidden,
        @Parameter(name = "references", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "references", required = false, defaultValue = "false") Boolean references
    );


    /**
     * GET /api/v1/migrationset/template/fragments/{domain}/{msId}
     *
     * @param domain  (required)
     * @param msId  (required)
     * @param offset  (optional, default to 0)
     * @param limit  (optional, default to 10)
     * @param orderby  (optional)
     * @param filter  (optional)
     * @param hidden  (optional, default to false)
     * @param references  (optional, default to false)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "getFragmentsOfTemplateMigrationSet",
        tags = { "migration-set-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = RationalizationResponseObject.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/migrationset/template/fragments/{domain}/{msId}",
        produces = "*/*"
    )
    
    ResponseEntity<RationalizationResponseObject> getFragmentsOfTemplateMigrationSet(
        @Parameter(name = "domain", description = "", required = true, in = ParameterIn.PATH) @PathVariable("domain") String domain,
        @Parameter(name = "msId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("msId") UUID msId,
        @Min(0) @Parameter(name = "offset", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "offset", required = false, defaultValue = "0") Integer offset,
        @Parameter(name = "limit", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit", required = false, defaultValue = "10") Integer limit,
        @Parameter(name = "orderby", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "", required = false) Object orderby,
        @Parameter(name = "filter", description = "", in = ParameterIn.QUERY) @Valid RationalisationFilter filter,
        @Parameter(name = "hidden", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "hidden", required = false, defaultValue = "false") Boolean hidden,
        @Parameter(name = "references", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "references", required = false, defaultValue = "false") Boolean references
    );


    /**
     * GET /api/v1/migrationset/{domain}/fragment/references/{fragmentId}
     *
     * @param domain  (required)
     * @param fragmentId  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "getFragmentsReferences",
        tags = { "migration-set-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = RationalizationResponseObject.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/migrationset/{domain}/fragment/references/{fragmentId}",
        produces = "*/*"
    )
    
    ResponseEntity<RationalizationResponseObject> getFragmentsReferences(
        @Parameter(name = "domain", description = "", required = true, in = ParameterIn.PATH) @PathVariable("domain") String domain,
        @Parameter(name = "fragmentId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("fragmentId") UUID fragmentId
    );


    /**
     * GET /api/v1/rationalization/{domainId}/fragments/groups/{fragmentId}
     *
     * @param domainId  (required)
     * @param fragmentId  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "getGroupFragment",
        tags = { "rationalization-report-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = RationalizationResponseObject.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/rationalization/{domainId}/fragments/groups/{fragmentId}",
        produces = "*/*"
    )
    
    ResponseEntity<RationalizationResponseObject> getGroupFragment(
        @Parameter(name = "domainId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("domainId") String domainId,
        @Parameter(name = "fragmentId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("fragmentId") UUID fragmentId
    );


    /**
     * GET /api/v1/permissions/licenses
     *
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "getLicensePermissions",
        tags = { "permissions-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = String.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/permissions/licenses",
        produces = "*/*"
    )
    
    ResponseEntity<String> getLicensePermissions(
        
    );


    /**
     * GET /api/v1/permissions/licenses/{production}
     *
     * @param production  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "getLicensePermissions1",
        tags = { "permissions-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = String.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/permissions/licenses/{production}",
        produces = "*/*"
    )
    
    ResponseEntity<String> getLicensePermissions1(
        @Parameter(name = "production", description = "", required = true, in = ParameterIn.PATH) @PathVariable("production") Boolean production
    );


    /**
     * GET /api/v1/report/{domain}/{id}
     *
     * @param domain  (required)
     * @param id  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "getMigrationReportDetails",
        tags = { "migration-set-report-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = RationalizationResponseObject.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/report/{domain}/{id}",
        produces = "application/json"
    )
    
    ResponseEntity<RationalizationResponseObject> getMigrationReportDetails(
        @Parameter(name = "domain", description = "", required = true, in = ParameterIn.PATH) @PathVariable("domain") String domain,
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") UUID id
    );


    /**
     * GET /api/v1/rationalization/{domainId}/{msId}
     *
     * @param domainId  (required)
     * @param msId  (required)
     * @param implicit  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "getMigrationSet",
        tags = { "rationalization-report-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = SseEmitter.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/rationalization/{domainId}/{msId}",
        produces = "*/*"
    )
    
    ResponseEntity<SseEmitter> getMigrationSet(
        @Parameter(name = "domainId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("domainId") String domainId,
        @Parameter(name = "msId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("msId") UUID msId,
        @Parameter(name = "implicit", description = "", required = true, in = ParameterIn.PATH) @PathVariable("implicit") Boolean implicit
    );


    /**
     * GET /api/v1/rationalization/{domainId}/{msId}/{implicit}
     *
     * @param domainId  (required)
     * @param msId  (required)
     * @param implicit  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "getMigrationSet1",
        tags = { "rationalization-report-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = SseEmitter.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/rationalization/{domainId}/{msId}/{implicit}",
        produces = "*/*"
    )
    
    ResponseEntity<SseEmitter> getMigrationSet1(
        @Parameter(name = "domainId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("domainId") String domainId,
        @Parameter(name = "msId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("msId") UUID msId,
        @Parameter(name = "implicit", description = "", required = true, in = ParameterIn.PATH) @PathVariable("implicit") Boolean implicit
    );


    /**
     * GET /api/v1/migrationset/{domainId}/{msId}
     *
     * @param domainId  (required)
     * @param msId  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "getMigrationSet2",
        tags = { "migration-set-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = RationalizationResponseObject.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/migrationset/{domainId}/{msId}",
        produces = "*/*"
    )
    
    ResponseEntity<RationalizationResponseObject> getMigrationSet2(
        @Parameter(name = "domainId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("domainId") String domainId,
        @Parameter(name = "msId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("msId") UUID msId
    );


    /**
     * GET /api/v1/migrationset/{domainId}/{id}/domains
     *
     * @param domainId  (required)
     * @param id  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "getMigrationSet3",
        tags = { "migration-set-domains-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = RationalizationResponseObject.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/migrationset/{domainId}/{id}/domains",
        produces = "*/*"
    )
    
    ResponseEntity<RationalizationResponseObject> getMigrationSet3(
        @Parameter(name = "domainId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("domainId") String domainId,
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") UUID id
    );


    /**
     * GET /api/v1/migrationset/{domain}/links/{msId}
     *
     * @param domain  (required)
     * @param msId  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "getMigrationSetLinks",
        tags = { "migration-set-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = RationalizationResponseObject.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/migrationset/{domain}/links/{msId}",
        produces = "*/*"
    )
    
    ResponseEntity<RationalizationResponseObject> getMigrationSetLinks(
        @Parameter(name = "domain", description = "", required = true, in = ParameterIn.PATH) @PathVariable("domain") String domain,
        @Parameter(name = "msId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("msId") UUID msId
    );


    /**
     * GET /api/v1/migrationset/{domain}
     *
     * @param domain  (required)
     * @param offset  (optional, default to 0)
     * @param limit  (optional, default to 2147483647)
     * @param orderby  (optional)
     * @param filter  (optional)
     * @param hidden  (optional, default to false)
     * @param latestversion  (optional, default to false)
     * @param checkIfApproved  (optional, default to false)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "getMigrationSets",
        tags = { "migration-set-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = RationalizationResponseObject.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/migrationset/{domain}",
        produces = "*/*"
    )
    
    ResponseEntity<RationalizationResponseObject> getMigrationSets(
        @Parameter(name = "domain", description = "", required = true, in = ParameterIn.PATH) @PathVariable("domain") String domain,
        @Min(0) @Parameter(name = "offset", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "offset", required = false, defaultValue = "0") Integer offset,
        @Min(10) @Parameter(name = "limit", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit", required = false, defaultValue = "2147483647") Integer limit,
        @Parameter(name = "orderby", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "", required = false) Object orderby,
        @Parameter(name = "filter", description = "", in = ParameterIn.QUERY) @Valid RationalisationFilter filter,
        @Parameter(name = "hidden", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "hidden", required = false, defaultValue = "false") Boolean hidden,
        @Parameter(name = "latestversion", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "latestversion", required = false, defaultValue = "false") Boolean latestversion,
        @Parameter(name = "checkIfApproved", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "checkIfApproved", required = false, defaultValue = "false") Boolean checkIfApproved
    );


    /**
     * GET /api/v1/rationalization/{domainId}/custom/fragments/{customFragmentId}
     *
     * @param domainId  (required)
     * @param customFragmentId  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "getOrginatedFragments",
        tags = { "rationalization-report-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = RationalizationResponseObject.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/rationalization/{domainId}/custom/fragments/{customFragmentId}",
        produces = "*/*"
    )
    
    ResponseEntity<RationalizationResponseObject> getOrginatedFragments(
        @Parameter(name = "domainId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("domainId") String domainId,
        @Parameter(name = "customFragmentId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("customFragmentId") UUID customFragmentId
    );


    /**
     * GET /api/v1/migrationset/{domain}/fragments/pdf/{msId}
     *
     * @param domain  (required)
     * @param msId  (required)
     * @param pdfid  (required)
     * @param pageno  (optional, default to 0)
     * @param pagecount  (optional, default to 0)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "getPdfFragments",
        tags = { "migration-set-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = RationalizationResponseObject.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/migrationset/{domain}/fragments/pdf/{msId}",
        produces = "*/*"
    )
    
    ResponseEntity<RationalizationResponseObject> getPdfFragments(
        @Parameter(name = "domain", description = "", required = true, in = ParameterIn.PATH) @PathVariable("domain") String domain,
        @Parameter(name = "msId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("msId") UUID msId,
        @NotNull @Parameter(name = "pdfid", description = "", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "pdfid", required = true) UUID pdfid,
        @Min(0) @Parameter(name = "pageno", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "pageno", required = false, defaultValue = "0") Integer pageno,
        @Min(0) @Parameter(name = "pagecount", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "pagecount", required = false, defaultValue = "0") Integer pagecount
    );


    /**
     * GET /api/v1/rationalization/{domainId}/migrationset/{dasId}
     *
     * @param domainId  (required)
     * @param dasId  (required)
     * @param latestApproved  (optional, default to false)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "getRatMigrationSetDetails",
        tags = { "rationalization-report-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = RationalizationResponseObject.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/rationalization/{domainId}/migrationset/{dasId}",
        produces = "*/*"
    )
    
    ResponseEntity<RationalizationResponseObject> getRatMigrationSetDetails(
        @Parameter(name = "domainId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("domainId") String domainId,
        @Parameter(name = "dasId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("dasId") UUID dasId,
        @Parameter(name = "latestApproved", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "latestApproved", required = false, defaultValue = "false") Boolean latestApproved
    );


    /**
     * GET /api/v1/rationalization/{domainId}/report/{msId}
     *
     * @param domainId  (required)
     * @param msId  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "getRationalisationRunResults",
        tags = { "rationalization-report-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = RationalizationResponseObject.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/rationalization/{domainId}/report/{msId}",
        produces = "*/*"
    )
    
    ResponseEntity<RationalizationResponseObject> getRationalisationRunResults(
        @Parameter(name = "domainId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("domainId") String domainId,
        @Parameter(name = "msId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("msId") UUID msId
    );


    /**
     * GET /api/v1/rationalization/{domainId}/fragments/{msId}
     *
     * @param domainId  (required)
     * @param msId  (required)
     * @param commType  (optional)
     * @param resourcePackId  (optional)
     * @param dasObjectType  (optional)
     * @param offset  (optional, default to 0)
     * @param limit  (optional, default to 10)
     * @param orderby  (optional)
     * @param filter  (optional)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "getRationalizationFragments",
        tags = { "rationalization-report-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = RationalizationResponseObject.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/rationalization/{domainId}/fragments/{msId}",
        produces = "*/*"
    )
    
    ResponseEntity<RationalizationResponseObject> getRationalizationFragments(
        @Parameter(name = "domainId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("domainId") String domainId,
        @Parameter(name = "msId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("msId") UUID msId,
        @Parameter(name = "commType", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "commType", required = false) String commType,
        @Parameter(name = "resourcePackId", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "resourcePackId", required = false) String resourcePackId,
        @Parameter(name = "dasObjectType", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "dasObjectType", required = false) List<String> dasObjectType,
        @Min(0) @Parameter(name = "offset", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "offset", required = false, defaultValue = "0") Integer offset,
        @Parameter(name = "limit", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit", required = false, defaultValue = "10") Integer limit,
        @Parameter(name = "orderby", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "", required = false) Object orderby,
        @Parameter(name = "filter", description = "", in = ParameterIn.QUERY) @Valid RationalisationFilter filter
    );


    /**
     * GET /api/v1/migrationset/{domain}/{msid}/history
     *
     * @param domain  (required)
     * @param msid  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "getResourceHistory",
        tags = { "migration-set-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = RationalizationResponseObject.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/migrationset/{domain}/{msid}/history",
        produces = "*/*"
    )
    
    ResponseEntity<RationalizationResponseObject> getResourceHistory(
        @Parameter(name = "domain", description = "", required = true, in = ParameterIn.PATH) @PathVariable("domain") String domain,
        @Parameter(name = "msid", description = "", required = true, in = ParameterIn.PATH) @PathVariable("msid") UUID msid
    );


    /**
     * GET /api/v1/rationalization/{domainId}/custom/fragments/parent/{fragmentId}
     *
     * @param domainId  (required)
     * @param fragmentId  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "getRootCustomFragmentId",
        tags = { "rationalization-report-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = RationalizationResponseObject.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/rationalization/{domainId}/custom/fragments/parent/{fragmentId}",
        produces = "*/*"
    )
    
    ResponseEntity<RationalizationResponseObject> getRootCustomFragmentId(
        @Parameter(name = "domainId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("domainId") String domainId,
        @Parameter(name = "fragmentId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("fragmentId") UUID fragmentId
    );


    /**
     * GET /api/v1/migrationset/template/{domain}/{msId}
     *
     * @param domain  (required)
     * @param msId  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "getTemplateDetailsOfMigrationSet",
        tags = { "migration-set-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = RationalizationResponseObject.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/migrationset/template/{domain}/{msId}",
        produces = "*/*"
    )
    
    ResponseEntity<RationalizationResponseObject> getTemplateDetailsOfMigrationSet(
        @Parameter(name = "domain", description = "", required = true, in = ParameterIn.PATH) @PathVariable("domain") String domain,
        @Parameter(name = "msId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("msId") UUID msId
    );


    /**
     * GET /api/v1/rationalization/{domainId}/template/fragments/{msId}
     *
     * @param domainId  (required)
     * @param msId  (required)
     * @param commType  (optional)
     * @param resourcePackId  (optional)
     * @param dasObjectType  (optional)
     * @param offset  (optional, default to 0)
     * @param limit  (optional, default to 10)
     * @param orderby  (optional)
     * @param filter  (optional)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "getTemplateFragments",
        tags = { "rationalization-report-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = RationalizationResponseObject.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/rationalization/{domainId}/template/fragments/{msId}",
        produces = "*/*"
    )
    
    ResponseEntity<RationalizationResponseObject> getTemplateFragments(
        @Parameter(name = "domainId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("domainId") String domainId,
        @Parameter(name = "msId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("msId") UUID msId,
        @Parameter(name = "commType", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "commType", required = false) String commType,
        @Parameter(name = "resourcePackId", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "resourcePackId", required = false) String resourcePackId,
        @Parameter(name = "dasObjectType", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "dasObjectType", required = false) List<String> dasObjectType,
        @Min(0) @Parameter(name = "offset", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "offset", required = false, defaultValue = "0") Integer offset,
        @Parameter(name = "limit", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit", required = false, defaultValue = "10") Integer limit,
        @Parameter(name = "orderby", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "", required = false) Object orderby,
        @Parameter(name = "filter", description = "", in = ParameterIn.QUERY) @Valid RationalisationFilter filter
    );


    /**
     * GET /api/v1/migrationset/{domain}/template/fragment/references/{fragmentId}/{templateId}
     *
     * @param domain  (required)
     * @param fragmentId  (required)
     * @param templateId  (required)
     * @param communications  (optional)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "getTemplateFragmentsReferences",
        tags = { "migration-set-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = RationalizationResponseObject.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/migrationset/{domain}/template/fragment/references/{fragmentId}/{templateId}",
        produces = "*/*"
    )
    
    ResponseEntity<RationalizationResponseObject> getTemplateFragmentsReferences(
        @Parameter(name = "domain", description = "", required = true, in = ParameterIn.PATH) @PathVariable("domain") String domain,
        @Parameter(name = "fragmentId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("fragmentId") UUID fragmentId,
        @Parameter(name = "templateId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("templateId") UUID templateId,
        @Parameter(name = "communications", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "communications", required = false) List<String> communications
    );


    /**
     * GET /api/v1/migrationset/{domain}/template/rule/references/{ruleId}/{templateId}
     *
     * @param domain  (required)
     * @param ruleId  (required)
     * @param templateId  (required)
     * @param communications  (optional)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "getTemplateRuleFragmentsReferences",
        tags = { "migration-set-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = RationalizationResponseObject.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/migrationset/{domain}/template/rule/references/{ruleId}/{templateId}",
        produces = "*/*"
    )
    
    ResponseEntity<RationalizationResponseObject> getTemplateRuleFragmentsReferences(
        @Parameter(name = "domain", description = "", required = true, in = ParameterIn.PATH) @PathVariable("domain") String domain,
        @Parameter(name = "ruleId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("ruleId") UUID ruleId,
        @Parameter(name = "templateId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("templateId") UUID templateId,
        @Parameter(name = "communications", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "communications", required = false) List<String> communications
    );


    /**
     * GET /api/v1/migrationset/{domain}/template/variable/references/{variableId}/{templateId}
     *
     * @param domain  (required)
     * @param variableId  (required)
     * @param templateId  (required)
     * @param communications  (optional)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "getTemplateVariableFragmentsReferences",
        tags = { "migration-set-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = RationalizationResponseObject.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/migrationset/{domain}/template/variable/references/{variableId}/{templateId}",
        produces = "*/*"
    )
    
    ResponseEntity<RationalizationResponseObject> getTemplateVariableFragmentsReferences(
        @Parameter(name = "domain", description = "", required = true, in = ParameterIn.PATH) @PathVariable("domain") String domain,
        @Parameter(name = "variableId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("variableId") UUID variableId,
        @Parameter(name = "templateId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("templateId") UUID templateId,
        @Parameter(name = "communications", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "communications", required = false) List<String> communications
    );


    /**
     * GET /api/v1/tenants/{tenantId}
     *
     * @param tenantId  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "getTenant",
        tags = { "Tenant Admin Controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = DataResponseTenant.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/tenants/{tenantId}",
        produces = "application/json"
    )
    
    ResponseEntity<DataResponseTenant> getTenant(
        @Parameter(name = "tenantId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("tenantId") String tenantId
    );


    /**
     * GET /api/v1/tenant/internal/{tenantId}
     *
     * @param tenantId  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "getTenant1",
        tags = { "/api/v1/tenant/internal" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = DataResponseTenant.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/tenant/internal/{tenantId}",
        produces = "application/json"
    )
    
    ResponseEntity<DataResponseTenant> getTenant1(
        @Parameter(name = "tenantId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("tenantId") String tenantId
    );


    /**
     * GET /api/v1/tenants/configuration
     *
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "getTenantConfiguration",
        tags = { "Tenant Admin Controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = DataResponseTenantsConfiguration.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/tenants/configuration",
        produces = "application/json"
    )
    
    ResponseEntity<DataResponseTenantsConfiguration> getTenantConfiguration(
        
    );


    /**
     * GET /api/v1/tenants
     *
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "getTenants",
        tags = { "Tenant Admin Controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ListResponseTenant.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/tenants",
        produces = "application/json"
    )
    
    ResponseEntity<ListResponseTenant> getTenants(
        
    );


    /**
     * GET /api/v1/version
     *
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "getVersion",
        tags = { "version-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = VersionConfig.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/version",
        produces = "application/json"
    )
    
    ResponseEntity<VersionConfig> getVersion(
        
    );


    /**
     * POST /api/v1/migrationset/import/{domain}
     *
     * @param domain  (required)
     * @param commit  (optional, default to false)
     * @param encrypt  (optional)
     * @param document  (optional)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "importMigrationSet",
        tags = { "migration-set-import-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = RationalizationResponseObject.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v1/migrationset/import/{domain}",
        produces = "*/*",
        consumes = "multipart/form-data"
    )
    
    ResponseEntity<RationalizationResponseObject> importMigrationSet(
        @Parameter(name = "domain", description = "", required = true, in = ParameterIn.PATH) @PathVariable("domain") String domain,
        @Parameter(name = "commit", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "commit", required = false, defaultValue = "false") Boolean commit,
        @Parameter(name = "encrypt", description = "") @Valid @RequestParam(value = "encrypt", required = false) String encrypt,
        @Parameter(name = "document", description = "") @RequestPart(value = "document", required = false) MultipartFile document
    );


    /**
     * POST /api/v1/secrets/migrateVault : Migrate secrets to vault.
     *
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "migrateVault",
        summary = "Migrate secrets to vault.",
        tags = { "secrets-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = Boolean.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v1/secrets/migrateVault",
        produces = "*/*"
    )
    
    ResponseEntity<Boolean> migrateVault(
        
    );


    /**
     * GET /api/v1/rationalization/{domainId}/preview/{fragmentId}
     *
     * @param domainId  (required)
     * @param fragmentId  (required)
     * @param isFragmentPreview  (optional, default to false)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "preview",
        tags = { "rationalization-report-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = Object.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/rationalization/{domainId}/preview/{fragmentId}",
        produces = "*/*"
    )
    
    ResponseEntity<Object> preview(
        @Parameter(name = "domainId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("domainId") String domainId,
        @Parameter(name = "fragmentId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("fragmentId") UUID fragmentId,
        @Parameter(name = "isFragmentPreview", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "isFragmentPreview", required = false, defaultValue = "false") Boolean isFragmentPreview
    );


    /**
     * PUT /api/v1/migrationset/{domain}/{id}/promote
     *
     * @param domain  (required)
     * @param id  (required)
     * @param workflowRequestBody  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "promote",
        tags = { "migration-set-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = RationalizationResponseObject.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/api/v1/migrationset/{domain}/{id}/promote",
        produces = "*/*",
        consumes = "application/json"
    )
    
    ResponseEntity<RationalizationResponseObject> promote(
        @Parameter(name = "domain", description = "", required = true, in = ParameterIn.PATH) @PathVariable("domain") String domain,
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") UUID id,
        @Parameter(name = "WorkflowRequestBody", description = "", required = true) @Valid @RequestBody WorkflowRequestBody workflowRequestBody
    );


    /**
     * GET /api/v1/internal/jobs/{tenant}/{domain}/{msId}/{userName}/{implicit}
     *
     * @param tenant  (required)
     * @param domain  (required)
     * @param msId  (required)
     * @param implicit  (required)
     * @param userName  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "runJob",
        tags = { "offline-job-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = String.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/internal/jobs/{tenant}/{domain}/{msId}/{userName}/{implicit}",
        produces = "*/*"
    )
    
    ResponseEntity<String> runJob(
        @Parameter(name = "tenant", description = "", required = true, in = ParameterIn.PATH) @PathVariable("tenant") String tenant,
        @Parameter(name = "domain", description = "", required = true, in = ParameterIn.PATH) @PathVariable("domain") String domain,
        @Parameter(name = "msId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("msId") UUID msId,
        @Parameter(name = "implicit", description = "", required = true, in = ParameterIn.PATH) @PathVariable("implicit") Boolean implicit,
        @Parameter(name = "userName", description = "", required = true, in = ParameterIn.PATH) @PathVariable("userName") String userName
    );


    /**
     * PUT /api/v1/internal/jobs/{tenant}/{domain}/{msId}/{implicit}
     *
     * @param tenant  (required)
     * @param domain  (required)
     * @param msId  (required)
     * @param implicit  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "unlockMigrationset",
        tags = { "offline-job-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = String.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/api/v1/internal/jobs/{tenant}/{domain}/{msId}/{implicit}",
        produces = "*/*"
    )
    
    ResponseEntity<String> unlockMigrationset(
        @Parameter(name = "tenant", description = "", required = true, in = ParameterIn.PATH) @PathVariable("tenant") String tenant,
        @Parameter(name = "domain", description = "", required = true, in = ParameterIn.PATH) @PathVariable("domain") String domain,
        @Parameter(name = "msId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("msId") UUID msId,
        @Parameter(name = "implicit", description = "", required = true, in = ParameterIn.PATH) @PathVariable("implicit") Boolean implicit
    );


    /**
     * PUT /api/v1/rationalization/{domainId}/preview/{msId}/{customFragmentId}
     *
     * @param domainId  (required)
     * @param msId  (required)
     * @param customFragmentId  (required)
     * @param customFragmentRequest  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "updateCustomFragment",
        tags = { "rationalization-report-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = RationalizationResponseObject.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/api/v1/rationalization/{domainId}/preview/{msId}/{customFragmentId}",
        produces = "*/*",
        consumes = "application/json"
    )
    
    ResponseEntity<RationalizationResponseObject> updateCustomFragment(
        @Parameter(name = "domainId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("domainId") String domainId,
        @Parameter(name = "msId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("msId") UUID msId,
        @Parameter(name = "customFragmentId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("customFragmentId") UUID customFragmentId,
        @Parameter(name = "CustomFragmentRequest", description = "", required = true) @Valid @RequestBody CustomFragmentRequest customFragmentRequest
    );


    /**
     * PUT /api/v1/rationalization/{domainId}/preview/{fragmentId}
     *
     * @param domainId  (required)
     * @param fragmentId  (required)
     * @param fragmentRequest  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "updateFragment",
        tags = { "rationalization-report-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = Object.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/api/v1/rationalization/{domainId}/preview/{fragmentId}",
        produces = "*/*",
        consumes = "application/json"
    )
    
    ResponseEntity<Object> updateFragment(
        @Parameter(name = "domainId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("domainId") String domainId,
        @Parameter(name = "fragmentId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("fragmentId") UUID fragmentId,
        @Parameter(name = "FragmentRequest", description = "", required = true) @Valid @RequestBody FragmentRequest fragmentRequest
    );


    /**
     * PUT /api/v1/migrationset/{domainId}/{msId}
     *
     * @param domainId  (required)
     * @param msId  (required)
     * @param migrationSetRequest  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "updateMigrationSet",
        tags = { "migration-set-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = RationalizationResponseObject.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/api/v1/migrationset/{domainId}/{msId}",
        produces = "*/*",
        consumes = "application/json"
    )
    
    ResponseEntity<RationalizationResponseObject> updateMigrationSet(
        @Parameter(name = "domainId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("domainId") String domainId,
        @Parameter(name = "msId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("msId") UUID msId,
        @Parameter(name = "MigrationSetRequest", description = "", required = true) @Valid @RequestBody MigrationSetRequest migrationSetRequest
    );


    /**
     * PUT /api/v1/migrationset/{domain}/{msId}/tmpfile
     *
     * @param domain  (required)
     * @param msId  (required)
     * @param migrationType  (optional, default to CONTENT)
     * @param updateRationalizationActivityRequest  (optional)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "updateRationalizationActivity",
        tags = { "migration-set-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = RationalizationResponseObject.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/api/v1/migrationset/{domain}/{msId}/tmpfile",
        produces = "*/*",
        consumes = "application/json"
    )
    
    ResponseEntity<RationalizationResponseObject> updateRationalizationActivity(
        @Parameter(name = "domain", description = "", required = true, in = ParameterIn.PATH) @PathVariable("domain") String domain,
        @Parameter(name = "msId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("msId") UUID msId,
        @Parameter(name = "migrationType", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "migrationType", required = false, defaultValue = "CONTENT") String migrationType,
        @Parameter(name = "UpdateRationalizationActivityRequest", description = "") @Valid @RequestBody(required = false) UpdateRationalizationActivityRequest updateRationalizationActivityRequest
    );


    /**
     * PUT /api/v1/migrationset/{domain}/{msId}/state
     *
     * @param domain  (required)
     * @param msId  (required)
     * @param workflowRequestBody  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "updateRationalizationState",
        tags = { "migration-set-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = RationalizationResponseObject.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/api/v1/migrationset/{domain}/{msId}/state",
        produces = "*/*",
        consumes = "application/json"
    )
    
    ResponseEntity<RationalizationResponseObject> updateRationalizationState(
        @Parameter(name = "domain", description = "", required = true, in = ParameterIn.PATH) @PathVariable("domain") String domain,
        @Parameter(name = "msId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("msId") UUID msId,
        @Parameter(name = "WorkflowRequestBody", description = "", required = true) @Valid @RequestBody WorkflowRequestBody workflowRequestBody
    );


    /**
     * PUT /api/v1/tenants/updateTenant
     *
     * @param createTenantBody  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "updateTenant",
        tags = { "Tenant Admin Controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = DataResponseTenant.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/api/v1/tenants/updateTenant",
        produces = "application/json",
        consumes = "application/json"
    )
    
    ResponseEntity<DataResponseTenant> updateTenant(
        @Parameter(name = "CreateTenantBody", description = "", required = true) @Valid @RequestBody CreateTenantBody createTenantBody
    );


    /**
     * PUT /api/v1/tenants/{tenantId}/schema
     *
     * @param tenantId  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "updateTenantSchema",
        tags = { "Tenant Admin Controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = DataResponseTenant.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/api/v1/tenants/{tenantId}/schema",
        produces = "application/json"
    )
    
    ResponseEntity<DataResponseTenant> updateTenantSchema(
        @Parameter(name = "tenantId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("tenantId") String tenantId
    );


    /**
     * PUT /api/v1/tenants/all/schema
     *
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "updateTenantSchemas",
        tags = { "Tenant Admin Controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ListResponseTenant.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/api/v1/tenants/all/schema",
        produces = "application/json"
    )
    
    ResponseEntity<ListResponseTenant> updateTenantSchemas(
        
    );

}
