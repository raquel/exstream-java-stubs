/*
 * Exstream Design
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.DataResponseFlowContextOutputChannelMappingsResponse;
import org.openapitools.client.model.DataResponseMapStringListOutcome;
import org.openapitools.client.model.Node;
import org.openapitools.client.model.NodeFilterRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class FlowModelControllerApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public FlowModelControllerApi() {
        this(Configuration.getDefaultApiClient());
    }

    public FlowModelControllerApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for listChannelMappings
     * @param domainId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listChannelMappingsCall(String domainId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/flow-models/{domain}/channelmappings"
            .replace("{" + "Domain id" + "}", localVarApiClient.escapeString(domainId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listChannelMappingsValidateBeforeCall(String domainId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'domainId' is set
        if (domainId == null) {
            throw new ApiException("Missing the required parameter 'domainId' when calling listChannelMappings(Async)");
        }

        return listChannelMappingsCall(domainId, _callback);

    }

    /**
     * Internal only. Do not use! Will likely be removed in the next release! Get list of channels and their associated outcome mappings and the referenced full outcome mappings
     * 
     * @param domainId  (required)
     * @return DataResponseFlowContextOutputChannelMappingsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public DataResponseFlowContextOutputChannelMappingsResponse listChannelMappings(String domainId) throws ApiException {
        ApiResponse<DataResponseFlowContextOutputChannelMappingsResponse> localVarResp = listChannelMappingsWithHttpInfo(domainId);
        return localVarResp.getData();
    }

    /**
     * Internal only. Do not use! Will likely be removed in the next release! Get list of channels and their associated outcome mappings and the referenced full outcome mappings
     * 
     * @param domainId  (required)
     * @return ApiResponse&lt;DataResponseFlowContextOutputChannelMappingsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DataResponseFlowContextOutputChannelMappingsResponse> listChannelMappingsWithHttpInfo(String domainId) throws ApiException {
        okhttp3.Call localVarCall = listChannelMappingsValidateBeforeCall(domainId, null);
        Type localVarReturnType = new TypeToken<DataResponseFlowContextOutputChannelMappingsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Internal only. Do not use! Will likely be removed in the next release! Get list of channels and their associated outcome mappings and the referenced full outcome mappings (asynchronously)
     * 
     * @param domainId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listChannelMappingsAsync(String domainId, final ApiCallback<DataResponseFlowContextOutputChannelMappingsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listChannelMappingsValidateBeforeCall(domainId, _callback);
        Type localVarReturnType = new TypeToken<DataResponseFlowContextOutputChannelMappingsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listCommunications
     * @param domainId  (required)
     * @param requestFilter  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listCommunicationsCall(String domainId, NodeFilterRequest requestFilter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/flow-models/{domain}/communications"
            .replace("{" + "Domain id" + "}", localVarApiClient.escapeString(domainId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (requestFilter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("requestFilter", requestFilter));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listCommunicationsValidateBeforeCall(String domainId, NodeFilterRequest requestFilter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'domainId' is set
        if (domainId == null) {
            throw new ApiException("Missing the required parameter 'domainId' when calling listCommunications(Async)");
        }

        // verify the required parameter 'requestFilter' is set
        if (requestFilter == null) {
            throw new ApiException("Missing the required parameter 'requestFilter' when calling listCommunications(Async)");
        }

        return listCommunicationsCall(domainId, requestFilter, _callback);

    }

    /**
     * Get list of flow model communications
     * 
     * @param domainId  (required)
     * @param requestFilter  (required)
     * @return List&lt;Node&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<Node> listCommunications(String domainId, NodeFilterRequest requestFilter) throws ApiException {
        ApiResponse<List<Node>> localVarResp = listCommunicationsWithHttpInfo(domainId, requestFilter);
        return localVarResp.getData();
    }

    /**
     * Get list of flow model communications
     * 
     * @param domainId  (required)
     * @param requestFilter  (required)
     * @return ApiResponse&lt;List&lt;Node&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Node>> listCommunicationsWithHttpInfo(String domainId, NodeFilterRequest requestFilter) throws ApiException {
        okhttp3.Call localVarCall = listCommunicationsValidateBeforeCall(domainId, requestFilter, null);
        Type localVarReturnType = new TypeToken<List<Node>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get list of flow model communications (asynchronously)
     * 
     * @param domainId  (required)
     * @param requestFilter  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listCommunicationsAsync(String domainId, NodeFilterRequest requestFilter, final ApiCallback<List<Node>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listCommunicationsValidateBeforeCall(domainId, requestFilter, _callback);
        Type localVarReturnType = new TypeToken<List<Node>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listMappings
     * @param domainId  (required)
     * @param filterForAMappingSetWithASpecificGivenName  (optional)
     * @param returnMappingAssociatedToGivenChannelName  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> A filter for an outcome mapping or channel name was specified but nothing was found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listMappingsCall(String domainId, String filterForAMappingSetWithASpecificGivenName, String returnMappingAssociatedToGivenChannelName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/flow-models/{domain}/mappings"
            .replace("{" + "Domain id" + "}", localVarApiClient.escapeString(domainId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (filterForAMappingSetWithASpecificGivenName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Filter for a mapping set with a specific given name.", filterForAMappingSetWithASpecificGivenName));
        }

        if (returnMappingAssociatedToGivenChannelName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Return mapping associated to given channel name.", returnMappingAssociatedToGivenChannelName));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listMappingsValidateBeforeCall(String domainId, String filterForAMappingSetWithASpecificGivenName, String returnMappingAssociatedToGivenChannelName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'domainId' is set
        if (domainId == null) {
            throw new ApiException("Missing the required parameter 'domainId' when calling listMappings(Async)");
        }

        return listMappingsCall(domainId, filterForAMappingSetWithASpecificGivenName, returnMappingAssociatedToGivenChannelName, _callback);

    }

    /**
     * Get list of outcome mappings
     * 
     * @param domainId  (required)
     * @param filterForAMappingSetWithASpecificGivenName  (optional)
     * @param returnMappingAssociatedToGivenChannelName  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> A filter for an outcome mapping or channel name was specified but nothing was found. </td><td>  -  </td></tr>
     </table>
     */
    public void listMappings(String domainId, String filterForAMappingSetWithASpecificGivenName, String returnMappingAssociatedToGivenChannelName) throws ApiException {
        listMappingsWithHttpInfo(domainId, filterForAMappingSetWithASpecificGivenName, returnMappingAssociatedToGivenChannelName);
    }

    /**
     * Get list of outcome mappings
     * 
     * @param domainId  (required)
     * @param filterForAMappingSetWithASpecificGivenName  (optional)
     * @param returnMappingAssociatedToGivenChannelName  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> A filter for an outcome mapping or channel name was specified but nothing was found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> listMappingsWithHttpInfo(String domainId, String filterForAMappingSetWithASpecificGivenName, String returnMappingAssociatedToGivenChannelName) throws ApiException {
        okhttp3.Call localVarCall = listMappingsValidateBeforeCall(domainId, filterForAMappingSetWithASpecificGivenName, returnMappingAssociatedToGivenChannelName, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get list of outcome mappings (asynchronously)
     * 
     * @param domainId  (required)
     * @param filterForAMappingSetWithASpecificGivenName  (optional)
     * @param returnMappingAssociatedToGivenChannelName  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> A filter for an outcome mapping or channel name was specified but nothing was found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listMappingsAsync(String domainId, String filterForAMappingSetWithASpecificGivenName, String returnMappingAssociatedToGivenChannelName, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = listMappingsValidateBeforeCall(domainId, filterForAMappingSetWithASpecificGivenName, returnMappingAssociatedToGivenChannelName, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for listNodes
     * @param domainId  (required)
     * @param requestFilter  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listNodesCall(String domainId, NodeFilterRequest requestFilter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/flow-models/{domain}/nodes"
            .replace("{" + "Domain id" + "}", localVarApiClient.escapeString(domainId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (requestFilter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("requestFilter", requestFilter));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listNodesValidateBeforeCall(String domainId, NodeFilterRequest requestFilter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'domainId' is set
        if (domainId == null) {
            throw new ApiException("Missing the required parameter 'domainId' when calling listNodes(Async)");
        }

        // verify the required parameter 'requestFilter' is set
        if (requestFilter == null) {
            throw new ApiException("Missing the required parameter 'requestFilter' when calling listNodes(Async)");
        }

        return listNodesCall(domainId, requestFilter, _callback);

    }

    /**
     * Get list of flow model nodes
     * 
     * @param domainId  (required)
     * @param requestFilter  (required)
     * @return List&lt;Node&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<Node> listNodes(String domainId, NodeFilterRequest requestFilter) throws ApiException {
        ApiResponse<List<Node>> localVarResp = listNodesWithHttpInfo(domainId, requestFilter);
        return localVarResp.getData();
    }

    /**
     * Get list of flow model nodes
     * 
     * @param domainId  (required)
     * @param requestFilter  (required)
     * @return ApiResponse&lt;List&lt;Node&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Node>> listNodesWithHttpInfo(String domainId, NodeFilterRequest requestFilter) throws ApiException {
        okhttp3.Call localVarCall = listNodesValidateBeforeCall(domainId, requestFilter, null);
        Type localVarReturnType = new TypeToken<List<Node>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get list of flow model nodes (asynchronously)
     * 
     * @param domainId  (required)
     * @param requestFilter  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listNodesAsync(String domainId, NodeFilterRequest requestFilter, final ApiCallback<List<Node>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listNodesValidateBeforeCall(domainId, requestFilter, _callback);
        Type localVarReturnType = new TypeToken<List<Node>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
