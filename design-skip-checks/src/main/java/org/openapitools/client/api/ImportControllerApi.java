/*
 * Exstream Design
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.DataResponseImportResponse;
import java.io.File;
import org.openapitools.client.model.ListResponseImportHistory;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ImportControllerApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ImportControllerApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ImportControllerApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for generateGraph
     * @param packagetype  (required)
     * @param nodeFormat  (optional)
     * @param expandSystemResources  (optional)
     * @param exportPackage The zip of the export to import (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call generateGraphCall(String packagetype, String nodeFormat, Boolean expandSystemResources, File exportPackage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/import/resource-graph/{packagetype}"
            .replace("{" + "packagetype" + "}", localVarApiClient.escapeString(packagetype.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (exportPackage != null) {
            localVarFormParams.put("exportPackage", exportPackage);
        }

        if (nodeFormat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("nodeFormat", nodeFormat));
        }

        if (expandSystemResources != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("expandSystemResources", expandSystemResources));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call generateGraphValidateBeforeCall(String packagetype, String nodeFormat, Boolean expandSystemResources, File exportPackage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'packagetype' is set
        if (packagetype == null) {
            throw new ApiException("Missing the required parameter 'packagetype' when calling generateGraph(Async)");
        }

        return generateGraphCall(packagetype, nodeFormat, expandSystemResources, exportPackage, _callback);

    }

    /**
     * 
     * 
     * @param packagetype  (required)
     * @param nodeFormat  (optional)
     * @param expandSystemResources  (optional)
     * @param exportPackage The zip of the export to import (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void generateGraph(String packagetype, String nodeFormat, Boolean expandSystemResources, File exportPackage) throws ApiException {
        generateGraphWithHttpInfo(packagetype, nodeFormat, expandSystemResources, exportPackage);
    }

    /**
     * 
     * 
     * @param packagetype  (required)
     * @param nodeFormat  (optional)
     * @param expandSystemResources  (optional)
     * @param exportPackage The zip of the export to import (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> generateGraphWithHttpInfo(String packagetype, String nodeFormat, Boolean expandSystemResources, File exportPackage) throws ApiException {
        okhttp3.Call localVarCall = generateGraphValidateBeforeCall(packagetype, nodeFormat, expandSystemResources, exportPackage, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param packagetype  (required)
     * @param nodeFormat  (optional)
     * @param expandSystemResources  (optional)
     * @param exportPackage The zip of the export to import (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call generateGraphAsync(String packagetype, String nodeFormat, Boolean expandSystemResources, File exportPackage, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = generateGraphValidateBeforeCall(packagetype, nodeFormat, expandSystemResources, exportPackage, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getImportHistory
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getImportHistoryCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/import/logs";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getImportHistoryValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getImportHistoryCall(_callback);

    }

    /**
     * 
     * 
     * @return ListResponseImportHistory
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ListResponseImportHistory getImportHistory() throws ApiException {
        ApiResponse<ListResponseImportHistory> localVarResp = getImportHistoryWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @return ApiResponse&lt;ListResponseImportHistory&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListResponseImportHistory> getImportHistoryWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getImportHistoryValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<ListResponseImportHistory>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getImportHistoryAsync(final ApiCallback<ListResponseImportHistory> _callback) throws ApiException {

        okhttp3.Call localVarCall = getImportHistoryValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<ListResponseImportHistory>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for importPackage
     * @param packagetype  (required)
     * @param domain  (required)
     * @param commit Set to false to do a dry run (optional, default to false)
     * @param previousExportPackage The id of a previously uploaded export package (optional)
     * @param exportPackage The zip of the export to import (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call importPackageCall(String packagetype, String domain, Boolean commit, String previousExportPackage, File exportPackage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/import/{packagetype}/{domain}"
            .replace("{" + "packagetype" + "}", localVarApiClient.escapeString(packagetype.toString()))
            .replace("{" + "domain" + "}", localVarApiClient.escapeString(domain.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (exportPackage != null) {
            localVarFormParams.put("exportPackage", exportPackage);
        }

        if (commit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("commit", commit));
        }

        if (previousExportPackage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("previousExportPackage", previousExportPackage));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call importPackageValidateBeforeCall(String packagetype, String domain, Boolean commit, String previousExportPackage, File exportPackage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'packagetype' is set
        if (packagetype == null) {
            throw new ApiException("Missing the required parameter 'packagetype' when calling importPackage(Async)");
        }

        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling importPackage(Async)");
        }

        return importPackageCall(packagetype, domain, commit, previousExportPackage, exportPackage, _callback);

    }

    /**
     * 
     * 
     * @param packagetype  (required)
     * @param domain  (required)
     * @param commit Set to false to do a dry run (optional, default to false)
     * @param previousExportPackage The id of a previously uploaded export package (optional)
     * @param exportPackage The zip of the export to import (optional)
     * @return DataResponseImportResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public DataResponseImportResponse importPackage(String packagetype, String domain, Boolean commit, String previousExportPackage, File exportPackage) throws ApiException {
        ApiResponse<DataResponseImportResponse> localVarResp = importPackageWithHttpInfo(packagetype, domain, commit, previousExportPackage, exportPackage);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param packagetype  (required)
     * @param domain  (required)
     * @param commit Set to false to do a dry run (optional, default to false)
     * @param previousExportPackage The id of a previously uploaded export package (optional)
     * @param exportPackage The zip of the export to import (optional)
     * @return ApiResponse&lt;DataResponseImportResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DataResponseImportResponse> importPackageWithHttpInfo(String packagetype, String domain, Boolean commit, String previousExportPackage, File exportPackage) throws ApiException {
        okhttp3.Call localVarCall = importPackageValidateBeforeCall(packagetype, domain, commit, previousExportPackage, exportPackage, null);
        Type localVarReturnType = new TypeToken<DataResponseImportResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param packagetype  (required)
     * @param domain  (required)
     * @param commit Set to false to do a dry run (optional, default to false)
     * @param previousExportPackage The id of a previously uploaded export package (optional)
     * @param exportPackage The zip of the export to import (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call importPackageAsync(String packagetype, String domain, Boolean commit, String previousExportPackage, File exportPackage, final ApiCallback<DataResponseImportResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = importPackageValidateBeforeCall(packagetype, domain, commit, previousExportPackage, exportPackage, _callback);
        Type localVarReturnType = new TypeToken<DataResponseImportResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
