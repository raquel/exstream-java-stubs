/*
 * Exstream Design
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.io.File;
import org.openapitools.client.model.ListResponseResourceVersion;
import org.openapitools.client.model.PackageOptions;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PackageControllerApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PackageControllerApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PackageControllerApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getPackage
     * @param domain  (required)
     * @param id  (required)
     * @param version  (optional)
     * @param latestVersions  (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPackageCall(String domain, UUID id, Integer version, Boolean latestVersions, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/package/{domain}/root/{id}"
            .replace("{" + "domain" + "}", localVarApiClient.escapeString(domain.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("version", version));
        }

        if (latestVersions != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("latestVersions", latestVersions));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPackageValidateBeforeCall(String domain, UUID id, Integer version, Boolean latestVersions, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling getPackage(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getPackage(Async)");
        }

        return getPackageCall(domain, id, version, latestVersions, _callback);

    }

    /**
     * 
     * 
     * @param domain  (required)
     * @param id  (required)
     * @param version  (optional)
     * @param latestVersions  (optional, default to false)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void getPackage(String domain, UUID id, Integer version, Boolean latestVersions) throws ApiException {
        getPackageWithHttpInfo(domain, id, version, latestVersions);
    }

    /**
     * 
     * 
     * @param domain  (required)
     * @param id  (required)
     * @param version  (optional)
     * @param latestVersions  (optional, default to false)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getPackageWithHttpInfo(String domain, UUID id, Integer version, Boolean latestVersions) throws ApiException {
        okhttp3.Call localVarCall = getPackageValidateBeforeCall(domain, id, version, latestVersions, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param domain  (required)
     * @param id  (required)
     * @param version  (optional)
     * @param latestVersions  (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPackageAsync(String domain, UUID id, Integer version, Boolean latestVersions, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPackageValidateBeforeCall(domain, id, version, latestVersions, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPackageAllResourceType
     * @param domain  (required)
     * @param resourceType  (required)
     * @param latestVersions  (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPackageAllResourceTypeCall(String domain, String resourceType, Boolean latestVersions, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/package/{domain}/type"
            .replace("{" + "domain" + "}", localVarApiClient.escapeString(domain.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (resourceType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("resourceType", resourceType));
        }

        if (latestVersions != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("latestVersions", latestVersions));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPackageAllResourceTypeValidateBeforeCall(String domain, String resourceType, Boolean latestVersions, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling getPackageAllResourceType(Async)");
        }

        // verify the required parameter 'resourceType' is set
        if (resourceType == null) {
            throw new ApiException("Missing the required parameter 'resourceType' when calling getPackageAllResourceType(Async)");
        }

        return getPackageAllResourceTypeCall(domain, resourceType, latestVersions, _callback);

    }

    /**
     * 
     * 
     * @param domain  (required)
     * @param resourceType  (required)
     * @param latestVersions  (optional, default to false)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void getPackageAllResourceType(String domain, String resourceType, Boolean latestVersions) throws ApiException {
        getPackageAllResourceTypeWithHttpInfo(domain, resourceType, latestVersions);
    }

    /**
     * 
     * 
     * @param domain  (required)
     * @param resourceType  (required)
     * @param latestVersions  (optional, default to false)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getPackageAllResourceTypeWithHttpInfo(String domain, String resourceType, Boolean latestVersions) throws ApiException {
        okhttp3.Call localVarCall = getPackageAllResourceTypeValidateBeforeCall(domain, resourceType, latestVersions, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param domain  (required)
     * @param resourceType  (required)
     * @param latestVersions  (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPackageAllResourceTypeAsync(String domain, String resourceType, Boolean latestVersions, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPackageAllResourceTypeValidateBeforeCall(domain, resourceType, latestVersions, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPackageWithPayload
     * @param domain  (required)
     * @param id  (required)
     * @param version  (optional)
     * @param latestVersions  (optional, default to false)
     * @param packageOptions  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPackageWithPayloadCall(String domain, UUID id, Integer version, Boolean latestVersions, PackageOptions packageOptions, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = packageOptions;

        // create path and map variables
        String localVarPath = "/api/v1/package/{domain}/root/{id}"
            .replace("{" + "domain" + "}", localVarApiClient.escapeString(domain.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("version", version));
        }

        if (latestVersions != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("latestVersions", latestVersions));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPackageWithPayloadValidateBeforeCall(String domain, UUID id, Integer version, Boolean latestVersions, PackageOptions packageOptions, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling getPackageWithPayload(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getPackageWithPayload(Async)");
        }

        return getPackageWithPayloadCall(domain, id, version, latestVersions, packageOptions, _callback);

    }

    /**
     * 
     * 
     * @param domain  (required)
     * @param id  (required)
     * @param version  (optional)
     * @param latestVersions  (optional, default to false)
     * @param packageOptions  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void getPackageWithPayload(String domain, UUID id, Integer version, Boolean latestVersions, PackageOptions packageOptions) throws ApiException {
        getPackageWithPayloadWithHttpInfo(domain, id, version, latestVersions, packageOptions);
    }

    /**
     * 
     * 
     * @param domain  (required)
     * @param id  (required)
     * @param version  (optional)
     * @param latestVersions  (optional, default to false)
     * @param packageOptions  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getPackageWithPayloadWithHttpInfo(String domain, UUID id, Integer version, Boolean latestVersions, PackageOptions packageOptions) throws ApiException {
        okhttp3.Call localVarCall = getPackageWithPayloadValidateBeforeCall(domain, id, version, latestVersions, packageOptions, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param domain  (required)
     * @param id  (required)
     * @param version  (optional)
     * @param latestVersions  (optional, default to false)
     * @param packageOptions  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPackageWithPayloadAsync(String domain, UUID id, Integer version, Boolean latestVersions, PackageOptions packageOptions, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPackageWithPayloadValidateBeforeCall(domain, id, version, latestVersions, packageOptions, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for packageDeploymentUpload
     * @param domain  (required)
     * @param resourcePackId  (optional)
     * @param templateId  (optional)
     * @param packageId  (optional)
     * @param rpFileName  (optional)
     * @param packageFileName  (optional)
     * @param templateFileName  (optional)
     * @param sampleFile1 Accepts any number of sample files with name matching pattern: ^sampleFile_.+ (optional)
     * @param sampleFile2 Accepts any number of sample files with name matching pattern: ^sampleFile_.+ (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call packageDeploymentUploadCall(String domain, List<UUID> resourcePackId, UUID templateId, UUID packageId, File rpFileName, File packageFileName, File templateFileName, File sampleFile1, File sampleFile2, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/package/{domain}/deployment"
            .replace("{" + "domain" + "}", localVarApiClient.escapeString(domain.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (rpFileName != null) {
            localVarFormParams.put("rpFileName", rpFileName);
        }

        if (packageFileName != null) {
            localVarFormParams.put("packageFileName", packageFileName);
        }

        if (templateFileName != null) {
            localVarFormParams.put("templateFileName", templateFileName);
        }

        if (sampleFile1 != null) {
            localVarFormParams.put("sampleFile_1", sampleFile1);
        }

        if (sampleFile2 != null) {
            localVarFormParams.put("sampleFile_2", sampleFile2);
        }

        if (resourcePackId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "resourcePackId", resourcePackId));
        }

        if (templateId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("templateId", templateId));
        }

        if (packageId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("packageId", packageId));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call packageDeploymentUploadValidateBeforeCall(String domain, List<UUID> resourcePackId, UUID templateId, UUID packageId, File rpFileName, File packageFileName, File templateFileName, File sampleFile1, File sampleFile2, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling packageDeploymentUpload(Async)");
        }

        return packageDeploymentUploadCall(domain, resourcePackId, templateId, packageId, rpFileName, packageFileName, templateFileName, sampleFile1, sampleFile2, _callback);

    }

    /**
     * 
     * Handle a multi-part form request to deploy packages and their associated resources
     * @param domain  (required)
     * @param resourcePackId  (optional)
     * @param templateId  (optional)
     * @param packageId  (optional)
     * @param rpFileName  (optional)
     * @param packageFileName  (optional)
     * @param templateFileName  (optional)
     * @param sampleFile1 Accepts any number of sample files with name matching pattern: ^sampleFile_.+ (optional)
     * @param sampleFile2 Accepts any number of sample files with name matching pattern: ^sampleFile_.+ (optional)
     * @return ListResponseResourceVersion
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ListResponseResourceVersion packageDeploymentUpload(String domain, List<UUID> resourcePackId, UUID templateId, UUID packageId, File rpFileName, File packageFileName, File templateFileName, File sampleFile1, File sampleFile2) throws ApiException {
        ApiResponse<ListResponseResourceVersion> localVarResp = packageDeploymentUploadWithHttpInfo(domain, resourcePackId, templateId, packageId, rpFileName, packageFileName, templateFileName, sampleFile1, sampleFile2);
        return localVarResp.getData();
    }

    /**
     * 
     * Handle a multi-part form request to deploy packages and their associated resources
     * @param domain  (required)
     * @param resourcePackId  (optional)
     * @param templateId  (optional)
     * @param packageId  (optional)
     * @param rpFileName  (optional)
     * @param packageFileName  (optional)
     * @param templateFileName  (optional)
     * @param sampleFile1 Accepts any number of sample files with name matching pattern: ^sampleFile_.+ (optional)
     * @param sampleFile2 Accepts any number of sample files with name matching pattern: ^sampleFile_.+ (optional)
     * @return ApiResponse&lt;ListResponseResourceVersion&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListResponseResourceVersion> packageDeploymentUploadWithHttpInfo(String domain, List<UUID> resourcePackId, UUID templateId, UUID packageId, File rpFileName, File packageFileName, File templateFileName, File sampleFile1, File sampleFile2) throws ApiException {
        okhttp3.Call localVarCall = packageDeploymentUploadValidateBeforeCall(domain, resourcePackId, templateId, packageId, rpFileName, packageFileName, templateFileName, sampleFile1, sampleFile2, null);
        Type localVarReturnType = new TypeToken<ListResponseResourceVersion>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Handle a multi-part form request to deploy packages and their associated resources
     * @param domain  (required)
     * @param resourcePackId  (optional)
     * @param templateId  (optional)
     * @param packageId  (optional)
     * @param rpFileName  (optional)
     * @param packageFileName  (optional)
     * @param templateFileName  (optional)
     * @param sampleFile1 Accepts any number of sample files with name matching pattern: ^sampleFile_.+ (optional)
     * @param sampleFile2 Accepts any number of sample files with name matching pattern: ^sampleFile_.+ (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call packageDeploymentUploadAsync(String domain, List<UUID> resourcePackId, UUID templateId, UUID packageId, File rpFileName, File packageFileName, File templateFileName, File sampleFile1, File sampleFile2, final ApiCallback<ListResponseResourceVersion> _callback) throws ApiException {

        okhttp3.Call localVarCall = packageDeploymentUploadValidateBeforeCall(domain, resourcePackId, templateId, packageId, rpFileName, packageFileName, templateFileName, sampleFile1, sampleFile2, _callback);
        Type localVarReturnType = new TypeToken<ListResponseResourceVersion>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for subPackageDeploymentUpload
     * @param domain  (required)
     * @param packageId  (optional)
     * @param parentPackageId  (optional)
     * @param rpFileName  (optional)
     * @param packageFileName  (optional)
     * @param templateFileName  (optional)
     * @param sampleFile1 Accepts any number of sample files with name matching pattern: ^sampleFile_.+ (optional)
     * @param sampleFile2 Accepts any number of sample files with name matching pattern: ^sampleFile_.+ (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call subPackageDeploymentUploadCall(String domain, UUID packageId, UUID parentPackageId, File rpFileName, File packageFileName, File templateFileName, File sampleFile1, File sampleFile2, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/package/{domain}/deploySubPub"
            .replace("{" + "domain" + "}", localVarApiClient.escapeString(domain.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (rpFileName != null) {
            localVarFormParams.put("rpFileName", rpFileName);
        }

        if (packageFileName != null) {
            localVarFormParams.put("packageFileName", packageFileName);
        }

        if (templateFileName != null) {
            localVarFormParams.put("templateFileName", templateFileName);
        }

        if (sampleFile1 != null) {
            localVarFormParams.put("sampleFile_1", sampleFile1);
        }

        if (sampleFile2 != null) {
            localVarFormParams.put("sampleFile_2", sampleFile2);
        }

        if (packageId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("packageId", packageId));
        }

        if (parentPackageId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("parentPackageId", parentPackageId));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call subPackageDeploymentUploadValidateBeforeCall(String domain, UUID packageId, UUID parentPackageId, File rpFileName, File packageFileName, File templateFileName, File sampleFile1, File sampleFile2, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling subPackageDeploymentUpload(Async)");
        }

        return subPackageDeploymentUploadCall(domain, packageId, parentPackageId, rpFileName, packageFileName, templateFileName, sampleFile1, sampleFile2, _callback);

    }

    /**
     * 
     * Handle a multi-part form request to deploy packages and their associated resources
     * @param domain  (required)
     * @param packageId  (optional)
     * @param parentPackageId  (optional)
     * @param rpFileName  (optional)
     * @param packageFileName  (optional)
     * @param templateFileName  (optional)
     * @param sampleFile1 Accepts any number of sample files with name matching pattern: ^sampleFile_.+ (optional)
     * @param sampleFile2 Accepts any number of sample files with name matching pattern: ^sampleFile_.+ (optional)
     * @return ListResponseResourceVersion
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ListResponseResourceVersion subPackageDeploymentUpload(String domain, UUID packageId, UUID parentPackageId, File rpFileName, File packageFileName, File templateFileName, File sampleFile1, File sampleFile2) throws ApiException {
        ApiResponse<ListResponseResourceVersion> localVarResp = subPackageDeploymentUploadWithHttpInfo(domain, packageId, parentPackageId, rpFileName, packageFileName, templateFileName, sampleFile1, sampleFile2);
        return localVarResp.getData();
    }

    /**
     * 
     * Handle a multi-part form request to deploy packages and their associated resources
     * @param domain  (required)
     * @param packageId  (optional)
     * @param parentPackageId  (optional)
     * @param rpFileName  (optional)
     * @param packageFileName  (optional)
     * @param templateFileName  (optional)
     * @param sampleFile1 Accepts any number of sample files with name matching pattern: ^sampleFile_.+ (optional)
     * @param sampleFile2 Accepts any number of sample files with name matching pattern: ^sampleFile_.+ (optional)
     * @return ApiResponse&lt;ListResponseResourceVersion&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListResponseResourceVersion> subPackageDeploymentUploadWithHttpInfo(String domain, UUID packageId, UUID parentPackageId, File rpFileName, File packageFileName, File templateFileName, File sampleFile1, File sampleFile2) throws ApiException {
        okhttp3.Call localVarCall = subPackageDeploymentUploadValidateBeforeCall(domain, packageId, parentPackageId, rpFileName, packageFileName, templateFileName, sampleFile1, sampleFile2, null);
        Type localVarReturnType = new TypeToken<ListResponseResourceVersion>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Handle a multi-part form request to deploy packages and their associated resources
     * @param domain  (required)
     * @param packageId  (optional)
     * @param parentPackageId  (optional)
     * @param rpFileName  (optional)
     * @param packageFileName  (optional)
     * @param templateFileName  (optional)
     * @param sampleFile1 Accepts any number of sample files with name matching pattern: ^sampleFile_.+ (optional)
     * @param sampleFile2 Accepts any number of sample files with name matching pattern: ^sampleFile_.+ (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call subPackageDeploymentUploadAsync(String domain, UUID packageId, UUID parentPackageId, File rpFileName, File packageFileName, File templateFileName, File sampleFile1, File sampleFile2, final ApiCallback<ListResponseResourceVersion> _callback) throws ApiException {

        okhttp3.Call localVarCall = subPackageDeploymentUploadValidateBeforeCall(domain, packageId, parentPackageId, rpFileName, packageFileName, templateFileName, sampleFile1, sampleFile2, _callback);
        Type localVarReturnType = new TypeToken<ListResponseResourceVersion>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
