/*
 * Exstream Design
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.DataResponseBulkFavoriteResponse;
import org.openapitools.client.model.DataResponseBulkUnfavoriteResponse;
import org.openapitools.client.model.FavoriteResourcesInput;
import org.openapitools.client.model.SavedResource;
import org.openapitools.client.model.SavedResourceInput;
import org.openapitools.client.model.UserProfileResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class UserProfileControllerApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public UserProfileControllerApi() {
        this(Configuration.getDefaultApiClient());
    }

    public UserProfileControllerApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for addFavorite
     * @param domain  (required)
     * @param savedResourceInput  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addFavoriteCall(String domain, SavedResourceInput savedResourceInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = savedResourceInput;

        // create path and map variables
        String localVarPath = "/api/v1/user-profiles/{domain}/favorite"
            .replace("{" + "domain" + "}", localVarApiClient.escapeString(domain.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addFavoriteValidateBeforeCall(String domain, SavedResourceInput savedResourceInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling addFavorite(Async)");
        }

        // verify the required parameter 'savedResourceInput' is set
        if (savedResourceInput == null) {
            throw new ApiException("Missing the required parameter 'savedResourceInput' when calling addFavorite(Async)");
        }

        return addFavoriteCall(domain, savedResourceInput, _callback);

    }

    /**
     * 
     * 
     * @param domain  (required)
     * @param savedResourceInput  (required)
     * @return SavedResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public SavedResource addFavorite(String domain, SavedResourceInput savedResourceInput) throws ApiException {
        ApiResponse<SavedResource> localVarResp = addFavoriteWithHttpInfo(domain, savedResourceInput);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param domain  (required)
     * @param savedResourceInput  (required)
     * @return ApiResponse&lt;SavedResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SavedResource> addFavoriteWithHttpInfo(String domain, SavedResourceInput savedResourceInput) throws ApiException {
        okhttp3.Call localVarCall = addFavoriteValidateBeforeCall(domain, savedResourceInput, null);
        Type localVarReturnType = new TypeToken<SavedResource>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param domain  (required)
     * @param savedResourceInput  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addFavoriteAsync(String domain, SavedResourceInput savedResourceInput, final ApiCallback<SavedResource> _callback) throws ApiException {

        okhttp3.Call localVarCall = addFavoriteValidateBeforeCall(domain, savedResourceInput, _callback);
        Type localVarReturnType = new TypeToken<SavedResource>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for addFavorites
     * @param domain  (required)
     * @param favoriteResourcesInput  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addFavoritesCall(String domain, FavoriteResourcesInput favoriteResourcesInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = favoriteResourcesInput;

        // create path and map variables
        String localVarPath = "/api/v1/user-profiles/{domain}/favorites"
            .replace("{" + "domain" + "}", localVarApiClient.escapeString(domain.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addFavoritesValidateBeforeCall(String domain, FavoriteResourcesInput favoriteResourcesInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling addFavorites(Async)");
        }

        // verify the required parameter 'favoriteResourcesInput' is set
        if (favoriteResourcesInput == null) {
            throw new ApiException("Missing the required parameter 'favoriteResourcesInput' when calling addFavorites(Async)");
        }

        return addFavoritesCall(domain, favoriteResourcesInput, _callback);

    }

    /**
     * 
     * Marks the given list of resources as favorite for the current user.
     * @param domain  (required)
     * @param favoriteResourcesInput  (required)
     * @return DataResponseBulkFavoriteResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public DataResponseBulkFavoriteResponse addFavorites(String domain, FavoriteResourcesInput favoriteResourcesInput) throws ApiException {
        ApiResponse<DataResponseBulkFavoriteResponse> localVarResp = addFavoritesWithHttpInfo(domain, favoriteResourcesInput);
        return localVarResp.getData();
    }

    /**
     * 
     * Marks the given list of resources as favorite for the current user.
     * @param domain  (required)
     * @param favoriteResourcesInput  (required)
     * @return ApiResponse&lt;DataResponseBulkFavoriteResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DataResponseBulkFavoriteResponse> addFavoritesWithHttpInfo(String domain, FavoriteResourcesInput favoriteResourcesInput) throws ApiException {
        okhttp3.Call localVarCall = addFavoritesValidateBeforeCall(domain, favoriteResourcesInput, null);
        Type localVarReturnType = new TypeToken<DataResponseBulkFavoriteResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Marks the given list of resources as favorite for the current user.
     * @param domain  (required)
     * @param favoriteResourcesInput  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addFavoritesAsync(String domain, FavoriteResourcesInput favoriteResourcesInput, final ApiCallback<DataResponseBulkFavoriteResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = addFavoritesValidateBeforeCall(domain, favoriteResourcesInput, _callback);
        Type localVarReturnType = new TypeToken<DataResponseBulkFavoriteResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for addRecent
     * @param domain  (required)
     * @param savedResourceInput  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addRecentCall(String domain, SavedResourceInput savedResourceInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = savedResourceInput;

        // create path and map variables
        String localVarPath = "/api/v1/user-profiles/{domain}/recent"
            .replace("{" + "domain" + "}", localVarApiClient.escapeString(domain.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addRecentValidateBeforeCall(String domain, SavedResourceInput savedResourceInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling addRecent(Async)");
        }

        // verify the required parameter 'savedResourceInput' is set
        if (savedResourceInput == null) {
            throw new ApiException("Missing the required parameter 'savedResourceInput' when calling addRecent(Async)");
        }

        return addRecentCall(domain, savedResourceInput, _callback);

    }

    /**
     * 
     * 
     * @param domain  (required)
     * @param savedResourceInput  (required)
     * @return SavedResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public SavedResource addRecent(String domain, SavedResourceInput savedResourceInput) throws ApiException {
        ApiResponse<SavedResource> localVarResp = addRecentWithHttpInfo(domain, savedResourceInput);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param domain  (required)
     * @param savedResourceInput  (required)
     * @return ApiResponse&lt;SavedResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SavedResource> addRecentWithHttpInfo(String domain, SavedResourceInput savedResourceInput) throws ApiException {
        okhttp3.Call localVarCall = addRecentValidateBeforeCall(domain, savedResourceInput, null);
        Type localVarReturnType = new TypeToken<SavedResource>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param domain  (required)
     * @param savedResourceInput  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addRecentAsync(String domain, SavedResourceInput savedResourceInput, final ApiCallback<SavedResource> _callback) throws ApiException {

        okhttp3.Call localVarCall = addRecentValidateBeforeCall(domain, savedResourceInput, _callback);
        Type localVarReturnType = new TypeToken<SavedResource>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteFavorite
     * @param domain  (required)
     * @param savedResourceInput  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteFavoriteCall(String domain, SavedResourceInput savedResourceInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = savedResourceInput;

        // create path and map variables
        String localVarPath = "/api/v1/user-profiles/{domain}/favorite"
            .replace("{" + "domain" + "}", localVarApiClient.escapeString(domain.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteFavoriteValidateBeforeCall(String domain, SavedResourceInput savedResourceInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling deleteFavorite(Async)");
        }

        // verify the required parameter 'savedResourceInput' is set
        if (savedResourceInput == null) {
            throw new ApiException("Missing the required parameter 'savedResourceInput' when calling deleteFavorite(Async)");
        }

        return deleteFavoriteCall(domain, savedResourceInput, _callback);

    }

    /**
     * 
     * 
     * @param domain  (required)
     * @param savedResourceInput  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void deleteFavorite(String domain, SavedResourceInput savedResourceInput) throws ApiException {
        deleteFavoriteWithHttpInfo(domain, savedResourceInput);
    }

    /**
     * 
     * 
     * @param domain  (required)
     * @param savedResourceInput  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteFavoriteWithHttpInfo(String domain, SavedResourceInput savedResourceInput) throws ApiException {
        okhttp3.Call localVarCall = deleteFavoriteValidateBeforeCall(domain, savedResourceInput, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param domain  (required)
     * @param savedResourceInput  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteFavoriteAsync(String domain, SavedResourceInput savedResourceInput, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteFavoriteValidateBeforeCall(domain, savedResourceInput, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteFavorites
     * @param domain  (required)
     * @param favoriteResourcesInput  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteFavoritesCall(String domain, FavoriteResourcesInput favoriteResourcesInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = favoriteResourcesInput;

        // create path and map variables
        String localVarPath = "/api/v1/user-profiles/{domain}/favorites"
            .replace("{" + "domain" + "}", localVarApiClient.escapeString(domain.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteFavoritesValidateBeforeCall(String domain, FavoriteResourcesInput favoriteResourcesInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling deleteFavorites(Async)");
        }

        // verify the required parameter 'favoriteResourcesInput' is set
        if (favoriteResourcesInput == null) {
            throw new ApiException("Missing the required parameter 'favoriteResourcesInput' when calling deleteFavorites(Async)");
        }

        return deleteFavoritesCall(domain, favoriteResourcesInput, _callback);

    }

    /**
     * 
     * Removes the given list of resources from the favorites.
     * @param domain  (required)
     * @param favoriteResourcesInput  (required)
     * @return DataResponseBulkUnfavoriteResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public DataResponseBulkUnfavoriteResponse deleteFavorites(String domain, FavoriteResourcesInput favoriteResourcesInput) throws ApiException {
        ApiResponse<DataResponseBulkUnfavoriteResponse> localVarResp = deleteFavoritesWithHttpInfo(domain, favoriteResourcesInput);
        return localVarResp.getData();
    }

    /**
     * 
     * Removes the given list of resources from the favorites.
     * @param domain  (required)
     * @param favoriteResourcesInput  (required)
     * @return ApiResponse&lt;DataResponseBulkUnfavoriteResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DataResponseBulkUnfavoriteResponse> deleteFavoritesWithHttpInfo(String domain, FavoriteResourcesInput favoriteResourcesInput) throws ApiException {
        okhttp3.Call localVarCall = deleteFavoritesValidateBeforeCall(domain, favoriteResourcesInput, null);
        Type localVarReturnType = new TypeToken<DataResponseBulkUnfavoriteResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Removes the given list of resources from the favorites.
     * @param domain  (required)
     * @param favoriteResourcesInput  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteFavoritesAsync(String domain, FavoriteResourcesInput favoriteResourcesInput, final ApiCallback<DataResponseBulkUnfavoriteResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteFavoritesValidateBeforeCall(domain, favoriteResourcesInput, _callback);
        Type localVarReturnType = new TypeToken<DataResponseBulkUnfavoriteResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getUserProfile
     * @param domain  (required)
     * @param fetchSavedResources  (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUserProfileCall(String domain, Boolean fetchSavedResources, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/user-profiles/{domain}"
            .replace("{" + "domain" + "}", localVarApiClient.escapeString(domain.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fetchSavedResources != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fetchSavedResources", fetchSavedResources));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUserProfileValidateBeforeCall(String domain, Boolean fetchSavedResources, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling getUserProfile(Async)");
        }

        return getUserProfileCall(domain, fetchSavedResources, _callback);

    }

    /**
     * 
     * 
     * @param domain  (required)
     * @param fetchSavedResources  (optional, default to false)
     * @return UserProfileResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public UserProfileResponse getUserProfile(String domain, Boolean fetchSavedResources) throws ApiException {
        ApiResponse<UserProfileResponse> localVarResp = getUserProfileWithHttpInfo(domain, fetchSavedResources);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param domain  (required)
     * @param fetchSavedResources  (optional, default to false)
     * @return ApiResponse&lt;UserProfileResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UserProfileResponse> getUserProfileWithHttpInfo(String domain, Boolean fetchSavedResources) throws ApiException {
        okhttp3.Call localVarCall = getUserProfileValidateBeforeCall(domain, fetchSavedResources, null);
        Type localVarReturnType = new TypeToken<UserProfileResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param domain  (required)
     * @param fetchSavedResources  (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUserProfileAsync(String domain, Boolean fetchSavedResources, final ApiCallback<UserProfileResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUserProfileValidateBeforeCall(domain, fetchSavedResources, _callback);
        Type localVarReturnType = new TypeToken<UserProfileResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
