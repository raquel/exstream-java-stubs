/*
 * Exstream Design
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CreateThemeRequest;
import org.openapitools.client.model.DataResponseResourceVersion;
import org.openapitools.client.model.DataResponseTheme;
import org.openapitools.client.model.GenericResponse;
import org.openapitools.client.model.PostGetThemeWithOptionsPayload;
import org.openapitools.client.model.Theme;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ThemeControllerApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ThemeControllerApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ThemeControllerApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createTheme
     * @param domain  (required)
     * @param createThemeRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createThemeCall(String domain, CreateThemeRequest createThemeRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createThemeRequest;

        // create path and map variables
        String localVarPath = "/api/v1/themes/{domain}"
            .replace("{" + "domain" + "}", localVarApiClient.escapeString(domain.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createThemeValidateBeforeCall(String domain, CreateThemeRequest createThemeRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling createTheme(Async)");
        }

        // verify the required parameter 'createThemeRequest' is set
        if (createThemeRequest == null) {
            throw new ApiException("Missing the required parameter 'createThemeRequest' when calling createTheme(Async)");
        }

        return createThemeCall(domain, createThemeRequest, _callback);

    }

    /**
     * 
     * 
     * @param domain  (required)
     * @param createThemeRequest  (required)
     * @return DataResponseResourceVersion
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public DataResponseResourceVersion createTheme(String domain, CreateThemeRequest createThemeRequest) throws ApiException {
        ApiResponse<DataResponseResourceVersion> localVarResp = createThemeWithHttpInfo(domain, createThemeRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param domain  (required)
     * @param createThemeRequest  (required)
     * @return ApiResponse&lt;DataResponseResourceVersion&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DataResponseResourceVersion> createThemeWithHttpInfo(String domain, CreateThemeRequest createThemeRequest) throws ApiException {
        okhttp3.Call localVarCall = createThemeValidateBeforeCall(domain, createThemeRequest, null);
        Type localVarReturnType = new TypeToken<DataResponseResourceVersion>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param domain  (required)
     * @param createThemeRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createThemeAsync(String domain, CreateThemeRequest createThemeRequest, final ApiCallback<DataResponseResourceVersion> _callback) throws ApiException {

        okhttp3.Call localVarCall = createThemeValidateBeforeCall(domain, createThemeRequest, _callback);
        Type localVarReturnType = new TypeToken<DataResponseResourceVersion>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTheme
     * @param domain  (required)
     * @param themeId  (required)
     * @param version  (optional, default to -1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getThemeCall(String domain, UUID themeId, Integer version, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/themes/{domain}/{themeId}"
            .replace("{" + "domain" + "}", localVarApiClient.escapeString(domain.toString()))
            .replace("{" + "themeId" + "}", localVarApiClient.escapeString(themeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("version", version));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getThemeValidateBeforeCall(String domain, UUID themeId, Integer version, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling getTheme(Async)");
        }

        // verify the required parameter 'themeId' is set
        if (themeId == null) {
            throw new ApiException("Missing the required parameter 'themeId' when calling getTheme(Async)");
        }

        return getThemeCall(domain, themeId, version, _callback);

    }

    /**
     * 
     * 
     * @param domain  (required)
     * @param themeId  (required)
     * @param version  (optional, default to -1)
     * @return DataResponseTheme
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public DataResponseTheme getTheme(String domain, UUID themeId, Integer version) throws ApiException {
        ApiResponse<DataResponseTheme> localVarResp = getThemeWithHttpInfo(domain, themeId, version);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param domain  (required)
     * @param themeId  (required)
     * @param version  (optional, default to -1)
     * @return ApiResponse&lt;DataResponseTheme&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DataResponseTheme> getThemeWithHttpInfo(String domain, UUID themeId, Integer version) throws ApiException {
        okhttp3.Call localVarCall = getThemeValidateBeforeCall(domain, themeId, version, null);
        Type localVarReturnType = new TypeToken<DataResponseTheme>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param domain  (required)
     * @param themeId  (required)
     * @param version  (optional, default to -1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getThemeAsync(String domain, UUID themeId, Integer version, final ApiCallback<DataResponseTheme> _callback) throws ApiException {

        okhttp3.Call localVarCall = getThemeValidateBeforeCall(domain, themeId, version, _callback);
        Type localVarReturnType = new TypeToken<DataResponseTheme>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getThemeWithOptions
     * @param domain  (required)
     * @param themeId  (required)
     * @param version  (optional, default to -1)
     * @param postGetThemeWithOptionsPayload  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getThemeWithOptionsCall(String domain, UUID themeId, Integer version, PostGetThemeWithOptionsPayload postGetThemeWithOptionsPayload, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = postGetThemeWithOptionsPayload;

        // create path and map variables
        String localVarPath = "/api/v1/themes/{domain}/{themeId}"
            .replace("{" + "domain" + "}", localVarApiClient.escapeString(domain.toString()))
            .replace("{" + "themeId" + "}", localVarApiClient.escapeString(themeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("version", version));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getThemeWithOptionsValidateBeforeCall(String domain, UUID themeId, Integer version, PostGetThemeWithOptionsPayload postGetThemeWithOptionsPayload, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling getThemeWithOptions(Async)");
        }

        // verify the required parameter 'themeId' is set
        if (themeId == null) {
            throw new ApiException("Missing the required parameter 'themeId' when calling getThemeWithOptions(Async)");
        }

        return getThemeWithOptionsCall(domain, themeId, version, postGetThemeWithOptionsPayload, _callback);

    }

    /**
     * 
     * 
     * @param domain  (required)
     * @param themeId  (required)
     * @param version  (optional, default to -1)
     * @param postGetThemeWithOptionsPayload  (optional)
     * @return DataResponseTheme
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public DataResponseTheme getThemeWithOptions(String domain, UUID themeId, Integer version, PostGetThemeWithOptionsPayload postGetThemeWithOptionsPayload) throws ApiException {
        ApiResponse<DataResponseTheme> localVarResp = getThemeWithOptionsWithHttpInfo(domain, themeId, version, postGetThemeWithOptionsPayload);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param domain  (required)
     * @param themeId  (required)
     * @param version  (optional, default to -1)
     * @param postGetThemeWithOptionsPayload  (optional)
     * @return ApiResponse&lt;DataResponseTheme&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DataResponseTheme> getThemeWithOptionsWithHttpInfo(String domain, UUID themeId, Integer version, PostGetThemeWithOptionsPayload postGetThemeWithOptionsPayload) throws ApiException {
        okhttp3.Call localVarCall = getThemeWithOptionsValidateBeforeCall(domain, themeId, version, postGetThemeWithOptionsPayload, null);
        Type localVarReturnType = new TypeToken<DataResponseTheme>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param domain  (required)
     * @param themeId  (required)
     * @param version  (optional, default to -1)
     * @param postGetThemeWithOptionsPayload  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getThemeWithOptionsAsync(String domain, UUID themeId, Integer version, PostGetThemeWithOptionsPayload postGetThemeWithOptionsPayload, final ApiCallback<DataResponseTheme> _callback) throws ApiException {

        okhttp3.Call localVarCall = getThemeWithOptionsValidateBeforeCall(domain, themeId, version, postGetThemeWithOptionsPayload, _callback);
        Type localVarReturnType = new TypeToken<DataResponseTheme>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateTemplate
     * @param domain  (required)
     * @param themeId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateTemplateCall(String domain, UUID themeId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/themes/{domain}/{themeId}/template"
            .replace("{" + "domain" + "}", localVarApiClient.escapeString(domain.toString()))
            .replace("{" + "themeId" + "}", localVarApiClient.escapeString(themeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateTemplateValidateBeforeCall(String domain, UUID themeId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling updateTemplate(Async)");
        }

        // verify the required parameter 'themeId' is set
        if (themeId == null) {
            throw new ApiException("Missing the required parameter 'themeId' when calling updateTemplate(Async)");
        }

        return updateTemplateCall(domain, themeId, _callback);

    }

    /**
     * Update the specified theme to be based on the latest approved version of its template.
     * 
     * @param domain  (required)
     * @param themeId  (required)
     * @return GenericResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public GenericResponse updateTemplate(String domain, UUID themeId) throws ApiException {
        ApiResponse<GenericResponse> localVarResp = updateTemplateWithHttpInfo(domain, themeId);
        return localVarResp.getData();
    }

    /**
     * Update the specified theme to be based on the latest approved version of its template.
     * 
     * @param domain  (required)
     * @param themeId  (required)
     * @return ApiResponse&lt;GenericResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GenericResponse> updateTemplateWithHttpInfo(String domain, UUID themeId) throws ApiException {
        okhttp3.Call localVarCall = updateTemplateValidateBeforeCall(domain, themeId, null);
        Type localVarReturnType = new TypeToken<GenericResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update the specified theme to be based on the latest approved version of its template. (asynchronously)
     * 
     * @param domain  (required)
     * @param themeId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateTemplateAsync(String domain, UUID themeId, final ApiCallback<GenericResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateTemplateValidateBeforeCall(domain, themeId, _callback);
        Type localVarReturnType = new TypeToken<GenericResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateTheme
     * @param domain  (required)
     * @param themeId  (required)
     * @param theme  (required)
     * @param requireLock  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateThemeCall(String domain, UUID themeId, Theme theme, Boolean requireLock, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = theme;

        // create path and map variables
        String localVarPath = "/api/v1/themes/{domain}/{themeId}"
            .replace("{" + "domain" + "}", localVarApiClient.escapeString(domain.toString()))
            .replace("{" + "themeId" + "}", localVarApiClient.escapeString(themeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (requireLock != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("requireLock", requireLock));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateThemeValidateBeforeCall(String domain, UUID themeId, Theme theme, Boolean requireLock, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling updateTheme(Async)");
        }

        // verify the required parameter 'themeId' is set
        if (themeId == null) {
            throw new ApiException("Missing the required parameter 'themeId' when calling updateTheme(Async)");
        }

        // verify the required parameter 'theme' is set
        if (theme == null) {
            throw new ApiException("Missing the required parameter 'theme' when calling updateTheme(Async)");
        }

        return updateThemeCall(domain, themeId, theme, requireLock, _callback);

    }

    /**
     * 
     * 
     * @param domain  (required)
     * @param themeId  (required)
     * @param theme  (required)
     * @param requireLock  (optional)
     * @return GenericResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public GenericResponse updateTheme(String domain, UUID themeId, Theme theme, Boolean requireLock) throws ApiException {
        ApiResponse<GenericResponse> localVarResp = updateThemeWithHttpInfo(domain, themeId, theme, requireLock);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param domain  (required)
     * @param themeId  (required)
     * @param theme  (required)
     * @param requireLock  (optional)
     * @return ApiResponse&lt;GenericResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GenericResponse> updateThemeWithHttpInfo(String domain, UUID themeId, Theme theme, Boolean requireLock) throws ApiException {
        okhttp3.Call localVarCall = updateThemeValidateBeforeCall(domain, themeId, theme, requireLock, null);
        Type localVarReturnType = new TypeToken<GenericResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param domain  (required)
     * @param themeId  (required)
     * @param theme  (required)
     * @param requireLock  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateThemeAsync(String domain, UUID themeId, Theme theme, Boolean requireLock, final ApiCallback<GenericResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateThemeValidateBeforeCall(domain, themeId, theme, requireLock, _callback);
        Type localVarReturnType = new TypeToken<GenericResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
