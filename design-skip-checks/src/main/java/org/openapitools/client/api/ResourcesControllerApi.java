/*
 * Exstream Design
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.BulkDeleteRequest;
import org.openapitools.client.model.BulkWorkflowRequestBody;
import org.openapitools.client.model.CommentRequestBody;
import org.openapitools.client.model.DataResponseBulkDeleteResponse;
import org.openapitools.client.model.DataResponseBulkWorkflowStateChangeResponse;
import org.openapitools.client.model.DataResponseResource;
import org.openapitools.client.model.DataResponseResourceVersion;
import org.openapitools.client.model.DataResponseTreeResourceVersion;
import org.openapitools.client.model.Domain;
import org.openapitools.client.model.EtagDescriptorRequest;
import org.openapitools.client.model.EtagDescriptorResponse;
import java.io.File;
import org.openapitools.client.model.GenericResponse;
import org.openapitools.client.model.ListResponseResourceHistory;
import java.time.OffsetDateTime;
import org.openapitools.client.model.PageResponseResourceVersion;
import org.openapitools.client.model.ResourceCategory;
import org.openapitools.client.model.ResourceFilter;
import org.openapitools.client.model.ResourceVersion;
import java.util.UUID;
import org.openapitools.client.model.WorkflowRequestBody;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ResourcesControllerApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ResourcesControllerApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ResourcesControllerApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createResource
     * @param domain  (required)
     * @param contentType  (required)
     * @param resourceVersion  (required)
     * @param contentMimeType  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createResourceCall(String domain, String contentType, ResourceVersion resourceVersion, String contentMimeType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = resourceVersion;

        // create path and map variables
        String localVarPath = "/api/v1/resources/{domain}"
            .replace("{" + "domain" + "}", localVarApiClient.escapeString(domain.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentMimeType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contentMimeType", contentMimeType));
        }

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createResourceValidateBeforeCall(String domain, String contentType, ResourceVersion resourceVersion, String contentMimeType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling createResource(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling createResource(Async)");
        }

        // verify the required parameter 'resourceVersion' is set
        if (resourceVersion == null) {
            throw new ApiException("Missing the required parameter 'resourceVersion' when calling createResource(Async)");
        }

        return createResourceCall(domain, contentType, resourceVersion, contentMimeType, _callback);

    }

    /**
     * 
     * 
     * @param domain  (required)
     * @param contentType  (required)
     * @param resourceVersion  (required)
     * @param contentMimeType  (optional)
     * @return DataResponseResourceVersion
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public DataResponseResourceVersion createResource(String domain, String contentType, ResourceVersion resourceVersion, String contentMimeType) throws ApiException {
        ApiResponse<DataResponseResourceVersion> localVarResp = createResourceWithHttpInfo(domain, contentType, resourceVersion, contentMimeType);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param domain  (required)
     * @param contentType  (required)
     * @param resourceVersion  (required)
     * @param contentMimeType  (optional)
     * @return ApiResponse&lt;DataResponseResourceVersion&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DataResponseResourceVersion> createResourceWithHttpInfo(String domain, String contentType, ResourceVersion resourceVersion, String contentMimeType) throws ApiException {
        okhttp3.Call localVarCall = createResourceValidateBeforeCall(domain, contentType, resourceVersion, contentMimeType, null);
        Type localVarReturnType = new TypeToken<DataResponseResourceVersion>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param domain  (required)
     * @param contentType  (required)
     * @param resourceVersion  (required)
     * @param contentMimeType  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createResourceAsync(String domain, String contentType, ResourceVersion resourceVersion, String contentMimeType, final ApiCallback<DataResponseResourceVersion> _callback) throws ApiException {

        okhttp3.Call localVarCall = createResourceValidateBeforeCall(domain, contentType, resourceVersion, contentMimeType, _callback);
        Type localVarReturnType = new TypeToken<DataResponseResourceVersion>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createResourceFromFile
     * @param domain  (required)
     * @param name The name of the resource to create. (required)
     * @param type The type of resource to create. (required)
     * @param subtype The subtype of resource to create. Appears in metadata. (optional)
     * @param _file The binary file to upload (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createResourceFromFileCall(String domain, String name, String type, String subtype, File _file, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/resources/{domain}/content"
            .replace("{" + "domain" + "}", localVarApiClient.escapeString(domain.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (_file != null) {
            localVarFormParams.put("file", _file);
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (subtype != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("subtype", subtype));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createResourceFromFileValidateBeforeCall(String domain, String name, String type, String subtype, File _file, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling createResourceFromFile(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling createResourceFromFile(Async)");
        }

        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling createResourceFromFile(Async)");
        }

        return createResourceFromFileCall(domain, name, type, subtype, _file, _callback);

    }

    /**
     * 
     * 
     * @param domain  (required)
     * @param name The name of the resource to create. (required)
     * @param type The type of resource to create. (required)
     * @param subtype The subtype of resource to create. Appears in metadata. (optional)
     * @param _file The binary file to upload (optional)
     * @return DataResponseResourceVersion
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public DataResponseResourceVersion createResourceFromFile(String domain, String name, String type, String subtype, File _file) throws ApiException {
        ApiResponse<DataResponseResourceVersion> localVarResp = createResourceFromFileWithHttpInfo(domain, name, type, subtype, _file);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param domain  (required)
     * @param name The name of the resource to create. (required)
     * @param type The type of resource to create. (required)
     * @param subtype The subtype of resource to create. Appears in metadata. (optional)
     * @param _file The binary file to upload (optional)
     * @return ApiResponse&lt;DataResponseResourceVersion&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DataResponseResourceVersion> createResourceFromFileWithHttpInfo(String domain, String name, String type, String subtype, File _file) throws ApiException {
        okhttp3.Call localVarCall = createResourceFromFileValidateBeforeCall(domain, name, type, subtype, _file, null);
        Type localVarReturnType = new TypeToken<DataResponseResourceVersion>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param domain  (required)
     * @param name The name of the resource to create. (required)
     * @param type The type of resource to create. (required)
     * @param subtype The subtype of resource to create. Appears in metadata. (optional)
     * @param _file The binary file to upload (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createResourceFromFileAsync(String domain, String name, String type, String subtype, File _file, final ApiCallback<DataResponseResourceVersion> _callback) throws ApiException {

        okhttp3.Call localVarCall = createResourceFromFileValidateBeforeCall(domain, name, type, subtype, _file, _callback);
        Type localVarReturnType = new TypeToken<DataResponseResourceVersion>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteResource
     * @param domain  (required)
     * @param id  (required)
     * @param version Valid values are LATEST, ALL, or an actual version number. If not specified, will use LATEST. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteResourceCall(String domain, UUID id, String version, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/resources/{domain}/{id}"
            .replace("{" + "domain" + "}", localVarApiClient.escapeString(domain.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("version", version));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteResourceValidateBeforeCall(String domain, UUID id, String version, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling deleteResource(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteResource(Async)");
        }

        return deleteResourceCall(domain, id, version, _callback);

    }

    /**
     * 
     * 
     * @param domain  (required)
     * @param id  (required)
     * @param version Valid values are LATEST, ALL, or an actual version number. If not specified, will use LATEST. (optional)
     * @return GenericResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public GenericResponse deleteResource(String domain, UUID id, String version) throws ApiException {
        ApiResponse<GenericResponse> localVarResp = deleteResourceWithHttpInfo(domain, id, version);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param domain  (required)
     * @param id  (required)
     * @param version Valid values are LATEST, ALL, or an actual version number. If not specified, will use LATEST. (optional)
     * @return ApiResponse&lt;GenericResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GenericResponse> deleteResourceWithHttpInfo(String domain, UUID id, String version) throws ApiException {
        okhttp3.Call localVarCall = deleteResourceValidateBeforeCall(domain, id, version, null);
        Type localVarReturnType = new TypeToken<GenericResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param domain  (required)
     * @param id  (required)
     * @param version Valid values are LATEST, ALL, or an actual version number. If not specified, will use LATEST. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteResourceAsync(String domain, UUID id, String version, final ApiCallback<GenericResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteResourceValidateBeforeCall(domain, id, version, _callback);
        Type localVarReturnType = new TypeToken<GenericResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteResources
     * @param domain  (required)
     * @param bulkDeleteRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteResourcesCall(String domain, BulkDeleteRequest bulkDeleteRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = bulkDeleteRequest;

        // create path and map variables
        String localVarPath = "/api/v1/resources/{domain}/delete-bulk"
            .replace("{" + "domain" + "}", localVarApiClient.escapeString(domain.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteResourcesValidateBeforeCall(String domain, BulkDeleteRequest bulkDeleteRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling deleteResources(Async)");
        }

        // verify the required parameter 'bulkDeleteRequest' is set
        if (bulkDeleteRequest == null) {
            throw new ApiException("Missing the required parameter 'bulkDeleteRequest' when calling deleteResources(Async)");
        }

        return deleteResourcesCall(domain, bulkDeleteRequest, _callback);

    }

    /**
     * 
     * Deletes a list of resources. The version can be LATEST, ALL or an actual version number. If not specified, LATEST is used.
     * @param domain  (required)
     * @param bulkDeleteRequest  (required)
     * @return DataResponseBulkDeleteResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public DataResponseBulkDeleteResponse deleteResources(String domain, BulkDeleteRequest bulkDeleteRequest) throws ApiException {
        ApiResponse<DataResponseBulkDeleteResponse> localVarResp = deleteResourcesWithHttpInfo(domain, bulkDeleteRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Deletes a list of resources. The version can be LATEST, ALL or an actual version number. If not specified, LATEST is used.
     * @param domain  (required)
     * @param bulkDeleteRequest  (required)
     * @return ApiResponse&lt;DataResponseBulkDeleteResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DataResponseBulkDeleteResponse> deleteResourcesWithHttpInfo(String domain, BulkDeleteRequest bulkDeleteRequest) throws ApiException {
        okhttp3.Call localVarCall = deleteResourcesValidateBeforeCall(domain, bulkDeleteRequest, null);
        Type localVarReturnType = new TypeToken<DataResponseBulkDeleteResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Deletes a list of resources. The version can be LATEST, ALL or an actual version number. If not specified, LATEST is used.
     * @param domain  (required)
     * @param bulkDeleteRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteResourcesAsync(String domain, BulkDeleteRequest bulkDeleteRequest, final ApiCallback<DataResponseBulkDeleteResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteResourcesValidateBeforeCall(domain, bulkDeleteRequest, _callback);
        Type localVarReturnType = new TypeToken<DataResponseBulkDeleteResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for demote
     * @param domain  (required)
     * @param id  (required)
     * @param domain2  (required)
     * @param version  (optional, default to -1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call demoteCall(String domain, UUID id, Domain domain2, Integer version, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = domain2;

        // create path and map variables
        String localVarPath = "/api/v1/resources/{domain}/{id}/demote"
            .replace("{" + "domain" + "}", localVarApiClient.escapeString(domain.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("version", version));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call demoteValidateBeforeCall(String domain, UUID id, Domain domain2, Integer version, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling demote(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling demote(Async)");
        }

        // verify the required parameter 'domain2' is set
        if (domain2 == null) {
            throw new ApiException("Missing the required parameter 'domain2' when calling demote(Async)");
        }

        return demoteCall(domain, id, domain2, version, _callback);

    }

    /**
     * 
     * 
     * @param domain  (required)
     * @param id  (required)
     * @param domain2  (required)
     * @param version  (optional, default to -1)
     * @return DataResponseResourceVersion
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public DataResponseResourceVersion demote(String domain, UUID id, Domain domain2, Integer version) throws ApiException {
        ApiResponse<DataResponseResourceVersion> localVarResp = demoteWithHttpInfo(domain, id, domain2, version);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param domain  (required)
     * @param id  (required)
     * @param domain2  (required)
     * @param version  (optional, default to -1)
     * @return ApiResponse&lt;DataResponseResourceVersion&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DataResponseResourceVersion> demoteWithHttpInfo(String domain, UUID id, Domain domain2, Integer version) throws ApiException {
        okhttp3.Call localVarCall = demoteValidateBeforeCall(domain, id, domain2, version, null);
        Type localVarReturnType = new TypeToken<DataResponseResourceVersion>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param domain  (required)
     * @param id  (required)
     * @param domain2  (required)
     * @param version  (optional, default to -1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call demoteAsync(String domain, UUID id, Domain domain2, Integer version, final ApiCallback<DataResponseResourceVersion> _callback) throws ApiException {

        okhttp3.Call localVarCall = demoteValidateBeforeCall(domain, id, domain2, version, _callback);
        Type localVarReturnType = new TypeToken<DataResponseResourceVersion>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getContent
     * @param domain  (required)
     * @param id  (required)
     * @param version  (optional)
     * @param state  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getContentCall(String domain, UUID id, Integer version, String state, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/resources/{domain}/{id}/content"
            .replace("{" + "domain" + "}", localVarApiClient.escapeString(domain.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("version", version));
        }

        if (state != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("state", state));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getContentValidateBeforeCall(String domain, UUID id, Integer version, String state, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling getContent(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getContent(Async)");
        }

        return getContentCall(domain, id, version, state, _callback);

    }

    /**
     * 
     * 
     * @param domain  (required)
     * @param id  (required)
     * @param version  (optional)
     * @param state  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Object getContent(String domain, UUID id, Integer version, String state) throws ApiException {
        ApiResponse<Object> localVarResp = getContentWithHttpInfo(domain, id, version, state);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param domain  (required)
     * @param id  (required)
     * @param version  (optional)
     * @param state  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getContentWithHttpInfo(String domain, UUID id, Integer version, String state) throws ApiException {
        okhttp3.Call localVarCall = getContentValidateBeforeCall(domain, id, version, state, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param domain  (required)
     * @param id  (required)
     * @param version  (optional)
     * @param state  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getContentAsync(String domain, UUID id, Integer version, String state, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getContentValidateBeforeCall(domain, id, version, state, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getResource
     * @param domain  (required)
     * @param id  (required)
     * @param version  (optional)
     * @param expand  (optional)
     * @param checkIfLatestVersion  (optional, default to false)
     * @param state  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getResourceCall(String domain, UUID id, Integer version, String expand, Boolean checkIfLatestVersion, String state, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/resources/{domain}/{id}"
            .replace("{" + "domain" + "}", localVarApiClient.escapeString(domain.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("version", version));
        }

        if (expand != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("expand", expand));
        }

        if (checkIfLatestVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("checkIfLatestVersion", checkIfLatestVersion));
        }

        if (state != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("state", state));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getResourceValidateBeforeCall(String domain, UUID id, Integer version, String expand, Boolean checkIfLatestVersion, String state, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling getResource(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getResource(Async)");
        }

        return getResourceCall(domain, id, version, expand, checkIfLatestVersion, state, _callback);

    }

    /**
     * 
     * 
     * @param domain  (required)
     * @param id  (required)
     * @param version  (optional)
     * @param expand  (optional)
     * @param checkIfLatestVersion  (optional, default to false)
     * @param state  (optional)
     * @return DataResponseResourceVersion
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public DataResponseResourceVersion getResource(String domain, UUID id, Integer version, String expand, Boolean checkIfLatestVersion, String state) throws ApiException {
        ApiResponse<DataResponseResourceVersion> localVarResp = getResourceWithHttpInfo(domain, id, version, expand, checkIfLatestVersion, state);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param domain  (required)
     * @param id  (required)
     * @param version  (optional)
     * @param expand  (optional)
     * @param checkIfLatestVersion  (optional, default to false)
     * @param state  (optional)
     * @return ApiResponse&lt;DataResponseResourceVersion&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DataResponseResourceVersion> getResourceWithHttpInfo(String domain, UUID id, Integer version, String expand, Boolean checkIfLatestVersion, String state) throws ApiException {
        okhttp3.Call localVarCall = getResourceValidateBeforeCall(domain, id, version, expand, checkIfLatestVersion, state, null);
        Type localVarReturnType = new TypeToken<DataResponseResourceVersion>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param domain  (required)
     * @param id  (required)
     * @param version  (optional)
     * @param expand  (optional)
     * @param checkIfLatestVersion  (optional, default to false)
     * @param state  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getResourceAsync(String domain, UUID id, Integer version, String expand, Boolean checkIfLatestVersion, String state, final ApiCallback<DataResponseResourceVersion> _callback) throws ApiException {

        okhttp3.Call localVarCall = getResourceValidateBeforeCall(domain, id, version, expand, checkIfLatestVersion, state, _callback);
        Type localVarReturnType = new TypeToken<DataResponseResourceVersion>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getResourceContent
     * @param domain  (required)
     * @param id  (required)
     * @param type  (required)
     * @param version  (optional)
     * @param state  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getResourceContentCall(String domain, UUID id, String type, Integer version, String state, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/resources/{domain}/{id}/content/{type}"
            .replace("{" + "domain" + "}", localVarApiClient.escapeString(domain.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "type" + "}", localVarApiClient.escapeString(type.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("version", version));
        }

        if (state != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("state", state));
        }

        final String[] localVarAccepts = {
            "application/xml",
            "image/png",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getResourceContentValidateBeforeCall(String domain, UUID id, String type, Integer version, String state, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling getResourceContent(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getResourceContent(Async)");
        }

        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling getResourceContent(Async)");
        }

        return getResourceContentCall(domain, id, type, version, state, _callback);

    }

    /**
     * 
     * 
     * @param domain  (required)
     * @param id  (required)
     * @param type  (required)
     * @param version  (optional)
     * @param state  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Object getResourceContent(String domain, UUID id, String type, Integer version, String state) throws ApiException {
        ApiResponse<Object> localVarResp = getResourceContentWithHttpInfo(domain, id, type, version, state);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param domain  (required)
     * @param id  (required)
     * @param type  (required)
     * @param version  (optional)
     * @param state  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getResourceContentWithHttpInfo(String domain, UUID id, String type, Integer version, String state) throws ApiException {
        okhttp3.Call localVarCall = getResourceContentValidateBeforeCall(domain, id, type, version, state, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param domain  (required)
     * @param id  (required)
     * @param type  (required)
     * @param version  (optional)
     * @param state  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getResourceContentAsync(String domain, UUID id, String type, Integer version, String state, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getResourceContentValidateBeforeCall(domain, id, type, version, state, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getResourceHistory
     * @param domain  (required)
     * @param resourceId  (required)
     * @param fetchAcrossDomains  (optional)
     * @param historyType  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getResourceHistoryCall(String domain, UUID resourceId, Boolean fetchAcrossDomains, String historyType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/resources/{domain}/history/{resourceId}"
            .replace("{" + "domain" + "}", localVarApiClient.escapeString(domain.toString()))
            .replace("{" + "resourceId" + "}", localVarApiClient.escapeString(resourceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fetchAcrossDomains != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fetchAcrossDomains", fetchAcrossDomains));
        }

        if (historyType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("historyType", historyType));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getResourceHistoryValidateBeforeCall(String domain, UUID resourceId, Boolean fetchAcrossDomains, String historyType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling getResourceHistory(Async)");
        }

        // verify the required parameter 'resourceId' is set
        if (resourceId == null) {
            throw new ApiException("Missing the required parameter 'resourceId' when calling getResourceHistory(Async)");
        }

        return getResourceHistoryCall(domain, resourceId, fetchAcrossDomains, historyType, _callback);

    }

    /**
     * 
     * 
     * @param domain  (required)
     * @param resourceId  (required)
     * @param fetchAcrossDomains  (optional)
     * @param historyType  (optional)
     * @return ListResponseResourceHistory
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ListResponseResourceHistory getResourceHistory(String domain, UUID resourceId, Boolean fetchAcrossDomains, String historyType) throws ApiException {
        ApiResponse<ListResponseResourceHistory> localVarResp = getResourceHistoryWithHttpInfo(domain, resourceId, fetchAcrossDomains, historyType);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param domain  (required)
     * @param resourceId  (required)
     * @param fetchAcrossDomains  (optional)
     * @param historyType  (optional)
     * @return ApiResponse&lt;ListResponseResourceHistory&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListResponseResourceHistory> getResourceHistoryWithHttpInfo(String domain, UUID resourceId, Boolean fetchAcrossDomains, String historyType) throws ApiException {
        okhttp3.Call localVarCall = getResourceHistoryValidateBeforeCall(domain, resourceId, fetchAcrossDomains, historyType, null);
        Type localVarReturnType = new TypeToken<ListResponseResourceHistory>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param domain  (required)
     * @param resourceId  (required)
     * @param fetchAcrossDomains  (optional)
     * @param historyType  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getResourceHistoryAsync(String domain, UUID resourceId, Boolean fetchAcrossDomains, String historyType, final ApiCallback<ListResponseResourceHistory> _callback) throws ApiException {

        okhttp3.Call localVarCall = getResourceHistoryValidateBeforeCall(domain, resourceId, fetchAcrossDomains, historyType, _callback);
        Type localVarReturnType = new TypeToken<ListResponseResourceHistory>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getResources
     * @param domain  (required)
     * @param filterIds  (optional)
     * @param filterExcludedIds  (optional)
     * @param filterTypes  (optional)
     * @param filterExcludedTypes  (optional)
     * @param filterName  (optional)
     * @param filterDescription  (optional)
     * @param filterCreatedBy  (optional)
     * @param filterLastModifiedBy  (optional)
     * @param filterCreatedDateStart  (optional)
     * @param filterCreatedDateEnd  (optional)
     * @param filterLastModifiedDateStart  (optional)
     * @param filterLastModifiedDateEnd  (optional)
     * @param filterSearchString This is equivalent to searching where the name OR the description is LIKE this value (optional)
     * @param filterCaseSensitive  (optional)
     * @param filterWholeWord  (optional)
     * @param filterResourcePackId  (optional)
     * @param filterSystemResource  (optional)
     * @param filterHidden  (optional)
     * @param filterHasApprovedVersion  (optional)
     * @param filterStandardVariantId  (optional)
     * @param filterUseEffectiveDate  (optional)
     * @param filterEffectiveDate  (optional)
     * @param filterCategories  (optional)
     * @param filterCategoryObjects  (optional)
     * @param filterVfilterLastModifiedDateEnd  (optional)
     * @param filterDomainId only include resources in this domain (optional)
     * @param filterLatestVersion only include the latest version of objects (optional)
     * @param filterLocked  (optional)
     * @param filterStates  (optional)
     * @param filterOverrideIds  (optional)
     * @param filterOverrideStates  (optional)
     * @param advancedFilter  (optional)
     * @param offset For pagination, fetch entities after this many (optional)
     * @param count For pagination, the number of entities per page (optional)
     * @param fetchDomains  (optional, default to false)
     * @param fetchPermissions  (optional, default to false)
     * @param fetchCategories  (optional, default to false)
     * @param fetchVariants  (optional, default to false)
     * @param fetchApproval  (optional, default to false)
     * @param expand  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getResourcesCall(String domain, List<UUID> filterIds, List<UUID> filterExcludedIds, List<String> filterTypes, List<String> filterExcludedTypes, String filterName, String filterDescription, String filterCreatedBy, String filterLastModifiedBy, OffsetDateTime filterCreatedDateStart, OffsetDateTime filterCreatedDateEnd, OffsetDateTime filterLastModifiedDateStart, OffsetDateTime filterLastModifiedDateEnd, String filterSearchString, Boolean filterCaseSensitive, Boolean filterWholeWord, UUID filterResourcePackId, Boolean filterSystemResource, Boolean filterHidden, Boolean filterHasApprovedVersion, UUID filterStandardVariantId, Boolean filterUseEffectiveDate, OffsetDateTime filterEffectiveDate, List<String> filterCategories, List<ResourceCategory> filterCategoryObjects, OffsetDateTime filterVfilterLastModifiedDateEnd, String filterDomainId, Boolean filterLatestVersion, Boolean filterLocked, List<String> filterStates, List<UUID> filterOverrideIds, List<String> filterOverrideStates, String advancedFilter, Integer offset, Integer count, Boolean fetchDomains, Boolean fetchPermissions, Boolean fetchCategories, Boolean fetchVariants, Boolean fetchApproval, String expand, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/resources/{domain}"
            .replace("{" + "domain" + "}", localVarApiClient.escapeString(domain.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (filterIds != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "filter.ids", filterIds));
        }

        if (filterExcludedIds != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "filter.excludedIds", filterExcludedIds));
        }

        if (filterTypes != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "filter.types", filterTypes));
        }

        if (filterExcludedTypes != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "filter.excludedTypes", filterExcludedTypes));
        }

        if (filterName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter.name", filterName));
        }

        if (filterDescription != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter.description", filterDescription));
        }

        if (filterCreatedBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter.createdBy", filterCreatedBy));
        }

        if (filterLastModifiedBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter.lastModifiedBy", filterLastModifiedBy));
        }

        if (filterCreatedDateStart != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter.createdDateStart", filterCreatedDateStart));
        }

        if (filterCreatedDateEnd != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter.createdDateEnd", filterCreatedDateEnd));
        }

        if (filterLastModifiedDateStart != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter.lastModifiedDateStart", filterLastModifiedDateStart));
        }

        if (filterLastModifiedDateEnd != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter.lastModifiedDateEnd", filterLastModifiedDateEnd));
        }

        if (filterSearchString != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter.searchString", filterSearchString));
        }

        if (filterCaseSensitive != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter.caseSensitive", filterCaseSensitive));
        }

        if (filterWholeWord != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter.wholeWord", filterWholeWord));
        }

        if (filterResourcePackId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter.resourcePackId", filterResourcePackId));
        }

        if (filterSystemResource != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter.systemResource", filterSystemResource));
        }

        if (filterHidden != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter.hidden", filterHidden));
        }

        if (filterHasApprovedVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter.hasApprovedVersion", filterHasApprovedVersion));
        }

        if (filterStandardVariantId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter.standardVariantId", filterStandardVariantId));
        }

        if (filterUseEffectiveDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter.useEffectiveDate", filterUseEffectiveDate));
        }

        if (filterEffectiveDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter.effectiveDate", filterEffectiveDate));
        }

        if (filterCategories != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "filter.categories", filterCategories));
        }

        if (filterCategoryObjects != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "filter.categoryObjects", filterCategoryObjects));
        }

        if (filterVfilterLastModifiedDateEnd != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter.vfilter_lastModifiedDateEnd", filterVfilterLastModifiedDateEnd));
        }

        if (filterDomainId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter.domainId", filterDomainId));
        }

        if (filterLatestVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter.latestVersion", filterLatestVersion));
        }

        if (filterLocked != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter.locked", filterLocked));
        }

        if (filterStates != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "filter.states", filterStates));
        }

        if (filterOverrideIds != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "filter.overrideIds", filterOverrideIds));
        }

        if (filterOverrideStates != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "filter.overrideStates", filterOverrideStates));
        }

        if (advancedFilter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("advancedFilter", advancedFilter));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (fetchDomains != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fetchDomains", fetchDomains));
        }

        if (fetchPermissions != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fetchPermissions", fetchPermissions));
        }

        if (fetchCategories != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fetchCategories", fetchCategories));
        }

        if (fetchVariants != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fetchVariants", fetchVariants));
        }

        if (fetchApproval != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fetchApproval", fetchApproval));
        }

        if (expand != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("expand", expand));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getResourcesValidateBeforeCall(String domain, List<UUID> filterIds, List<UUID> filterExcludedIds, List<String> filterTypes, List<String> filterExcludedTypes, String filterName, String filterDescription, String filterCreatedBy, String filterLastModifiedBy, OffsetDateTime filterCreatedDateStart, OffsetDateTime filterCreatedDateEnd, OffsetDateTime filterLastModifiedDateStart, OffsetDateTime filterLastModifiedDateEnd, String filterSearchString, Boolean filterCaseSensitive, Boolean filterWholeWord, UUID filterResourcePackId, Boolean filterSystemResource, Boolean filterHidden, Boolean filterHasApprovedVersion, UUID filterStandardVariantId, Boolean filterUseEffectiveDate, OffsetDateTime filterEffectiveDate, List<String> filterCategories, List<ResourceCategory> filterCategoryObjects, OffsetDateTime filterVfilterLastModifiedDateEnd, String filterDomainId, Boolean filterLatestVersion, Boolean filterLocked, List<String> filterStates, List<UUID> filterOverrideIds, List<String> filterOverrideStates, String advancedFilter, Integer offset, Integer count, Boolean fetchDomains, Boolean fetchPermissions, Boolean fetchCategories, Boolean fetchVariants, Boolean fetchApproval, String expand, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling getResources(Async)");
        }

        return getResourcesCall(domain, filterIds, filterExcludedIds, filterTypes, filterExcludedTypes, filterName, filterDescription, filterCreatedBy, filterLastModifiedBy, filterCreatedDateStart, filterCreatedDateEnd, filterLastModifiedDateStart, filterLastModifiedDateEnd, filterSearchString, filterCaseSensitive, filterWholeWord, filterResourcePackId, filterSystemResource, filterHidden, filterHasApprovedVersion, filterStandardVariantId, filterUseEffectiveDate, filterEffectiveDate, filterCategories, filterCategoryObjects, filterVfilterLastModifiedDateEnd, filterDomainId, filterLatestVersion, filterLocked, filterStates, filterOverrideIds, filterOverrideStates, advancedFilter, offset, count, fetchDomains, fetchPermissions, fetchCategories, fetchVariants, fetchApproval, expand, _callback);

    }

    /**
     * 
     * 
     * @param domain  (required)
     * @param filterIds  (optional)
     * @param filterExcludedIds  (optional)
     * @param filterTypes  (optional)
     * @param filterExcludedTypes  (optional)
     * @param filterName  (optional)
     * @param filterDescription  (optional)
     * @param filterCreatedBy  (optional)
     * @param filterLastModifiedBy  (optional)
     * @param filterCreatedDateStart  (optional)
     * @param filterCreatedDateEnd  (optional)
     * @param filterLastModifiedDateStart  (optional)
     * @param filterLastModifiedDateEnd  (optional)
     * @param filterSearchString This is equivalent to searching where the name OR the description is LIKE this value (optional)
     * @param filterCaseSensitive  (optional)
     * @param filterWholeWord  (optional)
     * @param filterResourcePackId  (optional)
     * @param filterSystemResource  (optional)
     * @param filterHidden  (optional)
     * @param filterHasApprovedVersion  (optional)
     * @param filterStandardVariantId  (optional)
     * @param filterUseEffectiveDate  (optional)
     * @param filterEffectiveDate  (optional)
     * @param filterCategories  (optional)
     * @param filterCategoryObjects  (optional)
     * @param filterVfilterLastModifiedDateEnd  (optional)
     * @param filterDomainId only include resources in this domain (optional)
     * @param filterLatestVersion only include the latest version of objects (optional)
     * @param filterLocked  (optional)
     * @param filterStates  (optional)
     * @param filterOverrideIds  (optional)
     * @param filterOverrideStates  (optional)
     * @param advancedFilter  (optional)
     * @param offset For pagination, fetch entities after this many (optional)
     * @param count For pagination, the number of entities per page (optional)
     * @param fetchDomains  (optional, default to false)
     * @param fetchPermissions  (optional, default to false)
     * @param fetchCategories  (optional, default to false)
     * @param fetchVariants  (optional, default to false)
     * @param fetchApproval  (optional, default to false)
     * @param expand  (optional)
     * @return PageResponseResourceVersion
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public PageResponseResourceVersion getResources(String domain, List<UUID> filterIds, List<UUID> filterExcludedIds, List<String> filterTypes, List<String> filterExcludedTypes, String filterName, String filterDescription, String filterCreatedBy, String filterLastModifiedBy, OffsetDateTime filterCreatedDateStart, OffsetDateTime filterCreatedDateEnd, OffsetDateTime filterLastModifiedDateStart, OffsetDateTime filterLastModifiedDateEnd, String filterSearchString, Boolean filterCaseSensitive, Boolean filterWholeWord, UUID filterResourcePackId, Boolean filterSystemResource, Boolean filterHidden, Boolean filterHasApprovedVersion, UUID filterStandardVariantId, Boolean filterUseEffectiveDate, OffsetDateTime filterEffectiveDate, List<String> filterCategories, List<ResourceCategory> filterCategoryObjects, OffsetDateTime filterVfilterLastModifiedDateEnd, String filterDomainId, Boolean filterLatestVersion, Boolean filterLocked, List<String> filterStates, List<UUID> filterOverrideIds, List<String> filterOverrideStates, String advancedFilter, Integer offset, Integer count, Boolean fetchDomains, Boolean fetchPermissions, Boolean fetchCategories, Boolean fetchVariants, Boolean fetchApproval, String expand) throws ApiException {
        ApiResponse<PageResponseResourceVersion> localVarResp = getResourcesWithHttpInfo(domain, filterIds, filterExcludedIds, filterTypes, filterExcludedTypes, filterName, filterDescription, filterCreatedBy, filterLastModifiedBy, filterCreatedDateStart, filterCreatedDateEnd, filterLastModifiedDateStart, filterLastModifiedDateEnd, filterSearchString, filterCaseSensitive, filterWholeWord, filterResourcePackId, filterSystemResource, filterHidden, filterHasApprovedVersion, filterStandardVariantId, filterUseEffectiveDate, filterEffectiveDate, filterCategories, filterCategoryObjects, filterVfilterLastModifiedDateEnd, filterDomainId, filterLatestVersion, filterLocked, filterStates, filterOverrideIds, filterOverrideStates, advancedFilter, offset, count, fetchDomains, fetchPermissions, fetchCategories, fetchVariants, fetchApproval, expand);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param domain  (required)
     * @param filterIds  (optional)
     * @param filterExcludedIds  (optional)
     * @param filterTypes  (optional)
     * @param filterExcludedTypes  (optional)
     * @param filterName  (optional)
     * @param filterDescription  (optional)
     * @param filterCreatedBy  (optional)
     * @param filterLastModifiedBy  (optional)
     * @param filterCreatedDateStart  (optional)
     * @param filterCreatedDateEnd  (optional)
     * @param filterLastModifiedDateStart  (optional)
     * @param filterLastModifiedDateEnd  (optional)
     * @param filterSearchString This is equivalent to searching where the name OR the description is LIKE this value (optional)
     * @param filterCaseSensitive  (optional)
     * @param filterWholeWord  (optional)
     * @param filterResourcePackId  (optional)
     * @param filterSystemResource  (optional)
     * @param filterHidden  (optional)
     * @param filterHasApprovedVersion  (optional)
     * @param filterStandardVariantId  (optional)
     * @param filterUseEffectiveDate  (optional)
     * @param filterEffectiveDate  (optional)
     * @param filterCategories  (optional)
     * @param filterCategoryObjects  (optional)
     * @param filterVfilterLastModifiedDateEnd  (optional)
     * @param filterDomainId only include resources in this domain (optional)
     * @param filterLatestVersion only include the latest version of objects (optional)
     * @param filterLocked  (optional)
     * @param filterStates  (optional)
     * @param filterOverrideIds  (optional)
     * @param filterOverrideStates  (optional)
     * @param advancedFilter  (optional)
     * @param offset For pagination, fetch entities after this many (optional)
     * @param count For pagination, the number of entities per page (optional)
     * @param fetchDomains  (optional, default to false)
     * @param fetchPermissions  (optional, default to false)
     * @param fetchCategories  (optional, default to false)
     * @param fetchVariants  (optional, default to false)
     * @param fetchApproval  (optional, default to false)
     * @param expand  (optional)
     * @return ApiResponse&lt;PageResponseResourceVersion&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PageResponseResourceVersion> getResourcesWithHttpInfo(String domain, List<UUID> filterIds, List<UUID> filterExcludedIds, List<String> filterTypes, List<String> filterExcludedTypes, String filterName, String filterDescription, String filterCreatedBy, String filterLastModifiedBy, OffsetDateTime filterCreatedDateStart, OffsetDateTime filterCreatedDateEnd, OffsetDateTime filterLastModifiedDateStart, OffsetDateTime filterLastModifiedDateEnd, String filterSearchString, Boolean filterCaseSensitive, Boolean filterWholeWord, UUID filterResourcePackId, Boolean filterSystemResource, Boolean filterHidden, Boolean filterHasApprovedVersion, UUID filterStandardVariantId, Boolean filterUseEffectiveDate, OffsetDateTime filterEffectiveDate, List<String> filterCategories, List<ResourceCategory> filterCategoryObjects, OffsetDateTime filterVfilterLastModifiedDateEnd, String filterDomainId, Boolean filterLatestVersion, Boolean filterLocked, List<String> filterStates, List<UUID> filterOverrideIds, List<String> filterOverrideStates, String advancedFilter, Integer offset, Integer count, Boolean fetchDomains, Boolean fetchPermissions, Boolean fetchCategories, Boolean fetchVariants, Boolean fetchApproval, String expand) throws ApiException {
        okhttp3.Call localVarCall = getResourcesValidateBeforeCall(domain, filterIds, filterExcludedIds, filterTypes, filterExcludedTypes, filterName, filterDescription, filterCreatedBy, filterLastModifiedBy, filterCreatedDateStart, filterCreatedDateEnd, filterLastModifiedDateStart, filterLastModifiedDateEnd, filterSearchString, filterCaseSensitive, filterWholeWord, filterResourcePackId, filterSystemResource, filterHidden, filterHasApprovedVersion, filterStandardVariantId, filterUseEffectiveDate, filterEffectiveDate, filterCategories, filterCategoryObjects, filterVfilterLastModifiedDateEnd, filterDomainId, filterLatestVersion, filterLocked, filterStates, filterOverrideIds, filterOverrideStates, advancedFilter, offset, count, fetchDomains, fetchPermissions, fetchCategories, fetchVariants, fetchApproval, expand, null);
        Type localVarReturnType = new TypeToken<PageResponseResourceVersion>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param domain  (required)
     * @param filterIds  (optional)
     * @param filterExcludedIds  (optional)
     * @param filterTypes  (optional)
     * @param filterExcludedTypes  (optional)
     * @param filterName  (optional)
     * @param filterDescription  (optional)
     * @param filterCreatedBy  (optional)
     * @param filterLastModifiedBy  (optional)
     * @param filterCreatedDateStart  (optional)
     * @param filterCreatedDateEnd  (optional)
     * @param filterLastModifiedDateStart  (optional)
     * @param filterLastModifiedDateEnd  (optional)
     * @param filterSearchString This is equivalent to searching where the name OR the description is LIKE this value (optional)
     * @param filterCaseSensitive  (optional)
     * @param filterWholeWord  (optional)
     * @param filterResourcePackId  (optional)
     * @param filterSystemResource  (optional)
     * @param filterHidden  (optional)
     * @param filterHasApprovedVersion  (optional)
     * @param filterStandardVariantId  (optional)
     * @param filterUseEffectiveDate  (optional)
     * @param filterEffectiveDate  (optional)
     * @param filterCategories  (optional)
     * @param filterCategoryObjects  (optional)
     * @param filterVfilterLastModifiedDateEnd  (optional)
     * @param filterDomainId only include resources in this domain (optional)
     * @param filterLatestVersion only include the latest version of objects (optional)
     * @param filterLocked  (optional)
     * @param filterStates  (optional)
     * @param filterOverrideIds  (optional)
     * @param filterOverrideStates  (optional)
     * @param advancedFilter  (optional)
     * @param offset For pagination, fetch entities after this many (optional)
     * @param count For pagination, the number of entities per page (optional)
     * @param fetchDomains  (optional, default to false)
     * @param fetchPermissions  (optional, default to false)
     * @param fetchCategories  (optional, default to false)
     * @param fetchVariants  (optional, default to false)
     * @param fetchApproval  (optional, default to false)
     * @param expand  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getResourcesAsync(String domain, List<UUID> filterIds, List<UUID> filterExcludedIds, List<String> filterTypes, List<String> filterExcludedTypes, String filterName, String filterDescription, String filterCreatedBy, String filterLastModifiedBy, OffsetDateTime filterCreatedDateStart, OffsetDateTime filterCreatedDateEnd, OffsetDateTime filterLastModifiedDateStart, OffsetDateTime filterLastModifiedDateEnd, String filterSearchString, Boolean filterCaseSensitive, Boolean filterWholeWord, UUID filterResourcePackId, Boolean filterSystemResource, Boolean filterHidden, Boolean filterHasApprovedVersion, UUID filterStandardVariantId, Boolean filterUseEffectiveDate, OffsetDateTime filterEffectiveDate, List<String> filterCategories, List<ResourceCategory> filterCategoryObjects, OffsetDateTime filterVfilterLastModifiedDateEnd, String filterDomainId, Boolean filterLatestVersion, Boolean filterLocked, List<String> filterStates, List<UUID> filterOverrideIds, List<String> filterOverrideStates, String advancedFilter, Integer offset, Integer count, Boolean fetchDomains, Boolean fetchPermissions, Boolean fetchCategories, Boolean fetchVariants, Boolean fetchApproval, String expand, final ApiCallback<PageResponseResourceVersion> _callback) throws ApiException {

        okhttp3.Call localVarCall = getResourcesValidateBeforeCall(domain, filterIds, filterExcludedIds, filterTypes, filterExcludedTypes, filterName, filterDescription, filterCreatedBy, filterLastModifiedBy, filterCreatedDateStart, filterCreatedDateEnd, filterLastModifiedDateStart, filterLastModifiedDateEnd, filterSearchString, filterCaseSensitive, filterWholeWord, filterResourcePackId, filterSystemResource, filterHidden, filterHasApprovedVersion, filterStandardVariantId, filterUseEffectiveDate, filterEffectiveDate, filterCategories, filterCategoryObjects, filterVfilterLastModifiedDateEnd, filterDomainId, filterLatestVersion, filterLocked, filterStates, filterOverrideIds, filterOverrideStates, advancedFilter, offset, count, fetchDomains, fetchPermissions, fetchCategories, fetchVariants, fetchApproval, expand, _callback);
        Type localVarReturnType = new TypeToken<PageResponseResourceVersion>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getResourcesFilterBody
     * @param domain  (required)
     * @param resourceFilter  (required)
     * @param filterIds  (optional)
     * @param filterExcludedIds  (optional)
     * @param filterTypes  (optional)
     * @param filterExcludedTypes  (optional)
     * @param filterName  (optional)
     * @param filterDescription  (optional)
     * @param filterCreatedBy  (optional)
     * @param filterLastModifiedBy  (optional)
     * @param filterCreatedDateStart  (optional)
     * @param filterCreatedDateEnd  (optional)
     * @param filterLastModifiedDateStart  (optional)
     * @param filterLastModifiedDateEnd  (optional)
     * @param filterSearchString This is equivalent to searching where the name OR the description is LIKE this value (optional)
     * @param filterCaseSensitive  (optional)
     * @param filterWholeWord  (optional)
     * @param filterResourcePackId  (optional)
     * @param filterSystemResource  (optional)
     * @param filterHidden  (optional)
     * @param filterHasApprovedVersion  (optional)
     * @param filterStandardVariantId  (optional)
     * @param filterUseEffectiveDate  (optional)
     * @param filterEffectiveDate  (optional)
     * @param filterCategories  (optional)
     * @param filterCategoryObjects  (optional)
     * @param filterVfilterLastModifiedDateEnd  (optional)
     * @param filterDomainId only include resources in this domain (optional)
     * @param filterLatestVersion only include the latest version of objects (optional)
     * @param filterLocked  (optional)
     * @param filterStates  (optional)
     * @param filterOverrideIds  (optional)
     * @param filterOverrideStates  (optional)
     * @param advancedFilter  (optional)
     * @param offset For pagination, fetch entities after this many (optional)
     * @param count For pagination, the number of entities per page (optional)
     * @param fetchDomains  (optional, default to false)
     * @param fetchPermissions  (optional, default to false)
     * @param fetchCategories  (optional, default to false)
     * @param fetchVariants  (optional, default to false)
     * @param fetchApproval  (optional, default to false)
     * @param expand  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getResourcesFilterBodyCall(String domain, ResourceFilter resourceFilter, List<UUID> filterIds, List<UUID> filterExcludedIds, List<String> filterTypes, List<String> filterExcludedTypes, String filterName, String filterDescription, String filterCreatedBy, String filterLastModifiedBy, OffsetDateTime filterCreatedDateStart, OffsetDateTime filterCreatedDateEnd, OffsetDateTime filterLastModifiedDateStart, OffsetDateTime filterLastModifiedDateEnd, String filterSearchString, Boolean filterCaseSensitive, Boolean filterWholeWord, UUID filterResourcePackId, Boolean filterSystemResource, Boolean filterHidden, Boolean filterHasApprovedVersion, UUID filterStandardVariantId, Boolean filterUseEffectiveDate, OffsetDateTime filterEffectiveDate, List<String> filterCategories, List<ResourceCategory> filterCategoryObjects, OffsetDateTime filterVfilterLastModifiedDateEnd, String filterDomainId, Boolean filterLatestVersion, Boolean filterLocked, List<String> filterStates, List<UUID> filterOverrideIds, List<String> filterOverrideStates, String advancedFilter, Integer offset, Integer count, Boolean fetchDomains, Boolean fetchPermissions, Boolean fetchCategories, Boolean fetchVariants, Boolean fetchApproval, String expand, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = resourceFilter;

        // create path and map variables
        String localVarPath = "/api/v1/resources/{domain}/filter"
            .replace("{" + "domain" + "}", localVarApiClient.escapeString(domain.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (filterIds != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "filter.ids", filterIds));
        }

        if (filterExcludedIds != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "filter.excludedIds", filterExcludedIds));
        }

        if (filterTypes != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "filter.types", filterTypes));
        }

        if (filterExcludedTypes != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "filter.excludedTypes", filterExcludedTypes));
        }

        if (filterName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter.name", filterName));
        }

        if (filterDescription != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter.description", filterDescription));
        }

        if (filterCreatedBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter.createdBy", filterCreatedBy));
        }

        if (filterLastModifiedBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter.lastModifiedBy", filterLastModifiedBy));
        }

        if (filterCreatedDateStart != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter.createdDateStart", filterCreatedDateStart));
        }

        if (filterCreatedDateEnd != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter.createdDateEnd", filterCreatedDateEnd));
        }

        if (filterLastModifiedDateStart != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter.lastModifiedDateStart", filterLastModifiedDateStart));
        }

        if (filterLastModifiedDateEnd != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter.lastModifiedDateEnd", filterLastModifiedDateEnd));
        }

        if (filterSearchString != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter.searchString", filterSearchString));
        }

        if (filterCaseSensitive != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter.caseSensitive", filterCaseSensitive));
        }

        if (filterWholeWord != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter.wholeWord", filterWholeWord));
        }

        if (filterResourcePackId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter.resourcePackId", filterResourcePackId));
        }

        if (filterSystemResource != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter.systemResource", filterSystemResource));
        }

        if (filterHidden != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter.hidden", filterHidden));
        }

        if (filterHasApprovedVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter.hasApprovedVersion", filterHasApprovedVersion));
        }

        if (filterStandardVariantId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter.standardVariantId", filterStandardVariantId));
        }

        if (filterUseEffectiveDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter.useEffectiveDate", filterUseEffectiveDate));
        }

        if (filterEffectiveDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter.effectiveDate", filterEffectiveDate));
        }

        if (filterCategories != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "filter.categories", filterCategories));
        }

        if (filterCategoryObjects != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "filter.categoryObjects", filterCategoryObjects));
        }

        if (filterVfilterLastModifiedDateEnd != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter.vfilter_lastModifiedDateEnd", filterVfilterLastModifiedDateEnd));
        }

        if (filterDomainId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter.domainId", filterDomainId));
        }

        if (filterLatestVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter.latestVersion", filterLatestVersion));
        }

        if (filterLocked != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter.locked", filterLocked));
        }

        if (filterStates != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "filter.states", filterStates));
        }

        if (filterOverrideIds != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "filter.overrideIds", filterOverrideIds));
        }

        if (filterOverrideStates != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "filter.overrideStates", filterOverrideStates));
        }

        if (advancedFilter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("advancedFilter", advancedFilter));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (fetchDomains != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fetchDomains", fetchDomains));
        }

        if (fetchPermissions != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fetchPermissions", fetchPermissions));
        }

        if (fetchCategories != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fetchCategories", fetchCategories));
        }

        if (fetchVariants != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fetchVariants", fetchVariants));
        }

        if (fetchApproval != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fetchApproval", fetchApproval));
        }

        if (expand != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("expand", expand));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getResourcesFilterBodyValidateBeforeCall(String domain, ResourceFilter resourceFilter, List<UUID> filterIds, List<UUID> filterExcludedIds, List<String> filterTypes, List<String> filterExcludedTypes, String filterName, String filterDescription, String filterCreatedBy, String filterLastModifiedBy, OffsetDateTime filterCreatedDateStart, OffsetDateTime filterCreatedDateEnd, OffsetDateTime filterLastModifiedDateStart, OffsetDateTime filterLastModifiedDateEnd, String filterSearchString, Boolean filterCaseSensitive, Boolean filterWholeWord, UUID filterResourcePackId, Boolean filterSystemResource, Boolean filterHidden, Boolean filterHasApprovedVersion, UUID filterStandardVariantId, Boolean filterUseEffectiveDate, OffsetDateTime filterEffectiveDate, List<String> filterCategories, List<ResourceCategory> filterCategoryObjects, OffsetDateTime filterVfilterLastModifiedDateEnd, String filterDomainId, Boolean filterLatestVersion, Boolean filterLocked, List<String> filterStates, List<UUID> filterOverrideIds, List<String> filterOverrideStates, String advancedFilter, Integer offset, Integer count, Boolean fetchDomains, Boolean fetchPermissions, Boolean fetchCategories, Boolean fetchVariants, Boolean fetchApproval, String expand, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling getResourcesFilterBody(Async)");
        }

        // verify the required parameter 'resourceFilter' is set
        if (resourceFilter == null) {
            throw new ApiException("Missing the required parameter 'resourceFilter' when calling getResourcesFilterBody(Async)");
        }

        return getResourcesFilterBodyCall(domain, resourceFilter, filterIds, filterExcludedIds, filterTypes, filterExcludedTypes, filterName, filterDescription, filterCreatedBy, filterLastModifiedBy, filterCreatedDateStart, filterCreatedDateEnd, filterLastModifiedDateStart, filterLastModifiedDateEnd, filterSearchString, filterCaseSensitive, filterWholeWord, filterResourcePackId, filterSystemResource, filterHidden, filterHasApprovedVersion, filterStandardVariantId, filterUseEffectiveDate, filterEffectiveDate, filterCategories, filterCategoryObjects, filterVfilterLastModifiedDateEnd, filterDomainId, filterLatestVersion, filterLocked, filterStates, filterOverrideIds, filterOverrideStates, advancedFilter, offset, count, fetchDomains, fetchPermissions, fetchCategories, fetchVariants, fetchApproval, expand, _callback);

    }

    /**
     * 
     * 
     * @param domain  (required)
     * @param resourceFilter  (required)
     * @param filterIds  (optional)
     * @param filterExcludedIds  (optional)
     * @param filterTypes  (optional)
     * @param filterExcludedTypes  (optional)
     * @param filterName  (optional)
     * @param filterDescription  (optional)
     * @param filterCreatedBy  (optional)
     * @param filterLastModifiedBy  (optional)
     * @param filterCreatedDateStart  (optional)
     * @param filterCreatedDateEnd  (optional)
     * @param filterLastModifiedDateStart  (optional)
     * @param filterLastModifiedDateEnd  (optional)
     * @param filterSearchString This is equivalent to searching where the name OR the description is LIKE this value (optional)
     * @param filterCaseSensitive  (optional)
     * @param filterWholeWord  (optional)
     * @param filterResourcePackId  (optional)
     * @param filterSystemResource  (optional)
     * @param filterHidden  (optional)
     * @param filterHasApprovedVersion  (optional)
     * @param filterStandardVariantId  (optional)
     * @param filterUseEffectiveDate  (optional)
     * @param filterEffectiveDate  (optional)
     * @param filterCategories  (optional)
     * @param filterCategoryObjects  (optional)
     * @param filterVfilterLastModifiedDateEnd  (optional)
     * @param filterDomainId only include resources in this domain (optional)
     * @param filterLatestVersion only include the latest version of objects (optional)
     * @param filterLocked  (optional)
     * @param filterStates  (optional)
     * @param filterOverrideIds  (optional)
     * @param filterOverrideStates  (optional)
     * @param advancedFilter  (optional)
     * @param offset For pagination, fetch entities after this many (optional)
     * @param count For pagination, the number of entities per page (optional)
     * @param fetchDomains  (optional, default to false)
     * @param fetchPermissions  (optional, default to false)
     * @param fetchCategories  (optional, default to false)
     * @param fetchVariants  (optional, default to false)
     * @param fetchApproval  (optional, default to false)
     * @param expand  (optional)
     * @return PageResponseResourceVersion
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public PageResponseResourceVersion getResourcesFilterBody(String domain, ResourceFilter resourceFilter, List<UUID> filterIds, List<UUID> filterExcludedIds, List<String> filterTypes, List<String> filterExcludedTypes, String filterName, String filterDescription, String filterCreatedBy, String filterLastModifiedBy, OffsetDateTime filterCreatedDateStart, OffsetDateTime filterCreatedDateEnd, OffsetDateTime filterLastModifiedDateStart, OffsetDateTime filterLastModifiedDateEnd, String filterSearchString, Boolean filterCaseSensitive, Boolean filterWholeWord, UUID filterResourcePackId, Boolean filterSystemResource, Boolean filterHidden, Boolean filterHasApprovedVersion, UUID filterStandardVariantId, Boolean filterUseEffectiveDate, OffsetDateTime filterEffectiveDate, List<String> filterCategories, List<ResourceCategory> filterCategoryObjects, OffsetDateTime filterVfilterLastModifiedDateEnd, String filterDomainId, Boolean filterLatestVersion, Boolean filterLocked, List<String> filterStates, List<UUID> filterOverrideIds, List<String> filterOverrideStates, String advancedFilter, Integer offset, Integer count, Boolean fetchDomains, Boolean fetchPermissions, Boolean fetchCategories, Boolean fetchVariants, Boolean fetchApproval, String expand) throws ApiException {
        ApiResponse<PageResponseResourceVersion> localVarResp = getResourcesFilterBodyWithHttpInfo(domain, resourceFilter, filterIds, filterExcludedIds, filterTypes, filterExcludedTypes, filterName, filterDescription, filterCreatedBy, filterLastModifiedBy, filterCreatedDateStart, filterCreatedDateEnd, filterLastModifiedDateStart, filterLastModifiedDateEnd, filterSearchString, filterCaseSensitive, filterWholeWord, filterResourcePackId, filterSystemResource, filterHidden, filterHasApprovedVersion, filterStandardVariantId, filterUseEffectiveDate, filterEffectiveDate, filterCategories, filterCategoryObjects, filterVfilterLastModifiedDateEnd, filterDomainId, filterLatestVersion, filterLocked, filterStates, filterOverrideIds, filterOverrideStates, advancedFilter, offset, count, fetchDomains, fetchPermissions, fetchCategories, fetchVariants, fetchApproval, expand);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param domain  (required)
     * @param resourceFilter  (required)
     * @param filterIds  (optional)
     * @param filterExcludedIds  (optional)
     * @param filterTypes  (optional)
     * @param filterExcludedTypes  (optional)
     * @param filterName  (optional)
     * @param filterDescription  (optional)
     * @param filterCreatedBy  (optional)
     * @param filterLastModifiedBy  (optional)
     * @param filterCreatedDateStart  (optional)
     * @param filterCreatedDateEnd  (optional)
     * @param filterLastModifiedDateStart  (optional)
     * @param filterLastModifiedDateEnd  (optional)
     * @param filterSearchString This is equivalent to searching where the name OR the description is LIKE this value (optional)
     * @param filterCaseSensitive  (optional)
     * @param filterWholeWord  (optional)
     * @param filterResourcePackId  (optional)
     * @param filterSystemResource  (optional)
     * @param filterHidden  (optional)
     * @param filterHasApprovedVersion  (optional)
     * @param filterStandardVariantId  (optional)
     * @param filterUseEffectiveDate  (optional)
     * @param filterEffectiveDate  (optional)
     * @param filterCategories  (optional)
     * @param filterCategoryObjects  (optional)
     * @param filterVfilterLastModifiedDateEnd  (optional)
     * @param filterDomainId only include resources in this domain (optional)
     * @param filterLatestVersion only include the latest version of objects (optional)
     * @param filterLocked  (optional)
     * @param filterStates  (optional)
     * @param filterOverrideIds  (optional)
     * @param filterOverrideStates  (optional)
     * @param advancedFilter  (optional)
     * @param offset For pagination, fetch entities after this many (optional)
     * @param count For pagination, the number of entities per page (optional)
     * @param fetchDomains  (optional, default to false)
     * @param fetchPermissions  (optional, default to false)
     * @param fetchCategories  (optional, default to false)
     * @param fetchVariants  (optional, default to false)
     * @param fetchApproval  (optional, default to false)
     * @param expand  (optional)
     * @return ApiResponse&lt;PageResponseResourceVersion&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PageResponseResourceVersion> getResourcesFilterBodyWithHttpInfo(String domain, ResourceFilter resourceFilter, List<UUID> filterIds, List<UUID> filterExcludedIds, List<String> filterTypes, List<String> filterExcludedTypes, String filterName, String filterDescription, String filterCreatedBy, String filterLastModifiedBy, OffsetDateTime filterCreatedDateStart, OffsetDateTime filterCreatedDateEnd, OffsetDateTime filterLastModifiedDateStart, OffsetDateTime filterLastModifiedDateEnd, String filterSearchString, Boolean filterCaseSensitive, Boolean filterWholeWord, UUID filterResourcePackId, Boolean filterSystemResource, Boolean filterHidden, Boolean filterHasApprovedVersion, UUID filterStandardVariantId, Boolean filterUseEffectiveDate, OffsetDateTime filterEffectiveDate, List<String> filterCategories, List<ResourceCategory> filterCategoryObjects, OffsetDateTime filterVfilterLastModifiedDateEnd, String filterDomainId, Boolean filterLatestVersion, Boolean filterLocked, List<String> filterStates, List<UUID> filterOverrideIds, List<String> filterOverrideStates, String advancedFilter, Integer offset, Integer count, Boolean fetchDomains, Boolean fetchPermissions, Boolean fetchCategories, Boolean fetchVariants, Boolean fetchApproval, String expand) throws ApiException {
        okhttp3.Call localVarCall = getResourcesFilterBodyValidateBeforeCall(domain, resourceFilter, filterIds, filterExcludedIds, filterTypes, filterExcludedTypes, filterName, filterDescription, filterCreatedBy, filterLastModifiedBy, filterCreatedDateStart, filterCreatedDateEnd, filterLastModifiedDateStart, filterLastModifiedDateEnd, filterSearchString, filterCaseSensitive, filterWholeWord, filterResourcePackId, filterSystemResource, filterHidden, filterHasApprovedVersion, filterStandardVariantId, filterUseEffectiveDate, filterEffectiveDate, filterCategories, filterCategoryObjects, filterVfilterLastModifiedDateEnd, filterDomainId, filterLatestVersion, filterLocked, filterStates, filterOverrideIds, filterOverrideStates, advancedFilter, offset, count, fetchDomains, fetchPermissions, fetchCategories, fetchVariants, fetchApproval, expand, null);
        Type localVarReturnType = new TypeToken<PageResponseResourceVersion>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param domain  (required)
     * @param resourceFilter  (required)
     * @param filterIds  (optional)
     * @param filterExcludedIds  (optional)
     * @param filterTypes  (optional)
     * @param filterExcludedTypes  (optional)
     * @param filterName  (optional)
     * @param filterDescription  (optional)
     * @param filterCreatedBy  (optional)
     * @param filterLastModifiedBy  (optional)
     * @param filterCreatedDateStart  (optional)
     * @param filterCreatedDateEnd  (optional)
     * @param filterLastModifiedDateStart  (optional)
     * @param filterLastModifiedDateEnd  (optional)
     * @param filterSearchString This is equivalent to searching where the name OR the description is LIKE this value (optional)
     * @param filterCaseSensitive  (optional)
     * @param filterWholeWord  (optional)
     * @param filterResourcePackId  (optional)
     * @param filterSystemResource  (optional)
     * @param filterHidden  (optional)
     * @param filterHasApprovedVersion  (optional)
     * @param filterStandardVariantId  (optional)
     * @param filterUseEffectiveDate  (optional)
     * @param filterEffectiveDate  (optional)
     * @param filterCategories  (optional)
     * @param filterCategoryObjects  (optional)
     * @param filterVfilterLastModifiedDateEnd  (optional)
     * @param filterDomainId only include resources in this domain (optional)
     * @param filterLatestVersion only include the latest version of objects (optional)
     * @param filterLocked  (optional)
     * @param filterStates  (optional)
     * @param filterOverrideIds  (optional)
     * @param filterOverrideStates  (optional)
     * @param advancedFilter  (optional)
     * @param offset For pagination, fetch entities after this many (optional)
     * @param count For pagination, the number of entities per page (optional)
     * @param fetchDomains  (optional, default to false)
     * @param fetchPermissions  (optional, default to false)
     * @param fetchCategories  (optional, default to false)
     * @param fetchVariants  (optional, default to false)
     * @param fetchApproval  (optional, default to false)
     * @param expand  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getResourcesFilterBodyAsync(String domain, ResourceFilter resourceFilter, List<UUID> filterIds, List<UUID> filterExcludedIds, List<String> filterTypes, List<String> filterExcludedTypes, String filterName, String filterDescription, String filterCreatedBy, String filterLastModifiedBy, OffsetDateTime filterCreatedDateStart, OffsetDateTime filterCreatedDateEnd, OffsetDateTime filterLastModifiedDateStart, OffsetDateTime filterLastModifiedDateEnd, String filterSearchString, Boolean filterCaseSensitive, Boolean filterWholeWord, UUID filterResourcePackId, Boolean filterSystemResource, Boolean filterHidden, Boolean filterHasApprovedVersion, UUID filterStandardVariantId, Boolean filterUseEffectiveDate, OffsetDateTime filterEffectiveDate, List<String> filterCategories, List<ResourceCategory> filterCategoryObjects, OffsetDateTime filterVfilterLastModifiedDateEnd, String filterDomainId, Boolean filterLatestVersion, Boolean filterLocked, List<String> filterStates, List<UUID> filterOverrideIds, List<String> filterOverrideStates, String advancedFilter, Integer offset, Integer count, Boolean fetchDomains, Boolean fetchPermissions, Boolean fetchCategories, Boolean fetchVariants, Boolean fetchApproval, String expand, final ApiCallback<PageResponseResourceVersion> _callback) throws ApiException {

        okhttp3.Call localVarCall = getResourcesFilterBodyValidateBeforeCall(domain, resourceFilter, filterIds, filterExcludedIds, filterTypes, filterExcludedTypes, filterName, filterDescription, filterCreatedBy, filterLastModifiedBy, filterCreatedDateStart, filterCreatedDateEnd, filterLastModifiedDateStart, filterLastModifiedDateEnd, filterSearchString, filterCaseSensitive, filterWholeWord, filterResourcePackId, filterSystemResource, filterHidden, filterHasApprovedVersion, filterStandardVariantId, filterUseEffectiveDate, filterEffectiveDate, filterCategories, filterCategoryObjects, filterVfilterLastModifiedDateEnd, filterDomainId, filterLatestVersion, filterLocked, filterStates, filterOverrideIds, filterOverrideStates, advancedFilter, offset, count, fetchDomains, fetchPermissions, fetchCategories, fetchVariants, fetchApproval, expand, _callback);
        Type localVarReturnType = new TypeToken<PageResponseResourceVersion>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for hideResource
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call hideResourceCall(UUID id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/resources/{domain}/{id}/hide"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call hideResourceValidateBeforeCall(UUID id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling hideResource(Async)");
        }

        return hideResourceCall(id, _callback);

    }

    /**
     * 
     * 
     * @param id  (required)
     * @return DataResponseResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public DataResponseResource hideResource(UUID id) throws ApiException {
        ApiResponse<DataResponseResource> localVarResp = hideResourceWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id  (required)
     * @return ApiResponse&lt;DataResponseResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DataResponseResource> hideResourceWithHttpInfo(UUID id) throws ApiException {
        okhttp3.Call localVarCall = hideResourceValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<DataResponseResource>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call hideResourceAsync(UUID id, final ApiCallback<DataResponseResource> _callback) throws ApiException {

        okhttp3.Call localVarCall = hideResourceValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<DataResponseResource>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for lockResource
     * @param domain  (required)
     * @param id  (required)
     * @param version  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call lockResourceCall(String domain, UUID id, Integer version, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/resources/{domain}/{id}/lock"
            .replace("{" + "domain" + "}", localVarApiClient.escapeString(domain.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("version", version));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call lockResourceValidateBeforeCall(String domain, UUID id, Integer version, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling lockResource(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling lockResource(Async)");
        }

        return lockResourceCall(domain, id, version, _callback);

    }

    /**
     * 
     * 
     * @param domain  (required)
     * @param id  (required)
     * @param version  (optional)
     * @return DataResponseResourceVersion
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public DataResponseResourceVersion lockResource(String domain, UUID id, Integer version) throws ApiException {
        ApiResponse<DataResponseResourceVersion> localVarResp = lockResourceWithHttpInfo(domain, id, version);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param domain  (required)
     * @param id  (required)
     * @param version  (optional)
     * @return ApiResponse&lt;DataResponseResourceVersion&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DataResponseResourceVersion> lockResourceWithHttpInfo(String domain, UUID id, Integer version) throws ApiException {
        okhttp3.Call localVarCall = lockResourceValidateBeforeCall(domain, id, version, null);
        Type localVarReturnType = new TypeToken<DataResponseResourceVersion>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param domain  (required)
     * @param id  (required)
     * @param version  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call lockResourceAsync(String domain, UUID id, Integer version, final ApiCallback<DataResponseResourceVersion> _callback) throws ApiException {

        okhttp3.Call localVarCall = lockResourceValidateBeforeCall(domain, id, version, _callback);
        Type localVarReturnType = new TypeToken<DataResponseResourceVersion>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for promote
     * @param domain  (required)
     * @param id  (required)
     * @param domain2  (required)
     * @param version  (optional, default to -1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call promoteCall(String domain, UUID id, Domain domain2, Integer version, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = domain2;

        // create path and map variables
        String localVarPath = "/api/v1/resources/{domain}/{id}/promote"
            .replace("{" + "domain" + "}", localVarApiClient.escapeString(domain.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("version", version));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call promoteValidateBeforeCall(String domain, UUID id, Domain domain2, Integer version, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling promote(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling promote(Async)");
        }

        // verify the required parameter 'domain2' is set
        if (domain2 == null) {
            throw new ApiException("Missing the required parameter 'domain2' when calling promote(Async)");
        }

        return promoteCall(domain, id, domain2, version, _callback);

    }

    /**
     * 
     * 
     * @param domain  (required)
     * @param id  (required)
     * @param domain2  (required)
     * @param version  (optional, default to -1)
     * @return DataResponseResourceVersion
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public DataResponseResourceVersion promote(String domain, UUID id, Domain domain2, Integer version) throws ApiException {
        ApiResponse<DataResponseResourceVersion> localVarResp = promoteWithHttpInfo(domain, id, domain2, version);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param domain  (required)
     * @param id  (required)
     * @param domain2  (required)
     * @param version  (optional, default to -1)
     * @return ApiResponse&lt;DataResponseResourceVersion&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DataResponseResourceVersion> promoteWithHttpInfo(String domain, UUID id, Domain domain2, Integer version) throws ApiException {
        okhttp3.Call localVarCall = promoteValidateBeforeCall(domain, id, domain2, version, null);
        Type localVarReturnType = new TypeToken<DataResponseResourceVersion>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param domain  (required)
     * @param id  (required)
     * @param domain2  (required)
     * @param version  (optional, default to -1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call promoteAsync(String domain, UUID id, Domain domain2, Integer version, final ApiCallback<DataResponseResourceVersion> _callback) throws ApiException {

        okhttp3.Call localVarCall = promoteValidateBeforeCall(domain, id, domain2, version, _callback);
        Type localVarReturnType = new TypeToken<DataResponseResourceVersion>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for resourceListEtags
     * @param domain  (required)
     * @param etagDescriptorRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resourceListEtagsCall(String domain, EtagDescriptorRequest etagDescriptorRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = etagDescriptorRequest;

        // create path and map variables
        String localVarPath = "/api/v1/resources/{domain}/Etag/Descriptors"
            .replace("{" + "domain" + "}", localVarApiClient.escapeString(domain.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call resourceListEtagsValidateBeforeCall(String domain, EtagDescriptorRequest etagDescriptorRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling resourceListEtags(Async)");
        }

        // verify the required parameter 'etagDescriptorRequest' is set
        if (etagDescriptorRequest == null) {
            throw new ApiException("Missing the required parameter 'etagDescriptorRequest' when calling resourceListEtags(Async)");
        }

        return resourceListEtagsCall(domain, etagDescriptorRequest, _callback);

    }

    /**
     * 
     * 
     * @param domain  (required)
     * @param etagDescriptorRequest  (required)
     * @return EtagDescriptorResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public EtagDescriptorResponse resourceListEtags(String domain, EtagDescriptorRequest etagDescriptorRequest) throws ApiException {
        ApiResponse<EtagDescriptorResponse> localVarResp = resourceListEtagsWithHttpInfo(domain, etagDescriptorRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param domain  (required)
     * @param etagDescriptorRequest  (required)
     * @return ApiResponse&lt;EtagDescriptorResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EtagDescriptorResponse> resourceListEtagsWithHttpInfo(String domain, EtagDescriptorRequest etagDescriptorRequest) throws ApiException {
        okhttp3.Call localVarCall = resourceListEtagsValidateBeforeCall(domain, etagDescriptorRequest, null);
        Type localVarReturnType = new TypeToken<EtagDescriptorResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param domain  (required)
     * @param etagDescriptorRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resourceListEtagsAsync(String domain, EtagDescriptorRequest etagDescriptorRequest, final ApiCallback<EtagDescriptorResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = resourceListEtagsValidateBeforeCall(domain, etagDescriptorRequest, _callback);
        Type localVarReturnType = new TypeToken<EtagDescriptorResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for revertToOldVersion
     * @param domain  (required)
     * @param id  (required)
     * @param oldVersion  (required)
     * @param commentRequestBody  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call revertToOldVersionCall(String domain, UUID id, Integer oldVersion, CommentRequestBody commentRequestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = commentRequestBody;

        // create path and map variables
        String localVarPath = "/api/v1/resources/{domain}/{id}/revert/{oldVersion}"
            .replace("{" + "domain" + "}", localVarApiClient.escapeString(domain.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "oldVersion" + "}", localVarApiClient.escapeString(oldVersion.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call revertToOldVersionValidateBeforeCall(String domain, UUID id, Integer oldVersion, CommentRequestBody commentRequestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling revertToOldVersion(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling revertToOldVersion(Async)");
        }

        // verify the required parameter 'oldVersion' is set
        if (oldVersion == null) {
            throw new ApiException("Missing the required parameter 'oldVersion' when calling revertToOldVersion(Async)");
        }

        return revertToOldVersionCall(domain, id, oldVersion, commentRequestBody, _callback);

    }

    /**
     * 
     * Replace the content of the current draft, or create a new draft with content of specified version. Copies links as well.
     * @param domain  (required)
     * @param id  (required)
     * @param oldVersion  (required)
     * @param commentRequestBody  (optional)
     * @return DataResponseResourceVersion
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public DataResponseResourceVersion revertToOldVersion(String domain, UUID id, Integer oldVersion, CommentRequestBody commentRequestBody) throws ApiException {
        ApiResponse<DataResponseResourceVersion> localVarResp = revertToOldVersionWithHttpInfo(domain, id, oldVersion, commentRequestBody);
        return localVarResp.getData();
    }

    /**
     * 
     * Replace the content of the current draft, or create a new draft with content of specified version. Copies links as well.
     * @param domain  (required)
     * @param id  (required)
     * @param oldVersion  (required)
     * @param commentRequestBody  (optional)
     * @return ApiResponse&lt;DataResponseResourceVersion&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DataResponseResourceVersion> revertToOldVersionWithHttpInfo(String domain, UUID id, Integer oldVersion, CommentRequestBody commentRequestBody) throws ApiException {
        okhttp3.Call localVarCall = revertToOldVersionValidateBeforeCall(domain, id, oldVersion, commentRequestBody, null);
        Type localVarReturnType = new TypeToken<DataResponseResourceVersion>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Replace the content of the current draft, or create a new draft with content of specified version. Copies links as well.
     * @param domain  (required)
     * @param id  (required)
     * @param oldVersion  (required)
     * @param commentRequestBody  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call revertToOldVersionAsync(String domain, UUID id, Integer oldVersion, CommentRequestBody commentRequestBody, final ApiCallback<DataResponseResourceVersion> _callback) throws ApiException {

        okhttp3.Call localVarCall = revertToOldVersionValidateBeforeCall(domain, id, oldVersion, commentRequestBody, _callback);
        Type localVarReturnType = new TypeToken<DataResponseResourceVersion>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sectionDescendants
     * @param domain  (required)
     * @param id  (required)
     * @param latestApproved  (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sectionDescendantsCall(String domain, UUID id, Boolean latestApproved, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/resources/{domain}/{id}/sectionDescendants"
            .replace("{" + "domain" + "}", localVarApiClient.escapeString(domain.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (latestApproved != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("latestApproved", latestApproved));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sectionDescendantsValidateBeforeCall(String domain, UUID id, Boolean latestApproved, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling sectionDescendants(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling sectionDescendants(Async)");
        }

        return sectionDescendantsCall(domain, id, latestApproved, _callback);

    }

    /**
     * 
     * 
     * @param domain  (required)
     * @param id  (required)
     * @param latestApproved  (optional, default to false)
     * @return DataResponseTreeResourceVersion
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public DataResponseTreeResourceVersion sectionDescendants(String domain, UUID id, Boolean latestApproved) throws ApiException {
        ApiResponse<DataResponseTreeResourceVersion> localVarResp = sectionDescendantsWithHttpInfo(domain, id, latestApproved);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param domain  (required)
     * @param id  (required)
     * @param latestApproved  (optional, default to false)
     * @return ApiResponse&lt;DataResponseTreeResourceVersion&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DataResponseTreeResourceVersion> sectionDescendantsWithHttpInfo(String domain, UUID id, Boolean latestApproved) throws ApiException {
        okhttp3.Call localVarCall = sectionDescendantsValidateBeforeCall(domain, id, latestApproved, null);
        Type localVarReturnType = new TypeToken<DataResponseTreeResourceVersion>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param domain  (required)
     * @param id  (required)
     * @param latestApproved  (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sectionDescendantsAsync(String domain, UUID id, Boolean latestApproved, final ApiCallback<DataResponseTreeResourceVersion> _callback) throws ApiException {

        okhttp3.Call localVarCall = sectionDescendantsValidateBeforeCall(domain, id, latestApproved, _callback);
        Type localVarReturnType = new TypeToken<DataResponseTreeResourceVersion>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for showResource
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call showResourceCall(UUID id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/resources/{domain}/{id}/show"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call showResourceValidateBeforeCall(UUID id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling showResource(Async)");
        }

        return showResourceCall(id, _callback);

    }

    /**
     * 
     * 
     * @param id  (required)
     * @return DataResponseResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public DataResponseResource showResource(UUID id) throws ApiException {
        ApiResponse<DataResponseResource> localVarResp = showResourceWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id  (required)
     * @return ApiResponse&lt;DataResponseResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DataResponseResource> showResourceWithHttpInfo(UUID id) throws ApiException {
        okhttp3.Call localVarCall = showResourceValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<DataResponseResource>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call showResourceAsync(UUID id, final ApiCallback<DataResponseResource> _callback) throws ApiException {

        okhttp3.Call localVarCall = showResourceValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<DataResponseResource>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for unlockResource
     * @param domain  (required)
     * @param id  (required)
     * @param version  (optional)
     * @param force When set to true, this will break a lock held by another user if the current user is a tenant admin. (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call unlockResourceCall(String domain, UUID id, Integer version, Boolean force, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/resources/{domain}/{id}/lock"
            .replace("{" + "domain" + "}", localVarApiClient.escapeString(domain.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("version", version));
        }

        if (force != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("force", force));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call unlockResourceValidateBeforeCall(String domain, UUID id, Integer version, Boolean force, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling unlockResource(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling unlockResource(Async)");
        }

        return unlockResourceCall(domain, id, version, force, _callback);

    }

    /**
     * 
     * 
     * @param domain  (required)
     * @param id  (required)
     * @param version  (optional)
     * @param force When set to true, this will break a lock held by another user if the current user is a tenant admin. (optional, default to false)
     * @return DataResponseResourceVersion
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public DataResponseResourceVersion unlockResource(String domain, UUID id, Integer version, Boolean force) throws ApiException {
        ApiResponse<DataResponseResourceVersion> localVarResp = unlockResourceWithHttpInfo(domain, id, version, force);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param domain  (required)
     * @param id  (required)
     * @param version  (optional)
     * @param force When set to true, this will break a lock held by another user if the current user is a tenant admin. (optional, default to false)
     * @return ApiResponse&lt;DataResponseResourceVersion&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DataResponseResourceVersion> unlockResourceWithHttpInfo(String domain, UUID id, Integer version, Boolean force) throws ApiException {
        okhttp3.Call localVarCall = unlockResourceValidateBeforeCall(domain, id, version, force, null);
        Type localVarReturnType = new TypeToken<DataResponseResourceVersion>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param domain  (required)
     * @param id  (required)
     * @param version  (optional)
     * @param force When set to true, this will break a lock held by another user if the current user is a tenant admin. (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call unlockResourceAsync(String domain, UUID id, Integer version, Boolean force, final ApiCallback<DataResponseResourceVersion> _callback) throws ApiException {

        okhttp3.Call localVarCall = unlockResourceValidateBeforeCall(domain, id, version, force, _callback);
        Type localVarReturnType = new TypeToken<DataResponseResourceVersion>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateContentOfTypeViaFile
     * @param domain  (required)
     * @param id  (required)
     * @param type  (required)
     * @param _file The binary file to upload (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateContentOfTypeViaFileCall(String domain, UUID id, String type, File _file, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/resources/{domain}/{id}/content/{type}"
            .replace("{" + "domain" + "}", localVarApiClient.escapeString(domain.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "type" + "}", localVarApiClient.escapeString(type.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (_file != null) {
            localVarFormParams.put("file", _file);
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateContentOfTypeViaFileValidateBeforeCall(String domain, UUID id, String type, File _file, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling updateContentOfTypeViaFile(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateContentOfTypeViaFile(Async)");
        }

        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling updateContentOfTypeViaFile(Async)");
        }

        return updateContentOfTypeViaFileCall(domain, id, type, _file, _callback);

    }

    /**
     * 
     * Expects a form part in the request body with the name \&quot;file\&quot; and will use the contents of that file to update the specified resource.
     * @param domain  (required)
     * @param id  (required)
     * @param type  (required)
     * @param _file The binary file to upload (optional)
     * @return DataResponseResourceVersion
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public DataResponseResourceVersion updateContentOfTypeViaFile(String domain, UUID id, String type, File _file) throws ApiException {
        ApiResponse<DataResponseResourceVersion> localVarResp = updateContentOfTypeViaFileWithHttpInfo(domain, id, type, _file);
        return localVarResp.getData();
    }

    /**
     * 
     * Expects a form part in the request body with the name \&quot;file\&quot; and will use the contents of that file to update the specified resource.
     * @param domain  (required)
     * @param id  (required)
     * @param type  (required)
     * @param _file The binary file to upload (optional)
     * @return ApiResponse&lt;DataResponseResourceVersion&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DataResponseResourceVersion> updateContentOfTypeViaFileWithHttpInfo(String domain, UUID id, String type, File _file) throws ApiException {
        okhttp3.Call localVarCall = updateContentOfTypeViaFileValidateBeforeCall(domain, id, type, _file, null);
        Type localVarReturnType = new TypeToken<DataResponseResourceVersion>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Expects a form part in the request body with the name \&quot;file\&quot; and will use the contents of that file to update the specified resource.
     * @param domain  (required)
     * @param id  (required)
     * @param type  (required)
     * @param _file The binary file to upload (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateContentOfTypeViaFileAsync(String domain, UUID id, String type, File _file, final ApiCallback<DataResponseResourceVersion> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateContentOfTypeViaFileValidateBeforeCall(domain, id, type, _file, _callback);
        Type localVarReturnType = new TypeToken<DataResponseResourceVersion>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateContentViaFile
     * @param domain  (required)
     * @param id  (required)
     * @param _file The binary file to upload (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateContentViaFileCall(String domain, UUID id, File _file, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/resources/{domain}/{id}/content"
            .replace("{" + "domain" + "}", localVarApiClient.escapeString(domain.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (_file != null) {
            localVarFormParams.put("file", _file);
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateContentViaFileValidateBeforeCall(String domain, UUID id, File _file, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling updateContentViaFile(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateContentViaFile(Async)");
        }

        return updateContentViaFileCall(domain, id, _file, _callback);

    }

    /**
     * 
     * Expects a form part in the request body with the name \&quot;file\&quot; and will use the contents of that file to update the specified resource.
     * @param domain  (required)
     * @param id  (required)
     * @param _file The binary file to upload (optional)
     * @return DataResponseResourceVersion
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public DataResponseResourceVersion updateContentViaFile(String domain, UUID id, File _file) throws ApiException {
        ApiResponse<DataResponseResourceVersion> localVarResp = updateContentViaFileWithHttpInfo(domain, id, _file);
        return localVarResp.getData();
    }

    /**
     * 
     * Expects a form part in the request body with the name \&quot;file\&quot; and will use the contents of that file to update the specified resource.
     * @param domain  (required)
     * @param id  (required)
     * @param _file The binary file to upload (optional)
     * @return ApiResponse&lt;DataResponseResourceVersion&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DataResponseResourceVersion> updateContentViaFileWithHttpInfo(String domain, UUID id, File _file) throws ApiException {
        okhttp3.Call localVarCall = updateContentViaFileValidateBeforeCall(domain, id, _file, null);
        Type localVarReturnType = new TypeToken<DataResponseResourceVersion>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Expects a form part in the request body with the name \&quot;file\&quot; and will use the contents of that file to update the specified resource.
     * @param domain  (required)
     * @param id  (required)
     * @param _file The binary file to upload (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateContentViaFileAsync(String domain, UUID id, File _file, final ApiCallback<DataResponseResourceVersion> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateContentViaFileValidateBeforeCall(domain, id, _file, _callback);
        Type localVarReturnType = new TypeToken<DataResponseResourceVersion>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateResource
     * @param domain  (required)
     * @param id  (required)
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateResourceCall(String domain, UUID id, Object body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/api/v1/resources/{domain}/{id}"
            .replace("{" + "domain" + "}", localVarApiClient.escapeString(domain.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateResourceValidateBeforeCall(String domain, UUID id, Object body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling updateResource(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateResource(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateResource(Async)");
        }

        return updateResourceCall(domain, id, body, _callback);

    }

    /**
     * 
     * 
     * @param domain  (required)
     * @param id  (required)
     * @param body  (required)
     * @return DataResponseResourceVersion
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public DataResponseResourceVersion updateResource(String domain, UUID id, Object body) throws ApiException {
        ApiResponse<DataResponseResourceVersion> localVarResp = updateResourceWithHttpInfo(domain, id, body);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param domain  (required)
     * @param id  (required)
     * @param body  (required)
     * @return ApiResponse&lt;DataResponseResourceVersion&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DataResponseResourceVersion> updateResourceWithHttpInfo(String domain, UUID id, Object body) throws ApiException {
        okhttp3.Call localVarCall = updateResourceValidateBeforeCall(domain, id, body, null);
        Type localVarReturnType = new TypeToken<DataResponseResourceVersion>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param domain  (required)
     * @param id  (required)
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateResourceAsync(String domain, UUID id, Object body, final ApiCallback<DataResponseResourceVersion> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateResourceValidateBeforeCall(domain, id, body, _callback);
        Type localVarReturnType = new TypeToken<DataResponseResourceVersion>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateState
     * @param domain  (required)
     * @param id  (required)
     * @param workflowRequestBody  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateStateCall(String domain, UUID id, WorkflowRequestBody workflowRequestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = workflowRequestBody;

        // create path and map variables
        String localVarPath = "/api/v1/resources/{domain}/{id}/state"
            .replace("{" + "domain" + "}", localVarApiClient.escapeString(domain.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateStateValidateBeforeCall(String domain, UUID id, WorkflowRequestBody workflowRequestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling updateState(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateState(Async)");
        }

        // verify the required parameter 'workflowRequestBody' is set
        if (workflowRequestBody == null) {
            throw new ApiException("Missing the required parameter 'workflowRequestBody' when calling updateState(Async)");
        }

        return updateStateCall(domain, id, workflowRequestBody, _callback);

    }

    /**
     * 
     * 
     * @param domain  (required)
     * @param id  (required)
     * @param workflowRequestBody  (required)
     * @return DataResponseResourceVersion
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public DataResponseResourceVersion updateState(String domain, UUID id, WorkflowRequestBody workflowRequestBody) throws ApiException {
        ApiResponse<DataResponseResourceVersion> localVarResp = updateStateWithHttpInfo(domain, id, workflowRequestBody);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param domain  (required)
     * @param id  (required)
     * @param workflowRequestBody  (required)
     * @return ApiResponse&lt;DataResponseResourceVersion&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DataResponseResourceVersion> updateStateWithHttpInfo(String domain, UUID id, WorkflowRequestBody workflowRequestBody) throws ApiException {
        okhttp3.Call localVarCall = updateStateValidateBeforeCall(domain, id, workflowRequestBody, null);
        Type localVarReturnType = new TypeToken<DataResponseResourceVersion>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param domain  (required)
     * @param id  (required)
     * @param workflowRequestBody  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateStateAsync(String domain, UUID id, WorkflowRequestBody workflowRequestBody, final ApiCallback<DataResponseResourceVersion> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateStateValidateBeforeCall(domain, id, workflowRequestBody, _callback);
        Type localVarReturnType = new TypeToken<DataResponseResourceVersion>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateStates
     * @param domain  (required)
     * @param bulkWorkflowRequestBody  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateStatesCall(String domain, BulkWorkflowRequestBody bulkWorkflowRequestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = bulkWorkflowRequestBody;

        // create path and map variables
        String localVarPath = "/api/v1/resources/{domain}/state"
            .replace("{" + "domain" + "}", localVarApiClient.escapeString(domain.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateStatesValidateBeforeCall(String domain, BulkWorkflowRequestBody bulkWorkflowRequestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling updateStates(Async)");
        }

        // verify the required parameter 'bulkWorkflowRequestBody' is set
        if (bulkWorkflowRequestBody == null) {
            throw new ApiException("Missing the required parameter 'bulkWorkflowRequestBody' when calling updateStates(Async)");
        }

        return updateStatesCall(domain, bulkWorkflowRequestBody, _callback);

    }

    /**
     * 
     * 
     * @param domain  (required)
     * @param bulkWorkflowRequestBody  (required)
     * @return DataResponseBulkWorkflowStateChangeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public DataResponseBulkWorkflowStateChangeResponse updateStates(String domain, BulkWorkflowRequestBody bulkWorkflowRequestBody) throws ApiException {
        ApiResponse<DataResponseBulkWorkflowStateChangeResponse> localVarResp = updateStatesWithHttpInfo(domain, bulkWorkflowRequestBody);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param domain  (required)
     * @param bulkWorkflowRequestBody  (required)
     * @return ApiResponse&lt;DataResponseBulkWorkflowStateChangeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DataResponseBulkWorkflowStateChangeResponse> updateStatesWithHttpInfo(String domain, BulkWorkflowRequestBody bulkWorkflowRequestBody) throws ApiException {
        okhttp3.Call localVarCall = updateStatesValidateBeforeCall(domain, bulkWorkflowRequestBody, null);
        Type localVarReturnType = new TypeToken<DataResponseBulkWorkflowStateChangeResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param domain  (required)
     * @param bulkWorkflowRequestBody  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateStatesAsync(String domain, BulkWorkflowRequestBody bulkWorkflowRequestBody, final ApiCallback<DataResponseBulkWorkflowStateChangeResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateStatesValidateBeforeCall(domain, bulkWorkflowRequestBody, _callback);
        Type localVarReturnType = new TypeToken<DataResponseBulkWorkflowStateChangeResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
