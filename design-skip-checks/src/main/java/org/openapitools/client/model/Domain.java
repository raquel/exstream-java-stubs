/*
 * Exstream Design
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ApprovalGroup;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Domain
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-17T13:54:16.859257228Z[Europe/Lisbon]")
public class Domain {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_PRODUCTION = "production";
  @SerializedName(SERIALIZED_NAME_PRODUCTION)
  private Boolean production;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_JOB_TRACING = "jobTracing";
  @SerializedName(SERIALIZED_NAME_JOB_TRACING)
  private Boolean jobTracing;

  /**
   * Gets or Sets workflow
   */
  @JsonAdapter(WorkflowEnum.Adapter.class)
  public enum WorkflowEnum {
    NORMAL("NORMAL"),
    
    SIMPLE("SIMPLE"),
    
    ADVANCED("ADVANCED");

    private String value;

    WorkflowEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static WorkflowEnum fromValue(String value) {
      for (WorkflowEnum b : WorkflowEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<WorkflowEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final WorkflowEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public WorkflowEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return WorkflowEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      WorkflowEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_WORKFLOW = "workflow";
  @SerializedName(SERIALIZED_NAME_WORKFLOW)
  private WorkflowEnum workflow;

  public static final String SERIALIZED_NAME_RESTRICT_APPROVAL = "restrictApproval";
  @SerializedName(SERIALIZED_NAME_RESTRICT_APPROVAL)
  private Boolean restrictApproval;

  public static final String SERIALIZED_NAME_CHILDREN = "children";
  @SerializedName(SERIALIZED_NAME_CHILDREN)
  private List<Domain> children;

  public static final String SERIALIZED_NAME_PARENT = "parent";
  @SerializedName(SERIALIZED_NAME_PARENT)
  private String parent;

  public static final String SERIALIZED_NAME_EDITABLE = "editable";
  @SerializedName(SERIALIZED_NAME_EDITABLE)
  private Boolean editable;

  public static final String SERIALIZED_NAME_APPROVAL_GROUPS = "approvalGroups";
  @SerializedName(SERIALIZED_NAME_APPROVAL_GROUPS)
  private List<ApprovalGroup> approvalGroups;

  public Domain() {
  }

  public Domain id(String id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public Domain production(Boolean production) {
    this.production = production;
    return this;
  }

   /**
   * Get production
   * @return production
  **/
  @javax.annotation.Nullable
  public Boolean getProduction() {
    return production;
  }

  public void setProduction(Boolean production) {
    this.production = production;
  }


  public Domain description(String description) {
    this.description = description;
    return this;
  }

   /**
   * Get description
   * @return description
  **/
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public Domain jobTracing(Boolean jobTracing) {
    this.jobTracing = jobTracing;
    return this;
  }

   /**
   * Get jobTracing
   * @return jobTracing
  **/
  @javax.annotation.Nullable
  public Boolean getJobTracing() {
    return jobTracing;
  }

  public void setJobTracing(Boolean jobTracing) {
    this.jobTracing = jobTracing;
  }


  public Domain workflow(WorkflowEnum workflow) {
    this.workflow = workflow;
    return this;
  }

   /**
   * Get workflow
   * @return workflow
  **/
  @javax.annotation.Nullable
  public WorkflowEnum getWorkflow() {
    return workflow;
  }

  public void setWorkflow(WorkflowEnum workflow) {
    this.workflow = workflow;
  }


  public Domain restrictApproval(Boolean restrictApproval) {
    this.restrictApproval = restrictApproval;
    return this;
  }

   /**
   * Get restrictApproval
   * @return restrictApproval
  **/
  @javax.annotation.Nullable
  public Boolean getRestrictApproval() {
    return restrictApproval;
  }

  public void setRestrictApproval(Boolean restrictApproval) {
    this.restrictApproval = restrictApproval;
  }


  public Domain children(List<Domain> children) {
    this.children = children;
    return this;
  }

  public Domain addChildrenItem(Domain childrenItem) {
    if (this.children == null) {
      this.children = new ArrayList<>();
    }
    this.children.add(childrenItem);
    return this;
  }

   /**
   * Get children
   * @return children
  **/
  @javax.annotation.Nullable
  public List<Domain> getChildren() {
    return children;
  }

  public void setChildren(List<Domain> children) {
    this.children = children;
  }


  public Domain parent(String parent) {
    this.parent = parent;
    return this;
  }

   /**
   * Get parent
   * @return parent
  **/
  @javax.annotation.Nullable
  public String getParent() {
    return parent;
  }

  public void setParent(String parent) {
    this.parent = parent;
  }


  public Domain editable(Boolean editable) {
    this.editable = editable;
    return this;
  }

   /**
   * Get editable
   * @return editable
  **/
  @javax.annotation.Nullable
  public Boolean getEditable() {
    return editable;
  }

  public void setEditable(Boolean editable) {
    this.editable = editable;
  }


  public Domain approvalGroups(List<ApprovalGroup> approvalGroups) {
    this.approvalGroups = approvalGroups;
    return this;
  }

  public Domain addApprovalGroupsItem(ApprovalGroup approvalGroupsItem) {
    if (this.approvalGroups == null) {
      this.approvalGroups = new ArrayList<>();
    }
    this.approvalGroups.add(approvalGroupsItem);
    return this;
  }

   /**
   * Get approvalGroups
   * @return approvalGroups
  **/
  @javax.annotation.Nullable
  public List<ApprovalGroup> getApprovalGroups() {
    return approvalGroups;
  }

  public void setApprovalGroups(List<ApprovalGroup> approvalGroups) {
    this.approvalGroups = approvalGroups;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Domain domain = (Domain) o;
    return Objects.equals(this.id, domain.id) &&
        Objects.equals(this.production, domain.production) &&
        Objects.equals(this.description, domain.description) &&
        Objects.equals(this.jobTracing, domain.jobTracing) &&
        Objects.equals(this.workflow, domain.workflow) &&
        Objects.equals(this.restrictApproval, domain.restrictApproval) &&
        Objects.equals(this.children, domain.children) &&
        Objects.equals(this.parent, domain.parent) &&
        Objects.equals(this.editable, domain.editable) &&
        Objects.equals(this.approvalGroups, domain.approvalGroups);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, production, description, jobTracing, workflow, restrictApproval, children, parent, editable, approvalGroups);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Domain {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    production: ").append(toIndentedString(production)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    jobTracing: ").append(toIndentedString(jobTracing)).append("\n");
    sb.append("    workflow: ").append(toIndentedString(workflow)).append("\n");
    sb.append("    restrictApproval: ").append(toIndentedString(restrictApproval)).append("\n");
    sb.append("    children: ").append(toIndentedString(children)).append("\n");
    sb.append("    parent: ").append(toIndentedString(parent)).append("\n");
    sb.append("    editable: ").append(toIndentedString(editable)).append("\n");
    sb.append("    approvalGroups: ").append(toIndentedString(approvalGroups)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("production");
    openapiFields.add("description");
    openapiFields.add("jobTracing");
    openapiFields.add("workflow");
    openapiFields.add("restrictApproval");
    openapiFields.add("children");
    openapiFields.add("parent");
    openapiFields.add("editable");
    openapiFields.add("approvalGroups");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to Domain
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Domain.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Domain is not found in the empty JSON string", Domain.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Domain.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Domain` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("workflow") != null && !jsonObj.get("workflow").isJsonNull()) && !jsonObj.get("workflow").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `workflow` to be a primitive type in the JSON string but got `%s`", jsonObj.get("workflow").toString()));
      }
      // validate the optional field `workflow`
      if (jsonObj.get("workflow") != null && !jsonObj.get("workflow").isJsonNull()) {
        WorkflowEnum.validateJsonElement(jsonObj.get("workflow"));
      }
      if (jsonObj.get("children") != null && !jsonObj.get("children").isJsonNull()) {
        JsonArray jsonArraychildren = jsonObj.getAsJsonArray("children");
        if (jsonArraychildren != null) {
          // ensure the json data is an array
          if (!jsonObj.get("children").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `children` to be an array in the JSON string but got `%s`", jsonObj.get("children").toString()));
          }

          // validate the optional field `children` (array)
          for (int i = 0; i < jsonArraychildren.size(); i++) {
            Domain.validateJsonElement(jsonArraychildren.get(i));
          };
        }
      }
      if ((jsonObj.get("parent") != null && !jsonObj.get("parent").isJsonNull()) && !jsonObj.get("parent").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `parent` to be a primitive type in the JSON string but got `%s`", jsonObj.get("parent").toString()));
      }
      if (jsonObj.get("approvalGroups") != null && !jsonObj.get("approvalGroups").isJsonNull()) {
        JsonArray jsonArrayapprovalGroups = jsonObj.getAsJsonArray("approvalGroups");
        if (jsonArrayapprovalGroups != null) {
          // ensure the json data is an array
          if (!jsonObj.get("approvalGroups").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `approvalGroups` to be an array in the JSON string but got `%s`", jsonObj.get("approvalGroups").toString()));
          }

          // validate the optional field `approvalGroups` (array)
          for (int i = 0; i < jsonArrayapprovalGroups.size(); i++) {
            ApprovalGroup.validateJsonElement(jsonArrayapprovalGroups.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Domain.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Domain' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Domain> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Domain.class));

       return (TypeAdapter<T>) new TypeAdapter<Domain>() {
           @Override
           public void write(JsonWriter out, Domain value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Domain read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Domain given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Domain
  * @throws IOException if the JSON string is invalid with respect to Domain
  */
  public static Domain fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Domain.class);
  }

 /**
  * Convert an instance of Domain to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

