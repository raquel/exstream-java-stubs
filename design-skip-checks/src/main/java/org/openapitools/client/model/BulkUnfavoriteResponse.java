/*
 * Exstream Design
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * BulkUnfavoriteResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-17T13:54:16.859257228Z[Europe/Lisbon]")
public class BulkUnfavoriteResponse {
  public static final String SERIALIZED_NAME_REMOVED_FAVORITES = "removedFavorites";
  @SerializedName(SERIALIZED_NAME_REMOVED_FAVORITES)
  private List<UUID> removedFavorites;

  public static final String SERIALIZED_NAME_RESOURCE_NOT_FOUND_EXCEPTION_RESOURCES = "resourceNotFoundExceptionResources";
  @SerializedName(SERIALIZED_NAME_RESOURCE_NOT_FOUND_EXCEPTION_RESOURCES)
  private List<UUID> resourceNotFoundExceptionResources;

  public static final String SERIALIZED_NAME_UNEXPECTED_EXCEPTION_RESOURCES = "unexpectedExceptionResources";
  @SerializedName(SERIALIZED_NAME_UNEXPECTED_EXCEPTION_RESOURCES)
  private List<UUID> unexpectedExceptionResources;

  public static final String SERIALIZED_NAME_ERROR_RESOURCES = "errorResources";
  @SerializedName(SERIALIZED_NAME_ERROR_RESOURCES)
  private List<UUID> errorResources;

  public BulkUnfavoriteResponse() {
  }

  public BulkUnfavoriteResponse removedFavorites(List<UUID> removedFavorites) {
    this.removedFavorites = removedFavorites;
    return this;
  }

  public BulkUnfavoriteResponse addRemovedFavoritesItem(UUID removedFavoritesItem) {
    if (this.removedFavorites == null) {
      this.removedFavorites = new ArrayList<>();
    }
    this.removedFavorites.add(removedFavoritesItem);
    return this;
  }

   /**
   * Get removedFavorites
   * @return removedFavorites
  **/
  @javax.annotation.Nullable
  public List<UUID> getRemovedFavorites() {
    return removedFavorites;
  }

  public void setRemovedFavorites(List<UUID> removedFavorites) {
    this.removedFavorites = removedFavorites;
  }


  public BulkUnfavoriteResponse resourceNotFoundExceptionResources(List<UUID> resourceNotFoundExceptionResources) {
    this.resourceNotFoundExceptionResources = resourceNotFoundExceptionResources;
    return this;
  }

  public BulkUnfavoriteResponse addResourceNotFoundExceptionResourcesItem(UUID resourceNotFoundExceptionResourcesItem) {
    if (this.resourceNotFoundExceptionResources == null) {
      this.resourceNotFoundExceptionResources = new ArrayList<>();
    }
    this.resourceNotFoundExceptionResources.add(resourceNotFoundExceptionResourcesItem);
    return this;
  }

   /**
   * Get resourceNotFoundExceptionResources
   * @return resourceNotFoundExceptionResources
  **/
  @javax.annotation.Nullable
  public List<UUID> getResourceNotFoundExceptionResources() {
    return resourceNotFoundExceptionResources;
  }

  public void setResourceNotFoundExceptionResources(List<UUID> resourceNotFoundExceptionResources) {
    this.resourceNotFoundExceptionResources = resourceNotFoundExceptionResources;
  }


  public BulkUnfavoriteResponse unexpectedExceptionResources(List<UUID> unexpectedExceptionResources) {
    this.unexpectedExceptionResources = unexpectedExceptionResources;
    return this;
  }

  public BulkUnfavoriteResponse addUnexpectedExceptionResourcesItem(UUID unexpectedExceptionResourcesItem) {
    if (this.unexpectedExceptionResources == null) {
      this.unexpectedExceptionResources = new ArrayList<>();
    }
    this.unexpectedExceptionResources.add(unexpectedExceptionResourcesItem);
    return this;
  }

   /**
   * Get unexpectedExceptionResources
   * @return unexpectedExceptionResources
  **/
  @javax.annotation.Nullable
  public List<UUID> getUnexpectedExceptionResources() {
    return unexpectedExceptionResources;
  }

  public void setUnexpectedExceptionResources(List<UUID> unexpectedExceptionResources) {
    this.unexpectedExceptionResources = unexpectedExceptionResources;
  }


  public BulkUnfavoriteResponse errorResources(List<UUID> errorResources) {
    this.errorResources = errorResources;
    return this;
  }

  public BulkUnfavoriteResponse addErrorResourcesItem(UUID errorResourcesItem) {
    if (this.errorResources == null) {
      this.errorResources = new ArrayList<>();
    }
    this.errorResources.add(errorResourcesItem);
    return this;
  }

   /**
   * Get errorResources
   * @return errorResources
  **/
  @javax.annotation.Nullable
  public List<UUID> getErrorResources() {
    return errorResources;
  }

  public void setErrorResources(List<UUID> errorResources) {
    this.errorResources = errorResources;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BulkUnfavoriteResponse bulkUnfavoriteResponse = (BulkUnfavoriteResponse) o;
    return Objects.equals(this.removedFavorites, bulkUnfavoriteResponse.removedFavorites) &&
        Objects.equals(this.resourceNotFoundExceptionResources, bulkUnfavoriteResponse.resourceNotFoundExceptionResources) &&
        Objects.equals(this.unexpectedExceptionResources, bulkUnfavoriteResponse.unexpectedExceptionResources) &&
        Objects.equals(this.errorResources, bulkUnfavoriteResponse.errorResources);
  }

  @Override
  public int hashCode() {
    return Objects.hash(removedFavorites, resourceNotFoundExceptionResources, unexpectedExceptionResources, errorResources);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BulkUnfavoriteResponse {\n");
    sb.append("    removedFavorites: ").append(toIndentedString(removedFavorites)).append("\n");
    sb.append("    resourceNotFoundExceptionResources: ").append(toIndentedString(resourceNotFoundExceptionResources)).append("\n");
    sb.append("    unexpectedExceptionResources: ").append(toIndentedString(unexpectedExceptionResources)).append("\n");
    sb.append("    errorResources: ").append(toIndentedString(errorResources)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("removedFavorites");
    openapiFields.add("resourceNotFoundExceptionResources");
    openapiFields.add("unexpectedExceptionResources");
    openapiFields.add("errorResources");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to BulkUnfavoriteResponse
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BulkUnfavoriteResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BulkUnfavoriteResponse is not found in the empty JSON string", BulkUnfavoriteResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BulkUnfavoriteResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BulkUnfavoriteResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("removedFavorites") != null && !jsonObj.get("removedFavorites").isJsonNull() && !jsonObj.get("removedFavorites").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `removedFavorites` to be an array in the JSON string but got `%s`", jsonObj.get("removedFavorites").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("resourceNotFoundExceptionResources") != null && !jsonObj.get("resourceNotFoundExceptionResources").isJsonNull() && !jsonObj.get("resourceNotFoundExceptionResources").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `resourceNotFoundExceptionResources` to be an array in the JSON string but got `%s`", jsonObj.get("resourceNotFoundExceptionResources").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("unexpectedExceptionResources") != null && !jsonObj.get("unexpectedExceptionResources").isJsonNull() && !jsonObj.get("unexpectedExceptionResources").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `unexpectedExceptionResources` to be an array in the JSON string but got `%s`", jsonObj.get("unexpectedExceptionResources").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("errorResources") != null && !jsonObj.get("errorResources").isJsonNull() && !jsonObj.get("errorResources").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `errorResources` to be an array in the JSON string but got `%s`", jsonObj.get("errorResources").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BulkUnfavoriteResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BulkUnfavoriteResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BulkUnfavoriteResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BulkUnfavoriteResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<BulkUnfavoriteResponse>() {
           @Override
           public void write(JsonWriter out, BulkUnfavoriteResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BulkUnfavoriteResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of BulkUnfavoriteResponse given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of BulkUnfavoriteResponse
  * @throws IOException if the JSON string is invalid with respect to BulkUnfavoriteResponse
  */
  public static BulkUnfavoriteResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BulkUnfavoriteResponse.class);
  }

 /**
  * Convert an instance of BulkUnfavoriteResponse to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

