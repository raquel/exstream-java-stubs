/*
 * Exstream Design
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import org.openapitools.client.model.SavedResource;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * BulkFavoriteResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-17T13:54:16.859257228Z[Europe/Lisbon]")
public class BulkFavoriteResponse {
  public static final String SERIALIZED_NAME_FAVORITE_RESOURCES = "favoriteResources";
  @SerializedName(SERIALIZED_NAME_FAVORITE_RESOURCES)
  private List<SavedResource> favoriteResources;

  public static final String SERIALIZED_NAME_RESOURCE_NOT_FOUND_EXCEPTION_RESOURCES = "resourceNotFoundExceptionResources";
  @SerializedName(SERIALIZED_NAME_RESOURCE_NOT_FOUND_EXCEPTION_RESOURCES)
  private List<UUID> resourceNotFoundExceptionResources;

  public static final String SERIALIZED_NAME_UNEXPECTED_EXCEPTION_RESOURCES = "unexpectedExceptionResources";
  @SerializedName(SERIALIZED_NAME_UNEXPECTED_EXCEPTION_RESOURCES)
  private List<UUID> unexpectedExceptionResources;

  public static final String SERIALIZED_NAME_ERROR_RESOURCES = "errorResources";
  @SerializedName(SERIALIZED_NAME_ERROR_RESOURCES)
  private List<UUID> errorResources;

  public BulkFavoriteResponse() {
  }

  public BulkFavoriteResponse favoriteResources(List<SavedResource> favoriteResources) {
    this.favoriteResources = favoriteResources;
    return this;
  }

  public BulkFavoriteResponse addFavoriteResourcesItem(SavedResource favoriteResourcesItem) {
    if (this.favoriteResources == null) {
      this.favoriteResources = new ArrayList<>();
    }
    this.favoriteResources.add(favoriteResourcesItem);
    return this;
  }

   /**
   * Get favoriteResources
   * @return favoriteResources
  **/
  @javax.annotation.Nullable
  public List<SavedResource> getFavoriteResources() {
    return favoriteResources;
  }

  public void setFavoriteResources(List<SavedResource> favoriteResources) {
    this.favoriteResources = favoriteResources;
  }


  public BulkFavoriteResponse resourceNotFoundExceptionResources(List<UUID> resourceNotFoundExceptionResources) {
    this.resourceNotFoundExceptionResources = resourceNotFoundExceptionResources;
    return this;
  }

  public BulkFavoriteResponse addResourceNotFoundExceptionResourcesItem(UUID resourceNotFoundExceptionResourcesItem) {
    if (this.resourceNotFoundExceptionResources == null) {
      this.resourceNotFoundExceptionResources = new ArrayList<>();
    }
    this.resourceNotFoundExceptionResources.add(resourceNotFoundExceptionResourcesItem);
    return this;
  }

   /**
   * Get resourceNotFoundExceptionResources
   * @return resourceNotFoundExceptionResources
  **/
  @javax.annotation.Nullable
  public List<UUID> getResourceNotFoundExceptionResources() {
    return resourceNotFoundExceptionResources;
  }

  public void setResourceNotFoundExceptionResources(List<UUID> resourceNotFoundExceptionResources) {
    this.resourceNotFoundExceptionResources = resourceNotFoundExceptionResources;
  }


  public BulkFavoriteResponse unexpectedExceptionResources(List<UUID> unexpectedExceptionResources) {
    this.unexpectedExceptionResources = unexpectedExceptionResources;
    return this;
  }

  public BulkFavoriteResponse addUnexpectedExceptionResourcesItem(UUID unexpectedExceptionResourcesItem) {
    if (this.unexpectedExceptionResources == null) {
      this.unexpectedExceptionResources = new ArrayList<>();
    }
    this.unexpectedExceptionResources.add(unexpectedExceptionResourcesItem);
    return this;
  }

   /**
   * Get unexpectedExceptionResources
   * @return unexpectedExceptionResources
  **/
  @javax.annotation.Nullable
  public List<UUID> getUnexpectedExceptionResources() {
    return unexpectedExceptionResources;
  }

  public void setUnexpectedExceptionResources(List<UUID> unexpectedExceptionResources) {
    this.unexpectedExceptionResources = unexpectedExceptionResources;
  }


  public BulkFavoriteResponse errorResources(List<UUID> errorResources) {
    this.errorResources = errorResources;
    return this;
  }

  public BulkFavoriteResponse addErrorResourcesItem(UUID errorResourcesItem) {
    if (this.errorResources == null) {
      this.errorResources = new ArrayList<>();
    }
    this.errorResources.add(errorResourcesItem);
    return this;
  }

   /**
   * Get errorResources
   * @return errorResources
  **/
  @javax.annotation.Nullable
  public List<UUID> getErrorResources() {
    return errorResources;
  }

  public void setErrorResources(List<UUID> errorResources) {
    this.errorResources = errorResources;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BulkFavoriteResponse bulkFavoriteResponse = (BulkFavoriteResponse) o;
    return Objects.equals(this.favoriteResources, bulkFavoriteResponse.favoriteResources) &&
        Objects.equals(this.resourceNotFoundExceptionResources, bulkFavoriteResponse.resourceNotFoundExceptionResources) &&
        Objects.equals(this.unexpectedExceptionResources, bulkFavoriteResponse.unexpectedExceptionResources) &&
        Objects.equals(this.errorResources, bulkFavoriteResponse.errorResources);
  }

  @Override
  public int hashCode() {
    return Objects.hash(favoriteResources, resourceNotFoundExceptionResources, unexpectedExceptionResources, errorResources);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BulkFavoriteResponse {\n");
    sb.append("    favoriteResources: ").append(toIndentedString(favoriteResources)).append("\n");
    sb.append("    resourceNotFoundExceptionResources: ").append(toIndentedString(resourceNotFoundExceptionResources)).append("\n");
    sb.append("    unexpectedExceptionResources: ").append(toIndentedString(unexpectedExceptionResources)).append("\n");
    sb.append("    errorResources: ").append(toIndentedString(errorResources)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("favoriteResources");
    openapiFields.add("resourceNotFoundExceptionResources");
    openapiFields.add("unexpectedExceptionResources");
    openapiFields.add("errorResources");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to BulkFavoriteResponse
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BulkFavoriteResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BulkFavoriteResponse is not found in the empty JSON string", BulkFavoriteResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BulkFavoriteResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BulkFavoriteResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("favoriteResources") != null && !jsonObj.get("favoriteResources").isJsonNull()) {
        JsonArray jsonArrayfavoriteResources = jsonObj.getAsJsonArray("favoriteResources");
        if (jsonArrayfavoriteResources != null) {
          // ensure the json data is an array
          if (!jsonObj.get("favoriteResources").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `favoriteResources` to be an array in the JSON string but got `%s`", jsonObj.get("favoriteResources").toString()));
          }

          // validate the optional field `favoriteResources` (array)
          for (int i = 0; i < jsonArrayfavoriteResources.size(); i++) {
            SavedResource.validateJsonElement(jsonArrayfavoriteResources.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("resourceNotFoundExceptionResources") != null && !jsonObj.get("resourceNotFoundExceptionResources").isJsonNull() && !jsonObj.get("resourceNotFoundExceptionResources").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `resourceNotFoundExceptionResources` to be an array in the JSON string but got `%s`", jsonObj.get("resourceNotFoundExceptionResources").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("unexpectedExceptionResources") != null && !jsonObj.get("unexpectedExceptionResources").isJsonNull() && !jsonObj.get("unexpectedExceptionResources").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `unexpectedExceptionResources` to be an array in the JSON string but got `%s`", jsonObj.get("unexpectedExceptionResources").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("errorResources") != null && !jsonObj.get("errorResources").isJsonNull() && !jsonObj.get("errorResources").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `errorResources` to be an array in the JSON string but got `%s`", jsonObj.get("errorResources").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BulkFavoriteResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BulkFavoriteResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BulkFavoriteResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BulkFavoriteResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<BulkFavoriteResponse>() {
           @Override
           public void write(JsonWriter out, BulkFavoriteResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BulkFavoriteResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of BulkFavoriteResponse given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of BulkFavoriteResponse
  * @throws IOException if the JSON string is invalid with respect to BulkFavoriteResponse
  */
  public static BulkFavoriteResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BulkFavoriteResponse.class);
  }

 /**
  * Convert an instance of BulkFavoriteResponse to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

