/*
 * Exstream Design
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.EngineInfo;
import org.openapitools.client.model.Input;
import org.openapitools.client.model.Output;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * RunDef
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-17T13:54:16.859257228Z[Europe/Lisbon]")
public class RunDef {
  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ENGINE_INFO = "engineInfo";
  @SerializedName(SERIALIZED_NAME_ENGINE_INFO)
  private EngineInfo engineInfo;

  public static final String SERIALIZED_NAME_OUTPUTS = "outputs";
  @SerializedName(SERIALIZED_NAME_OUTPUTS)
  private Map<String, Output> outputs = new HashMap<>();

  public static final String SERIALIZED_NAME_INPUTS = "inputs";
  @SerializedName(SERIALIZED_NAME_INPUTS)
  private Map<String, Input> inputs = new HashMap<>();

  public static final String SERIALIZED_NAME_REPORTS = "reports";
  @SerializedName(SERIALIZED_NAME_REPORTS)
  private Map<String, Output> reports = new HashMap<>();

  public static final String SERIALIZED_NAME_CONTROL = "control";
  @SerializedName(SERIALIZED_NAME_CONTROL)
  private List<String> control;

  public static final String SERIALIZED_NAME_$_SCHEMA = "$schema";
  @SerializedName(SERIALIZED_NAME_$_SCHEMA)
  private String $schema;

  public RunDef() {
  }

  public RunDef name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public RunDef description(String description) {
    this.description = description;
    return this;
  }

   /**
   * Get description
   * @return description
  **/
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public RunDef engineInfo(EngineInfo engineInfo) {
    this.engineInfo = engineInfo;
    return this;
  }

   /**
   * Get engineInfo
   * @return engineInfo
  **/
  @javax.annotation.Nullable
  public EngineInfo getEngineInfo() {
    return engineInfo;
  }

  public void setEngineInfo(EngineInfo engineInfo) {
    this.engineInfo = engineInfo;
  }


  public RunDef outputs(Map<String, Output> outputs) {
    this.outputs = outputs;
    return this;
  }

  public RunDef putOutputsItem(String key, Output outputsItem) {
    if (this.outputs == null) {
      this.outputs = new HashMap<>();
    }
    this.outputs.put(key, outputsItem);
    return this;
  }

   /**
   * Get outputs
   * @return outputs
  **/
  @javax.annotation.Nullable
  public Map<String, Output> getOutputs() {
    return outputs;
  }

  public void setOutputs(Map<String, Output> outputs) {
    this.outputs = outputs;
  }


  public RunDef inputs(Map<String, Input> inputs) {
    this.inputs = inputs;
    return this;
  }

  public RunDef putInputsItem(String key, Input inputsItem) {
    if (this.inputs == null) {
      this.inputs = new HashMap<>();
    }
    this.inputs.put(key, inputsItem);
    return this;
  }

   /**
   * Get inputs
   * @return inputs
  **/
  @javax.annotation.Nullable
  public Map<String, Input> getInputs() {
    return inputs;
  }

  public void setInputs(Map<String, Input> inputs) {
    this.inputs = inputs;
  }


  public RunDef reports(Map<String, Output> reports) {
    this.reports = reports;
    return this;
  }

  public RunDef putReportsItem(String key, Output reportsItem) {
    if (this.reports == null) {
      this.reports = new HashMap<>();
    }
    this.reports.put(key, reportsItem);
    return this;
  }

   /**
   * Get reports
   * @return reports
  **/
  @javax.annotation.Nullable
  public Map<String, Output> getReports() {
    return reports;
  }

  public void setReports(Map<String, Output> reports) {
    this.reports = reports;
  }


  public RunDef control(List<String> control) {
    this.control = control;
    return this;
  }

  public RunDef addControlItem(String controlItem) {
    if (this.control == null) {
      this.control = new ArrayList<>();
    }
    this.control.add(controlItem);
    return this;
  }

   /**
   * Get control
   * @return control
  **/
  @javax.annotation.Nullable
  public List<String> getControl() {
    return control;
  }

  public void setControl(List<String> control) {
    this.control = control;
  }


  public RunDef $schema(String $schema) {
    this.$schema = $schema;
    return this;
  }

   /**
   * Get $schema
   * @return $schema
  **/
  @javax.annotation.Nullable
  public String get$Schema() {
    return $schema;
  }

  public void set$Schema(String $schema) {
    this.$schema = $schema;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RunDef runDef = (RunDef) o;
    return Objects.equals(this.name, runDef.name) &&
        Objects.equals(this.description, runDef.description) &&
        Objects.equals(this.engineInfo, runDef.engineInfo) &&
        Objects.equals(this.outputs, runDef.outputs) &&
        Objects.equals(this.inputs, runDef.inputs) &&
        Objects.equals(this.reports, runDef.reports) &&
        Objects.equals(this.control, runDef.control) &&
        Objects.equals(this.$schema, runDef.$schema);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, description, engineInfo, outputs, inputs, reports, control, $schema);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RunDef {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    engineInfo: ").append(toIndentedString(engineInfo)).append("\n");
    sb.append("    outputs: ").append(toIndentedString(outputs)).append("\n");
    sb.append("    inputs: ").append(toIndentedString(inputs)).append("\n");
    sb.append("    reports: ").append(toIndentedString(reports)).append("\n");
    sb.append("    control: ").append(toIndentedString(control)).append("\n");
    sb.append("    $schema: ").append(toIndentedString($schema)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("name");
    openapiFields.add("description");
    openapiFields.add("engineInfo");
    openapiFields.add("outputs");
    openapiFields.add("inputs");
    openapiFields.add("reports");
    openapiFields.add("control");
    openapiFields.add("$schema");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to RunDef
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RunDef.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RunDef is not found in the empty JSON string", RunDef.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RunDef.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RunDef` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // validate the optional field `engineInfo`
      if (jsonObj.get("engineInfo") != null && !jsonObj.get("engineInfo").isJsonNull()) {
        EngineInfo.validateJsonElement(jsonObj.get("engineInfo"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("control") != null && !jsonObj.get("control").isJsonNull() && !jsonObj.get("control").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `control` to be an array in the JSON string but got `%s`", jsonObj.get("control").toString()));
      }
      if ((jsonObj.get("$schema") != null && !jsonObj.get("$schema").isJsonNull()) && !jsonObj.get("$schema").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `$schema` to be a primitive type in the JSON string but got `%s`", jsonObj.get("$schema").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RunDef.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RunDef' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RunDef> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RunDef.class));

       return (TypeAdapter<T>) new TypeAdapter<RunDef>() {
           @Override
           public void write(JsonWriter out, RunDef value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RunDef read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of RunDef given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of RunDef
  * @throws IOException if the JSON string is invalid with respect to RunDef
  */
  public static RunDef fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RunDef.class);
  }

 /**
  * Convert an instance of RunDef to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

