/*
 * Exstream Design
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Set;
import org.openapitools.client.model.DataSource;
import org.openapitools.client.model.Document;
import org.openapitools.client.model.MetadataObj;
import org.openapitools.client.model.QueueObj;
import org.openapitools.client.model.ReportObj;
import org.openapitools.client.model.Section;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Manifest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-17T13:54:16.859257228Z[Europe/Lisbon]")
public class Manifest {
  /**
   * Gets or Sets characterEncoding
   */
  @JsonAdapter(CharacterEncodingEnum.Adapter.class)
  public enum CharacterEncodingEnum {
    DBCS("DBCS"),
    
    SBCS("SBCS");

    private String value;

    CharacterEncodingEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CharacterEncodingEnum fromValue(String value) {
      for (CharacterEncodingEnum b : CharacterEncodingEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CharacterEncodingEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CharacterEncodingEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CharacterEncodingEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CharacterEncodingEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CharacterEncodingEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CHARACTER_ENCODING = "characterEncoding";
  @SerializedName(SERIALIZED_NAME_CHARACTER_ENCODING)
  private CharacterEncodingEnum characterEncoding;

  public static final String SERIALIZED_NAME_SECTION_VARIABLE_OID = "sectionVariableOid";
  @SerializedName(SERIALIZED_NAME_SECTION_VARIABLE_OID)
  private String sectionVariableOid;

  public static final String SERIALIZED_NAME_APPLICATION_NAME = "applicationName";
  @SerializedName(SERIALIZED_NAME_APPLICATION_NAME)
  private String applicationName;

  public static final String SERIALIZED_NAME_QUEUE_LIST = "queueList";
  @SerializedName(SERIALIZED_NAME_QUEUE_LIST)
  private List<QueueObj> queueList;

  public static final String SERIALIZED_NAME_REPORT_LIST = "reportList";
  @SerializedName(SERIALIZED_NAME_REPORT_LIST)
  private List<ReportObj> reportList;

  public static final String SERIALIZED_NAME_METADATA = "metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  private Set<MetadataObj> metadata;

  public static final String SERIALIZED_NAME_SERIALIZATION = "serialization";
  @SerializedName(SERIALIZED_NAME_SERIALIZATION)
  private Integer serialization;

  public static final String SERIALIZED_NAME_DSNLIST = "dsnlist";
  @SerializedName(SERIALIZED_NAME_DSNLIST)
  private List<DataSource> dsnlist;

  public static final String SERIALIZED_NAME_SERIALIZATION_VERSION = "serializationVersion";
  @SerializedName(SERIALIZED_NAME_SERIALIZATION_VERSION)
  private Integer serializationVersion;

  public static final String SERIALIZED_NAME_DOCUMENT_SECTIONS = "documentSections";
  @SerializedName(SERIALIZED_NAME_DOCUMENT_SECTIONS)
  private List<List<Section>> documentSections;

  public static final String SERIALIZED_NAME_DOCUMENT_WITH_VARIABLE_DRIVEN_SECTIONS = "documentWithVariableDrivenSections";
  @SerializedName(SERIALIZED_NAME_DOCUMENT_WITH_VARIABLE_DRIVEN_SECTIONS)
  private List<Document> documentWithVariableDrivenSections;

  public Manifest() {
  }

  public Manifest characterEncoding(CharacterEncodingEnum characterEncoding) {
    this.characterEncoding = characterEncoding;
    return this;
  }

   /**
   * Get characterEncoding
   * @return characterEncoding
  **/
  @javax.annotation.Nullable
  public CharacterEncodingEnum getCharacterEncoding() {
    return characterEncoding;
  }

  public void setCharacterEncoding(CharacterEncodingEnum characterEncoding) {
    this.characterEncoding = characterEncoding;
  }


  public Manifest sectionVariableOid(String sectionVariableOid) {
    this.sectionVariableOid = sectionVariableOid;
    return this;
  }

   /**
   * Get sectionVariableOid
   * @return sectionVariableOid
  **/
  @javax.annotation.Nullable
  public String getSectionVariableOid() {
    return sectionVariableOid;
  }

  public void setSectionVariableOid(String sectionVariableOid) {
    this.sectionVariableOid = sectionVariableOid;
  }


  public Manifest applicationName(String applicationName) {
    this.applicationName = applicationName;
    return this;
  }

   /**
   * Get applicationName
   * @return applicationName
  **/
  @javax.annotation.Nullable
  public String getApplicationName() {
    return applicationName;
  }

  public void setApplicationName(String applicationName) {
    this.applicationName = applicationName;
  }


  public Manifest queueList(List<QueueObj> queueList) {
    this.queueList = queueList;
    return this;
  }

  public Manifest addQueueListItem(QueueObj queueListItem) {
    if (this.queueList == null) {
      this.queueList = new ArrayList<>();
    }
    this.queueList.add(queueListItem);
    return this;
  }

   /**
   * Get queueList
   * @return queueList
  **/
  @javax.annotation.Nullable
  public List<QueueObj> getQueueList() {
    return queueList;
  }

  public void setQueueList(List<QueueObj> queueList) {
    this.queueList = queueList;
  }


  public Manifest reportList(List<ReportObj> reportList) {
    this.reportList = reportList;
    return this;
  }

  public Manifest addReportListItem(ReportObj reportListItem) {
    if (this.reportList == null) {
      this.reportList = new ArrayList<>();
    }
    this.reportList.add(reportListItem);
    return this;
  }

   /**
   * Get reportList
   * @return reportList
  **/
  @javax.annotation.Nullable
  public List<ReportObj> getReportList() {
    return reportList;
  }

  public void setReportList(List<ReportObj> reportList) {
    this.reportList = reportList;
  }


  public Manifest metadata(Set<MetadataObj> metadata) {
    this.metadata = metadata;
    return this;
  }

  public Manifest addMetadataItem(MetadataObj metadataItem) {
    if (this.metadata == null) {
      this.metadata = new LinkedHashSet<>();
    }
    this.metadata.add(metadataItem);
    return this;
  }

   /**
   * Get metadata
   * @return metadata
  **/
  @javax.annotation.Nullable
  public Set<MetadataObj> getMetadata() {
    return metadata;
  }

  public void setMetadata(Set<MetadataObj> metadata) {
    this.metadata = metadata;
  }


  public Manifest serialization(Integer serialization) {
    this.serialization = serialization;
    return this;
  }

   /**
   * Get serialization
   * @return serialization
  **/
  @javax.annotation.Nullable
  public Integer getSerialization() {
    return serialization;
  }

  public void setSerialization(Integer serialization) {
    this.serialization = serialization;
  }


  public Manifest dsnlist(List<DataSource> dsnlist) {
    this.dsnlist = dsnlist;
    return this;
  }

  public Manifest addDsnlistItem(DataSource dsnlistItem) {
    if (this.dsnlist == null) {
      this.dsnlist = new ArrayList<>();
    }
    this.dsnlist.add(dsnlistItem);
    return this;
  }

   /**
   * Get dsnlist
   * @return dsnlist
  **/
  @javax.annotation.Nullable
  public List<DataSource> getDsnlist() {
    return dsnlist;
  }

  public void setDsnlist(List<DataSource> dsnlist) {
    this.dsnlist = dsnlist;
  }


  public Manifest serializationVersion(Integer serializationVersion) {
    this.serializationVersion = serializationVersion;
    return this;
  }

   /**
   * Get serializationVersion
   * @return serializationVersion
  **/
  @javax.annotation.Nullable
  public Integer getSerializationVersion() {
    return serializationVersion;
  }

  public void setSerializationVersion(Integer serializationVersion) {
    this.serializationVersion = serializationVersion;
  }


  public Manifest documentSections(List<List<Section>> documentSections) {
    this.documentSections = documentSections;
    return this;
  }

  public Manifest addDocumentSectionsItem(List<Section> documentSectionsItem) {
    if (this.documentSections == null) {
      this.documentSections = new ArrayList<>();
    }
    this.documentSections.add(documentSectionsItem);
    return this;
  }

   /**
   * Get documentSections
   * @return documentSections
  **/
  @javax.annotation.Nullable
  public List<List<Section>> getDocumentSections() {
    return documentSections;
  }

  public void setDocumentSections(List<List<Section>> documentSections) {
    this.documentSections = documentSections;
  }


  public Manifest documentWithVariableDrivenSections(List<Document> documentWithVariableDrivenSections) {
    this.documentWithVariableDrivenSections = documentWithVariableDrivenSections;
    return this;
  }

  public Manifest addDocumentWithVariableDrivenSectionsItem(Document documentWithVariableDrivenSectionsItem) {
    if (this.documentWithVariableDrivenSections == null) {
      this.documentWithVariableDrivenSections = new ArrayList<>();
    }
    this.documentWithVariableDrivenSections.add(documentWithVariableDrivenSectionsItem);
    return this;
  }

   /**
   * Get documentWithVariableDrivenSections
   * @return documentWithVariableDrivenSections
  **/
  @javax.annotation.Nullable
  public List<Document> getDocumentWithVariableDrivenSections() {
    return documentWithVariableDrivenSections;
  }

  public void setDocumentWithVariableDrivenSections(List<Document> documentWithVariableDrivenSections) {
    this.documentWithVariableDrivenSections = documentWithVariableDrivenSections;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Manifest manifest = (Manifest) o;
    return Objects.equals(this.characterEncoding, manifest.characterEncoding) &&
        Objects.equals(this.sectionVariableOid, manifest.sectionVariableOid) &&
        Objects.equals(this.applicationName, manifest.applicationName) &&
        Objects.equals(this.queueList, manifest.queueList) &&
        Objects.equals(this.reportList, manifest.reportList) &&
        Objects.equals(this.metadata, manifest.metadata) &&
        Objects.equals(this.serialization, manifest.serialization) &&
        Objects.equals(this.dsnlist, manifest.dsnlist) &&
        Objects.equals(this.serializationVersion, manifest.serializationVersion) &&
        Objects.equals(this.documentSections, manifest.documentSections) &&
        Objects.equals(this.documentWithVariableDrivenSections, manifest.documentWithVariableDrivenSections);
  }

  @Override
  public int hashCode() {
    return Objects.hash(characterEncoding, sectionVariableOid, applicationName, queueList, reportList, metadata, serialization, dsnlist, serializationVersion, documentSections, documentWithVariableDrivenSections);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Manifest {\n");
    sb.append("    characterEncoding: ").append(toIndentedString(characterEncoding)).append("\n");
    sb.append("    sectionVariableOid: ").append(toIndentedString(sectionVariableOid)).append("\n");
    sb.append("    applicationName: ").append(toIndentedString(applicationName)).append("\n");
    sb.append("    queueList: ").append(toIndentedString(queueList)).append("\n");
    sb.append("    reportList: ").append(toIndentedString(reportList)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    serialization: ").append(toIndentedString(serialization)).append("\n");
    sb.append("    dsnlist: ").append(toIndentedString(dsnlist)).append("\n");
    sb.append("    serializationVersion: ").append(toIndentedString(serializationVersion)).append("\n");
    sb.append("    documentSections: ").append(toIndentedString(documentSections)).append("\n");
    sb.append("    documentWithVariableDrivenSections: ").append(toIndentedString(documentWithVariableDrivenSections)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("characterEncoding");
    openapiFields.add("sectionVariableOid");
    openapiFields.add("applicationName");
    openapiFields.add("queueList");
    openapiFields.add("reportList");
    openapiFields.add("metadata");
    openapiFields.add("serialization");
    openapiFields.add("dsnlist");
    openapiFields.add("serializationVersion");
    openapiFields.add("documentSections");
    openapiFields.add("documentWithVariableDrivenSections");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to Manifest
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Manifest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Manifest is not found in the empty JSON string", Manifest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Manifest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Manifest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("characterEncoding") != null && !jsonObj.get("characterEncoding").isJsonNull()) && !jsonObj.get("characterEncoding").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `characterEncoding` to be a primitive type in the JSON string but got `%s`", jsonObj.get("characterEncoding").toString()));
      }
      // validate the optional field `characterEncoding`
      if (jsonObj.get("characterEncoding") != null && !jsonObj.get("characterEncoding").isJsonNull()) {
        CharacterEncodingEnum.validateJsonElement(jsonObj.get("characterEncoding"));
      }
      if ((jsonObj.get("sectionVariableOid") != null && !jsonObj.get("sectionVariableOid").isJsonNull()) && !jsonObj.get("sectionVariableOid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sectionVariableOid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sectionVariableOid").toString()));
      }
      if ((jsonObj.get("applicationName") != null && !jsonObj.get("applicationName").isJsonNull()) && !jsonObj.get("applicationName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `applicationName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("applicationName").toString()));
      }
      if (jsonObj.get("queueList") != null && !jsonObj.get("queueList").isJsonNull()) {
        JsonArray jsonArrayqueueList = jsonObj.getAsJsonArray("queueList");
        if (jsonArrayqueueList != null) {
          // ensure the json data is an array
          if (!jsonObj.get("queueList").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `queueList` to be an array in the JSON string but got `%s`", jsonObj.get("queueList").toString()));
          }

          // validate the optional field `queueList` (array)
          for (int i = 0; i < jsonArrayqueueList.size(); i++) {
            QueueObj.validateJsonElement(jsonArrayqueueList.get(i));
          };
        }
      }
      if (jsonObj.get("reportList") != null && !jsonObj.get("reportList").isJsonNull()) {
        JsonArray jsonArrayreportList = jsonObj.getAsJsonArray("reportList");
        if (jsonArrayreportList != null) {
          // ensure the json data is an array
          if (!jsonObj.get("reportList").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `reportList` to be an array in the JSON string but got `%s`", jsonObj.get("reportList").toString()));
          }

          // validate the optional field `reportList` (array)
          for (int i = 0; i < jsonArrayreportList.size(); i++) {
            ReportObj.validateJsonElement(jsonArrayreportList.get(i));
          };
        }
      }
      if (jsonObj.get("metadata") != null && !jsonObj.get("metadata").isJsonNull()) {
        JsonArray jsonArraymetadata = jsonObj.getAsJsonArray("metadata");
        if (jsonArraymetadata != null) {
          // ensure the json data is an array
          if (!jsonObj.get("metadata").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `metadata` to be an array in the JSON string but got `%s`", jsonObj.get("metadata").toString()));
          }

          // validate the optional field `metadata` (array)
          for (int i = 0; i < jsonArraymetadata.size(); i++) {
            MetadataObj.validateJsonElement(jsonArraymetadata.get(i));
          };
        }
      }
      if (jsonObj.get("dsnlist") != null && !jsonObj.get("dsnlist").isJsonNull()) {
        JsonArray jsonArraydsnlist = jsonObj.getAsJsonArray("dsnlist");
        if (jsonArraydsnlist != null) {
          // ensure the json data is an array
          if (!jsonObj.get("dsnlist").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `dsnlist` to be an array in the JSON string but got `%s`", jsonObj.get("dsnlist").toString()));
          }

          // validate the optional field `dsnlist` (array)
          for (int i = 0; i < jsonArraydsnlist.size(); i++) {
            DataSource.validateJsonElement(jsonArraydsnlist.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("documentSections") != null && !jsonObj.get("documentSections").isJsonNull() && !jsonObj.get("documentSections").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `documentSections` to be an array in the JSON string but got `%s`", jsonObj.get("documentSections").toString()));
      }
      if (jsonObj.get("documentWithVariableDrivenSections") != null && !jsonObj.get("documentWithVariableDrivenSections").isJsonNull()) {
        JsonArray jsonArraydocumentWithVariableDrivenSections = jsonObj.getAsJsonArray("documentWithVariableDrivenSections");
        if (jsonArraydocumentWithVariableDrivenSections != null) {
          // ensure the json data is an array
          if (!jsonObj.get("documentWithVariableDrivenSections").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `documentWithVariableDrivenSections` to be an array in the JSON string but got `%s`", jsonObj.get("documentWithVariableDrivenSections").toString()));
          }

          // validate the optional field `documentWithVariableDrivenSections` (array)
          for (int i = 0; i < jsonArraydocumentWithVariableDrivenSections.size(); i++) {
            Document.validateJsonElement(jsonArraydocumentWithVariableDrivenSections.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Manifest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Manifest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Manifest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Manifest.class));

       return (TypeAdapter<T>) new TypeAdapter<Manifest>() {
           @Override
           public void write(JsonWriter out, Manifest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Manifest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Manifest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Manifest
  * @throws IOException if the JSON string is invalid with respect to Manifest
  */
  public static Manifest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Manifest.class);
  }

 /**
  * Convert an instance of Manifest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

