/*
 * Exstream Design
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ResourceVersion;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * BulkWorkflowStateChangeResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-17T13:54:16.859257228Z[Europe/Lisbon]")
public class BulkWorkflowStateChangeResponse {
  public static final String SERIALIZED_NAME_STATE_CHANGED_RESOURCES = "stateChangedResources";
  @SerializedName(SERIALIZED_NAME_STATE_CHANGED_RESOURCES)
  private List<ResourceVersion> stateChangedResources;

  public static final String SERIALIZED_NAME_DOMAIN_NOT_FOUND_EXCEPTION_RESOURCES = "domainNotFoundExceptionResources";
  @SerializedName(SERIALIZED_NAME_DOMAIN_NOT_FOUND_EXCEPTION_RESOURCES)
  private List<ResourceVersion> domainNotFoundExceptionResources;

  public static final String SERIALIZED_NAME_PERMISSION_DENIED_EXCEPTION_RESOURCES = "permissionDeniedExceptionResources";
  @SerializedName(SERIALIZED_NAME_PERMISSION_DENIED_EXCEPTION_RESOURCES)
  private List<ResourceVersion> permissionDeniedExceptionResources;

  public static final String SERIALIZED_NAME_RESOURCE_LOCKED_EXCEPTION_RESOURCES = "resourceLockedExceptionResources";
  @SerializedName(SERIALIZED_NAME_RESOURCE_LOCKED_EXCEPTION_RESOURCES)
  private List<ResourceVersion> resourceLockedExceptionResources;

  public static final String SERIALIZED_NAME_INVALID_STATE_FOR_UPDATE_EXCEPTION_RESOURCES = "invalidStateForUpdateExceptionResources";
  @SerializedName(SERIALIZED_NAME_INVALID_STATE_FOR_UPDATE_EXCEPTION_RESOURCES)
  private List<ResourceVersion> invalidStateForUpdateExceptionResources;

  public static final String SERIALIZED_NAME_NOT_ALL_CHILDREN_APPROVED_EXCEPTION_RESOURCES = "notAllChildrenApprovedExceptionResources";
  @SerializedName(SERIALIZED_NAME_NOT_ALL_CHILDREN_APPROVED_EXCEPTION_RESOURCES)
  private List<ResourceVersion> notAllChildrenApprovedExceptionResources;

  public static final String SERIALIZED_NAME_WORKFLOW_EXCEPTION_RESOURCES = "workflowExceptionResources";
  @SerializedName(SERIALIZED_NAME_WORKFLOW_EXCEPTION_RESOURCES)
  private List<ResourceVersion> workflowExceptionResources;

  public static final String SERIALIZED_NAME_UNEXPECTED_EXCEPTION_RESOURCES = "unexpectedExceptionResources";
  @SerializedName(SERIALIZED_NAME_UNEXPECTED_EXCEPTION_RESOURCES)
  private List<ResourceVersion> unexpectedExceptionResources;

  public static final String SERIALIZED_NAME_ERROR_RESOURCES = "errorResources";
  @SerializedName(SERIALIZED_NAME_ERROR_RESOURCES)
  private List<ResourceVersion> errorResources;

  public BulkWorkflowStateChangeResponse() {
  }

  public BulkWorkflowStateChangeResponse stateChangedResources(List<ResourceVersion> stateChangedResources) {
    this.stateChangedResources = stateChangedResources;
    return this;
  }

  public BulkWorkflowStateChangeResponse addStateChangedResourcesItem(ResourceVersion stateChangedResourcesItem) {
    if (this.stateChangedResources == null) {
      this.stateChangedResources = new ArrayList<>();
    }
    this.stateChangedResources.add(stateChangedResourcesItem);
    return this;
  }

   /**
   * Get stateChangedResources
   * @return stateChangedResources
  **/
  @javax.annotation.Nullable
  public List<ResourceVersion> getStateChangedResources() {
    return stateChangedResources;
  }

  public void setStateChangedResources(List<ResourceVersion> stateChangedResources) {
    this.stateChangedResources = stateChangedResources;
  }


  public BulkWorkflowStateChangeResponse domainNotFoundExceptionResources(List<ResourceVersion> domainNotFoundExceptionResources) {
    this.domainNotFoundExceptionResources = domainNotFoundExceptionResources;
    return this;
  }

  public BulkWorkflowStateChangeResponse addDomainNotFoundExceptionResourcesItem(ResourceVersion domainNotFoundExceptionResourcesItem) {
    if (this.domainNotFoundExceptionResources == null) {
      this.domainNotFoundExceptionResources = new ArrayList<>();
    }
    this.domainNotFoundExceptionResources.add(domainNotFoundExceptionResourcesItem);
    return this;
  }

   /**
   * Get domainNotFoundExceptionResources
   * @return domainNotFoundExceptionResources
  **/
  @javax.annotation.Nullable
  public List<ResourceVersion> getDomainNotFoundExceptionResources() {
    return domainNotFoundExceptionResources;
  }

  public void setDomainNotFoundExceptionResources(List<ResourceVersion> domainNotFoundExceptionResources) {
    this.domainNotFoundExceptionResources = domainNotFoundExceptionResources;
  }


  public BulkWorkflowStateChangeResponse permissionDeniedExceptionResources(List<ResourceVersion> permissionDeniedExceptionResources) {
    this.permissionDeniedExceptionResources = permissionDeniedExceptionResources;
    return this;
  }

  public BulkWorkflowStateChangeResponse addPermissionDeniedExceptionResourcesItem(ResourceVersion permissionDeniedExceptionResourcesItem) {
    if (this.permissionDeniedExceptionResources == null) {
      this.permissionDeniedExceptionResources = new ArrayList<>();
    }
    this.permissionDeniedExceptionResources.add(permissionDeniedExceptionResourcesItem);
    return this;
  }

   /**
   * Get permissionDeniedExceptionResources
   * @return permissionDeniedExceptionResources
  **/
  @javax.annotation.Nullable
  public List<ResourceVersion> getPermissionDeniedExceptionResources() {
    return permissionDeniedExceptionResources;
  }

  public void setPermissionDeniedExceptionResources(List<ResourceVersion> permissionDeniedExceptionResources) {
    this.permissionDeniedExceptionResources = permissionDeniedExceptionResources;
  }


  public BulkWorkflowStateChangeResponse resourceLockedExceptionResources(List<ResourceVersion> resourceLockedExceptionResources) {
    this.resourceLockedExceptionResources = resourceLockedExceptionResources;
    return this;
  }

  public BulkWorkflowStateChangeResponse addResourceLockedExceptionResourcesItem(ResourceVersion resourceLockedExceptionResourcesItem) {
    if (this.resourceLockedExceptionResources == null) {
      this.resourceLockedExceptionResources = new ArrayList<>();
    }
    this.resourceLockedExceptionResources.add(resourceLockedExceptionResourcesItem);
    return this;
  }

   /**
   * Get resourceLockedExceptionResources
   * @return resourceLockedExceptionResources
  **/
  @javax.annotation.Nullable
  public List<ResourceVersion> getResourceLockedExceptionResources() {
    return resourceLockedExceptionResources;
  }

  public void setResourceLockedExceptionResources(List<ResourceVersion> resourceLockedExceptionResources) {
    this.resourceLockedExceptionResources = resourceLockedExceptionResources;
  }


  public BulkWorkflowStateChangeResponse invalidStateForUpdateExceptionResources(List<ResourceVersion> invalidStateForUpdateExceptionResources) {
    this.invalidStateForUpdateExceptionResources = invalidStateForUpdateExceptionResources;
    return this;
  }

  public BulkWorkflowStateChangeResponse addInvalidStateForUpdateExceptionResourcesItem(ResourceVersion invalidStateForUpdateExceptionResourcesItem) {
    if (this.invalidStateForUpdateExceptionResources == null) {
      this.invalidStateForUpdateExceptionResources = new ArrayList<>();
    }
    this.invalidStateForUpdateExceptionResources.add(invalidStateForUpdateExceptionResourcesItem);
    return this;
  }

   /**
   * Get invalidStateForUpdateExceptionResources
   * @return invalidStateForUpdateExceptionResources
  **/
  @javax.annotation.Nullable
  public List<ResourceVersion> getInvalidStateForUpdateExceptionResources() {
    return invalidStateForUpdateExceptionResources;
  }

  public void setInvalidStateForUpdateExceptionResources(List<ResourceVersion> invalidStateForUpdateExceptionResources) {
    this.invalidStateForUpdateExceptionResources = invalidStateForUpdateExceptionResources;
  }


  public BulkWorkflowStateChangeResponse notAllChildrenApprovedExceptionResources(List<ResourceVersion> notAllChildrenApprovedExceptionResources) {
    this.notAllChildrenApprovedExceptionResources = notAllChildrenApprovedExceptionResources;
    return this;
  }

  public BulkWorkflowStateChangeResponse addNotAllChildrenApprovedExceptionResourcesItem(ResourceVersion notAllChildrenApprovedExceptionResourcesItem) {
    if (this.notAllChildrenApprovedExceptionResources == null) {
      this.notAllChildrenApprovedExceptionResources = new ArrayList<>();
    }
    this.notAllChildrenApprovedExceptionResources.add(notAllChildrenApprovedExceptionResourcesItem);
    return this;
  }

   /**
   * Get notAllChildrenApprovedExceptionResources
   * @return notAllChildrenApprovedExceptionResources
  **/
  @javax.annotation.Nullable
  public List<ResourceVersion> getNotAllChildrenApprovedExceptionResources() {
    return notAllChildrenApprovedExceptionResources;
  }

  public void setNotAllChildrenApprovedExceptionResources(List<ResourceVersion> notAllChildrenApprovedExceptionResources) {
    this.notAllChildrenApprovedExceptionResources = notAllChildrenApprovedExceptionResources;
  }


  public BulkWorkflowStateChangeResponse workflowExceptionResources(List<ResourceVersion> workflowExceptionResources) {
    this.workflowExceptionResources = workflowExceptionResources;
    return this;
  }

  public BulkWorkflowStateChangeResponse addWorkflowExceptionResourcesItem(ResourceVersion workflowExceptionResourcesItem) {
    if (this.workflowExceptionResources == null) {
      this.workflowExceptionResources = new ArrayList<>();
    }
    this.workflowExceptionResources.add(workflowExceptionResourcesItem);
    return this;
  }

   /**
   * Get workflowExceptionResources
   * @return workflowExceptionResources
  **/
  @javax.annotation.Nullable
  public List<ResourceVersion> getWorkflowExceptionResources() {
    return workflowExceptionResources;
  }

  public void setWorkflowExceptionResources(List<ResourceVersion> workflowExceptionResources) {
    this.workflowExceptionResources = workflowExceptionResources;
  }


  public BulkWorkflowStateChangeResponse unexpectedExceptionResources(List<ResourceVersion> unexpectedExceptionResources) {
    this.unexpectedExceptionResources = unexpectedExceptionResources;
    return this;
  }

  public BulkWorkflowStateChangeResponse addUnexpectedExceptionResourcesItem(ResourceVersion unexpectedExceptionResourcesItem) {
    if (this.unexpectedExceptionResources == null) {
      this.unexpectedExceptionResources = new ArrayList<>();
    }
    this.unexpectedExceptionResources.add(unexpectedExceptionResourcesItem);
    return this;
  }

   /**
   * Get unexpectedExceptionResources
   * @return unexpectedExceptionResources
  **/
  @javax.annotation.Nullable
  public List<ResourceVersion> getUnexpectedExceptionResources() {
    return unexpectedExceptionResources;
  }

  public void setUnexpectedExceptionResources(List<ResourceVersion> unexpectedExceptionResources) {
    this.unexpectedExceptionResources = unexpectedExceptionResources;
  }


  public BulkWorkflowStateChangeResponse errorResources(List<ResourceVersion> errorResources) {
    this.errorResources = errorResources;
    return this;
  }

  public BulkWorkflowStateChangeResponse addErrorResourcesItem(ResourceVersion errorResourcesItem) {
    if (this.errorResources == null) {
      this.errorResources = new ArrayList<>();
    }
    this.errorResources.add(errorResourcesItem);
    return this;
  }

   /**
   * Get errorResources
   * @return errorResources
  **/
  @javax.annotation.Nullable
  public List<ResourceVersion> getErrorResources() {
    return errorResources;
  }

  public void setErrorResources(List<ResourceVersion> errorResources) {
    this.errorResources = errorResources;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BulkWorkflowStateChangeResponse bulkWorkflowStateChangeResponse = (BulkWorkflowStateChangeResponse) o;
    return Objects.equals(this.stateChangedResources, bulkWorkflowStateChangeResponse.stateChangedResources) &&
        Objects.equals(this.domainNotFoundExceptionResources, bulkWorkflowStateChangeResponse.domainNotFoundExceptionResources) &&
        Objects.equals(this.permissionDeniedExceptionResources, bulkWorkflowStateChangeResponse.permissionDeniedExceptionResources) &&
        Objects.equals(this.resourceLockedExceptionResources, bulkWorkflowStateChangeResponse.resourceLockedExceptionResources) &&
        Objects.equals(this.invalidStateForUpdateExceptionResources, bulkWorkflowStateChangeResponse.invalidStateForUpdateExceptionResources) &&
        Objects.equals(this.notAllChildrenApprovedExceptionResources, bulkWorkflowStateChangeResponse.notAllChildrenApprovedExceptionResources) &&
        Objects.equals(this.workflowExceptionResources, bulkWorkflowStateChangeResponse.workflowExceptionResources) &&
        Objects.equals(this.unexpectedExceptionResources, bulkWorkflowStateChangeResponse.unexpectedExceptionResources) &&
        Objects.equals(this.errorResources, bulkWorkflowStateChangeResponse.errorResources);
  }

  @Override
  public int hashCode() {
    return Objects.hash(stateChangedResources, domainNotFoundExceptionResources, permissionDeniedExceptionResources, resourceLockedExceptionResources, invalidStateForUpdateExceptionResources, notAllChildrenApprovedExceptionResources, workflowExceptionResources, unexpectedExceptionResources, errorResources);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BulkWorkflowStateChangeResponse {\n");
    sb.append("    stateChangedResources: ").append(toIndentedString(stateChangedResources)).append("\n");
    sb.append("    domainNotFoundExceptionResources: ").append(toIndentedString(domainNotFoundExceptionResources)).append("\n");
    sb.append("    permissionDeniedExceptionResources: ").append(toIndentedString(permissionDeniedExceptionResources)).append("\n");
    sb.append("    resourceLockedExceptionResources: ").append(toIndentedString(resourceLockedExceptionResources)).append("\n");
    sb.append("    invalidStateForUpdateExceptionResources: ").append(toIndentedString(invalidStateForUpdateExceptionResources)).append("\n");
    sb.append("    notAllChildrenApprovedExceptionResources: ").append(toIndentedString(notAllChildrenApprovedExceptionResources)).append("\n");
    sb.append("    workflowExceptionResources: ").append(toIndentedString(workflowExceptionResources)).append("\n");
    sb.append("    unexpectedExceptionResources: ").append(toIndentedString(unexpectedExceptionResources)).append("\n");
    sb.append("    errorResources: ").append(toIndentedString(errorResources)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("stateChangedResources");
    openapiFields.add("domainNotFoundExceptionResources");
    openapiFields.add("permissionDeniedExceptionResources");
    openapiFields.add("resourceLockedExceptionResources");
    openapiFields.add("invalidStateForUpdateExceptionResources");
    openapiFields.add("notAllChildrenApprovedExceptionResources");
    openapiFields.add("workflowExceptionResources");
    openapiFields.add("unexpectedExceptionResources");
    openapiFields.add("errorResources");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to BulkWorkflowStateChangeResponse
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BulkWorkflowStateChangeResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BulkWorkflowStateChangeResponse is not found in the empty JSON string", BulkWorkflowStateChangeResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BulkWorkflowStateChangeResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BulkWorkflowStateChangeResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("stateChangedResources") != null && !jsonObj.get("stateChangedResources").isJsonNull()) {
        JsonArray jsonArraystateChangedResources = jsonObj.getAsJsonArray("stateChangedResources");
        if (jsonArraystateChangedResources != null) {
          // ensure the json data is an array
          if (!jsonObj.get("stateChangedResources").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `stateChangedResources` to be an array in the JSON string but got `%s`", jsonObj.get("stateChangedResources").toString()));
          }

          // validate the optional field `stateChangedResources` (array)
          for (int i = 0; i < jsonArraystateChangedResources.size(); i++) {
            ResourceVersion.validateJsonElement(jsonArraystateChangedResources.get(i));
          };
        }
      }
      if (jsonObj.get("domainNotFoundExceptionResources") != null && !jsonObj.get("domainNotFoundExceptionResources").isJsonNull()) {
        JsonArray jsonArraydomainNotFoundExceptionResources = jsonObj.getAsJsonArray("domainNotFoundExceptionResources");
        if (jsonArraydomainNotFoundExceptionResources != null) {
          // ensure the json data is an array
          if (!jsonObj.get("domainNotFoundExceptionResources").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `domainNotFoundExceptionResources` to be an array in the JSON string but got `%s`", jsonObj.get("domainNotFoundExceptionResources").toString()));
          }

          // validate the optional field `domainNotFoundExceptionResources` (array)
          for (int i = 0; i < jsonArraydomainNotFoundExceptionResources.size(); i++) {
            ResourceVersion.validateJsonElement(jsonArraydomainNotFoundExceptionResources.get(i));
          };
        }
      }
      if (jsonObj.get("permissionDeniedExceptionResources") != null && !jsonObj.get("permissionDeniedExceptionResources").isJsonNull()) {
        JsonArray jsonArraypermissionDeniedExceptionResources = jsonObj.getAsJsonArray("permissionDeniedExceptionResources");
        if (jsonArraypermissionDeniedExceptionResources != null) {
          // ensure the json data is an array
          if (!jsonObj.get("permissionDeniedExceptionResources").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `permissionDeniedExceptionResources` to be an array in the JSON string but got `%s`", jsonObj.get("permissionDeniedExceptionResources").toString()));
          }

          // validate the optional field `permissionDeniedExceptionResources` (array)
          for (int i = 0; i < jsonArraypermissionDeniedExceptionResources.size(); i++) {
            ResourceVersion.validateJsonElement(jsonArraypermissionDeniedExceptionResources.get(i));
          };
        }
      }
      if (jsonObj.get("resourceLockedExceptionResources") != null && !jsonObj.get("resourceLockedExceptionResources").isJsonNull()) {
        JsonArray jsonArrayresourceLockedExceptionResources = jsonObj.getAsJsonArray("resourceLockedExceptionResources");
        if (jsonArrayresourceLockedExceptionResources != null) {
          // ensure the json data is an array
          if (!jsonObj.get("resourceLockedExceptionResources").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `resourceLockedExceptionResources` to be an array in the JSON string but got `%s`", jsonObj.get("resourceLockedExceptionResources").toString()));
          }

          // validate the optional field `resourceLockedExceptionResources` (array)
          for (int i = 0; i < jsonArrayresourceLockedExceptionResources.size(); i++) {
            ResourceVersion.validateJsonElement(jsonArrayresourceLockedExceptionResources.get(i));
          };
        }
      }
      if (jsonObj.get("invalidStateForUpdateExceptionResources") != null && !jsonObj.get("invalidStateForUpdateExceptionResources").isJsonNull()) {
        JsonArray jsonArrayinvalidStateForUpdateExceptionResources = jsonObj.getAsJsonArray("invalidStateForUpdateExceptionResources");
        if (jsonArrayinvalidStateForUpdateExceptionResources != null) {
          // ensure the json data is an array
          if (!jsonObj.get("invalidStateForUpdateExceptionResources").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `invalidStateForUpdateExceptionResources` to be an array in the JSON string but got `%s`", jsonObj.get("invalidStateForUpdateExceptionResources").toString()));
          }

          // validate the optional field `invalidStateForUpdateExceptionResources` (array)
          for (int i = 0; i < jsonArrayinvalidStateForUpdateExceptionResources.size(); i++) {
            ResourceVersion.validateJsonElement(jsonArrayinvalidStateForUpdateExceptionResources.get(i));
          };
        }
      }
      if (jsonObj.get("notAllChildrenApprovedExceptionResources") != null && !jsonObj.get("notAllChildrenApprovedExceptionResources").isJsonNull()) {
        JsonArray jsonArraynotAllChildrenApprovedExceptionResources = jsonObj.getAsJsonArray("notAllChildrenApprovedExceptionResources");
        if (jsonArraynotAllChildrenApprovedExceptionResources != null) {
          // ensure the json data is an array
          if (!jsonObj.get("notAllChildrenApprovedExceptionResources").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `notAllChildrenApprovedExceptionResources` to be an array in the JSON string but got `%s`", jsonObj.get("notAllChildrenApprovedExceptionResources").toString()));
          }

          // validate the optional field `notAllChildrenApprovedExceptionResources` (array)
          for (int i = 0; i < jsonArraynotAllChildrenApprovedExceptionResources.size(); i++) {
            ResourceVersion.validateJsonElement(jsonArraynotAllChildrenApprovedExceptionResources.get(i));
          };
        }
      }
      if (jsonObj.get("workflowExceptionResources") != null && !jsonObj.get("workflowExceptionResources").isJsonNull()) {
        JsonArray jsonArrayworkflowExceptionResources = jsonObj.getAsJsonArray("workflowExceptionResources");
        if (jsonArrayworkflowExceptionResources != null) {
          // ensure the json data is an array
          if (!jsonObj.get("workflowExceptionResources").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `workflowExceptionResources` to be an array in the JSON string but got `%s`", jsonObj.get("workflowExceptionResources").toString()));
          }

          // validate the optional field `workflowExceptionResources` (array)
          for (int i = 0; i < jsonArrayworkflowExceptionResources.size(); i++) {
            ResourceVersion.validateJsonElement(jsonArrayworkflowExceptionResources.get(i));
          };
        }
      }
      if (jsonObj.get("unexpectedExceptionResources") != null && !jsonObj.get("unexpectedExceptionResources").isJsonNull()) {
        JsonArray jsonArrayunexpectedExceptionResources = jsonObj.getAsJsonArray("unexpectedExceptionResources");
        if (jsonArrayunexpectedExceptionResources != null) {
          // ensure the json data is an array
          if (!jsonObj.get("unexpectedExceptionResources").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `unexpectedExceptionResources` to be an array in the JSON string but got `%s`", jsonObj.get("unexpectedExceptionResources").toString()));
          }

          // validate the optional field `unexpectedExceptionResources` (array)
          for (int i = 0; i < jsonArrayunexpectedExceptionResources.size(); i++) {
            ResourceVersion.validateJsonElement(jsonArrayunexpectedExceptionResources.get(i));
          };
        }
      }
      if (jsonObj.get("errorResources") != null && !jsonObj.get("errorResources").isJsonNull()) {
        JsonArray jsonArrayerrorResources = jsonObj.getAsJsonArray("errorResources");
        if (jsonArrayerrorResources != null) {
          // ensure the json data is an array
          if (!jsonObj.get("errorResources").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `errorResources` to be an array in the JSON string but got `%s`", jsonObj.get("errorResources").toString()));
          }

          // validate the optional field `errorResources` (array)
          for (int i = 0; i < jsonArrayerrorResources.size(); i++) {
            ResourceVersion.validateJsonElement(jsonArrayerrorResources.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BulkWorkflowStateChangeResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BulkWorkflowStateChangeResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BulkWorkflowStateChangeResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BulkWorkflowStateChangeResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<BulkWorkflowStateChangeResponse>() {
           @Override
           public void write(JsonWriter out, BulkWorkflowStateChangeResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BulkWorkflowStateChangeResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of BulkWorkflowStateChangeResponse given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of BulkWorkflowStateChangeResponse
  * @throws IOException if the JSON string is invalid with respect to BulkWorkflowStateChangeResponse
  */
  public static BulkWorkflowStateChangeResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BulkWorkflowStateChangeResponse.class);
  }

 /**
  * Convert an instance of BulkWorkflowStateChangeResponse to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

