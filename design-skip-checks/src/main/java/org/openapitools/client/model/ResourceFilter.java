/*
 * Exstream Design
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;
import org.openapitools.client.model.ResourceCategory;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ResourceFilter
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-17T13:54:16.859257228Z[Europe/Lisbon]")
public class ResourceFilter {
  public static final String SERIALIZED_NAME_IDS = "ids";
  @SerializedName(SERIALIZED_NAME_IDS)
  private List<UUID> ids;

  public static final String SERIALIZED_NAME_EXCLUDED_IDS = "excludedIds";
  @SerializedName(SERIALIZED_NAME_EXCLUDED_IDS)
  private List<UUID> excludedIds;

  /**
   * Gets or Sets types
   */
  @JsonAdapter(TypesEnum.Adapter.class)
  public enum TypesEnum {
    ALL("all"),
    
    DESIGNER("designer"),
    
    AUTHOR("author"),
    
    DESIGNASSET("designAsset"),
    
    COMMASSET("commAsset"),
    
    ORCHESTRATOR("orchestrator"),
    
    RESOURCEPACK("resourcepack"),
    
    EXSTRAPPLICATION("exstrapplication"),
    
    EXSTRDOCUMENT("exstrdocument"),
    
    EXSTRPAGE("exstrpage"),
    
    EXSTRCOMPONENTOBJ("exstrcomponentobj"),
    
    EXSTREMAIL("exstremail"),
    
    EXSTRENGINE("exstrengine"),
    
    EXSTRVARIABLEBASE("exstrvariablebase"),
    
    EXSTRPACKAGE("exstrpackage"),
    
    EXSTRGRAPHICALMESSAGE("exstrgraphicalmessage"),
    
    EXSTRTEXTMESSAGE("exstrtextmessage"),
    
    EXSTRPARAGRAPH("exstrparagraph"),
    
    EXSTRPARAGRAPHSECTION("exstrparagraphsection"),
    
    IMAGE("image"),
    
    SAMPLEFILE("samplefile"),
    
    EXSTRDATASOURCE("exstrdatasource"),
    
    EXSTRHTML5("exstrhtml5"),
    
    VERSIONEDTEMPLATE("versionedtemplate"),
    
    DOCUMENTDEFINITION("documentdefinition"),
    
    ENGINERUNDEF("enginerundef"),
    
    FONT("font"),
    
    FONTDEFINITION("fontdefinition"),
    
    EXSTRBARCODE("exstrbarcode"),
    
    EXSTRPAPERTYPE("exstrpapertype"),
    
    EXSTRMESSAGETYPE("exstrmessagetype"),
    
    EXSTRMETADATA("exstrmetadata"),
    
    ORCSETTINGS("orcsettings"),
    
    FLOWMODEL("flowmodel"),
    
    EXSTRCOMMUNICATIONSET("exstrcommunicationset"),
    
    EXSTROUTPUTQUEUE("exstroutputqueue"),
    
    EXSTROUTPUT("exstroutput"),
    
    EXSTRLANGUAGE("exstrlanguage"),
    
    EXSTRLOCALE("exstrlocale"),
    
    EXSTRMIGRATIONSET("exstrmigrationset"),
    
    EXSTRMESSAGING("exstrmessaging"),
    
    EXSTRMESSAGINGAUTHOR("exstrmessagingauthor"),
    
    FLOWSCRIPT("flowscript"),
    
    EXSTRNAMEDCOLOR("exstrnamedcolor"),
    
    EXSTRCOLORFAMILY("exstrcolorfamily"),
    
    EXSTRSTYLE("exstrstyle"),
    
    EXSTRSTYLESHEET("exstrstylesheet"),
    
    EXSTREVENT("exstrevent"),
    
    EXSTRRULE("exstrrule"),
    
    DASHBOARD("dashboard"),
    
    PDF("pdf");

    private String value;

    TypesEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypesEnum fromValue(String value) {
      for (TypesEnum b : TypesEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypesEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypesEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypesEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypesEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPES = "types";
  @SerializedName(SERIALIZED_NAME_TYPES)
  private List<TypesEnum> types;

  /**
   * Gets or Sets excludedTypes
   */
  @JsonAdapter(ExcludedTypesEnum.Adapter.class)
  public enum ExcludedTypesEnum {
    ALL("all"),
    
    DESIGNER("designer"),
    
    AUTHOR("author"),
    
    DESIGNASSET("designAsset"),
    
    COMMASSET("commAsset"),
    
    ORCHESTRATOR("orchestrator"),
    
    RESOURCEPACK("resourcepack"),
    
    EXSTRAPPLICATION("exstrapplication"),
    
    EXSTRDOCUMENT("exstrdocument"),
    
    EXSTRPAGE("exstrpage"),
    
    EXSTRCOMPONENTOBJ("exstrcomponentobj"),
    
    EXSTREMAIL("exstremail"),
    
    EXSTRENGINE("exstrengine"),
    
    EXSTRVARIABLEBASE("exstrvariablebase"),
    
    EXSTRPACKAGE("exstrpackage"),
    
    EXSTRGRAPHICALMESSAGE("exstrgraphicalmessage"),
    
    EXSTRTEXTMESSAGE("exstrtextmessage"),
    
    EXSTRPARAGRAPH("exstrparagraph"),
    
    EXSTRPARAGRAPHSECTION("exstrparagraphsection"),
    
    IMAGE("image"),
    
    SAMPLEFILE("samplefile"),
    
    EXSTRDATASOURCE("exstrdatasource"),
    
    EXSTRHTML5("exstrhtml5"),
    
    VERSIONEDTEMPLATE("versionedtemplate"),
    
    DOCUMENTDEFINITION("documentdefinition"),
    
    ENGINERUNDEF("enginerundef"),
    
    FONT("font"),
    
    FONTDEFINITION("fontdefinition"),
    
    EXSTRBARCODE("exstrbarcode"),
    
    EXSTRPAPERTYPE("exstrpapertype"),
    
    EXSTRMESSAGETYPE("exstrmessagetype"),
    
    EXSTRMETADATA("exstrmetadata"),
    
    ORCSETTINGS("orcsettings"),
    
    FLOWMODEL("flowmodel"),
    
    EXSTRCOMMUNICATIONSET("exstrcommunicationset"),
    
    EXSTROUTPUTQUEUE("exstroutputqueue"),
    
    EXSTROUTPUT("exstroutput"),
    
    EXSTRLANGUAGE("exstrlanguage"),
    
    EXSTRLOCALE("exstrlocale"),
    
    EXSTRMIGRATIONSET("exstrmigrationset"),
    
    EXSTRMESSAGING("exstrmessaging"),
    
    EXSTRMESSAGINGAUTHOR("exstrmessagingauthor"),
    
    FLOWSCRIPT("flowscript"),
    
    EXSTRNAMEDCOLOR("exstrnamedcolor"),
    
    EXSTRCOLORFAMILY("exstrcolorfamily"),
    
    EXSTRSTYLE("exstrstyle"),
    
    EXSTRSTYLESHEET("exstrstylesheet"),
    
    EXSTREVENT("exstrevent"),
    
    EXSTRRULE("exstrrule"),
    
    DASHBOARD("dashboard"),
    
    PDF("pdf");

    private String value;

    ExcludedTypesEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ExcludedTypesEnum fromValue(String value) {
      for (ExcludedTypesEnum b : ExcludedTypesEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ExcludedTypesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ExcludedTypesEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ExcludedTypesEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ExcludedTypesEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ExcludedTypesEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_EXCLUDED_TYPES = "excludedTypes";
  @SerializedName(SERIALIZED_NAME_EXCLUDED_TYPES)
  private List<ExcludedTypesEnum> excludedTypes;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_CREATED_BY = "createdBy";
  @SerializedName(SERIALIZED_NAME_CREATED_BY)
  private String createdBy;

  public static final String SERIALIZED_NAME_LAST_MODIFIED_BY = "lastModifiedBy";
  @SerializedName(SERIALIZED_NAME_LAST_MODIFIED_BY)
  private String lastModifiedBy;

  public static final String SERIALIZED_NAME_CREATED_DATE_START = "createdDateStart";
  @SerializedName(SERIALIZED_NAME_CREATED_DATE_START)
  private OffsetDateTime createdDateStart;

  public static final String SERIALIZED_NAME_CREATED_DATE_END = "createdDateEnd";
  @SerializedName(SERIALIZED_NAME_CREATED_DATE_END)
  private OffsetDateTime createdDateEnd;

  public static final String SERIALIZED_NAME_LAST_MODIFIED_DATE_START = "lastModifiedDateStart";
  @SerializedName(SERIALIZED_NAME_LAST_MODIFIED_DATE_START)
  private OffsetDateTime lastModifiedDateStart;

  public static final String SERIALIZED_NAME_LAST_MODIFIED_DATE_END = "lastModifiedDateEnd";
  @SerializedName(SERIALIZED_NAME_LAST_MODIFIED_DATE_END)
  private OffsetDateTime lastModifiedDateEnd;

  public static final String SERIALIZED_NAME_SEARCH_STRING = "searchString";
  @SerializedName(SERIALIZED_NAME_SEARCH_STRING)
  private String searchString;

  public static final String SERIALIZED_NAME_CASE_SENSITIVE = "caseSensitive";
  @SerializedName(SERIALIZED_NAME_CASE_SENSITIVE)
  private Boolean caseSensitive;

  public static final String SERIALIZED_NAME_WHOLE_WORD = "wholeWord";
  @SerializedName(SERIALIZED_NAME_WHOLE_WORD)
  private Boolean wholeWord;

  public static final String SERIALIZED_NAME_RESOURCE_PACK_ID = "resourcePackId";
  @SerializedName(SERIALIZED_NAME_RESOURCE_PACK_ID)
  private UUID resourcePackId;

  public static final String SERIALIZED_NAME_SYSTEM_RESOURCE = "systemResource";
  @SerializedName(SERIALIZED_NAME_SYSTEM_RESOURCE)
  private Boolean systemResource;

  public static final String SERIALIZED_NAME_HIDDEN = "hidden";
  @SerializedName(SERIALIZED_NAME_HIDDEN)
  private Boolean hidden;

  public static final String SERIALIZED_NAME_HAS_APPROVED_VERSION = "hasApprovedVersion";
  @SerializedName(SERIALIZED_NAME_HAS_APPROVED_VERSION)
  private Boolean hasApprovedVersion;

  public static final String SERIALIZED_NAME_INCLUDE_VARIANTS = "includeVariants";
  @SerializedName(SERIALIZED_NAME_INCLUDE_VARIANTS)
  private Boolean includeVariants;

  public static final String SERIALIZED_NAME_STANDARD_VARIANT_ID = "standardVariantId";
  @SerializedName(SERIALIZED_NAME_STANDARD_VARIANT_ID)
  private UUID standardVariantId;

  public static final String SERIALIZED_NAME_USE_EFFECTIVE_DATE = "useEffectiveDate";
  @SerializedName(SERIALIZED_NAME_USE_EFFECTIVE_DATE)
  private Boolean useEffectiveDate;

  public static final String SERIALIZED_NAME_EFFECTIVE_DATE = "effectiveDate";
  @SerializedName(SERIALIZED_NAME_EFFECTIVE_DATE)
  private OffsetDateTime effectiveDate;

  public static final String SERIALIZED_NAME_CATEGORIES = "categories";
  @SerializedName(SERIALIZED_NAME_CATEGORIES)
  private List<String> categories;

  public static final String SERIALIZED_NAME_CATEGORY_OBJECTS = "categoryObjects";
  @SerializedName(SERIALIZED_NAME_CATEGORY_OBJECTS)
  private List<ResourceCategory> categoryObjects;

  public static final String SERIALIZED_NAME_VFILTER_LAST_MODIFIED_DATE_END = "vfilter_lastModifiedDateEnd";
  @SerializedName(SERIALIZED_NAME_VFILTER_LAST_MODIFIED_DATE_END)
  private OffsetDateTime vfilterLastModifiedDateEnd;

  public static final String SERIALIZED_NAME_METADATA = "metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  private Map<String, List<Object>> metadata = new HashMap<>();

  public static final String SERIALIZED_NAME_DOMAIN_ID = "domainId";
  @SerializedName(SERIALIZED_NAME_DOMAIN_ID)
  private String domainId;

  public static final String SERIALIZED_NAME_LATEST_VERSION = "latestVersion";
  @SerializedName(SERIALIZED_NAME_LATEST_VERSION)
  private Boolean latestVersion;

  public static final String SERIALIZED_NAME_LOCKED = "locked";
  @SerializedName(SERIALIZED_NAME_LOCKED)
  private Boolean locked;

  /**
   * Gets or Sets states
   */
  @JsonAdapter(StatesEnum.Adapter.class)
  public enum StatesEnum {
    DRAFT("DRAFT"),
    
    REVIEW("REVIEW"),
    
    APPROVED("APPROVED"),
    
    REJECTED("REJECTED");

    private String value;

    StatesEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatesEnum fromValue(String value) {
      for (StatesEnum b : StatesEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatesEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatesEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatesEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatesEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATES = "states";
  @SerializedName(SERIALIZED_NAME_STATES)
  private List<StatesEnum> states;

  public static final String SERIALIZED_NAME_OVERRIDE_IDS = "overrideIds";
  @SerializedName(SERIALIZED_NAME_OVERRIDE_IDS)
  private List<UUID> overrideIds;

  /**
   * Gets or Sets overrideStates
   */
  @JsonAdapter(OverrideStatesEnum.Adapter.class)
  public enum OverrideStatesEnum {
    DRAFT("DRAFT"),
    
    REVIEW("REVIEW"),
    
    APPROVED("APPROVED"),
    
    REJECTED("REJECTED");

    private String value;

    OverrideStatesEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OverrideStatesEnum fromValue(String value) {
      for (OverrideStatesEnum b : OverrideStatesEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<OverrideStatesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OverrideStatesEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OverrideStatesEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return OverrideStatesEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      OverrideStatesEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_OVERRIDE_STATES = "overrideStates";
  @SerializedName(SERIALIZED_NAME_OVERRIDE_STATES)
  private List<OverrideStatesEnum> overrideStates;

  public ResourceFilter() {
  }

  public ResourceFilter ids(List<UUID> ids) {
    this.ids = ids;
    return this;
  }

  public ResourceFilter addIdsItem(UUID idsItem) {
    if (this.ids == null) {
      this.ids = new ArrayList<>();
    }
    this.ids.add(idsItem);
    return this;
  }

   /**
   * Get ids
   * @return ids
  **/
  @javax.annotation.Nullable
  public List<UUID> getIds() {
    return ids;
  }

  public void setIds(List<UUID> ids) {
    this.ids = ids;
  }


  public ResourceFilter excludedIds(List<UUID> excludedIds) {
    this.excludedIds = excludedIds;
    return this;
  }

  public ResourceFilter addExcludedIdsItem(UUID excludedIdsItem) {
    if (this.excludedIds == null) {
      this.excludedIds = new ArrayList<>();
    }
    this.excludedIds.add(excludedIdsItem);
    return this;
  }

   /**
   * Get excludedIds
   * @return excludedIds
  **/
  @javax.annotation.Nullable
  public List<UUID> getExcludedIds() {
    return excludedIds;
  }

  public void setExcludedIds(List<UUID> excludedIds) {
    this.excludedIds = excludedIds;
  }


  public ResourceFilter types(List<TypesEnum> types) {
    this.types = types;
    return this;
  }

  public ResourceFilter addTypesItem(TypesEnum typesItem) {
    if (this.types == null) {
      this.types = new ArrayList<>();
    }
    this.types.add(typesItem);
    return this;
  }

   /**
   * Get types
   * @return types
  **/
  @javax.annotation.Nullable
  public List<TypesEnum> getTypes() {
    return types;
  }

  public void setTypes(List<TypesEnum> types) {
    this.types = types;
  }


  public ResourceFilter excludedTypes(List<ExcludedTypesEnum> excludedTypes) {
    this.excludedTypes = excludedTypes;
    return this;
  }

  public ResourceFilter addExcludedTypesItem(ExcludedTypesEnum excludedTypesItem) {
    if (this.excludedTypes == null) {
      this.excludedTypes = new ArrayList<>();
    }
    this.excludedTypes.add(excludedTypesItem);
    return this;
  }

   /**
   * Get excludedTypes
   * @return excludedTypes
  **/
  @javax.annotation.Nullable
  public List<ExcludedTypesEnum> getExcludedTypes() {
    return excludedTypes;
  }

  public void setExcludedTypes(List<ExcludedTypesEnum> excludedTypes) {
    this.excludedTypes = excludedTypes;
  }


  public ResourceFilter name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public ResourceFilter description(String description) {
    this.description = description;
    return this;
  }

   /**
   * Get description
   * @return description
  **/
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public ResourceFilter createdBy(String createdBy) {
    this.createdBy = createdBy;
    return this;
  }

   /**
   * Get createdBy
   * @return createdBy
  **/
  @javax.annotation.Nullable
  public String getCreatedBy() {
    return createdBy;
  }

  public void setCreatedBy(String createdBy) {
    this.createdBy = createdBy;
  }


  public ResourceFilter lastModifiedBy(String lastModifiedBy) {
    this.lastModifiedBy = lastModifiedBy;
    return this;
  }

   /**
   * Get lastModifiedBy
   * @return lastModifiedBy
  **/
  @javax.annotation.Nullable
  public String getLastModifiedBy() {
    return lastModifiedBy;
  }

  public void setLastModifiedBy(String lastModifiedBy) {
    this.lastModifiedBy = lastModifiedBy;
  }


  public ResourceFilter createdDateStart(OffsetDateTime createdDateStart) {
    this.createdDateStart = createdDateStart;
    return this;
  }

   /**
   * Get createdDateStart
   * @return createdDateStart
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedDateStart() {
    return createdDateStart;
  }

  public void setCreatedDateStart(OffsetDateTime createdDateStart) {
    this.createdDateStart = createdDateStart;
  }


  public ResourceFilter createdDateEnd(OffsetDateTime createdDateEnd) {
    this.createdDateEnd = createdDateEnd;
    return this;
  }

   /**
   * Get createdDateEnd
   * @return createdDateEnd
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedDateEnd() {
    return createdDateEnd;
  }

  public void setCreatedDateEnd(OffsetDateTime createdDateEnd) {
    this.createdDateEnd = createdDateEnd;
  }


  public ResourceFilter lastModifiedDateStart(OffsetDateTime lastModifiedDateStart) {
    this.lastModifiedDateStart = lastModifiedDateStart;
    return this;
  }

   /**
   * Get lastModifiedDateStart
   * @return lastModifiedDateStart
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getLastModifiedDateStart() {
    return lastModifiedDateStart;
  }

  public void setLastModifiedDateStart(OffsetDateTime lastModifiedDateStart) {
    this.lastModifiedDateStart = lastModifiedDateStart;
  }


  public ResourceFilter lastModifiedDateEnd(OffsetDateTime lastModifiedDateEnd) {
    this.lastModifiedDateEnd = lastModifiedDateEnd;
    return this;
  }

   /**
   * Get lastModifiedDateEnd
   * @return lastModifiedDateEnd
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getLastModifiedDateEnd() {
    return lastModifiedDateEnd;
  }

  public void setLastModifiedDateEnd(OffsetDateTime lastModifiedDateEnd) {
    this.lastModifiedDateEnd = lastModifiedDateEnd;
  }


  public ResourceFilter searchString(String searchString) {
    this.searchString = searchString;
    return this;
  }

   /**
   * Get searchString
   * @return searchString
  **/
  @javax.annotation.Nullable
  public String getSearchString() {
    return searchString;
  }

  public void setSearchString(String searchString) {
    this.searchString = searchString;
  }


  public ResourceFilter caseSensitive(Boolean caseSensitive) {
    this.caseSensitive = caseSensitive;
    return this;
  }

   /**
   * Get caseSensitive
   * @return caseSensitive
  **/
  @javax.annotation.Nullable
  public Boolean getCaseSensitive() {
    return caseSensitive;
  }

  public void setCaseSensitive(Boolean caseSensitive) {
    this.caseSensitive = caseSensitive;
  }


  public ResourceFilter wholeWord(Boolean wholeWord) {
    this.wholeWord = wholeWord;
    return this;
  }

   /**
   * Get wholeWord
   * @return wholeWord
  **/
  @javax.annotation.Nullable
  public Boolean getWholeWord() {
    return wholeWord;
  }

  public void setWholeWord(Boolean wholeWord) {
    this.wholeWord = wholeWord;
  }


  public ResourceFilter resourcePackId(UUID resourcePackId) {
    this.resourcePackId = resourcePackId;
    return this;
  }

   /**
   * Get resourcePackId
   * @return resourcePackId
  **/
  @javax.annotation.Nullable
  public UUID getResourcePackId() {
    return resourcePackId;
  }

  public void setResourcePackId(UUID resourcePackId) {
    this.resourcePackId = resourcePackId;
  }


  public ResourceFilter systemResource(Boolean systemResource) {
    this.systemResource = systemResource;
    return this;
  }

   /**
   * Get systemResource
   * @return systemResource
  **/
  @javax.annotation.Nullable
  public Boolean getSystemResource() {
    return systemResource;
  }

  public void setSystemResource(Boolean systemResource) {
    this.systemResource = systemResource;
  }


  public ResourceFilter hidden(Boolean hidden) {
    this.hidden = hidden;
    return this;
  }

   /**
   * Get hidden
   * @return hidden
  **/
  @javax.annotation.Nullable
  public Boolean getHidden() {
    return hidden;
  }

  public void setHidden(Boolean hidden) {
    this.hidden = hidden;
  }


  public ResourceFilter hasApprovedVersion(Boolean hasApprovedVersion) {
    this.hasApprovedVersion = hasApprovedVersion;
    return this;
  }

   /**
   * Get hasApprovedVersion
   * @return hasApprovedVersion
  **/
  @javax.annotation.Nullable
  public Boolean getHasApprovedVersion() {
    return hasApprovedVersion;
  }

  public void setHasApprovedVersion(Boolean hasApprovedVersion) {
    this.hasApprovedVersion = hasApprovedVersion;
  }


  public ResourceFilter includeVariants(Boolean includeVariants) {
    this.includeVariants = includeVariants;
    return this;
  }

   /**
   * Get includeVariants
   * @return includeVariants
  **/
  @javax.annotation.Nullable
  public Boolean getIncludeVariants() {
    return includeVariants;
  }

  public void setIncludeVariants(Boolean includeVariants) {
    this.includeVariants = includeVariants;
  }


  public ResourceFilter standardVariantId(UUID standardVariantId) {
    this.standardVariantId = standardVariantId;
    return this;
  }

   /**
   * Get standardVariantId
   * @return standardVariantId
  **/
  @javax.annotation.Nullable
  public UUID getStandardVariantId() {
    return standardVariantId;
  }

  public void setStandardVariantId(UUID standardVariantId) {
    this.standardVariantId = standardVariantId;
  }


  public ResourceFilter useEffectiveDate(Boolean useEffectiveDate) {
    this.useEffectiveDate = useEffectiveDate;
    return this;
  }

   /**
   * Get useEffectiveDate
   * @return useEffectiveDate
  **/
  @javax.annotation.Nullable
  public Boolean getUseEffectiveDate() {
    return useEffectiveDate;
  }

  public void setUseEffectiveDate(Boolean useEffectiveDate) {
    this.useEffectiveDate = useEffectiveDate;
  }


  public ResourceFilter effectiveDate(OffsetDateTime effectiveDate) {
    this.effectiveDate = effectiveDate;
    return this;
  }

   /**
   * Get effectiveDate
   * @return effectiveDate
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getEffectiveDate() {
    return effectiveDate;
  }

  public void setEffectiveDate(OffsetDateTime effectiveDate) {
    this.effectiveDate = effectiveDate;
  }


  public ResourceFilter categories(List<String> categories) {
    this.categories = categories;
    return this;
  }

  public ResourceFilter addCategoriesItem(String categoriesItem) {
    if (this.categories == null) {
      this.categories = new ArrayList<>();
    }
    this.categories.add(categoriesItem);
    return this;
  }

   /**
   * Get categories
   * @return categories
  **/
  @javax.annotation.Nullable
  public List<String> getCategories() {
    return categories;
  }

  public void setCategories(List<String> categories) {
    this.categories = categories;
  }


  public ResourceFilter categoryObjects(List<ResourceCategory> categoryObjects) {
    this.categoryObjects = categoryObjects;
    return this;
  }

  public ResourceFilter addCategoryObjectsItem(ResourceCategory categoryObjectsItem) {
    if (this.categoryObjects == null) {
      this.categoryObjects = new ArrayList<>();
    }
    this.categoryObjects.add(categoryObjectsItem);
    return this;
  }

   /**
   * Get categoryObjects
   * @return categoryObjects
  **/
  @javax.annotation.Nullable
  public List<ResourceCategory> getCategoryObjects() {
    return categoryObjects;
  }

  public void setCategoryObjects(List<ResourceCategory> categoryObjects) {
    this.categoryObjects = categoryObjects;
  }


  public ResourceFilter vfilterLastModifiedDateEnd(OffsetDateTime vfilterLastModifiedDateEnd) {
    this.vfilterLastModifiedDateEnd = vfilterLastModifiedDateEnd;
    return this;
  }

   /**
   * Get vfilterLastModifiedDateEnd
   * @return vfilterLastModifiedDateEnd
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getVfilterLastModifiedDateEnd() {
    return vfilterLastModifiedDateEnd;
  }

  public void setVfilterLastModifiedDateEnd(OffsetDateTime vfilterLastModifiedDateEnd) {
    this.vfilterLastModifiedDateEnd = vfilterLastModifiedDateEnd;
  }


  public ResourceFilter metadata(Map<String, List<Object>> metadata) {
    this.metadata = metadata;
    return this;
  }

  public ResourceFilter putMetadataItem(String key, List<Object> metadataItem) {
    if (this.metadata == null) {
      this.metadata = new HashMap<>();
    }
    this.metadata.put(key, metadataItem);
    return this;
  }

   /**
   * Get metadata
   * @return metadata
  **/
  @javax.annotation.Nullable
  public Map<String, List<Object>> getMetadata() {
    return metadata;
  }

  public void setMetadata(Map<String, List<Object>> metadata) {
    this.metadata = metadata;
  }


  public ResourceFilter domainId(String domainId) {
    this.domainId = domainId;
    return this;
  }

   /**
   * Get domainId
   * @return domainId
  **/
  @javax.annotation.Nullable
  public String getDomainId() {
    return domainId;
  }

  public void setDomainId(String domainId) {
    this.domainId = domainId;
  }


  public ResourceFilter latestVersion(Boolean latestVersion) {
    this.latestVersion = latestVersion;
    return this;
  }

   /**
   * Get latestVersion
   * @return latestVersion
  **/
  @javax.annotation.Nullable
  public Boolean getLatestVersion() {
    return latestVersion;
  }

  public void setLatestVersion(Boolean latestVersion) {
    this.latestVersion = latestVersion;
  }


  public ResourceFilter locked(Boolean locked) {
    this.locked = locked;
    return this;
  }

   /**
   * Get locked
   * @return locked
  **/
  @javax.annotation.Nullable
  public Boolean getLocked() {
    return locked;
  }

  public void setLocked(Boolean locked) {
    this.locked = locked;
  }


  public ResourceFilter states(List<StatesEnum> states) {
    this.states = states;
    return this;
  }

  public ResourceFilter addStatesItem(StatesEnum statesItem) {
    if (this.states == null) {
      this.states = new ArrayList<>();
    }
    this.states.add(statesItem);
    return this;
  }

   /**
   * Get states
   * @return states
  **/
  @javax.annotation.Nullable
  public List<StatesEnum> getStates() {
    return states;
  }

  public void setStates(List<StatesEnum> states) {
    this.states = states;
  }


  public ResourceFilter overrideIds(List<UUID> overrideIds) {
    this.overrideIds = overrideIds;
    return this;
  }

  public ResourceFilter addOverrideIdsItem(UUID overrideIdsItem) {
    if (this.overrideIds == null) {
      this.overrideIds = new ArrayList<>();
    }
    this.overrideIds.add(overrideIdsItem);
    return this;
  }

   /**
   * Get overrideIds
   * @return overrideIds
  **/
  @javax.annotation.Nullable
  public List<UUID> getOverrideIds() {
    return overrideIds;
  }

  public void setOverrideIds(List<UUID> overrideIds) {
    this.overrideIds = overrideIds;
  }


  public ResourceFilter overrideStates(List<OverrideStatesEnum> overrideStates) {
    this.overrideStates = overrideStates;
    return this;
  }

  public ResourceFilter addOverrideStatesItem(OverrideStatesEnum overrideStatesItem) {
    if (this.overrideStates == null) {
      this.overrideStates = new ArrayList<>();
    }
    this.overrideStates.add(overrideStatesItem);
    return this;
  }

   /**
   * Get overrideStates
   * @return overrideStates
  **/
  @javax.annotation.Nullable
  public List<OverrideStatesEnum> getOverrideStates() {
    return overrideStates;
  }

  public void setOverrideStates(List<OverrideStatesEnum> overrideStates) {
    this.overrideStates = overrideStates;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ResourceFilter resourceFilter = (ResourceFilter) o;
    return Objects.equals(this.ids, resourceFilter.ids) &&
        Objects.equals(this.excludedIds, resourceFilter.excludedIds) &&
        Objects.equals(this.types, resourceFilter.types) &&
        Objects.equals(this.excludedTypes, resourceFilter.excludedTypes) &&
        Objects.equals(this.name, resourceFilter.name) &&
        Objects.equals(this.description, resourceFilter.description) &&
        Objects.equals(this.createdBy, resourceFilter.createdBy) &&
        Objects.equals(this.lastModifiedBy, resourceFilter.lastModifiedBy) &&
        Objects.equals(this.createdDateStart, resourceFilter.createdDateStart) &&
        Objects.equals(this.createdDateEnd, resourceFilter.createdDateEnd) &&
        Objects.equals(this.lastModifiedDateStart, resourceFilter.lastModifiedDateStart) &&
        Objects.equals(this.lastModifiedDateEnd, resourceFilter.lastModifiedDateEnd) &&
        Objects.equals(this.searchString, resourceFilter.searchString) &&
        Objects.equals(this.caseSensitive, resourceFilter.caseSensitive) &&
        Objects.equals(this.wholeWord, resourceFilter.wholeWord) &&
        Objects.equals(this.resourcePackId, resourceFilter.resourcePackId) &&
        Objects.equals(this.systemResource, resourceFilter.systemResource) &&
        Objects.equals(this.hidden, resourceFilter.hidden) &&
        Objects.equals(this.hasApprovedVersion, resourceFilter.hasApprovedVersion) &&
        Objects.equals(this.includeVariants, resourceFilter.includeVariants) &&
        Objects.equals(this.standardVariantId, resourceFilter.standardVariantId) &&
        Objects.equals(this.useEffectiveDate, resourceFilter.useEffectiveDate) &&
        Objects.equals(this.effectiveDate, resourceFilter.effectiveDate) &&
        Objects.equals(this.categories, resourceFilter.categories) &&
        Objects.equals(this.categoryObjects, resourceFilter.categoryObjects) &&
        Objects.equals(this.vfilterLastModifiedDateEnd, resourceFilter.vfilterLastModifiedDateEnd) &&
        Objects.equals(this.metadata, resourceFilter.metadata) &&
        Objects.equals(this.domainId, resourceFilter.domainId) &&
        Objects.equals(this.latestVersion, resourceFilter.latestVersion) &&
        Objects.equals(this.locked, resourceFilter.locked) &&
        Objects.equals(this.states, resourceFilter.states) &&
        Objects.equals(this.overrideIds, resourceFilter.overrideIds) &&
        Objects.equals(this.overrideStates, resourceFilter.overrideStates);
  }

  @Override
  public int hashCode() {
    return Objects.hash(ids, excludedIds, types, excludedTypes, name, description, createdBy, lastModifiedBy, createdDateStart, createdDateEnd, lastModifiedDateStart, lastModifiedDateEnd, searchString, caseSensitive, wholeWord, resourcePackId, systemResource, hidden, hasApprovedVersion, includeVariants, standardVariantId, useEffectiveDate, effectiveDate, categories, categoryObjects, vfilterLastModifiedDateEnd, metadata, domainId, latestVersion, locked, states, overrideIds, overrideStates);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ResourceFilter {\n");
    sb.append("    ids: ").append(toIndentedString(ids)).append("\n");
    sb.append("    excludedIds: ").append(toIndentedString(excludedIds)).append("\n");
    sb.append("    types: ").append(toIndentedString(types)).append("\n");
    sb.append("    excludedTypes: ").append(toIndentedString(excludedTypes)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    createdBy: ").append(toIndentedString(createdBy)).append("\n");
    sb.append("    lastModifiedBy: ").append(toIndentedString(lastModifiedBy)).append("\n");
    sb.append("    createdDateStart: ").append(toIndentedString(createdDateStart)).append("\n");
    sb.append("    createdDateEnd: ").append(toIndentedString(createdDateEnd)).append("\n");
    sb.append("    lastModifiedDateStart: ").append(toIndentedString(lastModifiedDateStart)).append("\n");
    sb.append("    lastModifiedDateEnd: ").append(toIndentedString(lastModifiedDateEnd)).append("\n");
    sb.append("    searchString: ").append(toIndentedString(searchString)).append("\n");
    sb.append("    caseSensitive: ").append(toIndentedString(caseSensitive)).append("\n");
    sb.append("    wholeWord: ").append(toIndentedString(wholeWord)).append("\n");
    sb.append("    resourcePackId: ").append(toIndentedString(resourcePackId)).append("\n");
    sb.append("    systemResource: ").append(toIndentedString(systemResource)).append("\n");
    sb.append("    hidden: ").append(toIndentedString(hidden)).append("\n");
    sb.append("    hasApprovedVersion: ").append(toIndentedString(hasApprovedVersion)).append("\n");
    sb.append("    includeVariants: ").append(toIndentedString(includeVariants)).append("\n");
    sb.append("    standardVariantId: ").append(toIndentedString(standardVariantId)).append("\n");
    sb.append("    useEffectiveDate: ").append(toIndentedString(useEffectiveDate)).append("\n");
    sb.append("    effectiveDate: ").append(toIndentedString(effectiveDate)).append("\n");
    sb.append("    categories: ").append(toIndentedString(categories)).append("\n");
    sb.append("    categoryObjects: ").append(toIndentedString(categoryObjects)).append("\n");
    sb.append("    vfilterLastModifiedDateEnd: ").append(toIndentedString(vfilterLastModifiedDateEnd)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    domainId: ").append(toIndentedString(domainId)).append("\n");
    sb.append("    latestVersion: ").append(toIndentedString(latestVersion)).append("\n");
    sb.append("    locked: ").append(toIndentedString(locked)).append("\n");
    sb.append("    states: ").append(toIndentedString(states)).append("\n");
    sb.append("    overrideIds: ").append(toIndentedString(overrideIds)).append("\n");
    sb.append("    overrideStates: ").append(toIndentedString(overrideStates)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ids");
    openapiFields.add("excludedIds");
    openapiFields.add("types");
    openapiFields.add("excludedTypes");
    openapiFields.add("name");
    openapiFields.add("description");
    openapiFields.add("createdBy");
    openapiFields.add("lastModifiedBy");
    openapiFields.add("createdDateStart");
    openapiFields.add("createdDateEnd");
    openapiFields.add("lastModifiedDateStart");
    openapiFields.add("lastModifiedDateEnd");
    openapiFields.add("searchString");
    openapiFields.add("caseSensitive");
    openapiFields.add("wholeWord");
    openapiFields.add("resourcePackId");
    openapiFields.add("systemResource");
    openapiFields.add("hidden");
    openapiFields.add("hasApprovedVersion");
    openapiFields.add("includeVariants");
    openapiFields.add("standardVariantId");
    openapiFields.add("useEffectiveDate");
    openapiFields.add("effectiveDate");
    openapiFields.add("categories");
    openapiFields.add("categoryObjects");
    openapiFields.add("vfilter_lastModifiedDateEnd");
    openapiFields.add("metadata");
    openapiFields.add("domainId");
    openapiFields.add("latestVersion");
    openapiFields.add("locked");
    openapiFields.add("states");
    openapiFields.add("overrideIds");
    openapiFields.add("overrideStates");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ResourceFilter
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ResourceFilter.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ResourceFilter is not found in the empty JSON string", ResourceFilter.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ResourceFilter.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ResourceFilter` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("ids") != null && !jsonObj.get("ids").isJsonNull() && !jsonObj.get("ids").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `ids` to be an array in the JSON string but got `%s`", jsonObj.get("ids").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("excludedIds") != null && !jsonObj.get("excludedIds").isJsonNull() && !jsonObj.get("excludedIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `excludedIds` to be an array in the JSON string but got `%s`", jsonObj.get("excludedIds").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("types") != null && !jsonObj.get("types").isJsonNull() && !jsonObj.get("types").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `types` to be an array in the JSON string but got `%s`", jsonObj.get("types").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("excludedTypes") != null && !jsonObj.get("excludedTypes").isJsonNull() && !jsonObj.get("excludedTypes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `excludedTypes` to be an array in the JSON string but got `%s`", jsonObj.get("excludedTypes").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("createdBy") != null && !jsonObj.get("createdBy").isJsonNull()) && !jsonObj.get("createdBy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createdBy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createdBy").toString()));
      }
      if ((jsonObj.get("lastModifiedBy") != null && !jsonObj.get("lastModifiedBy").isJsonNull()) && !jsonObj.get("lastModifiedBy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastModifiedBy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastModifiedBy").toString()));
      }
      if ((jsonObj.get("searchString") != null && !jsonObj.get("searchString").isJsonNull()) && !jsonObj.get("searchString").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `searchString` to be a primitive type in the JSON string but got `%s`", jsonObj.get("searchString").toString()));
      }
      if ((jsonObj.get("resourcePackId") != null && !jsonObj.get("resourcePackId").isJsonNull()) && !jsonObj.get("resourcePackId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resourcePackId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resourcePackId").toString()));
      }
      if ((jsonObj.get("standardVariantId") != null && !jsonObj.get("standardVariantId").isJsonNull()) && !jsonObj.get("standardVariantId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `standardVariantId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("standardVariantId").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("categories") != null && !jsonObj.get("categories").isJsonNull() && !jsonObj.get("categories").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `categories` to be an array in the JSON string but got `%s`", jsonObj.get("categories").toString()));
      }
      if (jsonObj.get("categoryObjects") != null && !jsonObj.get("categoryObjects").isJsonNull()) {
        JsonArray jsonArraycategoryObjects = jsonObj.getAsJsonArray("categoryObjects");
        if (jsonArraycategoryObjects != null) {
          // ensure the json data is an array
          if (!jsonObj.get("categoryObjects").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `categoryObjects` to be an array in the JSON string but got `%s`", jsonObj.get("categoryObjects").toString()));
          }

          // validate the optional field `categoryObjects` (array)
          for (int i = 0; i < jsonArraycategoryObjects.size(); i++) {
            ResourceCategory.validateJsonElement(jsonArraycategoryObjects.get(i));
          };
        }
      }
      if ((jsonObj.get("domainId") != null && !jsonObj.get("domainId").isJsonNull()) && !jsonObj.get("domainId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `domainId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("domainId").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("states") != null && !jsonObj.get("states").isJsonNull() && !jsonObj.get("states").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `states` to be an array in the JSON string but got `%s`", jsonObj.get("states").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("overrideIds") != null && !jsonObj.get("overrideIds").isJsonNull() && !jsonObj.get("overrideIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `overrideIds` to be an array in the JSON string but got `%s`", jsonObj.get("overrideIds").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("overrideStates") != null && !jsonObj.get("overrideStates").isJsonNull() && !jsonObj.get("overrideStates").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `overrideStates` to be an array in the JSON string but got `%s`", jsonObj.get("overrideStates").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ResourceFilter.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ResourceFilter' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ResourceFilter> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ResourceFilter.class));

       return (TypeAdapter<T>) new TypeAdapter<ResourceFilter>() {
           @Override
           public void write(JsonWriter out, ResourceFilter value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ResourceFilter read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ResourceFilter given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ResourceFilter
  * @throws IOException if the JSON string is invalid with respect to ResourceFilter
  */
  public static ResourceFilter fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ResourceFilter.class);
  }

 /**
  * Convert an instance of ResourceFilter to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

