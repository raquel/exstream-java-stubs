/*
 * Exstream Design
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ResourceIdStateOverride;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PackageOptions
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-17T13:54:16.859257228Z[Europe/Lisbon]")
public class PackageOptions {
  public static final String SERIALIZED_NAME_ID_STATE_OVERRIDES = "idStateOverrides";
  @SerializedName(SERIALIZED_NAME_ID_STATE_OVERRIDES)
  private List<ResourceIdStateOverride> idStateOverrides;

  public static final String SERIALIZED_NAME_ENSURE_LINKS = "ensureLinks";
  @SerializedName(SERIALIZED_NAME_ENSURE_LINKS)
  private Boolean ensureLinks;

  public static final String SERIALIZED_NAME_DISABLE_EFFECTIVITY = "disableEffectivity";
  @SerializedName(SERIALIZED_NAME_DISABLE_EFFECTIVITY)
  private Boolean disableEffectivity;

  public static final String SERIALIZED_NAME_LATEST_APPROVED_LAST_MODIFIED_DATE_END = "latestApprovedLastModifiedDateEnd";
  @SerializedName(SERIALIZED_NAME_LATEST_APPROVED_LAST_MODIFIED_DATE_END)
  private OffsetDateTime latestApprovedLastModifiedDateEnd;

  public static final String SERIALIZED_NAME_EFFECTIVE_DATE = "effectiveDate";
  @SerializedName(SERIALIZED_NAME_EFFECTIVE_DATE)
  private OffsetDateTime effectiveDate;

  public PackageOptions() {
  }

  public PackageOptions idStateOverrides(List<ResourceIdStateOverride> idStateOverrides) {
    this.idStateOverrides = idStateOverrides;
    return this;
  }

  public PackageOptions addIdStateOverridesItem(ResourceIdStateOverride idStateOverridesItem) {
    if (this.idStateOverrides == null) {
      this.idStateOverrides = new ArrayList<>();
    }
    this.idStateOverrides.add(idStateOverridesItem);
    return this;
  }

   /**
   * Get idStateOverrides
   * @return idStateOverrides
  **/
  @javax.annotation.Nullable
  public List<ResourceIdStateOverride> getIdStateOverrides() {
    return idStateOverrides;
  }

  public void setIdStateOverrides(List<ResourceIdStateOverride> idStateOverrides) {
    this.idStateOverrides = idStateOverrides;
  }


  public PackageOptions ensureLinks(Boolean ensureLinks) {
    this.ensureLinks = ensureLinks;
    return this;
  }

   /**
   * Get ensureLinks
   * @return ensureLinks
  **/
  @javax.annotation.Nullable
  public Boolean getEnsureLinks() {
    return ensureLinks;
  }

  public void setEnsureLinks(Boolean ensureLinks) {
    this.ensureLinks = ensureLinks;
  }


  public PackageOptions disableEffectivity(Boolean disableEffectivity) {
    this.disableEffectivity = disableEffectivity;
    return this;
  }

   /**
   * Get disableEffectivity
   * @return disableEffectivity
  **/
  @javax.annotation.Nullable
  public Boolean getDisableEffectivity() {
    return disableEffectivity;
  }

  public void setDisableEffectivity(Boolean disableEffectivity) {
    this.disableEffectivity = disableEffectivity;
  }


  public PackageOptions latestApprovedLastModifiedDateEnd(OffsetDateTime latestApprovedLastModifiedDateEnd) {
    this.latestApprovedLastModifiedDateEnd = latestApprovedLastModifiedDateEnd;
    return this;
  }

   /**
   * Get latestApprovedLastModifiedDateEnd
   * @return latestApprovedLastModifiedDateEnd
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getLatestApprovedLastModifiedDateEnd() {
    return latestApprovedLastModifiedDateEnd;
  }

  public void setLatestApprovedLastModifiedDateEnd(OffsetDateTime latestApprovedLastModifiedDateEnd) {
    this.latestApprovedLastModifiedDateEnd = latestApprovedLastModifiedDateEnd;
  }


  public PackageOptions effectiveDate(OffsetDateTime effectiveDate) {
    this.effectiveDate = effectiveDate;
    return this;
  }

   /**
   * Get effectiveDate
   * @return effectiveDate
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getEffectiveDate() {
    return effectiveDate;
  }

  public void setEffectiveDate(OffsetDateTime effectiveDate) {
    this.effectiveDate = effectiveDate;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PackageOptions packageOptions = (PackageOptions) o;
    return Objects.equals(this.idStateOverrides, packageOptions.idStateOverrides) &&
        Objects.equals(this.ensureLinks, packageOptions.ensureLinks) &&
        Objects.equals(this.disableEffectivity, packageOptions.disableEffectivity) &&
        Objects.equals(this.latestApprovedLastModifiedDateEnd, packageOptions.latestApprovedLastModifiedDateEnd) &&
        Objects.equals(this.effectiveDate, packageOptions.effectiveDate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(idStateOverrides, ensureLinks, disableEffectivity, latestApprovedLastModifiedDateEnd, effectiveDate);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PackageOptions {\n");
    sb.append("    idStateOverrides: ").append(toIndentedString(idStateOverrides)).append("\n");
    sb.append("    ensureLinks: ").append(toIndentedString(ensureLinks)).append("\n");
    sb.append("    disableEffectivity: ").append(toIndentedString(disableEffectivity)).append("\n");
    sb.append("    latestApprovedLastModifiedDateEnd: ").append(toIndentedString(latestApprovedLastModifiedDateEnd)).append("\n");
    sb.append("    effectiveDate: ").append(toIndentedString(effectiveDate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("idStateOverrides");
    openapiFields.add("ensureLinks");
    openapiFields.add("disableEffectivity");
    openapiFields.add("latestApprovedLastModifiedDateEnd");
    openapiFields.add("effectiveDate");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to PackageOptions
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PackageOptions.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PackageOptions is not found in the empty JSON string", PackageOptions.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PackageOptions.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PackageOptions` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("idStateOverrides") != null && !jsonObj.get("idStateOverrides").isJsonNull()) {
        JsonArray jsonArrayidStateOverrides = jsonObj.getAsJsonArray("idStateOverrides");
        if (jsonArrayidStateOverrides != null) {
          // ensure the json data is an array
          if (!jsonObj.get("idStateOverrides").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `idStateOverrides` to be an array in the JSON string but got `%s`", jsonObj.get("idStateOverrides").toString()));
          }

          // validate the optional field `idStateOverrides` (array)
          for (int i = 0; i < jsonArrayidStateOverrides.size(); i++) {
            ResourceIdStateOverride.validateJsonElement(jsonArrayidStateOverrides.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PackageOptions.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PackageOptions' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PackageOptions> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PackageOptions.class));

       return (TypeAdapter<T>) new TypeAdapter<PackageOptions>() {
           @Override
           public void write(JsonWriter out, PackageOptions value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PackageOptions read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of PackageOptions given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of PackageOptions
  * @throws IOException if the JSON string is invalid with respect to PackageOptions
  */
  public static PackageOptions fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PackageOptions.class);
  }

 /**
  * Convert an instance of PackageOptions to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

