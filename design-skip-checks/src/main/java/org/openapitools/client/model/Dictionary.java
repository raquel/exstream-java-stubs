/*
 * Exstream Design
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Dictionary
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-17T13:54:16.859257228Z[Europe/Lisbon]")
public class Dictionary {
  public static final String SERIALIZED_NAME_LANGUAGE_CODE = "languageCode";
  @SerializedName(SERIALIZED_NAME_LANGUAGE_CODE)
  private String languageCode;

  public static final String SERIALIZED_NAME_LOCALE = "locale";
  @SerializedName(SERIALIZED_NAME_LOCALE)
  private String locale;

  public static final String SERIALIZED_NAME_DIC = "dic";
  @SerializedName(SERIALIZED_NAME_DIC)
  private List<byte[]> dic;

  public static final String SERIALIZED_NAME_AFF = "aff";
  @SerializedName(SERIALIZED_NAME_AFF)
  private List<byte[]> aff;

  public Dictionary() {
  }

  public Dictionary languageCode(String languageCode) {
    this.languageCode = languageCode;
    return this;
  }

   /**
   * Get languageCode
   * @return languageCode
  **/
  @javax.annotation.Nullable
  public String getLanguageCode() {
    return languageCode;
  }

  public void setLanguageCode(String languageCode) {
    this.languageCode = languageCode;
  }


  public Dictionary locale(String locale) {
    this.locale = locale;
    return this;
  }

   /**
   * Get locale
   * @return locale
  **/
  @javax.annotation.Nullable
  public String getLocale() {
    return locale;
  }

  public void setLocale(String locale) {
    this.locale = locale;
  }


  public Dictionary dic(List<byte[]> dic) {
    this.dic = dic;
    return this;
  }

  public Dictionary addDicItem(byte[] dicItem) {
    if (this.dic == null) {
      this.dic = new ArrayList<>();
    }
    this.dic.add(dicItem);
    return this;
  }

   /**
   * Get dic
   * @return dic
  **/
  @javax.annotation.Nullable
  public List<byte[]> getDic() {
    return dic;
  }

  public void setDic(List<byte[]> dic) {
    this.dic = dic;
  }


  public Dictionary aff(List<byte[]> aff) {
    this.aff = aff;
    return this;
  }

  public Dictionary addAffItem(byte[] affItem) {
    if (this.aff == null) {
      this.aff = new ArrayList<>();
    }
    this.aff.add(affItem);
    return this;
  }

   /**
   * Get aff
   * @return aff
  **/
  @javax.annotation.Nullable
  public List<byte[]> getAff() {
    return aff;
  }

  public void setAff(List<byte[]> aff) {
    this.aff = aff;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Dictionary dictionary = (Dictionary) o;
    return Objects.equals(this.languageCode, dictionary.languageCode) &&
        Objects.equals(this.locale, dictionary.locale) &&
        Objects.equals(this.dic, dictionary.dic) &&
        Objects.equals(this.aff, dictionary.aff);
  }

  @Override
  public int hashCode() {
    return Objects.hash(languageCode, locale, dic, aff);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Dictionary {\n");
    sb.append("    languageCode: ").append(toIndentedString(languageCode)).append("\n");
    sb.append("    locale: ").append(toIndentedString(locale)).append("\n");
    sb.append("    dic: ").append(toIndentedString(dic)).append("\n");
    sb.append("    aff: ").append(toIndentedString(aff)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("languageCode");
    openapiFields.add("locale");
    openapiFields.add("dic");
    openapiFields.add("aff");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to Dictionary
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Dictionary.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Dictionary is not found in the empty JSON string", Dictionary.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Dictionary.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Dictionary` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("languageCode") != null && !jsonObj.get("languageCode").isJsonNull()) && !jsonObj.get("languageCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `languageCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("languageCode").toString()));
      }
      if ((jsonObj.get("locale") != null && !jsonObj.get("locale").isJsonNull()) && !jsonObj.get("locale").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `locale` to be a primitive type in the JSON string but got `%s`", jsonObj.get("locale").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("dic") != null && !jsonObj.get("dic").isJsonNull() && !jsonObj.get("dic").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `dic` to be an array in the JSON string but got `%s`", jsonObj.get("dic").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("aff") != null && !jsonObj.get("aff").isJsonNull() && !jsonObj.get("aff").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `aff` to be an array in the JSON string but got `%s`", jsonObj.get("aff").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Dictionary.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Dictionary' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Dictionary> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Dictionary.class));

       return (TypeAdapter<T>) new TypeAdapter<Dictionary>() {
           @Override
           public void write(JsonWriter out, Dictionary value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Dictionary read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Dictionary given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Dictionary
  * @throws IOException if the JSON string is invalid with respect to Dictionary
  */
  public static Dictionary fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Dictionary.class);
  }

 /**
  * Convert an instance of Dictionary to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

