/*
 * Exstream Design
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import org.openapitools.client.model.DataSource;
import org.openapitools.client.model.ExportPackageMetadata;
import org.openapitools.client.model.ImportConflictResource;
import org.openapitools.client.model.ImportFoundCategory;
import org.openapitools.client.model.ImportFoundResource;
import org.openapitools.client.model.ReplacementPolicySettings;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ImportResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-17T13:54:16.859257228Z[Europe/Lisbon]")
public class ImportResponse {
  public static final String SERIALIZED_NAME_METADATA = "metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  private ExportPackageMetadata metadata;

  public static final String SERIALIZED_NAME_EXPORT_PACKAGE_U_U_I_D = "exportPackageUUID";
  @SerializedName(SERIALIZED_NAME_EXPORT_PACKAGE_U_U_I_D)
  private String exportPackageUUID;

  public static final String SERIALIZED_NAME_POLICIES = "policies";
  @SerializedName(SERIALIZED_NAME_POLICIES)
  private ReplacementPolicySettings policies;

  public static final String SERIALIZED_NAME_IMPORTED_RESOURCES = "importedResources";
  @SerializedName(SERIALIZED_NAME_IMPORTED_RESOURCES)
  private List<ImportFoundResource> importedResources;

  public static final String SERIALIZED_NAME_IGNORED_RESOURCES = "ignoredResources";
  @SerializedName(SERIALIZED_NAME_IGNORED_RESOURCES)
  private List<ImportFoundResource> ignoredResources;

  public static final String SERIALIZED_NAME_CONFLICTED_RESOURCES = "conflictedResources";
  @SerializedName(SERIALIZED_NAME_CONFLICTED_RESOURCES)
  private List<ImportConflictResource> conflictedResources;

  public static final String SERIALIZED_NAME_EXISTING_RESOURCES = "existingResources";
  @SerializedName(SERIALIZED_NAME_EXISTING_RESOURCES)
  private List<ImportFoundResource> existingResources;

  public static final String SERIALIZED_NAME_IMPORTED_CATEGORIES = "importedCategories";
  @SerializedName(SERIALIZED_NAME_IMPORTED_CATEGORIES)
  private List<ImportFoundCategory> importedCategories;

  public static final String SERIALIZED_NAME_IGNORED_CATEGORIES = "ignoredCategories";
  @SerializedName(SERIALIZED_NAME_IGNORED_CATEGORIES)
  private List<ImportFoundCategory> ignoredCategories;

  public static final String SERIALIZED_NAME_DEPLOYMENT_PACKAGES = "deploymentPackages";
  @SerializedName(SERIALIZED_NAME_DEPLOYMENT_PACKAGES)
  private List<String> deploymentPackages;

  public static final String SERIALIZED_NAME_DELETED_RESOURCES = "deletedResources";
  @SerializedName(SERIALIZED_NAME_DELETED_RESOURCES)
  private List<ImportFoundResource> deletedResources;

  public static final String SERIALIZED_NAME_PLACEHOLDER_DATA_SOURCES = "placeholderDataSources";
  @SerializedName(SERIALIZED_NAME_PLACEHOLDER_DATA_SOURCES)
  private List<DataSource> placeholderDataSources;

  public static final String SERIALIZED_NAME_RESOURCE_PERMISSIONS = "resourcePermissions";
  @SerializedName(SERIALIZED_NAME_RESOURCE_PERMISSIONS)
  private Map<String, String> resourcePermissions = new HashMap<>();

  public static final String SERIALIZED_NAME_WARNINGS = "warnings";
  @SerializedName(SERIALIZED_NAME_WARNINGS)
  private Set<String> warnings;

  public static final String SERIALIZED_NAME_SCHEMA_METADATA = "schemaMetadata";
  @SerializedName(SERIALIZED_NAME_SCHEMA_METADATA)
  private ExportPackageMetadata schemaMetadata;

  public ImportResponse() {
  }

  public ImportResponse metadata(ExportPackageMetadata metadata) {
    this.metadata = metadata;
    return this;
  }

   /**
   * Get metadata
   * @return metadata
  **/
  @javax.annotation.Nullable
  public ExportPackageMetadata getMetadata() {
    return metadata;
  }

  public void setMetadata(ExportPackageMetadata metadata) {
    this.metadata = metadata;
  }


  public ImportResponse exportPackageUUID(String exportPackageUUID) {
    this.exportPackageUUID = exportPackageUUID;
    return this;
  }

   /**
   * Get exportPackageUUID
   * @return exportPackageUUID
  **/
  @javax.annotation.Nullable
  public String getExportPackageUUID() {
    return exportPackageUUID;
  }

  public void setExportPackageUUID(String exportPackageUUID) {
    this.exportPackageUUID = exportPackageUUID;
  }


  public ImportResponse policies(ReplacementPolicySettings policies) {
    this.policies = policies;
    return this;
  }

   /**
   * Get policies
   * @return policies
  **/
  @javax.annotation.Nullable
  public ReplacementPolicySettings getPolicies() {
    return policies;
  }

  public void setPolicies(ReplacementPolicySettings policies) {
    this.policies = policies;
  }


  public ImportResponse importedResources(List<ImportFoundResource> importedResources) {
    this.importedResources = importedResources;
    return this;
  }

  public ImportResponse addImportedResourcesItem(ImportFoundResource importedResourcesItem) {
    if (this.importedResources == null) {
      this.importedResources = new ArrayList<>();
    }
    this.importedResources.add(importedResourcesItem);
    return this;
  }

   /**
   * Get importedResources
   * @return importedResources
  **/
  @javax.annotation.Nullable
  public List<ImportFoundResource> getImportedResources() {
    return importedResources;
  }

  public void setImportedResources(List<ImportFoundResource> importedResources) {
    this.importedResources = importedResources;
  }


  public ImportResponse ignoredResources(List<ImportFoundResource> ignoredResources) {
    this.ignoredResources = ignoredResources;
    return this;
  }

  public ImportResponse addIgnoredResourcesItem(ImportFoundResource ignoredResourcesItem) {
    if (this.ignoredResources == null) {
      this.ignoredResources = new ArrayList<>();
    }
    this.ignoredResources.add(ignoredResourcesItem);
    return this;
  }

   /**
   * Get ignoredResources
   * @return ignoredResources
  **/
  @javax.annotation.Nullable
  public List<ImportFoundResource> getIgnoredResources() {
    return ignoredResources;
  }

  public void setIgnoredResources(List<ImportFoundResource> ignoredResources) {
    this.ignoredResources = ignoredResources;
  }


  public ImportResponse conflictedResources(List<ImportConflictResource> conflictedResources) {
    this.conflictedResources = conflictedResources;
    return this;
  }

  public ImportResponse addConflictedResourcesItem(ImportConflictResource conflictedResourcesItem) {
    if (this.conflictedResources == null) {
      this.conflictedResources = new ArrayList<>();
    }
    this.conflictedResources.add(conflictedResourcesItem);
    return this;
  }

   /**
   * Get conflictedResources
   * @return conflictedResources
  **/
  @javax.annotation.Nullable
  public List<ImportConflictResource> getConflictedResources() {
    return conflictedResources;
  }

  public void setConflictedResources(List<ImportConflictResource> conflictedResources) {
    this.conflictedResources = conflictedResources;
  }


  public ImportResponse existingResources(List<ImportFoundResource> existingResources) {
    this.existingResources = existingResources;
    return this;
  }

  public ImportResponse addExistingResourcesItem(ImportFoundResource existingResourcesItem) {
    if (this.existingResources == null) {
      this.existingResources = new ArrayList<>();
    }
    this.existingResources.add(existingResourcesItem);
    return this;
  }

   /**
   * Get existingResources
   * @return existingResources
  **/
  @javax.annotation.Nullable
  public List<ImportFoundResource> getExistingResources() {
    return existingResources;
  }

  public void setExistingResources(List<ImportFoundResource> existingResources) {
    this.existingResources = existingResources;
  }


  public ImportResponse importedCategories(List<ImportFoundCategory> importedCategories) {
    this.importedCategories = importedCategories;
    return this;
  }

  public ImportResponse addImportedCategoriesItem(ImportFoundCategory importedCategoriesItem) {
    if (this.importedCategories == null) {
      this.importedCategories = new ArrayList<>();
    }
    this.importedCategories.add(importedCategoriesItem);
    return this;
  }

   /**
   * Get importedCategories
   * @return importedCategories
  **/
  @javax.annotation.Nullable
  public List<ImportFoundCategory> getImportedCategories() {
    return importedCategories;
  }

  public void setImportedCategories(List<ImportFoundCategory> importedCategories) {
    this.importedCategories = importedCategories;
  }


  public ImportResponse ignoredCategories(List<ImportFoundCategory> ignoredCategories) {
    this.ignoredCategories = ignoredCategories;
    return this;
  }

  public ImportResponse addIgnoredCategoriesItem(ImportFoundCategory ignoredCategoriesItem) {
    if (this.ignoredCategories == null) {
      this.ignoredCategories = new ArrayList<>();
    }
    this.ignoredCategories.add(ignoredCategoriesItem);
    return this;
  }

   /**
   * Get ignoredCategories
   * @return ignoredCategories
  **/
  @javax.annotation.Nullable
  public List<ImportFoundCategory> getIgnoredCategories() {
    return ignoredCategories;
  }

  public void setIgnoredCategories(List<ImportFoundCategory> ignoredCategories) {
    this.ignoredCategories = ignoredCategories;
  }


  public ImportResponse deploymentPackages(List<String> deploymentPackages) {
    this.deploymentPackages = deploymentPackages;
    return this;
  }

  public ImportResponse addDeploymentPackagesItem(String deploymentPackagesItem) {
    if (this.deploymentPackages == null) {
      this.deploymentPackages = new ArrayList<>();
    }
    this.deploymentPackages.add(deploymentPackagesItem);
    return this;
  }

   /**
   * Get deploymentPackages
   * @return deploymentPackages
  **/
  @javax.annotation.Nullable
  public List<String> getDeploymentPackages() {
    return deploymentPackages;
  }

  public void setDeploymentPackages(List<String> deploymentPackages) {
    this.deploymentPackages = deploymentPackages;
  }


  public ImportResponse deletedResources(List<ImportFoundResource> deletedResources) {
    this.deletedResources = deletedResources;
    return this;
  }

  public ImportResponse addDeletedResourcesItem(ImportFoundResource deletedResourcesItem) {
    if (this.deletedResources == null) {
      this.deletedResources = new ArrayList<>();
    }
    this.deletedResources.add(deletedResourcesItem);
    return this;
  }

   /**
   * Get deletedResources
   * @return deletedResources
  **/
  @javax.annotation.Nullable
  public List<ImportFoundResource> getDeletedResources() {
    return deletedResources;
  }

  public void setDeletedResources(List<ImportFoundResource> deletedResources) {
    this.deletedResources = deletedResources;
  }


  public ImportResponse placeholderDataSources(List<DataSource> placeholderDataSources) {
    this.placeholderDataSources = placeholderDataSources;
    return this;
  }

  public ImportResponse addPlaceholderDataSourcesItem(DataSource placeholderDataSourcesItem) {
    if (this.placeholderDataSources == null) {
      this.placeholderDataSources = new ArrayList<>();
    }
    this.placeholderDataSources.add(placeholderDataSourcesItem);
    return this;
  }

   /**
   * Get placeholderDataSources
   * @return placeholderDataSources
  **/
  @javax.annotation.Nullable
  public List<DataSource> getPlaceholderDataSources() {
    return placeholderDataSources;
  }

  public void setPlaceholderDataSources(List<DataSource> placeholderDataSources) {
    this.placeholderDataSources = placeholderDataSources;
  }


  public ImportResponse resourcePermissions(Map<String, String> resourcePermissions) {
    this.resourcePermissions = resourcePermissions;
    return this;
  }

  public ImportResponse putResourcePermissionsItem(String key, String resourcePermissionsItem) {
    if (this.resourcePermissions == null) {
      this.resourcePermissions = new HashMap<>();
    }
    this.resourcePermissions.put(key, resourcePermissionsItem);
    return this;
  }

   /**
   * Get resourcePermissions
   * @return resourcePermissions
  **/
  @javax.annotation.Nullable
  public Map<String, String> getResourcePermissions() {
    return resourcePermissions;
  }

  public void setResourcePermissions(Map<String, String> resourcePermissions) {
    this.resourcePermissions = resourcePermissions;
  }


  public ImportResponse warnings(Set<String> warnings) {
    this.warnings = warnings;
    return this;
  }

  public ImportResponse addWarningsItem(String warningsItem) {
    if (this.warnings == null) {
      this.warnings = new LinkedHashSet<>();
    }
    this.warnings.add(warningsItem);
    return this;
  }

   /**
   * Get warnings
   * @return warnings
  **/
  @javax.annotation.Nullable
  public Set<String> getWarnings() {
    return warnings;
  }

  public void setWarnings(Set<String> warnings) {
    this.warnings = warnings;
  }


  public ImportResponse schemaMetadata(ExportPackageMetadata schemaMetadata) {
    this.schemaMetadata = schemaMetadata;
    return this;
  }

   /**
   * Get schemaMetadata
   * @return schemaMetadata
  **/
  @javax.annotation.Nullable
  public ExportPackageMetadata getSchemaMetadata() {
    return schemaMetadata;
  }

  public void setSchemaMetadata(ExportPackageMetadata schemaMetadata) {
    this.schemaMetadata = schemaMetadata;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ImportResponse importResponse = (ImportResponse) o;
    return Objects.equals(this.metadata, importResponse.metadata) &&
        Objects.equals(this.exportPackageUUID, importResponse.exportPackageUUID) &&
        Objects.equals(this.policies, importResponse.policies) &&
        Objects.equals(this.importedResources, importResponse.importedResources) &&
        Objects.equals(this.ignoredResources, importResponse.ignoredResources) &&
        Objects.equals(this.conflictedResources, importResponse.conflictedResources) &&
        Objects.equals(this.existingResources, importResponse.existingResources) &&
        Objects.equals(this.importedCategories, importResponse.importedCategories) &&
        Objects.equals(this.ignoredCategories, importResponse.ignoredCategories) &&
        Objects.equals(this.deploymentPackages, importResponse.deploymentPackages) &&
        Objects.equals(this.deletedResources, importResponse.deletedResources) &&
        Objects.equals(this.placeholderDataSources, importResponse.placeholderDataSources) &&
        Objects.equals(this.resourcePermissions, importResponse.resourcePermissions) &&
        Objects.equals(this.warnings, importResponse.warnings) &&
        Objects.equals(this.schemaMetadata, importResponse.schemaMetadata);
  }

  @Override
  public int hashCode() {
    return Objects.hash(metadata, exportPackageUUID, policies, importedResources, ignoredResources, conflictedResources, existingResources, importedCategories, ignoredCategories, deploymentPackages, deletedResources, placeholderDataSources, resourcePermissions, warnings, schemaMetadata);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ImportResponse {\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    exportPackageUUID: ").append(toIndentedString(exportPackageUUID)).append("\n");
    sb.append("    policies: ").append(toIndentedString(policies)).append("\n");
    sb.append("    importedResources: ").append(toIndentedString(importedResources)).append("\n");
    sb.append("    ignoredResources: ").append(toIndentedString(ignoredResources)).append("\n");
    sb.append("    conflictedResources: ").append(toIndentedString(conflictedResources)).append("\n");
    sb.append("    existingResources: ").append(toIndentedString(existingResources)).append("\n");
    sb.append("    importedCategories: ").append(toIndentedString(importedCategories)).append("\n");
    sb.append("    ignoredCategories: ").append(toIndentedString(ignoredCategories)).append("\n");
    sb.append("    deploymentPackages: ").append(toIndentedString(deploymentPackages)).append("\n");
    sb.append("    deletedResources: ").append(toIndentedString(deletedResources)).append("\n");
    sb.append("    placeholderDataSources: ").append(toIndentedString(placeholderDataSources)).append("\n");
    sb.append("    resourcePermissions: ").append(toIndentedString(resourcePermissions)).append("\n");
    sb.append("    warnings: ").append(toIndentedString(warnings)).append("\n");
    sb.append("    schemaMetadata: ").append(toIndentedString(schemaMetadata)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("metadata");
    openapiFields.add("exportPackageUUID");
    openapiFields.add("policies");
    openapiFields.add("importedResources");
    openapiFields.add("ignoredResources");
    openapiFields.add("conflictedResources");
    openapiFields.add("existingResources");
    openapiFields.add("importedCategories");
    openapiFields.add("ignoredCategories");
    openapiFields.add("deploymentPackages");
    openapiFields.add("deletedResources");
    openapiFields.add("placeholderDataSources");
    openapiFields.add("resourcePermissions");
    openapiFields.add("warnings");
    openapiFields.add("schemaMetadata");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ImportResponse
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ImportResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ImportResponse is not found in the empty JSON string", ImportResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ImportResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ImportResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `metadata`
      if (jsonObj.get("metadata") != null && !jsonObj.get("metadata").isJsonNull()) {
        ExportPackageMetadata.validateJsonElement(jsonObj.get("metadata"));
      }
      if ((jsonObj.get("exportPackageUUID") != null && !jsonObj.get("exportPackageUUID").isJsonNull()) && !jsonObj.get("exportPackageUUID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `exportPackageUUID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("exportPackageUUID").toString()));
      }
      // validate the optional field `policies`
      if (jsonObj.get("policies") != null && !jsonObj.get("policies").isJsonNull()) {
        ReplacementPolicySettings.validateJsonElement(jsonObj.get("policies"));
      }
      if (jsonObj.get("importedResources") != null && !jsonObj.get("importedResources").isJsonNull()) {
        JsonArray jsonArrayimportedResources = jsonObj.getAsJsonArray("importedResources");
        if (jsonArrayimportedResources != null) {
          // ensure the json data is an array
          if (!jsonObj.get("importedResources").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `importedResources` to be an array in the JSON string but got `%s`", jsonObj.get("importedResources").toString()));
          }

          // validate the optional field `importedResources` (array)
          for (int i = 0; i < jsonArrayimportedResources.size(); i++) {
            ImportFoundResource.validateJsonElement(jsonArrayimportedResources.get(i));
          };
        }
      }
      if (jsonObj.get("ignoredResources") != null && !jsonObj.get("ignoredResources").isJsonNull()) {
        JsonArray jsonArrayignoredResources = jsonObj.getAsJsonArray("ignoredResources");
        if (jsonArrayignoredResources != null) {
          // ensure the json data is an array
          if (!jsonObj.get("ignoredResources").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `ignoredResources` to be an array in the JSON string but got `%s`", jsonObj.get("ignoredResources").toString()));
          }

          // validate the optional field `ignoredResources` (array)
          for (int i = 0; i < jsonArrayignoredResources.size(); i++) {
            ImportFoundResource.validateJsonElement(jsonArrayignoredResources.get(i));
          };
        }
      }
      if (jsonObj.get("conflictedResources") != null && !jsonObj.get("conflictedResources").isJsonNull()) {
        JsonArray jsonArrayconflictedResources = jsonObj.getAsJsonArray("conflictedResources");
        if (jsonArrayconflictedResources != null) {
          // ensure the json data is an array
          if (!jsonObj.get("conflictedResources").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `conflictedResources` to be an array in the JSON string but got `%s`", jsonObj.get("conflictedResources").toString()));
          }

          // validate the optional field `conflictedResources` (array)
          for (int i = 0; i < jsonArrayconflictedResources.size(); i++) {
            ImportConflictResource.validateJsonElement(jsonArrayconflictedResources.get(i));
          };
        }
      }
      if (jsonObj.get("existingResources") != null && !jsonObj.get("existingResources").isJsonNull()) {
        JsonArray jsonArrayexistingResources = jsonObj.getAsJsonArray("existingResources");
        if (jsonArrayexistingResources != null) {
          // ensure the json data is an array
          if (!jsonObj.get("existingResources").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `existingResources` to be an array in the JSON string but got `%s`", jsonObj.get("existingResources").toString()));
          }

          // validate the optional field `existingResources` (array)
          for (int i = 0; i < jsonArrayexistingResources.size(); i++) {
            ImportFoundResource.validateJsonElement(jsonArrayexistingResources.get(i));
          };
        }
      }
      if (jsonObj.get("importedCategories") != null && !jsonObj.get("importedCategories").isJsonNull()) {
        JsonArray jsonArrayimportedCategories = jsonObj.getAsJsonArray("importedCategories");
        if (jsonArrayimportedCategories != null) {
          // ensure the json data is an array
          if (!jsonObj.get("importedCategories").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `importedCategories` to be an array in the JSON string but got `%s`", jsonObj.get("importedCategories").toString()));
          }

          // validate the optional field `importedCategories` (array)
          for (int i = 0; i < jsonArrayimportedCategories.size(); i++) {
            ImportFoundCategory.validateJsonElement(jsonArrayimportedCategories.get(i));
          };
        }
      }
      if (jsonObj.get("ignoredCategories") != null && !jsonObj.get("ignoredCategories").isJsonNull()) {
        JsonArray jsonArrayignoredCategories = jsonObj.getAsJsonArray("ignoredCategories");
        if (jsonArrayignoredCategories != null) {
          // ensure the json data is an array
          if (!jsonObj.get("ignoredCategories").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `ignoredCategories` to be an array in the JSON string but got `%s`", jsonObj.get("ignoredCategories").toString()));
          }

          // validate the optional field `ignoredCategories` (array)
          for (int i = 0; i < jsonArrayignoredCategories.size(); i++) {
            ImportFoundCategory.validateJsonElement(jsonArrayignoredCategories.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("deploymentPackages") != null && !jsonObj.get("deploymentPackages").isJsonNull() && !jsonObj.get("deploymentPackages").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `deploymentPackages` to be an array in the JSON string but got `%s`", jsonObj.get("deploymentPackages").toString()));
      }
      if (jsonObj.get("deletedResources") != null && !jsonObj.get("deletedResources").isJsonNull()) {
        JsonArray jsonArraydeletedResources = jsonObj.getAsJsonArray("deletedResources");
        if (jsonArraydeletedResources != null) {
          // ensure the json data is an array
          if (!jsonObj.get("deletedResources").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `deletedResources` to be an array in the JSON string but got `%s`", jsonObj.get("deletedResources").toString()));
          }

          // validate the optional field `deletedResources` (array)
          for (int i = 0; i < jsonArraydeletedResources.size(); i++) {
            ImportFoundResource.validateJsonElement(jsonArraydeletedResources.get(i));
          };
        }
      }
      if (jsonObj.get("placeholderDataSources") != null && !jsonObj.get("placeholderDataSources").isJsonNull()) {
        JsonArray jsonArrayplaceholderDataSources = jsonObj.getAsJsonArray("placeholderDataSources");
        if (jsonArrayplaceholderDataSources != null) {
          // ensure the json data is an array
          if (!jsonObj.get("placeholderDataSources").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `placeholderDataSources` to be an array in the JSON string but got `%s`", jsonObj.get("placeholderDataSources").toString()));
          }

          // validate the optional field `placeholderDataSources` (array)
          for (int i = 0; i < jsonArrayplaceholderDataSources.size(); i++) {
            DataSource.validateJsonElement(jsonArrayplaceholderDataSources.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("warnings") != null && !jsonObj.get("warnings").isJsonNull() && !jsonObj.get("warnings").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `warnings` to be an array in the JSON string but got `%s`", jsonObj.get("warnings").toString()));
      }
      // validate the optional field `schemaMetadata`
      if (jsonObj.get("schemaMetadata") != null && !jsonObj.get("schemaMetadata").isJsonNull()) {
        ExportPackageMetadata.validateJsonElement(jsonObj.get("schemaMetadata"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ImportResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ImportResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ImportResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ImportResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<ImportResponse>() {
           @Override
           public void write(JsonWriter out, ImportResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ImportResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ImportResponse given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ImportResponse
  * @throws IOException if the JSON string is invalid with respect to ImportResponse
  */
  public static ImportResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ImportResponse.class);
  }

 /**
  * Convert an instance of ImportResponse to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

