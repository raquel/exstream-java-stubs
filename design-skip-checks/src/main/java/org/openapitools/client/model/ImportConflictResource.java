/*
 * Exstream Design
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.UUID;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ImportConflictResource
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-17T13:54:16.859257228Z[Europe/Lisbon]")
public class ImportConflictResource {
  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private UUID id;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private Integer version;

  /**
   * Gets or Sets state
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    DRAFT("DRAFT"),
    
    REVIEW("REVIEW"),
    
    APPROVED("APPROVED"),
    
    REJECTED("REJECTED");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private StateEnum state;

  public static final String SERIALIZED_NAME_NEW_NAME = "newName";
  @SerializedName(SERIALIZED_NAME_NEW_NAME)
  private String newName;

  public static final String SERIALIZED_NAME_ORIG_ID = "origId";
  @SerializedName(SERIALIZED_NAME_ORIG_ID)
  private UUID origId;

  /**
   * Gets or Sets userSelectedAction
   */
  @JsonAdapter(UserSelectedActionEnum.Adapter.class)
  public enum UserSelectedActionEnum {
    AUTO_RENAME("AUTO_RENAME"),
    
    ERROR("ERROR"),
    
    REPLACE("REPLACE"),
    
    SKIP("SKIP"),
    
    REPLACE_IF_NEWER("REPLACE_IF_NEWER"),
    
    EXISTING("EXISTING"),
    
    REPLACE_AT_SAME_VERSION("REPLACE_AT_SAME_VERSION"),
    
    PROMOTED_TO_DOMAIN("PROMOTED_TO_DOMAIN");

    private String value;

    UserSelectedActionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static UserSelectedActionEnum fromValue(String value) {
      for (UserSelectedActionEnum b : UserSelectedActionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<UserSelectedActionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final UserSelectedActionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public UserSelectedActionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return UserSelectedActionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      UserSelectedActionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_USER_SELECTED_ACTION = "userSelectedAction";
  @SerializedName(SERIALIZED_NAME_USER_SELECTED_ACTION)
  private UserSelectedActionEnum userSelectedAction;

  /**
   * Gets or Sets performedAction
   */
  @JsonAdapter(PerformedActionEnum.Adapter.class)
  public enum PerformedActionEnum {
    AUTO_RENAME("AUTO_RENAME"),
    
    ERROR("ERROR"),
    
    REPLACE("REPLACE"),
    
    SKIP("SKIP"),
    
    REPLACE_IF_NEWER("REPLACE_IF_NEWER"),
    
    EXISTING("EXISTING"),
    
    REPLACE_AT_SAME_VERSION("REPLACE_AT_SAME_VERSION"),
    
    PROMOTED_TO_DOMAIN("PROMOTED_TO_DOMAIN");

    private String value;

    PerformedActionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PerformedActionEnum fromValue(String value) {
      for (PerformedActionEnum b : PerformedActionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PerformedActionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PerformedActionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PerformedActionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PerformedActionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PerformedActionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PERFORMED_ACTION = "performedAction";
  @SerializedName(SERIALIZED_NAME_PERFORMED_ACTION)
  private PerformedActionEnum performedAction;

  public static final String SERIALIZED_NAME_LOCKED = "locked";
  @SerializedName(SERIALIZED_NAME_LOCKED)
  private Boolean locked;

  public static final String SERIALIZED_NAME_LOCKED_BY = "lockedBy";
  @SerializedName(SERIALIZED_NAME_LOCKED_BY)
  private String lockedBy;

  public ImportConflictResource() {
  }

  public ImportConflictResource type(String type) {
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }


  public ImportConflictResource name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public ImportConflictResource id(UUID id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nullable
  public UUID getId() {
    return id;
  }

  public void setId(UUID id) {
    this.id = id;
  }


  public ImportConflictResource version(Integer version) {
    this.version = version;
    return this;
  }

   /**
   * Get version
   * @return version
  **/
  @javax.annotation.Nullable
  public Integer getVersion() {
    return version;
  }

  public void setVersion(Integer version) {
    this.version = version;
  }


  public ImportConflictResource state(StateEnum state) {
    this.state = state;
    return this;
  }

   /**
   * Get state
   * @return state
  **/
  @javax.annotation.Nullable
  public StateEnum getState() {
    return state;
  }

  public void setState(StateEnum state) {
    this.state = state;
  }


  public ImportConflictResource newName(String newName) {
    this.newName = newName;
    return this;
  }

   /**
   * Get newName
   * @return newName
  **/
  @javax.annotation.Nullable
  public String getNewName() {
    return newName;
  }

  public void setNewName(String newName) {
    this.newName = newName;
  }


  public ImportConflictResource origId(UUID origId) {
    this.origId = origId;
    return this;
  }

   /**
   * Get origId
   * @return origId
  **/
  @javax.annotation.Nullable
  public UUID getOrigId() {
    return origId;
  }

  public void setOrigId(UUID origId) {
    this.origId = origId;
  }


  public ImportConflictResource userSelectedAction(UserSelectedActionEnum userSelectedAction) {
    this.userSelectedAction = userSelectedAction;
    return this;
  }

   /**
   * Get userSelectedAction
   * @return userSelectedAction
  **/
  @javax.annotation.Nullable
  public UserSelectedActionEnum getUserSelectedAction() {
    return userSelectedAction;
  }

  public void setUserSelectedAction(UserSelectedActionEnum userSelectedAction) {
    this.userSelectedAction = userSelectedAction;
  }


  public ImportConflictResource performedAction(PerformedActionEnum performedAction) {
    this.performedAction = performedAction;
    return this;
  }

   /**
   * Get performedAction
   * @return performedAction
  **/
  @javax.annotation.Nullable
  public PerformedActionEnum getPerformedAction() {
    return performedAction;
  }

  public void setPerformedAction(PerformedActionEnum performedAction) {
    this.performedAction = performedAction;
  }


  public ImportConflictResource locked(Boolean locked) {
    this.locked = locked;
    return this;
  }

   /**
   * Get locked
   * @return locked
  **/
  @javax.annotation.Nullable
  public Boolean getLocked() {
    return locked;
  }

  public void setLocked(Boolean locked) {
    this.locked = locked;
  }


  public ImportConflictResource lockedBy(String lockedBy) {
    this.lockedBy = lockedBy;
    return this;
  }

   /**
   * Get lockedBy
   * @return lockedBy
  **/
  @javax.annotation.Nullable
  public String getLockedBy() {
    return lockedBy;
  }

  public void setLockedBy(String lockedBy) {
    this.lockedBy = lockedBy;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ImportConflictResource importConflictResource = (ImportConflictResource) o;
    return Objects.equals(this.type, importConflictResource.type) &&
        Objects.equals(this.name, importConflictResource.name) &&
        Objects.equals(this.id, importConflictResource.id) &&
        Objects.equals(this.version, importConflictResource.version) &&
        Objects.equals(this.state, importConflictResource.state) &&
        Objects.equals(this.newName, importConflictResource.newName) &&
        Objects.equals(this.origId, importConflictResource.origId) &&
        Objects.equals(this.userSelectedAction, importConflictResource.userSelectedAction) &&
        Objects.equals(this.performedAction, importConflictResource.performedAction) &&
        Objects.equals(this.locked, importConflictResource.locked) &&
        Objects.equals(this.lockedBy, importConflictResource.lockedBy);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, name, id, version, state, newName, origId, userSelectedAction, performedAction, locked, lockedBy);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ImportConflictResource {\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    newName: ").append(toIndentedString(newName)).append("\n");
    sb.append("    origId: ").append(toIndentedString(origId)).append("\n");
    sb.append("    userSelectedAction: ").append(toIndentedString(userSelectedAction)).append("\n");
    sb.append("    performedAction: ").append(toIndentedString(performedAction)).append("\n");
    sb.append("    locked: ").append(toIndentedString(locked)).append("\n");
    sb.append("    lockedBy: ").append(toIndentedString(lockedBy)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("type");
    openapiFields.add("name");
    openapiFields.add("id");
    openapiFields.add("version");
    openapiFields.add("state");
    openapiFields.add("newName");
    openapiFields.add("origId");
    openapiFields.add("userSelectedAction");
    openapiFields.add("performedAction");
    openapiFields.add("locked");
    openapiFields.add("lockedBy");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ImportConflictResource
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ImportConflictResource.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ImportConflictResource is not found in the empty JSON string", ImportConflictResource.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ImportConflictResource.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ImportConflictResource` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      // validate the optional field `state`
      if (jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) {
        StateEnum.validateJsonElement(jsonObj.get("state"));
      }
      if ((jsonObj.get("newName") != null && !jsonObj.get("newName").isJsonNull()) && !jsonObj.get("newName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `newName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("newName").toString()));
      }
      if ((jsonObj.get("origId") != null && !jsonObj.get("origId").isJsonNull()) && !jsonObj.get("origId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `origId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("origId").toString()));
      }
      if ((jsonObj.get("userSelectedAction") != null && !jsonObj.get("userSelectedAction").isJsonNull()) && !jsonObj.get("userSelectedAction").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userSelectedAction` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userSelectedAction").toString()));
      }
      // validate the optional field `userSelectedAction`
      if (jsonObj.get("userSelectedAction") != null && !jsonObj.get("userSelectedAction").isJsonNull()) {
        UserSelectedActionEnum.validateJsonElement(jsonObj.get("userSelectedAction"));
      }
      if ((jsonObj.get("performedAction") != null && !jsonObj.get("performedAction").isJsonNull()) && !jsonObj.get("performedAction").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `performedAction` to be a primitive type in the JSON string but got `%s`", jsonObj.get("performedAction").toString()));
      }
      // validate the optional field `performedAction`
      if (jsonObj.get("performedAction") != null && !jsonObj.get("performedAction").isJsonNull()) {
        PerformedActionEnum.validateJsonElement(jsonObj.get("performedAction"));
      }
      if ((jsonObj.get("lockedBy") != null && !jsonObj.get("lockedBy").isJsonNull()) && !jsonObj.get("lockedBy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lockedBy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lockedBy").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ImportConflictResource.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ImportConflictResource' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ImportConflictResource> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ImportConflictResource.class));

       return (TypeAdapter<T>) new TypeAdapter<ImportConflictResource>() {
           @Override
           public void write(JsonWriter out, ImportConflictResource value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ImportConflictResource read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ImportConflictResource given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ImportConflictResource
  * @throws IOException if the JSON string is invalid with respect to ImportConflictResource
  */
  public static ImportConflictResource fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ImportConflictResource.class);
  }

 /**
  * Convert an instance of ImportConflictResource to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

