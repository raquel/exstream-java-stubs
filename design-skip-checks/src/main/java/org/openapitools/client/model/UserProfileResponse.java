/*
 * Exstream Design
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.ResourceVersion;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UserProfileResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-17T13:54:16.859257228Z[Europe/Lisbon]")
public class UserProfileResponse {
  public static final String SERIALIZED_NAME_RECENTS = "recents";
  @SerializedName(SERIALIZED_NAME_RECENTS)
  private Map<String, List<ResourceVersion>> recents = new HashMap<>();

  public static final String SERIALIZED_NAME_FAVORITES = "favorites";
  @SerializedName(SERIALIZED_NAME_FAVORITES)
  private Map<String, List<ResourceVersion>> favorites = new HashMap<>();

  public static final String SERIALIZED_NAME_USER = "user";
  @SerializedName(SERIALIZED_NAME_USER)
  private String user;

  public static final String SERIALIZED_NAME_USER_CONFIG = "userConfig";
  @SerializedName(SERIALIZED_NAME_USER_CONFIG)
  private String userConfig;

  public UserProfileResponse() {
  }

  public UserProfileResponse recents(Map<String, List<ResourceVersion>> recents) {
    this.recents = recents;
    return this;
  }

  public UserProfileResponse putRecentsItem(String key, List<ResourceVersion> recentsItem) {
    if (this.recents == null) {
      this.recents = new HashMap<>();
    }
    this.recents.put(key, recentsItem);
    return this;
  }

   /**
   * Get recents
   * @return recents
  **/
  @javax.annotation.Nullable
  public Map<String, List<ResourceVersion>> getRecents() {
    return recents;
  }

  public void setRecents(Map<String, List<ResourceVersion>> recents) {
    this.recents = recents;
  }


  public UserProfileResponse favorites(Map<String, List<ResourceVersion>> favorites) {
    this.favorites = favorites;
    return this;
  }

  public UserProfileResponse putFavoritesItem(String key, List<ResourceVersion> favoritesItem) {
    if (this.favorites == null) {
      this.favorites = new HashMap<>();
    }
    this.favorites.put(key, favoritesItem);
    return this;
  }

   /**
   * Get favorites
   * @return favorites
  **/
  @javax.annotation.Nullable
  public Map<String, List<ResourceVersion>> getFavorites() {
    return favorites;
  }

  public void setFavorites(Map<String, List<ResourceVersion>> favorites) {
    this.favorites = favorites;
  }


  public UserProfileResponse user(String user) {
    this.user = user;
    return this;
  }

   /**
   * Get user
   * @return user
  **/
  @javax.annotation.Nullable
  public String getUser() {
    return user;
  }

  public void setUser(String user) {
    this.user = user;
  }


  public UserProfileResponse userConfig(String userConfig) {
    this.userConfig = userConfig;
    return this;
  }

   /**
   * Get userConfig
   * @return userConfig
  **/
  @javax.annotation.Nullable
  public String getUserConfig() {
    return userConfig;
  }

  public void setUserConfig(String userConfig) {
    this.userConfig = userConfig;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UserProfileResponse userProfileResponse = (UserProfileResponse) o;
    return Objects.equals(this.recents, userProfileResponse.recents) &&
        Objects.equals(this.favorites, userProfileResponse.favorites) &&
        Objects.equals(this.user, userProfileResponse.user) &&
        Objects.equals(this.userConfig, userProfileResponse.userConfig);
  }

  @Override
  public int hashCode() {
    return Objects.hash(recents, favorites, user, userConfig);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UserProfileResponse {\n");
    sb.append("    recents: ").append(toIndentedString(recents)).append("\n");
    sb.append("    favorites: ").append(toIndentedString(favorites)).append("\n");
    sb.append("    user: ").append(toIndentedString(user)).append("\n");
    sb.append("    userConfig: ").append(toIndentedString(userConfig)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("recents");
    openapiFields.add("favorites");
    openapiFields.add("user");
    openapiFields.add("userConfig");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to UserProfileResponse
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UserProfileResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UserProfileResponse is not found in the empty JSON string", UserProfileResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UserProfileResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UserProfileResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("user") != null && !jsonObj.get("user").isJsonNull()) && !jsonObj.get("user").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `user` to be a primitive type in the JSON string but got `%s`", jsonObj.get("user").toString()));
      }
      if ((jsonObj.get("userConfig") != null && !jsonObj.get("userConfig").isJsonNull()) && !jsonObj.get("userConfig").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userConfig` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userConfig").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UserProfileResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UserProfileResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UserProfileResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UserProfileResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<UserProfileResponse>() {
           @Override
           public void write(JsonWriter out, UserProfileResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UserProfileResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of UserProfileResponse given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of UserProfileResponse
  * @throws IOException if the JSON string is invalid with respect to UserProfileResponse
  */
  public static UserProfileResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UserProfileResponse.class);
  }

 /**
  * Convert an instance of UserProfileResponse to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

