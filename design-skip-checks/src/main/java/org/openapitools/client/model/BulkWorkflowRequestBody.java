/*
 * Exstream Design
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * BulkWorkflowRequestBody
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-17T13:54:16.859257228Z[Europe/Lisbon]")
public class BulkWorkflowRequestBody {
  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private String state;

  public static final String SERIALIZED_NAME_AUDITED_COMMENT = "auditedComment";
  @SerializedName(SERIALIZED_NAME_AUDITED_COMMENT)
  private String auditedComment;

  public static final String SERIALIZED_NAME_LOCKED = "locked";
  @SerializedName(SERIALIZED_NAME_LOCKED)
  private Boolean locked;

  public static final String SERIALIZED_NAME_RESOURCE_IDS = "resourceIds";
  @SerializedName(SERIALIZED_NAME_RESOURCE_IDS)
  private List<UUID> resourceIds;

  public BulkWorkflowRequestBody() {
  }

  public BulkWorkflowRequestBody state(String state) {
    this.state = state;
    return this;
  }

   /**
   * Get state
   * @return state
  **/
  @javax.annotation.Nullable
  public String getState() {
    return state;
  }

  public void setState(String state) {
    this.state = state;
  }


  public BulkWorkflowRequestBody auditedComment(String auditedComment) {
    this.auditedComment = auditedComment;
    return this;
  }

   /**
   * Get auditedComment
   * @return auditedComment
  **/
  @javax.annotation.Nullable
  public String getAuditedComment() {
    return auditedComment;
  }

  public void setAuditedComment(String auditedComment) {
    this.auditedComment = auditedComment;
  }


  public BulkWorkflowRequestBody locked(Boolean locked) {
    this.locked = locked;
    return this;
  }

   /**
   * Get locked
   * @return locked
  **/
  @javax.annotation.Nullable
  public Boolean getLocked() {
    return locked;
  }

  public void setLocked(Boolean locked) {
    this.locked = locked;
  }


  public BulkWorkflowRequestBody resourceIds(List<UUID> resourceIds) {
    this.resourceIds = resourceIds;
    return this;
  }

  public BulkWorkflowRequestBody addResourceIdsItem(UUID resourceIdsItem) {
    if (this.resourceIds == null) {
      this.resourceIds = new ArrayList<>();
    }
    this.resourceIds.add(resourceIdsItem);
    return this;
  }

   /**
   * Get resourceIds
   * @return resourceIds
  **/
  @javax.annotation.Nullable
  public List<UUID> getResourceIds() {
    return resourceIds;
  }

  public void setResourceIds(List<UUID> resourceIds) {
    this.resourceIds = resourceIds;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BulkWorkflowRequestBody bulkWorkflowRequestBody = (BulkWorkflowRequestBody) o;
    return Objects.equals(this.state, bulkWorkflowRequestBody.state) &&
        Objects.equals(this.auditedComment, bulkWorkflowRequestBody.auditedComment) &&
        Objects.equals(this.locked, bulkWorkflowRequestBody.locked) &&
        Objects.equals(this.resourceIds, bulkWorkflowRequestBody.resourceIds);
  }

  @Override
  public int hashCode() {
    return Objects.hash(state, auditedComment, locked, resourceIds);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BulkWorkflowRequestBody {\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    auditedComment: ").append(toIndentedString(auditedComment)).append("\n");
    sb.append("    locked: ").append(toIndentedString(locked)).append("\n");
    sb.append("    resourceIds: ").append(toIndentedString(resourceIds)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("state");
    openapiFields.add("auditedComment");
    openapiFields.add("locked");
    openapiFields.add("resourceIds");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to BulkWorkflowRequestBody
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BulkWorkflowRequestBody.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BulkWorkflowRequestBody is not found in the empty JSON string", BulkWorkflowRequestBody.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BulkWorkflowRequestBody.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BulkWorkflowRequestBody` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      if ((jsonObj.get("auditedComment") != null && !jsonObj.get("auditedComment").isJsonNull()) && !jsonObj.get("auditedComment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `auditedComment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("auditedComment").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("resourceIds") != null && !jsonObj.get("resourceIds").isJsonNull() && !jsonObj.get("resourceIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `resourceIds` to be an array in the JSON string but got `%s`", jsonObj.get("resourceIds").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BulkWorkflowRequestBody.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BulkWorkflowRequestBody' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BulkWorkflowRequestBody> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BulkWorkflowRequestBody.class));

       return (TypeAdapter<T>) new TypeAdapter<BulkWorkflowRequestBody>() {
           @Override
           public void write(JsonWriter out, BulkWorkflowRequestBody value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BulkWorkflowRequestBody read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of BulkWorkflowRequestBody given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of BulkWorkflowRequestBody
  * @throws IOException if the JSON string is invalid with respect to BulkWorkflowRequestBody
  */
  public static BulkWorkflowRequestBody fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BulkWorkflowRequestBody.class);
  }

 /**
  * Convert an instance of BulkWorkflowRequestBody to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

