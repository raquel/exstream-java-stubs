/*
 * Exstream Design
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DocumentProperties
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-17T13:54:16.859257228Z[Europe/Lisbon]")
public class DocumentProperties {
  public static final String SERIALIZED_NAME_RESTART_PAGE_COUNT = "restartPageCount";
  @SerializedName(SERIALIZED_NAME_RESTART_PAGE_COUNT)
  private Long restartPageCount;

  public static final String SERIALIZED_NAME_RESTART_DOCUMENT_COUNT = "restartDocumentCount";
  @SerializedName(SERIALIZED_NAME_RESTART_DOCUMENT_COUNT)
  private Long restartDocumentCount;

  public static final String SERIALIZED_NAME_FRAME_FILL_METHOD = "frameFillMethod";
  @SerializedName(SERIALIZED_NAME_FRAME_FILL_METHOD)
  private String frameFillMethod;

  public static final String SERIALIZED_NAME_LIMIT_PAGES = "limitPages";
  @SerializedName(SERIALIZED_NAME_LIMIT_PAGES)
  private Long limitPages;

  public static final String SERIALIZED_NAME_DUPLEX_MODE = "duplexMode";
  @SerializedName(SERIALIZED_NAME_DUPLEX_MODE)
  private String duplexMode;

  public static final String SERIALIZED_NAME_BACK_PAGE_TYPE = "backPageType";
  @SerializedName(SERIALIZED_NAME_BACK_PAGE_TYPE)
  private String backPageType;

  public static final String SERIALIZED_NAME_DOCUMENT_NUMBER_TYPE = "documentNumberType";
  @SerializedName(SERIALIZED_NAME_DOCUMENT_NUMBER_TYPE)
  private String documentNumberType;

  public static final String SERIALIZED_NAME_PAGE_NUMBER_TYPE = "pageNumberType";
  @SerializedName(SERIALIZED_NAME_PAGE_NUMBER_TYPE)
  private String pageNumberType;

  public static final String SERIALIZED_NAME_PARAGRAPH_INCLUSION_METHOD_TYPE = "paragraphInclusionMethodType";
  @SerializedName(SERIALIZED_NAME_PARAGRAPH_INCLUSION_METHOD_TYPE)
  private String paragraphInclusionMethodType;

  public static final String SERIALIZED_NAME_VARIABLE_PARAGRAPH_INCLUSION_OID = "variableParagraphInclusionOid";
  @SerializedName(SERIALIZED_NAME_VARIABLE_PARAGRAPH_INCLUSION_OID)
  private String variableParagraphInclusionOid;

  public DocumentProperties() {
  }

  public DocumentProperties restartPageCount(Long restartPageCount) {
    this.restartPageCount = restartPageCount;
    return this;
  }

   /**
   * Get restartPageCount
   * @return restartPageCount
  **/
  @javax.annotation.Nullable
  public Long getRestartPageCount() {
    return restartPageCount;
  }

  public void setRestartPageCount(Long restartPageCount) {
    this.restartPageCount = restartPageCount;
  }


  public DocumentProperties restartDocumentCount(Long restartDocumentCount) {
    this.restartDocumentCount = restartDocumentCount;
    return this;
  }

   /**
   * Get restartDocumentCount
   * @return restartDocumentCount
  **/
  @javax.annotation.Nullable
  public Long getRestartDocumentCount() {
    return restartDocumentCount;
  }

  public void setRestartDocumentCount(Long restartDocumentCount) {
    this.restartDocumentCount = restartDocumentCount;
  }


  public DocumentProperties frameFillMethod(String frameFillMethod) {
    this.frameFillMethod = frameFillMethod;
    return this;
  }

   /**
   * Get frameFillMethod
   * @return frameFillMethod
  **/
  @javax.annotation.Nullable
  public String getFrameFillMethod() {
    return frameFillMethod;
  }

  public void setFrameFillMethod(String frameFillMethod) {
    this.frameFillMethod = frameFillMethod;
  }


  public DocumentProperties limitPages(Long limitPages) {
    this.limitPages = limitPages;
    return this;
  }

   /**
   * Get limitPages
   * @return limitPages
  **/
  @javax.annotation.Nullable
  public Long getLimitPages() {
    return limitPages;
  }

  public void setLimitPages(Long limitPages) {
    this.limitPages = limitPages;
  }


  public DocumentProperties duplexMode(String duplexMode) {
    this.duplexMode = duplexMode;
    return this;
  }

   /**
   * Get duplexMode
   * @return duplexMode
  **/
  @javax.annotation.Nullable
  public String getDuplexMode() {
    return duplexMode;
  }

  public void setDuplexMode(String duplexMode) {
    this.duplexMode = duplexMode;
  }


  public DocumentProperties backPageType(String backPageType) {
    this.backPageType = backPageType;
    return this;
  }

   /**
   * Get backPageType
   * @return backPageType
  **/
  @javax.annotation.Nullable
  public String getBackPageType() {
    return backPageType;
  }

  public void setBackPageType(String backPageType) {
    this.backPageType = backPageType;
  }


  public DocumentProperties documentNumberType(String documentNumberType) {
    this.documentNumberType = documentNumberType;
    return this;
  }

   /**
   * Get documentNumberType
   * @return documentNumberType
  **/
  @javax.annotation.Nullable
  public String getDocumentNumberType() {
    return documentNumberType;
  }

  public void setDocumentNumberType(String documentNumberType) {
    this.documentNumberType = documentNumberType;
  }


  public DocumentProperties pageNumberType(String pageNumberType) {
    this.pageNumberType = pageNumberType;
    return this;
  }

   /**
   * Get pageNumberType
   * @return pageNumberType
  **/
  @javax.annotation.Nullable
  public String getPageNumberType() {
    return pageNumberType;
  }

  public void setPageNumberType(String pageNumberType) {
    this.pageNumberType = pageNumberType;
  }


  public DocumentProperties paragraphInclusionMethodType(String paragraphInclusionMethodType) {
    this.paragraphInclusionMethodType = paragraphInclusionMethodType;
    return this;
  }

   /**
   * Get paragraphInclusionMethodType
   * @return paragraphInclusionMethodType
  **/
  @javax.annotation.Nullable
  public String getParagraphInclusionMethodType() {
    return paragraphInclusionMethodType;
  }

  public void setParagraphInclusionMethodType(String paragraphInclusionMethodType) {
    this.paragraphInclusionMethodType = paragraphInclusionMethodType;
  }


  public DocumentProperties variableParagraphInclusionOid(String variableParagraphInclusionOid) {
    this.variableParagraphInclusionOid = variableParagraphInclusionOid;
    return this;
  }

   /**
   * Get variableParagraphInclusionOid
   * @return variableParagraphInclusionOid
  **/
  @javax.annotation.Nullable
  public String getVariableParagraphInclusionOid() {
    return variableParagraphInclusionOid;
  }

  public void setVariableParagraphInclusionOid(String variableParagraphInclusionOid) {
    this.variableParagraphInclusionOid = variableParagraphInclusionOid;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DocumentProperties documentProperties = (DocumentProperties) o;
    return Objects.equals(this.restartPageCount, documentProperties.restartPageCount) &&
        Objects.equals(this.restartDocumentCount, documentProperties.restartDocumentCount) &&
        Objects.equals(this.frameFillMethod, documentProperties.frameFillMethod) &&
        Objects.equals(this.limitPages, documentProperties.limitPages) &&
        Objects.equals(this.duplexMode, documentProperties.duplexMode) &&
        Objects.equals(this.backPageType, documentProperties.backPageType) &&
        Objects.equals(this.documentNumberType, documentProperties.documentNumberType) &&
        Objects.equals(this.pageNumberType, documentProperties.pageNumberType) &&
        Objects.equals(this.paragraphInclusionMethodType, documentProperties.paragraphInclusionMethodType) &&
        Objects.equals(this.variableParagraphInclusionOid, documentProperties.variableParagraphInclusionOid);
  }

  @Override
  public int hashCode() {
    return Objects.hash(restartPageCount, restartDocumentCount, frameFillMethod, limitPages, duplexMode, backPageType, documentNumberType, pageNumberType, paragraphInclusionMethodType, variableParagraphInclusionOid);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DocumentProperties {\n");
    sb.append("    restartPageCount: ").append(toIndentedString(restartPageCount)).append("\n");
    sb.append("    restartDocumentCount: ").append(toIndentedString(restartDocumentCount)).append("\n");
    sb.append("    frameFillMethod: ").append(toIndentedString(frameFillMethod)).append("\n");
    sb.append("    limitPages: ").append(toIndentedString(limitPages)).append("\n");
    sb.append("    duplexMode: ").append(toIndentedString(duplexMode)).append("\n");
    sb.append("    backPageType: ").append(toIndentedString(backPageType)).append("\n");
    sb.append("    documentNumberType: ").append(toIndentedString(documentNumberType)).append("\n");
    sb.append("    pageNumberType: ").append(toIndentedString(pageNumberType)).append("\n");
    sb.append("    paragraphInclusionMethodType: ").append(toIndentedString(paragraphInclusionMethodType)).append("\n");
    sb.append("    variableParagraphInclusionOid: ").append(toIndentedString(variableParagraphInclusionOid)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("restartPageCount");
    openapiFields.add("restartDocumentCount");
    openapiFields.add("frameFillMethod");
    openapiFields.add("limitPages");
    openapiFields.add("duplexMode");
    openapiFields.add("backPageType");
    openapiFields.add("documentNumberType");
    openapiFields.add("pageNumberType");
    openapiFields.add("paragraphInclusionMethodType");
    openapiFields.add("variableParagraphInclusionOid");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to DocumentProperties
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DocumentProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DocumentProperties is not found in the empty JSON string", DocumentProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DocumentProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DocumentProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("frameFillMethod") != null && !jsonObj.get("frameFillMethod").isJsonNull()) && !jsonObj.get("frameFillMethod").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `frameFillMethod` to be a primitive type in the JSON string but got `%s`", jsonObj.get("frameFillMethod").toString()));
      }
      if ((jsonObj.get("duplexMode") != null && !jsonObj.get("duplexMode").isJsonNull()) && !jsonObj.get("duplexMode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `duplexMode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("duplexMode").toString()));
      }
      if ((jsonObj.get("backPageType") != null && !jsonObj.get("backPageType").isJsonNull()) && !jsonObj.get("backPageType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `backPageType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("backPageType").toString()));
      }
      if ((jsonObj.get("documentNumberType") != null && !jsonObj.get("documentNumberType").isJsonNull()) && !jsonObj.get("documentNumberType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `documentNumberType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("documentNumberType").toString()));
      }
      if ((jsonObj.get("pageNumberType") != null && !jsonObj.get("pageNumberType").isJsonNull()) && !jsonObj.get("pageNumberType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pageNumberType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pageNumberType").toString()));
      }
      if ((jsonObj.get("paragraphInclusionMethodType") != null && !jsonObj.get("paragraphInclusionMethodType").isJsonNull()) && !jsonObj.get("paragraphInclusionMethodType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `paragraphInclusionMethodType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("paragraphInclusionMethodType").toString()));
      }
      if ((jsonObj.get("variableParagraphInclusionOid") != null && !jsonObj.get("variableParagraphInclusionOid").isJsonNull()) && !jsonObj.get("variableParagraphInclusionOid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `variableParagraphInclusionOid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("variableParagraphInclusionOid").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DocumentProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DocumentProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DocumentProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DocumentProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<DocumentProperties>() {
           @Override
           public void write(JsonWriter out, DocumentProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DocumentProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of DocumentProperties given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of DocumentProperties
  * @throws IOException if the JSON string is invalid with respect to DocumentProperties
  */
  public static DocumentProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DocumentProperties.class);
  }

 /**
  * Convert an instance of DocumentProperties to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

