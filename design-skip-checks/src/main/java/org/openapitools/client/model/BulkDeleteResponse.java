/*
 * Exstream Design
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DeleteObj;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * BulkDeleteResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-17T13:54:16.859257228Z[Europe/Lisbon]")
public class BulkDeleteResponse {
  public static final String SERIALIZED_NAME_DELETED_RESOURCES = "deletedResources";
  @SerializedName(SERIALIZED_NAME_DELETED_RESOURCES)
  private List<DeleteObj> deletedResources;

  public static final String SERIALIZED_NAME_INVALID_VERSION_EXCEPTION_RESOURCES = "invalidVersionExceptionResources";
  @SerializedName(SERIALIZED_NAME_INVALID_VERSION_EXCEPTION_RESOURCES)
  private List<DeleteObj> invalidVersionExceptionResources;

  public static final String SERIALIZED_NAME_RESOURCE_NOT_FOUND_EXCEPTION_RESOURCES = "resourceNotFoundExceptionResources";
  @SerializedName(SERIALIZED_NAME_RESOURCE_NOT_FOUND_EXCEPTION_RESOURCES)
  private List<DeleteObj> resourceNotFoundExceptionResources;

  public static final String SERIALIZED_NAME_RESOURCE_LOCKED_EXCEPTION_RESOURCES = "resourceLockedExceptionResources";
  @SerializedName(SERIALIZED_NAME_RESOURCE_LOCKED_EXCEPTION_RESOURCES)
  private List<DeleteObj> resourceLockedExceptionResources;

  public static final String SERIALIZED_NAME_VALIDATION_EXCEPTION_RESOURCES = "validationExceptionResources";
  @SerializedName(SERIALIZED_NAME_VALIDATION_EXCEPTION_RESOURCES)
  private List<DeleteObj> validationExceptionResources;

  public static final String SERIALIZED_NAME_EXSTREAM_EXCEPTION_RESOURCES = "exstreamExceptionResources";
  @SerializedName(SERIALIZED_NAME_EXSTREAM_EXCEPTION_RESOURCES)
  private List<DeleteObj> exstreamExceptionResources;

  public static final String SERIALIZED_NAME_PERMISSION_DENIED_EXCEPTION_RESOURCES = "permissionDeniedExceptionResources";
  @SerializedName(SERIALIZED_NAME_PERMISSION_DENIED_EXCEPTION_RESOURCES)
  private List<DeleteObj> permissionDeniedExceptionResources;

  public static final String SERIALIZED_NAME_ERROR_RESOURCES = "errorResources";
  @SerializedName(SERIALIZED_NAME_ERROR_RESOURCES)
  private List<DeleteObj> errorResources;

  public static final String SERIALIZED_NAME_CONFLICT_EXCEPTION_RESOURCE = "conflictExceptionResource";
  @SerializedName(SERIALIZED_NAME_CONFLICT_EXCEPTION_RESOURCE)
  private List<DeleteObj> conflictExceptionResource;

  public static final String SERIALIZED_NAME_UN_EXPECTED_EXCEPTION_RESOURCE = "unExpectedExceptionResource";
  @SerializedName(SERIALIZED_NAME_UN_EXPECTED_EXCEPTION_RESOURCE)
  private List<DeleteObj> unExpectedExceptionResource;

  public BulkDeleteResponse() {
  }

  public BulkDeleteResponse deletedResources(List<DeleteObj> deletedResources) {
    this.deletedResources = deletedResources;
    return this;
  }

  public BulkDeleteResponse addDeletedResourcesItem(DeleteObj deletedResourcesItem) {
    if (this.deletedResources == null) {
      this.deletedResources = new ArrayList<>();
    }
    this.deletedResources.add(deletedResourcesItem);
    return this;
  }

   /**
   * Get deletedResources
   * @return deletedResources
  **/
  @javax.annotation.Nullable
  public List<DeleteObj> getDeletedResources() {
    return deletedResources;
  }

  public void setDeletedResources(List<DeleteObj> deletedResources) {
    this.deletedResources = deletedResources;
  }


  public BulkDeleteResponse invalidVersionExceptionResources(List<DeleteObj> invalidVersionExceptionResources) {
    this.invalidVersionExceptionResources = invalidVersionExceptionResources;
    return this;
  }

  public BulkDeleteResponse addInvalidVersionExceptionResourcesItem(DeleteObj invalidVersionExceptionResourcesItem) {
    if (this.invalidVersionExceptionResources == null) {
      this.invalidVersionExceptionResources = new ArrayList<>();
    }
    this.invalidVersionExceptionResources.add(invalidVersionExceptionResourcesItem);
    return this;
  }

   /**
   * Get invalidVersionExceptionResources
   * @return invalidVersionExceptionResources
  **/
  @javax.annotation.Nullable
  public List<DeleteObj> getInvalidVersionExceptionResources() {
    return invalidVersionExceptionResources;
  }

  public void setInvalidVersionExceptionResources(List<DeleteObj> invalidVersionExceptionResources) {
    this.invalidVersionExceptionResources = invalidVersionExceptionResources;
  }


  public BulkDeleteResponse resourceNotFoundExceptionResources(List<DeleteObj> resourceNotFoundExceptionResources) {
    this.resourceNotFoundExceptionResources = resourceNotFoundExceptionResources;
    return this;
  }

  public BulkDeleteResponse addResourceNotFoundExceptionResourcesItem(DeleteObj resourceNotFoundExceptionResourcesItem) {
    if (this.resourceNotFoundExceptionResources == null) {
      this.resourceNotFoundExceptionResources = new ArrayList<>();
    }
    this.resourceNotFoundExceptionResources.add(resourceNotFoundExceptionResourcesItem);
    return this;
  }

   /**
   * Get resourceNotFoundExceptionResources
   * @return resourceNotFoundExceptionResources
  **/
  @javax.annotation.Nullable
  public List<DeleteObj> getResourceNotFoundExceptionResources() {
    return resourceNotFoundExceptionResources;
  }

  public void setResourceNotFoundExceptionResources(List<DeleteObj> resourceNotFoundExceptionResources) {
    this.resourceNotFoundExceptionResources = resourceNotFoundExceptionResources;
  }


  public BulkDeleteResponse resourceLockedExceptionResources(List<DeleteObj> resourceLockedExceptionResources) {
    this.resourceLockedExceptionResources = resourceLockedExceptionResources;
    return this;
  }

  public BulkDeleteResponse addResourceLockedExceptionResourcesItem(DeleteObj resourceLockedExceptionResourcesItem) {
    if (this.resourceLockedExceptionResources == null) {
      this.resourceLockedExceptionResources = new ArrayList<>();
    }
    this.resourceLockedExceptionResources.add(resourceLockedExceptionResourcesItem);
    return this;
  }

   /**
   * Get resourceLockedExceptionResources
   * @return resourceLockedExceptionResources
  **/
  @javax.annotation.Nullable
  public List<DeleteObj> getResourceLockedExceptionResources() {
    return resourceLockedExceptionResources;
  }

  public void setResourceLockedExceptionResources(List<DeleteObj> resourceLockedExceptionResources) {
    this.resourceLockedExceptionResources = resourceLockedExceptionResources;
  }


  public BulkDeleteResponse validationExceptionResources(List<DeleteObj> validationExceptionResources) {
    this.validationExceptionResources = validationExceptionResources;
    return this;
  }

  public BulkDeleteResponse addValidationExceptionResourcesItem(DeleteObj validationExceptionResourcesItem) {
    if (this.validationExceptionResources == null) {
      this.validationExceptionResources = new ArrayList<>();
    }
    this.validationExceptionResources.add(validationExceptionResourcesItem);
    return this;
  }

   /**
   * Get validationExceptionResources
   * @return validationExceptionResources
  **/
  @javax.annotation.Nullable
  public List<DeleteObj> getValidationExceptionResources() {
    return validationExceptionResources;
  }

  public void setValidationExceptionResources(List<DeleteObj> validationExceptionResources) {
    this.validationExceptionResources = validationExceptionResources;
  }


  public BulkDeleteResponse exstreamExceptionResources(List<DeleteObj> exstreamExceptionResources) {
    this.exstreamExceptionResources = exstreamExceptionResources;
    return this;
  }

  public BulkDeleteResponse addExstreamExceptionResourcesItem(DeleteObj exstreamExceptionResourcesItem) {
    if (this.exstreamExceptionResources == null) {
      this.exstreamExceptionResources = new ArrayList<>();
    }
    this.exstreamExceptionResources.add(exstreamExceptionResourcesItem);
    return this;
  }

   /**
   * Get exstreamExceptionResources
   * @return exstreamExceptionResources
  **/
  @javax.annotation.Nullable
  public List<DeleteObj> getExstreamExceptionResources() {
    return exstreamExceptionResources;
  }

  public void setExstreamExceptionResources(List<DeleteObj> exstreamExceptionResources) {
    this.exstreamExceptionResources = exstreamExceptionResources;
  }


  public BulkDeleteResponse permissionDeniedExceptionResources(List<DeleteObj> permissionDeniedExceptionResources) {
    this.permissionDeniedExceptionResources = permissionDeniedExceptionResources;
    return this;
  }

  public BulkDeleteResponse addPermissionDeniedExceptionResourcesItem(DeleteObj permissionDeniedExceptionResourcesItem) {
    if (this.permissionDeniedExceptionResources == null) {
      this.permissionDeniedExceptionResources = new ArrayList<>();
    }
    this.permissionDeniedExceptionResources.add(permissionDeniedExceptionResourcesItem);
    return this;
  }

   /**
   * Get permissionDeniedExceptionResources
   * @return permissionDeniedExceptionResources
  **/
  @javax.annotation.Nullable
  public List<DeleteObj> getPermissionDeniedExceptionResources() {
    return permissionDeniedExceptionResources;
  }

  public void setPermissionDeniedExceptionResources(List<DeleteObj> permissionDeniedExceptionResources) {
    this.permissionDeniedExceptionResources = permissionDeniedExceptionResources;
  }


  public BulkDeleteResponse errorResources(List<DeleteObj> errorResources) {
    this.errorResources = errorResources;
    return this;
  }

  public BulkDeleteResponse addErrorResourcesItem(DeleteObj errorResourcesItem) {
    if (this.errorResources == null) {
      this.errorResources = new ArrayList<>();
    }
    this.errorResources.add(errorResourcesItem);
    return this;
  }

   /**
   * Get errorResources
   * @return errorResources
  **/
  @javax.annotation.Nullable
  public List<DeleteObj> getErrorResources() {
    return errorResources;
  }

  public void setErrorResources(List<DeleteObj> errorResources) {
    this.errorResources = errorResources;
  }


  public BulkDeleteResponse conflictExceptionResource(List<DeleteObj> conflictExceptionResource) {
    this.conflictExceptionResource = conflictExceptionResource;
    return this;
  }

  public BulkDeleteResponse addConflictExceptionResourceItem(DeleteObj conflictExceptionResourceItem) {
    if (this.conflictExceptionResource == null) {
      this.conflictExceptionResource = new ArrayList<>();
    }
    this.conflictExceptionResource.add(conflictExceptionResourceItem);
    return this;
  }

   /**
   * Get conflictExceptionResource
   * @return conflictExceptionResource
  **/
  @javax.annotation.Nullable
  public List<DeleteObj> getConflictExceptionResource() {
    return conflictExceptionResource;
  }

  public void setConflictExceptionResource(List<DeleteObj> conflictExceptionResource) {
    this.conflictExceptionResource = conflictExceptionResource;
  }


  public BulkDeleteResponse unExpectedExceptionResource(List<DeleteObj> unExpectedExceptionResource) {
    this.unExpectedExceptionResource = unExpectedExceptionResource;
    return this;
  }

  public BulkDeleteResponse addUnExpectedExceptionResourceItem(DeleteObj unExpectedExceptionResourceItem) {
    if (this.unExpectedExceptionResource == null) {
      this.unExpectedExceptionResource = new ArrayList<>();
    }
    this.unExpectedExceptionResource.add(unExpectedExceptionResourceItem);
    return this;
  }

   /**
   * Get unExpectedExceptionResource
   * @return unExpectedExceptionResource
  **/
  @javax.annotation.Nullable
  public List<DeleteObj> getUnExpectedExceptionResource() {
    return unExpectedExceptionResource;
  }

  public void setUnExpectedExceptionResource(List<DeleteObj> unExpectedExceptionResource) {
    this.unExpectedExceptionResource = unExpectedExceptionResource;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BulkDeleteResponse bulkDeleteResponse = (BulkDeleteResponse) o;
    return Objects.equals(this.deletedResources, bulkDeleteResponse.deletedResources) &&
        Objects.equals(this.invalidVersionExceptionResources, bulkDeleteResponse.invalidVersionExceptionResources) &&
        Objects.equals(this.resourceNotFoundExceptionResources, bulkDeleteResponse.resourceNotFoundExceptionResources) &&
        Objects.equals(this.resourceLockedExceptionResources, bulkDeleteResponse.resourceLockedExceptionResources) &&
        Objects.equals(this.validationExceptionResources, bulkDeleteResponse.validationExceptionResources) &&
        Objects.equals(this.exstreamExceptionResources, bulkDeleteResponse.exstreamExceptionResources) &&
        Objects.equals(this.permissionDeniedExceptionResources, bulkDeleteResponse.permissionDeniedExceptionResources) &&
        Objects.equals(this.errorResources, bulkDeleteResponse.errorResources) &&
        Objects.equals(this.conflictExceptionResource, bulkDeleteResponse.conflictExceptionResource) &&
        Objects.equals(this.unExpectedExceptionResource, bulkDeleteResponse.unExpectedExceptionResource);
  }

  @Override
  public int hashCode() {
    return Objects.hash(deletedResources, invalidVersionExceptionResources, resourceNotFoundExceptionResources, resourceLockedExceptionResources, validationExceptionResources, exstreamExceptionResources, permissionDeniedExceptionResources, errorResources, conflictExceptionResource, unExpectedExceptionResource);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BulkDeleteResponse {\n");
    sb.append("    deletedResources: ").append(toIndentedString(deletedResources)).append("\n");
    sb.append("    invalidVersionExceptionResources: ").append(toIndentedString(invalidVersionExceptionResources)).append("\n");
    sb.append("    resourceNotFoundExceptionResources: ").append(toIndentedString(resourceNotFoundExceptionResources)).append("\n");
    sb.append("    resourceLockedExceptionResources: ").append(toIndentedString(resourceLockedExceptionResources)).append("\n");
    sb.append("    validationExceptionResources: ").append(toIndentedString(validationExceptionResources)).append("\n");
    sb.append("    exstreamExceptionResources: ").append(toIndentedString(exstreamExceptionResources)).append("\n");
    sb.append("    permissionDeniedExceptionResources: ").append(toIndentedString(permissionDeniedExceptionResources)).append("\n");
    sb.append("    errorResources: ").append(toIndentedString(errorResources)).append("\n");
    sb.append("    conflictExceptionResource: ").append(toIndentedString(conflictExceptionResource)).append("\n");
    sb.append("    unExpectedExceptionResource: ").append(toIndentedString(unExpectedExceptionResource)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("deletedResources");
    openapiFields.add("invalidVersionExceptionResources");
    openapiFields.add("resourceNotFoundExceptionResources");
    openapiFields.add("resourceLockedExceptionResources");
    openapiFields.add("validationExceptionResources");
    openapiFields.add("exstreamExceptionResources");
    openapiFields.add("permissionDeniedExceptionResources");
    openapiFields.add("errorResources");
    openapiFields.add("conflictExceptionResource");
    openapiFields.add("unExpectedExceptionResource");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to BulkDeleteResponse
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BulkDeleteResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BulkDeleteResponse is not found in the empty JSON string", BulkDeleteResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BulkDeleteResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BulkDeleteResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("deletedResources") != null && !jsonObj.get("deletedResources").isJsonNull()) {
        JsonArray jsonArraydeletedResources = jsonObj.getAsJsonArray("deletedResources");
        if (jsonArraydeletedResources != null) {
          // ensure the json data is an array
          if (!jsonObj.get("deletedResources").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `deletedResources` to be an array in the JSON string but got `%s`", jsonObj.get("deletedResources").toString()));
          }

          // validate the optional field `deletedResources` (array)
          for (int i = 0; i < jsonArraydeletedResources.size(); i++) {
            DeleteObj.validateJsonElement(jsonArraydeletedResources.get(i));
          };
        }
      }
      if (jsonObj.get("invalidVersionExceptionResources") != null && !jsonObj.get("invalidVersionExceptionResources").isJsonNull()) {
        JsonArray jsonArrayinvalidVersionExceptionResources = jsonObj.getAsJsonArray("invalidVersionExceptionResources");
        if (jsonArrayinvalidVersionExceptionResources != null) {
          // ensure the json data is an array
          if (!jsonObj.get("invalidVersionExceptionResources").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `invalidVersionExceptionResources` to be an array in the JSON string but got `%s`", jsonObj.get("invalidVersionExceptionResources").toString()));
          }

          // validate the optional field `invalidVersionExceptionResources` (array)
          for (int i = 0; i < jsonArrayinvalidVersionExceptionResources.size(); i++) {
            DeleteObj.validateJsonElement(jsonArrayinvalidVersionExceptionResources.get(i));
          };
        }
      }
      if (jsonObj.get("resourceNotFoundExceptionResources") != null && !jsonObj.get("resourceNotFoundExceptionResources").isJsonNull()) {
        JsonArray jsonArrayresourceNotFoundExceptionResources = jsonObj.getAsJsonArray("resourceNotFoundExceptionResources");
        if (jsonArrayresourceNotFoundExceptionResources != null) {
          // ensure the json data is an array
          if (!jsonObj.get("resourceNotFoundExceptionResources").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `resourceNotFoundExceptionResources` to be an array in the JSON string but got `%s`", jsonObj.get("resourceNotFoundExceptionResources").toString()));
          }

          // validate the optional field `resourceNotFoundExceptionResources` (array)
          for (int i = 0; i < jsonArrayresourceNotFoundExceptionResources.size(); i++) {
            DeleteObj.validateJsonElement(jsonArrayresourceNotFoundExceptionResources.get(i));
          };
        }
      }
      if (jsonObj.get("resourceLockedExceptionResources") != null && !jsonObj.get("resourceLockedExceptionResources").isJsonNull()) {
        JsonArray jsonArrayresourceLockedExceptionResources = jsonObj.getAsJsonArray("resourceLockedExceptionResources");
        if (jsonArrayresourceLockedExceptionResources != null) {
          // ensure the json data is an array
          if (!jsonObj.get("resourceLockedExceptionResources").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `resourceLockedExceptionResources` to be an array in the JSON string but got `%s`", jsonObj.get("resourceLockedExceptionResources").toString()));
          }

          // validate the optional field `resourceLockedExceptionResources` (array)
          for (int i = 0; i < jsonArrayresourceLockedExceptionResources.size(); i++) {
            DeleteObj.validateJsonElement(jsonArrayresourceLockedExceptionResources.get(i));
          };
        }
      }
      if (jsonObj.get("validationExceptionResources") != null && !jsonObj.get("validationExceptionResources").isJsonNull()) {
        JsonArray jsonArrayvalidationExceptionResources = jsonObj.getAsJsonArray("validationExceptionResources");
        if (jsonArrayvalidationExceptionResources != null) {
          // ensure the json data is an array
          if (!jsonObj.get("validationExceptionResources").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `validationExceptionResources` to be an array in the JSON string but got `%s`", jsonObj.get("validationExceptionResources").toString()));
          }

          // validate the optional field `validationExceptionResources` (array)
          for (int i = 0; i < jsonArrayvalidationExceptionResources.size(); i++) {
            DeleteObj.validateJsonElement(jsonArrayvalidationExceptionResources.get(i));
          };
        }
      }
      if (jsonObj.get("exstreamExceptionResources") != null && !jsonObj.get("exstreamExceptionResources").isJsonNull()) {
        JsonArray jsonArrayexstreamExceptionResources = jsonObj.getAsJsonArray("exstreamExceptionResources");
        if (jsonArrayexstreamExceptionResources != null) {
          // ensure the json data is an array
          if (!jsonObj.get("exstreamExceptionResources").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `exstreamExceptionResources` to be an array in the JSON string but got `%s`", jsonObj.get("exstreamExceptionResources").toString()));
          }

          // validate the optional field `exstreamExceptionResources` (array)
          for (int i = 0; i < jsonArrayexstreamExceptionResources.size(); i++) {
            DeleteObj.validateJsonElement(jsonArrayexstreamExceptionResources.get(i));
          };
        }
      }
      if (jsonObj.get("permissionDeniedExceptionResources") != null && !jsonObj.get("permissionDeniedExceptionResources").isJsonNull()) {
        JsonArray jsonArraypermissionDeniedExceptionResources = jsonObj.getAsJsonArray("permissionDeniedExceptionResources");
        if (jsonArraypermissionDeniedExceptionResources != null) {
          // ensure the json data is an array
          if (!jsonObj.get("permissionDeniedExceptionResources").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `permissionDeniedExceptionResources` to be an array in the JSON string but got `%s`", jsonObj.get("permissionDeniedExceptionResources").toString()));
          }

          // validate the optional field `permissionDeniedExceptionResources` (array)
          for (int i = 0; i < jsonArraypermissionDeniedExceptionResources.size(); i++) {
            DeleteObj.validateJsonElement(jsonArraypermissionDeniedExceptionResources.get(i));
          };
        }
      }
      if (jsonObj.get("errorResources") != null && !jsonObj.get("errorResources").isJsonNull()) {
        JsonArray jsonArrayerrorResources = jsonObj.getAsJsonArray("errorResources");
        if (jsonArrayerrorResources != null) {
          // ensure the json data is an array
          if (!jsonObj.get("errorResources").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `errorResources` to be an array in the JSON string but got `%s`", jsonObj.get("errorResources").toString()));
          }

          // validate the optional field `errorResources` (array)
          for (int i = 0; i < jsonArrayerrorResources.size(); i++) {
            DeleteObj.validateJsonElement(jsonArrayerrorResources.get(i));
          };
        }
      }
      if (jsonObj.get("conflictExceptionResource") != null && !jsonObj.get("conflictExceptionResource").isJsonNull()) {
        JsonArray jsonArrayconflictExceptionResource = jsonObj.getAsJsonArray("conflictExceptionResource");
        if (jsonArrayconflictExceptionResource != null) {
          // ensure the json data is an array
          if (!jsonObj.get("conflictExceptionResource").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `conflictExceptionResource` to be an array in the JSON string but got `%s`", jsonObj.get("conflictExceptionResource").toString()));
          }

          // validate the optional field `conflictExceptionResource` (array)
          for (int i = 0; i < jsonArrayconflictExceptionResource.size(); i++) {
            DeleteObj.validateJsonElement(jsonArrayconflictExceptionResource.get(i));
          };
        }
      }
      if (jsonObj.get("unExpectedExceptionResource") != null && !jsonObj.get("unExpectedExceptionResource").isJsonNull()) {
        JsonArray jsonArrayunExpectedExceptionResource = jsonObj.getAsJsonArray("unExpectedExceptionResource");
        if (jsonArrayunExpectedExceptionResource != null) {
          // ensure the json data is an array
          if (!jsonObj.get("unExpectedExceptionResource").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `unExpectedExceptionResource` to be an array in the JSON string but got `%s`", jsonObj.get("unExpectedExceptionResource").toString()));
          }

          // validate the optional field `unExpectedExceptionResource` (array)
          for (int i = 0; i < jsonArrayunExpectedExceptionResource.size(); i++) {
            DeleteObj.validateJsonElement(jsonArrayunExpectedExceptionResource.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BulkDeleteResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BulkDeleteResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BulkDeleteResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BulkDeleteResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<BulkDeleteResponse>() {
           @Override
           public void write(JsonWriter out, BulkDeleteResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BulkDeleteResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of BulkDeleteResponse given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of BulkDeleteResponse
  * @throws IOException if the JSON string is invalid with respect to BulkDeleteResponse
  */
  public static BulkDeleteResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BulkDeleteResponse.class);
  }

 /**
  * Convert an instance of BulkDeleteResponse to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

