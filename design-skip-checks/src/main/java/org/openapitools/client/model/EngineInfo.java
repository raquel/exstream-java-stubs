/*
 * Exstream Design
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * EngineInfo
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-17T13:54:16.859257228Z[Europe/Lisbon]")
public class EngineInfo {
  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private String version;

  public static final String SERIALIZED_NAME_SERIALIZATION = "serialization";
  @SerializedName(SERIALIZED_NAME_SERIALIZATION)
  private String serialization;

  public static final String SERIALIZED_NAME_CHAR_ENCODING = "charEncoding";
  @SerializedName(SERIALIZED_NAME_CHAR_ENCODING)
  private String charEncoding;

  public static final String SERIALIZED_NAME_ENGINE_NAME = "engineName";
  @SerializedName(SERIALIZED_NAME_ENGINE_NAME)
  private String engineName;

  public static final String SERIALIZED_NAME_USE_DEFAULT = "useDefault";
  @SerializedName(SERIALIZED_NAME_USE_DEFAULT)
  private Boolean useDefault;

  public EngineInfo() {
  }

  public EngineInfo version(String version) {
    this.version = version;
    return this;
  }

   /**
   * Get version
   * @return version
  **/
  @javax.annotation.Nullable
  public String getVersion() {
    return version;
  }

  public void setVersion(String version) {
    this.version = version;
  }


  public EngineInfo serialization(String serialization) {
    this.serialization = serialization;
    return this;
  }

   /**
   * Get serialization
   * @return serialization
  **/
  @javax.annotation.Nullable
  public String getSerialization() {
    return serialization;
  }

  public void setSerialization(String serialization) {
    this.serialization = serialization;
  }


  public EngineInfo charEncoding(String charEncoding) {
    this.charEncoding = charEncoding;
    return this;
  }

   /**
   * Get charEncoding
   * @return charEncoding
  **/
  @javax.annotation.Nullable
  public String getCharEncoding() {
    return charEncoding;
  }

  public void setCharEncoding(String charEncoding) {
    this.charEncoding = charEncoding;
  }


  public EngineInfo engineName(String engineName) {
    this.engineName = engineName;
    return this;
  }

   /**
   * Get engineName
   * @return engineName
  **/
  @javax.annotation.Nullable
  public String getEngineName() {
    return engineName;
  }

  public void setEngineName(String engineName) {
    this.engineName = engineName;
  }


  public EngineInfo useDefault(Boolean useDefault) {
    this.useDefault = useDefault;
    return this;
  }

   /**
   * Get useDefault
   * @return useDefault
  **/
  @javax.annotation.Nullable
  public Boolean getUseDefault() {
    return useDefault;
  }

  public void setUseDefault(Boolean useDefault) {
    this.useDefault = useDefault;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EngineInfo engineInfo = (EngineInfo) o;
    return Objects.equals(this.version, engineInfo.version) &&
        Objects.equals(this.serialization, engineInfo.serialization) &&
        Objects.equals(this.charEncoding, engineInfo.charEncoding) &&
        Objects.equals(this.engineName, engineInfo.engineName) &&
        Objects.equals(this.useDefault, engineInfo.useDefault);
  }

  @Override
  public int hashCode() {
    return Objects.hash(version, serialization, charEncoding, engineName, useDefault);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EngineInfo {\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    serialization: ").append(toIndentedString(serialization)).append("\n");
    sb.append("    charEncoding: ").append(toIndentedString(charEncoding)).append("\n");
    sb.append("    engineName: ").append(toIndentedString(engineName)).append("\n");
    sb.append("    useDefault: ").append(toIndentedString(useDefault)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("version");
    openapiFields.add("serialization");
    openapiFields.add("charEncoding");
    openapiFields.add("engineName");
    openapiFields.add("useDefault");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to EngineInfo
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EngineInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EngineInfo is not found in the empty JSON string", EngineInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EngineInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EngineInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("version") != null && !jsonObj.get("version").isJsonNull()) && !jsonObj.get("version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("version").toString()));
      }
      if ((jsonObj.get("serialization") != null && !jsonObj.get("serialization").isJsonNull()) && !jsonObj.get("serialization").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serialization` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serialization").toString()));
      }
      if ((jsonObj.get("charEncoding") != null && !jsonObj.get("charEncoding").isJsonNull()) && !jsonObj.get("charEncoding").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `charEncoding` to be a primitive type in the JSON string but got `%s`", jsonObj.get("charEncoding").toString()));
      }
      if ((jsonObj.get("engineName") != null && !jsonObj.get("engineName").isJsonNull()) && !jsonObj.get("engineName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `engineName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("engineName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EngineInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EngineInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EngineInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EngineInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<EngineInfo>() {
           @Override
           public void write(JsonWriter out, EngineInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EngineInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of EngineInfo given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of EngineInfo
  * @throws IOException if the JSON string is invalid with respect to EngineInfo
  */
  public static EngineInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EngineInfo.class);
  }

 /**
  * Convert an instance of EngineInfo to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

