/*
 * Exstream Design
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.DataResponseRealtimeService;
import org.openapitools.client.model.GenericResponse;
import org.openapitools.client.model.ListResponseRealtimeService;
import org.openapitools.client.model.RealtimeService;
import java.util.UUID;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for RealtimeServicesControllerApi
 */
@Disabled
public class RealtimeServicesControllerApiTest {

    private final RealtimeServicesControllerApi api = new RealtimeServicesControllerApi();

    /**
     * Add a new realtime service
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addTest() throws ApiException {
        RealtimeService realtimeService = null;
        DataResponseRealtimeService response = api.add(realtimeService);
        // TODO: test validations
    }

    /**
     * Deletes the realtime service with the specified id
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void delete1Test() throws ApiException {
        UUID realtimeServiceId = null;
        GenericResponse response = api.delete1(realtimeServiceId);
        // TODO: test validations
    }

    /**
     * Gets the realtime service with the specified name
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTest() throws ApiException {
        String realtimeServiceName = null;
        String domainId = null;
        DataResponseRealtimeService response = api.get(realtimeServiceName, domainId);
        // TODO: test validations
    }

    /**
     * Gets a list of all realtime services
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAllTest() throws ApiException {
        String domainId = null;
        ListResponseRealtimeService response = api.getAll(domainId);
        // TODO: test validations
    }

    /**
     * Gets the engine rundef content for the realtime service with the specified name
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getEngineRundefTest() throws ApiException {
        String realtimeServiceName = null;
        api.getEngineRundef(realtimeServiceName);
        // TODO: test validations
    }

    /**
     * Update an existing realtime service
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateTest() throws ApiException {
        RealtimeService realtimeService = null;
        DataResponseRealtimeService response = api.update(realtimeService);
        // TODO: test validations
    }

}
