/*
 * Exstream Design
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import java.io.File;
import org.openapitools.client.model.ListResponseResourceVersion;
import org.openapitools.client.model.PackageOptions;
import java.util.UUID;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for PackageControllerApi
 */
@Disabled
public class PackageControllerApiTest {

    private final PackageControllerApi api = new PackageControllerApi();

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPackageTest() throws ApiException {
        String domain = null;
        UUID id = null;
        Integer version = null;
        Boolean latestVersions = null;
        api.getPackage(domain, id, version, latestVersions);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPackageAllResourceTypeTest() throws ApiException {
        String domain = null;
        String resourceType = null;
        Boolean latestVersions = null;
        api.getPackageAllResourceType(domain, resourceType, latestVersions);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPackageWithPayloadTest() throws ApiException {
        String domain = null;
        UUID id = null;
        Integer version = null;
        Boolean latestVersions = null;
        PackageOptions packageOptions = null;
        api.getPackageWithPayload(domain, id, version, latestVersions, packageOptions);
        // TODO: test validations
    }

    /**
     * Handle a multi-part form request to deploy packages and their associated resources
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void packageDeploymentUploadTest() throws ApiException {
        String domain = null;
        List<UUID> resourcePackId = null;
        UUID templateId = null;
        UUID packageId = null;
        File rpFileName = null;
        File packageFileName = null;
        File templateFileName = null;
        File sampleFile1 = null;
        File sampleFile2 = null;
        ListResponseResourceVersion response = api.packageDeploymentUpload(domain, resourcePackId, templateId, packageId, rpFileName, packageFileName, templateFileName, sampleFile1, sampleFile2);
        // TODO: test validations
    }

    /**
     * Handle a multi-part form request to deploy packages and their associated resources
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void subPackageDeploymentUploadTest() throws ApiException {
        String domain = null;
        UUID packageId = null;
        UUID parentPackageId = null;
        File rpFileName = null;
        File packageFileName = null;
        File templateFileName = null;
        File sampleFile1 = null;
        File sampleFile2 = null;
        ListResponseResourceVersion response = api.subPackageDeploymentUpload(domain, packageId, parentPackageId, rpFileName, packageFileName, templateFileName, sampleFile1, sampleFile2);
        // TODO: test validations
    }

}
