/*
 * Exstream Design
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.BulkDeleteRequest;
import org.openapitools.client.model.BulkWorkflowRequestBody;
import org.openapitools.client.model.CommentRequestBody;
import org.openapitools.client.model.DataResponseBulkDeleteResponse;
import org.openapitools.client.model.DataResponseBulkWorkflowStateChangeResponse;
import org.openapitools.client.model.DataResponseResource;
import org.openapitools.client.model.DataResponseResourceVersion;
import org.openapitools.client.model.DataResponseTreeResourceVersion;
import org.openapitools.client.model.Domain;
import org.openapitools.client.model.EtagDescriptorRequest;
import org.openapitools.client.model.EtagDescriptorResponse;
import java.io.File;
import org.openapitools.client.model.GenericResponse;
import org.openapitools.client.model.ListResponseResourceHistory;
import java.time.OffsetDateTime;
import org.openapitools.client.model.PageResponseResourceVersion;
import org.openapitools.client.model.ResourceCategory;
import org.openapitools.client.model.ResourceFilter;
import org.openapitools.client.model.ResourceVersion;
import java.util.UUID;
import org.openapitools.client.model.WorkflowRequestBody;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ResourcesControllerApi
 */
@Disabled
public class ResourcesControllerApiTest {

    private final ResourcesControllerApi api = new ResourcesControllerApi();

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createResourceTest() throws ApiException {
        String domain = null;
        String contentType = null;
        ResourceVersion resourceVersion = null;
        String contentMimeType = null;
        DataResponseResourceVersion response = api.createResource(domain, contentType, resourceVersion, contentMimeType);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createResourceFromFileTest() throws ApiException {
        String domain = null;
        String name = null;
        String type = null;
        String subtype = null;
        File _file = null;
        DataResponseResourceVersion response = api.createResourceFromFile(domain, name, type, subtype, _file);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteResourceTest() throws ApiException {
        String domain = null;
        UUID id = null;
        String version = null;
        GenericResponse response = api.deleteResource(domain, id, version);
        // TODO: test validations
    }

    /**
     * Deletes a list of resources. The version can be LATEST, ALL or an actual version number. If not specified, LATEST is used.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteResourcesTest() throws ApiException {
        String domain = null;
        BulkDeleteRequest bulkDeleteRequest = null;
        DataResponseBulkDeleteResponse response = api.deleteResources(domain, bulkDeleteRequest);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void demoteTest() throws ApiException {
        String domain = null;
        UUID id = null;
        Domain domain2 = null;
        Integer version = null;
        DataResponseResourceVersion response = api.demote(domain, id, domain2, version);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getContentTest() throws ApiException {
        String domain = null;
        UUID id = null;
        Integer version = null;
        String state = null;
        Object response = api.getContent(domain, id, version, state);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getResourceTest() throws ApiException {
        String domain = null;
        UUID id = null;
        Integer version = null;
        String expand = null;
        Boolean checkIfLatestVersion = null;
        String state = null;
        DataResponseResourceVersion response = api.getResource(domain, id, version, expand, checkIfLatestVersion, state);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getResourceContentTest() throws ApiException {
        String domain = null;
        UUID id = null;
        String type = null;
        Integer version = null;
        String state = null;
        Object response = api.getResourceContent(domain, id, type, version, state);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getResourceHistoryTest() throws ApiException {
        String domain = null;
        UUID resourceId = null;
        Boolean fetchAcrossDomains = null;
        String historyType = null;
        ListResponseResourceHistory response = api.getResourceHistory(domain, resourceId, fetchAcrossDomains, historyType);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getResourcesTest() throws ApiException {
        String domain = null;
        List<UUID> filterIds = null;
        List<UUID> filterExcludedIds = null;
        List<String> filterTypes = null;
        List<String> filterExcludedTypes = null;
        String filterName = null;
        String filterDescription = null;
        String filterCreatedBy = null;
        String filterLastModifiedBy = null;
        OffsetDateTime filterCreatedDateStart = null;
        OffsetDateTime filterCreatedDateEnd = null;
        OffsetDateTime filterLastModifiedDateStart = null;
        OffsetDateTime filterLastModifiedDateEnd = null;
        String filterSearchString = null;
        Boolean filterCaseSensitive = null;
        Boolean filterWholeWord = null;
        UUID filterResourcePackId = null;
        Boolean filterSystemResource = null;
        Boolean filterHidden = null;
        Boolean filterHasApprovedVersion = null;
        UUID filterStandardVariantId = null;
        Boolean filterUseEffectiveDate = null;
        OffsetDateTime filterEffectiveDate = null;
        List<String> filterCategories = null;
        List<ResourceCategory> filterCategoryObjects = null;
        OffsetDateTime filterVfilterLastModifiedDateEnd = null;
        String filterDomainId = null;
        Boolean filterLatestVersion = null;
        Boolean filterLocked = null;
        List<String> filterStates = null;
        List<UUID> filterOverrideIds = null;
        List<String> filterOverrideStates = null;
        String advancedFilter = null;
        Integer offset = null;
        Integer count = null;
        Boolean fetchDomains = null;
        Boolean fetchPermissions = null;
        Boolean fetchCategories = null;
        Boolean fetchVariants = null;
        Boolean fetchApproval = null;
        String expand = null;
        PageResponseResourceVersion response = api.getResources(domain, filterIds, filterExcludedIds, filterTypes, filterExcludedTypes, filterName, filterDescription, filterCreatedBy, filterLastModifiedBy, filterCreatedDateStart, filterCreatedDateEnd, filterLastModifiedDateStart, filterLastModifiedDateEnd, filterSearchString, filterCaseSensitive, filterWholeWord, filterResourcePackId, filterSystemResource, filterHidden, filterHasApprovedVersion, filterStandardVariantId, filterUseEffectiveDate, filterEffectiveDate, filterCategories, filterCategoryObjects, filterVfilterLastModifiedDateEnd, filterDomainId, filterLatestVersion, filterLocked, filterStates, filterOverrideIds, filterOverrideStates, advancedFilter, offset, count, fetchDomains, fetchPermissions, fetchCategories, fetchVariants, fetchApproval, expand);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getResourcesFilterBodyTest() throws ApiException {
        String domain = null;
        ResourceFilter resourceFilter = null;
        List<UUID> filterIds = null;
        List<UUID> filterExcludedIds = null;
        List<String> filterTypes = null;
        List<String> filterExcludedTypes = null;
        String filterName = null;
        String filterDescription = null;
        String filterCreatedBy = null;
        String filterLastModifiedBy = null;
        OffsetDateTime filterCreatedDateStart = null;
        OffsetDateTime filterCreatedDateEnd = null;
        OffsetDateTime filterLastModifiedDateStart = null;
        OffsetDateTime filterLastModifiedDateEnd = null;
        String filterSearchString = null;
        Boolean filterCaseSensitive = null;
        Boolean filterWholeWord = null;
        UUID filterResourcePackId = null;
        Boolean filterSystemResource = null;
        Boolean filterHidden = null;
        Boolean filterHasApprovedVersion = null;
        UUID filterStandardVariantId = null;
        Boolean filterUseEffectiveDate = null;
        OffsetDateTime filterEffectiveDate = null;
        List<String> filterCategories = null;
        List<ResourceCategory> filterCategoryObjects = null;
        OffsetDateTime filterVfilterLastModifiedDateEnd = null;
        String filterDomainId = null;
        Boolean filterLatestVersion = null;
        Boolean filterLocked = null;
        List<String> filterStates = null;
        List<UUID> filterOverrideIds = null;
        List<String> filterOverrideStates = null;
        String advancedFilter = null;
        Integer offset = null;
        Integer count = null;
        Boolean fetchDomains = null;
        Boolean fetchPermissions = null;
        Boolean fetchCategories = null;
        Boolean fetchVariants = null;
        Boolean fetchApproval = null;
        String expand = null;
        PageResponseResourceVersion response = api.getResourcesFilterBody(domain, resourceFilter, filterIds, filterExcludedIds, filterTypes, filterExcludedTypes, filterName, filterDescription, filterCreatedBy, filterLastModifiedBy, filterCreatedDateStart, filterCreatedDateEnd, filterLastModifiedDateStart, filterLastModifiedDateEnd, filterSearchString, filterCaseSensitive, filterWholeWord, filterResourcePackId, filterSystemResource, filterHidden, filterHasApprovedVersion, filterStandardVariantId, filterUseEffectiveDate, filterEffectiveDate, filterCategories, filterCategoryObjects, filterVfilterLastModifiedDateEnd, filterDomainId, filterLatestVersion, filterLocked, filterStates, filterOverrideIds, filterOverrideStates, advancedFilter, offset, count, fetchDomains, fetchPermissions, fetchCategories, fetchVariants, fetchApproval, expand);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void hideResourceTest() throws ApiException {
        UUID id = null;
        DataResponseResource response = api.hideResource(id);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void lockResourceTest() throws ApiException {
        String domain = null;
        UUID id = null;
        Integer version = null;
        DataResponseResourceVersion response = api.lockResource(domain, id, version);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void promoteTest() throws ApiException {
        String domain = null;
        UUID id = null;
        Domain domain2 = null;
        Integer version = null;
        DataResponseResourceVersion response = api.promote(domain, id, domain2, version);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void resourceListEtagsTest() throws ApiException {
        String domain = null;
        EtagDescriptorRequest etagDescriptorRequest = null;
        EtagDescriptorResponse response = api.resourceListEtags(domain, etagDescriptorRequest);
        // TODO: test validations
    }

    /**
     * Replace the content of the current draft, or create a new draft with content of specified version. Copies links as well.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void revertToOldVersionTest() throws ApiException {
        String domain = null;
        UUID id = null;
        Integer oldVersion = null;
        CommentRequestBody commentRequestBody = null;
        DataResponseResourceVersion response = api.revertToOldVersion(domain, id, oldVersion, commentRequestBody);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sectionDescendantsTest() throws ApiException {
        String domain = null;
        UUID id = null;
        Boolean latestApproved = null;
        DataResponseTreeResourceVersion response = api.sectionDescendants(domain, id, latestApproved);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void showResourceTest() throws ApiException {
        UUID id = null;
        DataResponseResource response = api.showResource(id);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void unlockResourceTest() throws ApiException {
        String domain = null;
        UUID id = null;
        Integer version = null;
        Boolean force = null;
        DataResponseResourceVersion response = api.unlockResource(domain, id, version, force);
        // TODO: test validations
    }

    /**
     * Expects a form part in the request body with the name \&quot;file\&quot; and will use the contents of that file to update the specified resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateContentOfTypeViaFileTest() throws ApiException {
        String domain = null;
        UUID id = null;
        String type = null;
        File _file = null;
        DataResponseResourceVersion response = api.updateContentOfTypeViaFile(domain, id, type, _file);
        // TODO: test validations
    }

    /**
     * Expects a form part in the request body with the name \&quot;file\&quot; and will use the contents of that file to update the specified resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateContentViaFileTest() throws ApiException {
        String domain = null;
        UUID id = null;
        File _file = null;
        DataResponseResourceVersion response = api.updateContentViaFile(domain, id, _file);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateResourceTest() throws ApiException {
        String domain = null;
        UUID id = null;
        Object body = null;
        DataResponseResourceVersion response = api.updateResource(domain, id, body);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateStateTest() throws ApiException {
        String domain = null;
        UUID id = null;
        WorkflowRequestBody workflowRequestBody = null;
        DataResponseResourceVersion response = api.updateState(domain, id, workflowRequestBody);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateStatesTest() throws ApiException {
        String domain = null;
        BulkWorkflowRequestBody bulkWorkflowRequestBody = null;
        DataResponseBulkWorkflowStateChangeResponse response = api.updateStates(domain, bulkWorkflowRequestBody);
        // TODO: test validations
    }

}
