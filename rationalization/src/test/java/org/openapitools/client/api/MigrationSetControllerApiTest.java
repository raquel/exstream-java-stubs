/*
 * Exstream Rationalization
 * **For internal use of the product only**
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.MigrationSetLinkRequest;
import org.openapitools.client.model.MigrationSetPatchRequest;
import org.openapitools.client.model.MigrationSetRequest;
import org.openapitools.client.model.RationalisationFilter;
import org.openapitools.client.model.RationalizationResponseObject;
import java.util.UUID;
import org.openapitools.client.model.UpdateRationalizationActivityRequest;
import org.openapitools.client.model.WorkflowRequestBody;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for MigrationSetControllerApi
 */
@Disabled
public class MigrationSetControllerApiTest {

    private final MigrationSetControllerApi api = new MigrationSetControllerApi();

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void applyPatchForMigrationSetTest() throws ApiException {
        String domainId = null;
        UUID msId = null;
        MigrationSetPatchRequest migrationSetPatchRequest = null;
        String response = api.applyPatchForMigrationSet(domainId, msId, migrationSetPatchRequest);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createLinkBtwRatAndDasMigrationSetTest() throws ApiException {
        String domain = null;
        MigrationSetLinkRequest migrationSetLinkRequest = null;
        RationalizationResponseObject response = api.createLinkBtwRatAndDasMigrationSet(domain, migrationSetLinkRequest);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createMigrationSetTest() throws ApiException {
        String domain = null;
        MigrationSetRequest migrationSetRequest = null;
        RationalizationResponseObject response = api.createMigrationSet(domain, migrationSetRequest);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createRationalizationActivityTest() throws ApiException {
        String domain = null;
        String migrationType = null;
        UpdateRationalizationActivityRequest updateRationalizationActivityRequest = null;
        RationalizationResponseObject response = api.createRationalizationActivity(domain, migrationType, updateRationalizationActivityRequest);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteMigrationSetTest() throws ApiException {
        String domainId = null;
        UUID msId = null;
        Boolean updateOnly = null;
        RationalizationResponseObject response = api.deleteMigrationSet(domainId, msId, updateOnly);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCanDeleteMigrationSetTest() throws ApiException {
        String domain = null;
        UUID id = null;
        RationalizationResponseObject response = api.getCanDeleteMigrationSet(domain, id);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getFragmentReferenceTest() throws ApiException {
        String domain = null;
        UUID msId = null;
        UUID varId = null;
        RationalizationResponseObject response = api.getFragmentReference(domain, msId, varId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getFragmentsOfMigrationSetTest() throws ApiException {
        String domain = null;
        UUID msId = null;
        Integer offset = null;
        Integer limit = null;
        Object orderby = null;
        RationalisationFilter filter = null;
        Boolean hidden = null;
        Boolean references = null;
        RationalizationResponseObject response = api.getFragmentsOfMigrationSet(domain, msId, offset, limit, orderby, filter, hidden, references);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getFragmentsOfTemplateMigrationSetTest() throws ApiException {
        String domain = null;
        UUID msId = null;
        Integer offset = null;
        Integer limit = null;
        Object orderby = null;
        RationalisationFilter filter = null;
        Boolean hidden = null;
        Boolean references = null;
        RationalizationResponseObject response = api.getFragmentsOfTemplateMigrationSet(domain, msId, offset, limit, orderby, filter, hidden, references);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getFragmentsReferencesTest() throws ApiException {
        String domain = null;
        UUID fragmentId = null;
        RationalizationResponseObject response = api.getFragmentsReferences(domain, fragmentId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMigrationSet2Test() throws ApiException {
        String domainId = null;
        UUID msId = null;
        RationalizationResponseObject response = api.getMigrationSet2(domainId, msId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMigrationSetLinksTest() throws ApiException {
        String domain = null;
        UUID msId = null;
        RationalizationResponseObject response = api.getMigrationSetLinks(domain, msId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMigrationSetsTest() throws ApiException {
        String domain = null;
        Integer offset = null;
        Integer limit = null;
        Object orderby = null;
        RationalisationFilter filter = null;
        Boolean hidden = null;
        Boolean latestversion = null;
        Boolean checkIfApproved = null;
        RationalizationResponseObject response = api.getMigrationSets(domain, offset, limit, orderby, filter, hidden, latestversion, checkIfApproved);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPdfFragmentsTest() throws ApiException {
        String domain = null;
        UUID msId = null;
        UUID pdfid = null;
        Integer pageno = null;
        Integer pagecount = null;
        RationalizationResponseObject response = api.getPdfFragments(domain, msId, pdfid, pageno, pagecount);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getResourceHistoryTest() throws ApiException {
        String domain = null;
        UUID msid = null;
        RationalizationResponseObject response = api.getResourceHistory(domain, msid);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTemplateDetailsOfMigrationSetTest() throws ApiException {
        String domain = null;
        UUID msId = null;
        RationalizationResponseObject response = api.getTemplateDetailsOfMigrationSet(domain, msId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTemplateFragmentsReferencesTest() throws ApiException {
        String domain = null;
        UUID fragmentId = null;
        UUID templateId = null;
        List<String> communications = null;
        RationalizationResponseObject response = api.getTemplateFragmentsReferences(domain, fragmentId, templateId, communications);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTemplateRuleFragmentsReferencesTest() throws ApiException {
        String domain = null;
        UUID ruleId = null;
        UUID templateId = null;
        List<String> communications = null;
        RationalizationResponseObject response = api.getTemplateRuleFragmentsReferences(domain, ruleId, templateId, communications);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTemplateVariableFragmentsReferencesTest() throws ApiException {
        String domain = null;
        UUID variableId = null;
        UUID templateId = null;
        List<String> communications = null;
        RationalizationResponseObject response = api.getTemplateVariableFragmentsReferences(domain, variableId, templateId, communications);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void promoteTest() throws ApiException {
        String domain = null;
        UUID id = null;
        WorkflowRequestBody workflowRequestBody = null;
        RationalizationResponseObject response = api.promote(domain, id, workflowRequestBody);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateMigrationSetTest() throws ApiException {
        String domainId = null;
        UUID msId = null;
        MigrationSetRequest migrationSetRequest = null;
        RationalizationResponseObject response = api.updateMigrationSet(domainId, msId, migrationSetRequest);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateRationalizationActivityTest() throws ApiException {
        String domain = null;
        UUID msId = null;
        String migrationType = null;
        UpdateRationalizationActivityRequest updateRationalizationActivityRequest = null;
        RationalizationResponseObject response = api.updateRationalizationActivity(domain, msId, migrationType, updateRationalizationActivityRequest);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateRationalizationStateTest() throws ApiException {
        String domain = null;
        UUID msId = null;
        WorkflowRequestBody workflowRequestBody = null;
        RationalizationResponseObject response = api.updateRationalizationState(domain, msId, workflowRequestBody);
        // TODO: test validations
    }

}
