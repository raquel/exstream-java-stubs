/*
 * Exstream Rationalization
 * **For internal use of the product only**
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.CustomFragmentRequest;
import org.openapitools.client.model.CustomSuperSetRequest;
import org.openapitools.client.model.FragmentRequest;
import org.openapitools.client.model.RationalisationFilter;
import org.openapitools.client.model.RationalizationResponseObject;
import org.openapitools.client.model.SseEmitter;
import java.util.UUID;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for RationalizationReportControllerApi
 */
@Disabled
public class RationalizationReportControllerApiTest {

    private final RationalizationReportControllerApi api = new RationalizationReportControllerApi();

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cancelOfflineJobTest() throws ApiException {
        String domainId = null;
        UUID msId = null;
        Boolean implicit = null;
        RationalizationResponseObject response = api.cancelOfflineJob(domainId, msId, implicit);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cancelOfflineJob1Test() throws ApiException {
        String domainId = null;
        UUID msId = null;
        Boolean implicit = null;
        RationalizationResponseObject response = api.cancelOfflineJob1(domainId, msId, implicit);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createCustomFragmentTest() throws ApiException {
        String domainId = null;
        UUID msId = null;
        CustomFragmentRequest customFragmentRequest = null;
        RationalizationResponseObject response = api.createCustomFragment(domainId, msId, customFragmentRequest);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void generateReportOfflineTest() throws ApiException {
        String domainId = null;
        UUID msId = null;
        Boolean implicit = null;
        RationalizationResponseObject response = api.generateReportOffline(domainId, msId, implicit);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void generateReportOffline1Test() throws ApiException {
        String domainId = null;
        UUID msId = null;
        Boolean implicit = null;
        RationalizationResponseObject response = api.generateReportOffline1(domainId, msId, implicit);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCustomSuperSetTest() throws ApiException {
        String domainId = null;
        UUID fragmentId = null;
        CustomSuperSetRequest request = null;
        RationalizationResponseObject response = api.getCustomSuperSet(domainId, fragmentId, request);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getFragmentDetailsTest() throws ApiException {
        String domainId = null;
        UUID fragmentId = null;
        RationalizationResponseObject response = api.getFragmentDetails(domainId, fragmentId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getFragmentOrderTest() throws ApiException {
        String domainId = null;
        UUID fragmentId = null;
        RationalizationResponseObject response = api.getFragmentOrder(domainId, fragmentId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getGroupFragmentTest() throws ApiException {
        String domainId = null;
        UUID fragmentId = null;
        RationalizationResponseObject response = api.getGroupFragment(domainId, fragmentId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMigrationSetTest() throws ApiException {
        String domainId = null;
        UUID msId = null;
        Boolean implicit = null;
        SseEmitter response = api.getMigrationSet(domainId, msId, implicit);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMigrationSet1Test() throws ApiException {
        String domainId = null;
        UUID msId = null;
        Boolean implicit = null;
        SseEmitter response = api.getMigrationSet1(domainId, msId, implicit);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrginatedFragmentsTest() throws ApiException {
        String domainId = null;
        UUID customFragmentId = null;
        RationalizationResponseObject response = api.getOrginatedFragments(domainId, customFragmentId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRatMigrationSetDetailsTest() throws ApiException {
        String domainId = null;
        UUID dasId = null;
        Boolean latestApproved = null;
        RationalizationResponseObject response = api.getRatMigrationSetDetails(domainId, dasId, latestApproved);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRationalisationRunResultsTest() throws ApiException {
        String domainId = null;
        UUID msId = null;
        RationalizationResponseObject response = api.getRationalisationRunResults(domainId, msId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRationalizationFragmentsTest() throws ApiException {
        String domainId = null;
        UUID msId = null;
        String commType = null;
        String resourcePackId = null;
        List<String> dasObjectType = null;
        Integer offset = null;
        Integer limit = null;
        Object orderby = null;
        RationalisationFilter filter = null;
        RationalizationResponseObject response = api.getRationalizationFragments(domainId, msId, commType, resourcePackId, dasObjectType, offset, limit, orderby, filter);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRootCustomFragmentIdTest() throws ApiException {
        String domainId = null;
        UUID fragmentId = null;
        RationalizationResponseObject response = api.getRootCustomFragmentId(domainId, fragmentId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTemplateFragmentsTest() throws ApiException {
        String domainId = null;
        UUID msId = null;
        String commType = null;
        String resourcePackId = null;
        List<String> dasObjectType = null;
        Integer offset = null;
        Integer limit = null;
        Object orderby = null;
        RationalisationFilter filter = null;
        RationalizationResponseObject response = api.getTemplateFragments(domainId, msId, commType, resourcePackId, dasObjectType, offset, limit, orderby, filter);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void previewTest() throws ApiException {
        String domainId = null;
        UUID fragmentId = null;
        Boolean isFragmentPreview = null;
        Object response = api.preview(domainId, fragmentId, isFragmentPreview);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateCustomFragmentTest() throws ApiException {
        String domainId = null;
        UUID msId = null;
        UUID customFragmentId = null;
        CustomFragmentRequest customFragmentRequest = null;
        RationalizationResponseObject response = api.updateCustomFragment(domainId, msId, customFragmentId, customFragmentRequest);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateFragmentTest() throws ApiException {
        String domainId = null;
        UUID fragmentId = null;
        FragmentRequest fragmentRequest = null;
        Object response = api.updateFragment(domainId, fragmentId, fragmentRequest);
        // TODO: test validations
    }

}
