/*
 * Exstream Rationalization
 * **For internal use of the product only**
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import org.openapitools.client.model.MigrationSetFilter;
import org.openapitools.client.model.MigrationSetResource;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * MigrationSetRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-17T13:53:34.366018029Z[Europe/Lisbon]")
public class MigrationSetRequest {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private UUID id;

  public static final String SERIALIZED_NAME_TMP_ID = "tmpId";
  @SerializedName(SERIALIZED_NAME_TMP_ID)
  private UUID tmpId;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_RAT_TOLERANCE = "ratTolerance";
  @SerializedName(SERIALIZED_NAME_RAT_TOLERANCE)
  private Integer ratTolerance;

  public static final String SERIALIZED_NAME_FRAG_TOLERANCE = "fragTolerance";
  @SerializedName(SERIALIZED_NAME_FRAG_TOLERANCE)
  private Integer fragTolerance;

  public static final String SERIALIZED_NAME_DATA_SOURCES = "dataSources";
  @SerializedName(SERIALIZED_NAME_DATA_SOURCES)
  private List<MigrationSetResource> dataSources;

  public static final String SERIALIZED_NAME_OUTPUT_SAMPLES = "outputSamples";
  @SerializedName(SERIALIZED_NAME_OUTPUT_SAMPLES)
  private List<MigrationSetResource> outputSamples;

  public static final String SERIALIZED_NAME_TEMPLATES = "templates";
  @SerializedName(SERIALIZED_NAME_TEMPLATES)
  private List<MigrationSetResource> templates;

  /**
   * Gets or Sets migrationType
   */
  @JsonAdapter(MigrationTypeEnum.Adapter.class)
  public enum MigrationTypeEnum {
    CONTENT("CONTENT"),
    
    TEMPLATE("TEMPLATE"),
    
    UNKNOWN("UNKNOWN");

    private String value;

    MigrationTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MigrationTypeEnum fromValue(String value) {
      for (MigrationTypeEnum b : MigrationTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MigrationTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MigrationTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MigrationTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MigrationTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      MigrationTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_MIGRATION_TYPE = "migrationType";
  @SerializedName(SERIALIZED_NAME_MIGRATION_TYPE)
  private MigrationTypeEnum migrationType;

  public static final String SERIALIZED_NAME_FILTER = "filter";
  @SerializedName(SERIALIZED_NAME_FILTER)
  private MigrationSetFilter filter;

  public MigrationSetRequest() {
  }

  public MigrationSetRequest id(UUID id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nullable
  public UUID getId() {
    return id;
  }

  public void setId(UUID id) {
    this.id = id;
  }


  public MigrationSetRequest tmpId(UUID tmpId) {
    this.tmpId = tmpId;
    return this;
  }

   /**
   * Get tmpId
   * @return tmpId
  **/
  @javax.annotation.Nullable
  public UUID getTmpId() {
    return tmpId;
  }

  public void setTmpId(UUID tmpId) {
    this.tmpId = tmpId;
  }


  public MigrationSetRequest name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public MigrationSetRequest description(String description) {
    this.description = description;
    return this;
  }

   /**
   * Get description
   * @return description
  **/
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public MigrationSetRequest ratTolerance(Integer ratTolerance) {
    this.ratTolerance = ratTolerance;
    return this;
  }

   /**
   * Get ratTolerance
   * minimum: 50
   * maximum: 100
   * @return ratTolerance
  **/
  @javax.annotation.Nullable
  public Integer getRatTolerance() {
    return ratTolerance;
  }

  public void setRatTolerance(Integer ratTolerance) {
    this.ratTolerance = ratTolerance;
  }


  public MigrationSetRequest fragTolerance(Integer fragTolerance) {
    this.fragTolerance = fragTolerance;
    return this;
  }

   /**
   * Get fragTolerance
   * minimum: 50
   * maximum: 100
   * @return fragTolerance
  **/
  @javax.annotation.Nullable
  public Integer getFragTolerance() {
    return fragTolerance;
  }

  public void setFragTolerance(Integer fragTolerance) {
    this.fragTolerance = fragTolerance;
  }


  public MigrationSetRequest dataSources(List<MigrationSetResource> dataSources) {
    this.dataSources = dataSources;
    return this;
  }

  public MigrationSetRequest addDataSourcesItem(MigrationSetResource dataSourcesItem) {
    if (this.dataSources == null) {
      this.dataSources = new ArrayList<>();
    }
    this.dataSources.add(dataSourcesItem);
    return this;
  }

   /**
   * Get dataSources
   * @return dataSources
  **/
  @javax.annotation.Nullable
  public List<MigrationSetResource> getDataSources() {
    return dataSources;
  }

  public void setDataSources(List<MigrationSetResource> dataSources) {
    this.dataSources = dataSources;
  }


  public MigrationSetRequest outputSamples(List<MigrationSetResource> outputSamples) {
    this.outputSamples = outputSamples;
    return this;
  }

  public MigrationSetRequest addOutputSamplesItem(MigrationSetResource outputSamplesItem) {
    if (this.outputSamples == null) {
      this.outputSamples = new ArrayList<>();
    }
    this.outputSamples.add(outputSamplesItem);
    return this;
  }

   /**
   * Get outputSamples
   * @return outputSamples
  **/
  @javax.annotation.Nullable
  public List<MigrationSetResource> getOutputSamples() {
    return outputSamples;
  }

  public void setOutputSamples(List<MigrationSetResource> outputSamples) {
    this.outputSamples = outputSamples;
  }


  public MigrationSetRequest templates(List<MigrationSetResource> templates) {
    this.templates = templates;
    return this;
  }

  public MigrationSetRequest addTemplatesItem(MigrationSetResource templatesItem) {
    if (this.templates == null) {
      this.templates = new ArrayList<>();
    }
    this.templates.add(templatesItem);
    return this;
  }

   /**
   * Get templates
   * @return templates
  **/
  @javax.annotation.Nullable
  public List<MigrationSetResource> getTemplates() {
    return templates;
  }

  public void setTemplates(List<MigrationSetResource> templates) {
    this.templates = templates;
  }


  public MigrationSetRequest migrationType(MigrationTypeEnum migrationType) {
    this.migrationType = migrationType;
    return this;
  }

   /**
   * Get migrationType
   * @return migrationType
  **/
  @javax.annotation.Nonnull
  public MigrationTypeEnum getMigrationType() {
    return migrationType;
  }

  public void setMigrationType(MigrationTypeEnum migrationType) {
    this.migrationType = migrationType;
  }


  public MigrationSetRequest filter(MigrationSetFilter filter) {
    this.filter = filter;
    return this;
  }

   /**
   * Get filter
   * @return filter
  **/
  @javax.annotation.Nullable
  public MigrationSetFilter getFilter() {
    return filter;
  }

  public void setFilter(MigrationSetFilter filter) {
    this.filter = filter;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MigrationSetRequest migrationSetRequest = (MigrationSetRequest) o;
    return Objects.equals(this.id, migrationSetRequest.id) &&
        Objects.equals(this.tmpId, migrationSetRequest.tmpId) &&
        Objects.equals(this.name, migrationSetRequest.name) &&
        Objects.equals(this.description, migrationSetRequest.description) &&
        Objects.equals(this.ratTolerance, migrationSetRequest.ratTolerance) &&
        Objects.equals(this.fragTolerance, migrationSetRequest.fragTolerance) &&
        Objects.equals(this.dataSources, migrationSetRequest.dataSources) &&
        Objects.equals(this.outputSamples, migrationSetRequest.outputSamples) &&
        Objects.equals(this.templates, migrationSetRequest.templates) &&
        Objects.equals(this.migrationType, migrationSetRequest.migrationType) &&
        Objects.equals(this.filter, migrationSetRequest.filter);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, tmpId, name, description, ratTolerance, fragTolerance, dataSources, outputSamples, templates, migrationType, filter);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MigrationSetRequest {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    tmpId: ").append(toIndentedString(tmpId)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    ratTolerance: ").append(toIndentedString(ratTolerance)).append("\n");
    sb.append("    fragTolerance: ").append(toIndentedString(fragTolerance)).append("\n");
    sb.append("    dataSources: ").append(toIndentedString(dataSources)).append("\n");
    sb.append("    outputSamples: ").append(toIndentedString(outputSamples)).append("\n");
    sb.append("    templates: ").append(toIndentedString(templates)).append("\n");
    sb.append("    migrationType: ").append(toIndentedString(migrationType)).append("\n");
    sb.append("    filter: ").append(toIndentedString(filter)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("tmpId");
    openapiFields.add("name");
    openapiFields.add("description");
    openapiFields.add("ratTolerance");
    openapiFields.add("fragTolerance");
    openapiFields.add("dataSources");
    openapiFields.add("outputSamples");
    openapiFields.add("templates");
    openapiFields.add("migrationType");
    openapiFields.add("filter");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("migrationType");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to MigrationSetRequest
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MigrationSetRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MigrationSetRequest is not found in the empty JSON string", MigrationSetRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MigrationSetRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MigrationSetRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : MigrationSetRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("tmpId") != null && !jsonObj.get("tmpId").isJsonNull()) && !jsonObj.get("tmpId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tmpId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tmpId").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if (jsonObj.get("dataSources") != null && !jsonObj.get("dataSources").isJsonNull()) {
        JsonArray jsonArraydataSources = jsonObj.getAsJsonArray("dataSources");
        if (jsonArraydataSources != null) {
          // ensure the json data is an array
          if (!jsonObj.get("dataSources").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `dataSources` to be an array in the JSON string but got `%s`", jsonObj.get("dataSources").toString()));
          }

          // validate the optional field `dataSources` (array)
          for (int i = 0; i < jsonArraydataSources.size(); i++) {
            MigrationSetResource.validateJsonElement(jsonArraydataSources.get(i));
          };
        }
      }
      if (jsonObj.get("outputSamples") != null && !jsonObj.get("outputSamples").isJsonNull()) {
        JsonArray jsonArrayoutputSamples = jsonObj.getAsJsonArray("outputSamples");
        if (jsonArrayoutputSamples != null) {
          // ensure the json data is an array
          if (!jsonObj.get("outputSamples").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `outputSamples` to be an array in the JSON string but got `%s`", jsonObj.get("outputSamples").toString()));
          }

          // validate the optional field `outputSamples` (array)
          for (int i = 0; i < jsonArrayoutputSamples.size(); i++) {
            MigrationSetResource.validateJsonElement(jsonArrayoutputSamples.get(i));
          };
        }
      }
      if (jsonObj.get("templates") != null && !jsonObj.get("templates").isJsonNull()) {
        JsonArray jsonArraytemplates = jsonObj.getAsJsonArray("templates");
        if (jsonArraytemplates != null) {
          // ensure the json data is an array
          if (!jsonObj.get("templates").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `templates` to be an array in the JSON string but got `%s`", jsonObj.get("templates").toString()));
          }

          // validate the optional field `templates` (array)
          for (int i = 0; i < jsonArraytemplates.size(); i++) {
            MigrationSetResource.validateJsonElement(jsonArraytemplates.get(i));
          };
        }
      }
      if (!jsonObj.get("migrationType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `migrationType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("migrationType").toString()));
      }
      // validate the required field `migrationType`
      MigrationTypeEnum.validateJsonElement(jsonObj.get("migrationType"));
      // validate the optional field `filter`
      if (jsonObj.get("filter") != null && !jsonObj.get("filter").isJsonNull()) {
        MigrationSetFilter.validateJsonElement(jsonObj.get("filter"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MigrationSetRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MigrationSetRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MigrationSetRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MigrationSetRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<MigrationSetRequest>() {
           @Override
           public void write(JsonWriter out, MigrationSetRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MigrationSetRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of MigrationSetRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of MigrationSetRequest
  * @throws IOException if the JSON string is invalid with respect to MigrationSetRequest
  */
  public static MigrationSetRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MigrationSetRequest.class);
  }

 /**
  * Convert an instance of MigrationSetRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

