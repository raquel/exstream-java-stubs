/*
 * Exstream Rationalization
 * **For internal use of the product only**
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.SchemaChangeLogEntry;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Schema
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-17T13:53:34.366018029Z[Europe/Lisbon]")
public class Schema {
  public static final String SERIALIZED_NAME_SCHEMA_ID = "schemaId";
  @SerializedName(SERIALIZED_NAME_SCHEMA_ID)
  private String schemaId;

  public static final String SERIALIZED_NAME_LATEST_SCHEMA_CHANGE_LOG_ENTRY = "latestSchemaChangeLogEntry";
  @SerializedName(SERIALIZED_NAME_LATEST_SCHEMA_CHANGE_LOG_ENTRY)
  private SchemaChangeLogEntry latestSchemaChangeLogEntry;

  public static final String SERIALIZED_NAME_SCHEMA_MISSING_FROM_DATABASE = "schemaMissingFromDatabase";
  @SerializedName(SERIALIZED_NAME_SCHEMA_MISSING_FROM_DATABASE)
  private Boolean schemaMissingFromDatabase;

  public Schema() {
  }

  public Schema schemaId(String schemaId) {
    this.schemaId = schemaId;
    return this;
  }

   /**
   * Get schemaId
   * @return schemaId
  **/
  @javax.annotation.Nullable
  public String getSchemaId() {
    return schemaId;
  }

  public void setSchemaId(String schemaId) {
    this.schemaId = schemaId;
  }


  public Schema latestSchemaChangeLogEntry(SchemaChangeLogEntry latestSchemaChangeLogEntry) {
    this.latestSchemaChangeLogEntry = latestSchemaChangeLogEntry;
    return this;
  }

   /**
   * Get latestSchemaChangeLogEntry
   * @return latestSchemaChangeLogEntry
  **/
  @javax.annotation.Nullable
  public SchemaChangeLogEntry getLatestSchemaChangeLogEntry() {
    return latestSchemaChangeLogEntry;
  }

  public void setLatestSchemaChangeLogEntry(SchemaChangeLogEntry latestSchemaChangeLogEntry) {
    this.latestSchemaChangeLogEntry = latestSchemaChangeLogEntry;
  }


  public Schema schemaMissingFromDatabase(Boolean schemaMissingFromDatabase) {
    this.schemaMissingFromDatabase = schemaMissingFromDatabase;
    return this;
  }

   /**
   * Get schemaMissingFromDatabase
   * @return schemaMissingFromDatabase
  **/
  @javax.annotation.Nullable
  public Boolean getSchemaMissingFromDatabase() {
    return schemaMissingFromDatabase;
  }

  public void setSchemaMissingFromDatabase(Boolean schemaMissingFromDatabase) {
    this.schemaMissingFromDatabase = schemaMissingFromDatabase;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Schema schema = (Schema) o;
    return Objects.equals(this.schemaId, schema.schemaId) &&
        Objects.equals(this.latestSchemaChangeLogEntry, schema.latestSchemaChangeLogEntry) &&
        Objects.equals(this.schemaMissingFromDatabase, schema.schemaMissingFromDatabase);
  }

  @Override
  public int hashCode() {
    return Objects.hash(schemaId, latestSchemaChangeLogEntry, schemaMissingFromDatabase);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Schema {\n");
    sb.append("    schemaId: ").append(toIndentedString(schemaId)).append("\n");
    sb.append("    latestSchemaChangeLogEntry: ").append(toIndentedString(latestSchemaChangeLogEntry)).append("\n");
    sb.append("    schemaMissingFromDatabase: ").append(toIndentedString(schemaMissingFromDatabase)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("schemaId");
    openapiFields.add("latestSchemaChangeLogEntry");
    openapiFields.add("schemaMissingFromDatabase");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to Schema
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Schema.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Schema is not found in the empty JSON string", Schema.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Schema.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Schema` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("schemaId") != null && !jsonObj.get("schemaId").isJsonNull()) && !jsonObj.get("schemaId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `schemaId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("schemaId").toString()));
      }
      // validate the optional field `latestSchemaChangeLogEntry`
      if (jsonObj.get("latestSchemaChangeLogEntry") != null && !jsonObj.get("latestSchemaChangeLogEntry").isJsonNull()) {
        SchemaChangeLogEntry.validateJsonElement(jsonObj.get("latestSchemaChangeLogEntry"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Schema.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Schema' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Schema> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Schema.class));

       return (TypeAdapter<T>) new TypeAdapter<Schema>() {
           @Override
           public void write(JsonWriter out, Schema value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Schema read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Schema given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Schema
  * @throws IOException if the JSON string is invalid with respect to Schema
  */
  public static Schema fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Schema.class);
  }

 /**
  * Convert an instance of Schema to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

