/*
 * Exstream Rationalization
 * **For internal use of the product only**
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import org.openapitools.client.model.FragmentRefRequest;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CustomFragmentRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-17T13:53:34.366018029Z[Europe/Lisbon]")
public class CustomFragmentRequest {
  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_FRAGMENTS = "fragments";
  @SerializedName(SERIALIZED_NAME_FRAGMENTS)
  private List<UUID> fragments;

  public static final String SERIALIZED_NAME_IS_DYNAMIC = "isDynamic";
  @SerializedName(SERIALIZED_NAME_IS_DYNAMIC)
  private Boolean isDynamic;

  public static final String SERIALIZED_NAME_IS_INCLUDED = "isIncluded";
  @SerializedName(SERIALIZED_NAME_IS_INCLUDED)
  private Boolean isIncluded;

  public static final String SERIALIZED_NAME_FRAG_TOLERANCE = "fragTolerance";
  @SerializedName(SERIALIZED_NAME_FRAG_TOLERANCE)
  private Integer fragTolerance;

  public static final String SERIALIZED_NAME_FRAG_OCCURRENCES = "fragOccurrences";
  @SerializedName(SERIALIZED_NAME_FRAG_OCCURRENCES)
  private List<FragmentRefRequest> fragOccurrences;

  public CustomFragmentRequest() {
  }

  public CustomFragmentRequest name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public CustomFragmentRequest description(String description) {
    this.description = description;
    return this;
  }

   /**
   * Get description
   * @return description
  **/
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public CustomFragmentRequest fragments(List<UUID> fragments) {
    this.fragments = fragments;
    return this;
  }

  public CustomFragmentRequest addFragmentsItem(UUID fragmentsItem) {
    if (this.fragments == null) {
      this.fragments = new ArrayList<>();
    }
    this.fragments.add(fragmentsItem);
    return this;
  }

   /**
   * Get fragments
   * @return fragments
  **/
  @javax.annotation.Nullable
  public List<UUID> getFragments() {
    return fragments;
  }

  public void setFragments(List<UUID> fragments) {
    this.fragments = fragments;
  }


  public CustomFragmentRequest isDynamic(Boolean isDynamic) {
    this.isDynamic = isDynamic;
    return this;
  }

   /**
   * Get isDynamic
   * @return isDynamic
  **/
  @javax.annotation.Nullable
  public Boolean getIsDynamic() {
    return isDynamic;
  }

  public void setIsDynamic(Boolean isDynamic) {
    this.isDynamic = isDynamic;
  }


  public CustomFragmentRequest isIncluded(Boolean isIncluded) {
    this.isIncluded = isIncluded;
    return this;
  }

   /**
   * Get isIncluded
   * @return isIncluded
  **/
  @javax.annotation.Nullable
  public Boolean getIsIncluded() {
    return isIncluded;
  }

  public void setIsIncluded(Boolean isIncluded) {
    this.isIncluded = isIncluded;
  }


  public CustomFragmentRequest fragTolerance(Integer fragTolerance) {
    this.fragTolerance = fragTolerance;
    return this;
  }

   /**
   * Get fragTolerance
   * @return fragTolerance
  **/
  @javax.annotation.Nullable
  public Integer getFragTolerance() {
    return fragTolerance;
  }

  public void setFragTolerance(Integer fragTolerance) {
    this.fragTolerance = fragTolerance;
  }


  public CustomFragmentRequest fragOccurrences(List<FragmentRefRequest> fragOccurrences) {
    this.fragOccurrences = fragOccurrences;
    return this;
  }

  public CustomFragmentRequest addFragOccurrencesItem(FragmentRefRequest fragOccurrencesItem) {
    if (this.fragOccurrences == null) {
      this.fragOccurrences = new ArrayList<>();
    }
    this.fragOccurrences.add(fragOccurrencesItem);
    return this;
  }

   /**
   * Get fragOccurrences
   * @return fragOccurrences
  **/
  @javax.annotation.Nullable
  public List<FragmentRefRequest> getFragOccurrences() {
    return fragOccurrences;
  }

  public void setFragOccurrences(List<FragmentRefRequest> fragOccurrences) {
    this.fragOccurrences = fragOccurrences;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CustomFragmentRequest customFragmentRequest = (CustomFragmentRequest) o;
    return Objects.equals(this.name, customFragmentRequest.name) &&
        Objects.equals(this.description, customFragmentRequest.description) &&
        Objects.equals(this.fragments, customFragmentRequest.fragments) &&
        Objects.equals(this.isDynamic, customFragmentRequest.isDynamic) &&
        Objects.equals(this.isIncluded, customFragmentRequest.isIncluded) &&
        Objects.equals(this.fragTolerance, customFragmentRequest.fragTolerance) &&
        Objects.equals(this.fragOccurrences, customFragmentRequest.fragOccurrences);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, description, fragments, isDynamic, isIncluded, fragTolerance, fragOccurrences);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CustomFragmentRequest {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    fragments: ").append(toIndentedString(fragments)).append("\n");
    sb.append("    isDynamic: ").append(toIndentedString(isDynamic)).append("\n");
    sb.append("    isIncluded: ").append(toIndentedString(isIncluded)).append("\n");
    sb.append("    fragTolerance: ").append(toIndentedString(fragTolerance)).append("\n");
    sb.append("    fragOccurrences: ").append(toIndentedString(fragOccurrences)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("name");
    openapiFields.add("description");
    openapiFields.add("fragments");
    openapiFields.add("isDynamic");
    openapiFields.add("isIncluded");
    openapiFields.add("fragTolerance");
    openapiFields.add("fragOccurrences");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("name");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to CustomFragmentRequest
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CustomFragmentRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CustomFragmentRequest is not found in the empty JSON string", CustomFragmentRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CustomFragmentRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CustomFragmentRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CustomFragmentRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("fragments") != null && !jsonObj.get("fragments").isJsonNull() && !jsonObj.get("fragments").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `fragments` to be an array in the JSON string but got `%s`", jsonObj.get("fragments").toString()));
      }
      if (jsonObj.get("fragOccurrences") != null && !jsonObj.get("fragOccurrences").isJsonNull()) {
        JsonArray jsonArrayfragOccurrences = jsonObj.getAsJsonArray("fragOccurrences");
        if (jsonArrayfragOccurrences != null) {
          // ensure the json data is an array
          if (!jsonObj.get("fragOccurrences").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `fragOccurrences` to be an array in the JSON string but got `%s`", jsonObj.get("fragOccurrences").toString()));
          }

          // validate the optional field `fragOccurrences` (array)
          for (int i = 0; i < jsonArrayfragOccurrences.size(); i++) {
            FragmentRefRequest.validateJsonElement(jsonArrayfragOccurrences.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CustomFragmentRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CustomFragmentRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CustomFragmentRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CustomFragmentRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CustomFragmentRequest>() {
           @Override
           public void write(JsonWriter out, CustomFragmentRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CustomFragmentRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CustomFragmentRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CustomFragmentRequest
  * @throws IOException if the JSON string is invalid with respect to CustomFragmentRequest
  */
  public static CustomFragmentRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CustomFragmentRequest.class);
  }

 /**
  * Convert an instance of CustomFragmentRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

