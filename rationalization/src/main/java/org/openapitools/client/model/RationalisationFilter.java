/*
 * Exstream Rationalization
 * **For internal use of the product only**
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * RationalisationFilter
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-17T13:53:34.366018029Z[Europe/Lisbon]")
public class RationalisationFilter {
  /**
   * Gets or Sets type
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    MIGRATIONSET("MIGRATIONSET"),
    
    FRAGMENTS("FRAGMENTS");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private List<TypeEnum> type;

  public static final String SERIALIZED_NAME_SEARCH_STRING = "searchString";
  @SerializedName(SERIALIZED_NAME_SEARCH_STRING)
  private String searchString;

  public static final String SERIALIZED_NAME_CASE_SENSITIVE = "caseSensitive";
  @SerializedName(SERIALIZED_NAME_CASE_SENSITIVE)
  private Boolean caseSensitive;

  public static final String SERIALIZED_NAME_CREATED_BY = "createdBy";
  @SerializedName(SERIALIZED_NAME_CREATED_BY)
  private String createdBy;

  public static final String SERIALIZED_NAME_LOCKED_BY = "lockedBy";
  @SerializedName(SERIALIZED_NAME_LOCKED_BY)
  private String lockedBy;

  public static final String SERIALIZED_NAME_UPDATED_BY = "updatedBy";
  @SerializedName(SERIALIZED_NAME_UPDATED_BY)
  private String updatedBy;

  /**
   * Gets or Sets statesList
   */
  @JsonAdapter(StatesListEnum.Adapter.class)
  public enum StatesListEnum {
    DRAFT("DRAFT"),
    
    REVIEW("REVIEW"),
    
    APPROVED("APPROVED"),
    
    REJECTED("REJECTED");

    private String value;

    StatesListEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatesListEnum fromValue(String value) {
      for (StatesListEnum b : StatesListEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatesListEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatesListEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatesListEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatesListEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatesListEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATES_LIST = "statesList";
  @SerializedName(SERIALIZED_NAME_STATES_LIST)
  private List<StatesListEnum> statesList;

  public static final String SERIALIZED_NAME_COMMUNICATION_ID_LIST = "communicationIdList";
  @SerializedName(SERIALIZED_NAME_COMMUNICATION_ID_LIST)
  private List<String> communicationIdList;

  public static final String SERIALIZED_NAME_MIGRATION_SET_ID_LIST = "migrationSetIdList";
  @SerializedName(SERIALIZED_NAME_MIGRATION_SET_ID_LIST)
  private List<String> migrationSetIdList;

  public RationalisationFilter() {
  }

  public RationalisationFilter type(List<TypeEnum> type) {
    this.type = type;
    return this;
  }

  public RationalisationFilter addTypeItem(TypeEnum typeItem) {
    if (this.type == null) {
      this.type = new ArrayList<>();
    }
    this.type.add(typeItem);
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @javax.annotation.Nullable
  public List<TypeEnum> getType() {
    return type;
  }

  public void setType(List<TypeEnum> type) {
    this.type = type;
  }


  public RationalisationFilter searchString(String searchString) {
    this.searchString = searchString;
    return this;
  }

   /**
   * Get searchString
   * @return searchString
  **/
  @javax.annotation.Nullable
  public String getSearchString() {
    return searchString;
  }

  public void setSearchString(String searchString) {
    this.searchString = searchString;
  }


  public RationalisationFilter caseSensitive(Boolean caseSensitive) {
    this.caseSensitive = caseSensitive;
    return this;
  }

   /**
   * Get caseSensitive
   * @return caseSensitive
  **/
  @javax.annotation.Nullable
  public Boolean getCaseSensitive() {
    return caseSensitive;
  }

  public void setCaseSensitive(Boolean caseSensitive) {
    this.caseSensitive = caseSensitive;
  }


  public RationalisationFilter createdBy(String createdBy) {
    this.createdBy = createdBy;
    return this;
  }

   /**
   * Get createdBy
   * @return createdBy
  **/
  @javax.annotation.Nullable
  public String getCreatedBy() {
    return createdBy;
  }

  public void setCreatedBy(String createdBy) {
    this.createdBy = createdBy;
  }


  public RationalisationFilter lockedBy(String lockedBy) {
    this.lockedBy = lockedBy;
    return this;
  }

   /**
   * Get lockedBy
   * @return lockedBy
  **/
  @javax.annotation.Nullable
  public String getLockedBy() {
    return lockedBy;
  }

  public void setLockedBy(String lockedBy) {
    this.lockedBy = lockedBy;
  }


  public RationalisationFilter updatedBy(String updatedBy) {
    this.updatedBy = updatedBy;
    return this;
  }

   /**
   * Get updatedBy
   * @return updatedBy
  **/
  @javax.annotation.Nullable
  public String getUpdatedBy() {
    return updatedBy;
  }

  public void setUpdatedBy(String updatedBy) {
    this.updatedBy = updatedBy;
  }


  public RationalisationFilter statesList(List<StatesListEnum> statesList) {
    this.statesList = statesList;
    return this;
  }

  public RationalisationFilter addStatesListItem(StatesListEnum statesListItem) {
    if (this.statesList == null) {
      this.statesList = new ArrayList<>();
    }
    this.statesList.add(statesListItem);
    return this;
  }

   /**
   * Get statesList
   * @return statesList
  **/
  @javax.annotation.Nullable
  public List<StatesListEnum> getStatesList() {
    return statesList;
  }

  public void setStatesList(List<StatesListEnum> statesList) {
    this.statesList = statesList;
  }


  public RationalisationFilter communicationIdList(List<String> communicationIdList) {
    this.communicationIdList = communicationIdList;
    return this;
  }

  public RationalisationFilter addCommunicationIdListItem(String communicationIdListItem) {
    if (this.communicationIdList == null) {
      this.communicationIdList = new ArrayList<>();
    }
    this.communicationIdList.add(communicationIdListItem);
    return this;
  }

   /**
   * Get communicationIdList
   * @return communicationIdList
  **/
  @javax.annotation.Nullable
  public List<String> getCommunicationIdList() {
    return communicationIdList;
  }

  public void setCommunicationIdList(List<String> communicationIdList) {
    this.communicationIdList = communicationIdList;
  }


  public RationalisationFilter migrationSetIdList(List<String> migrationSetIdList) {
    this.migrationSetIdList = migrationSetIdList;
    return this;
  }

  public RationalisationFilter addMigrationSetIdListItem(String migrationSetIdListItem) {
    if (this.migrationSetIdList == null) {
      this.migrationSetIdList = new ArrayList<>();
    }
    this.migrationSetIdList.add(migrationSetIdListItem);
    return this;
  }

   /**
   * Get migrationSetIdList
   * @return migrationSetIdList
  **/
  @javax.annotation.Nullable
  public List<String> getMigrationSetIdList() {
    return migrationSetIdList;
  }

  public void setMigrationSetIdList(List<String> migrationSetIdList) {
    this.migrationSetIdList = migrationSetIdList;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RationalisationFilter rationalisationFilter = (RationalisationFilter) o;
    return Objects.equals(this.type, rationalisationFilter.type) &&
        Objects.equals(this.searchString, rationalisationFilter.searchString) &&
        Objects.equals(this.caseSensitive, rationalisationFilter.caseSensitive) &&
        Objects.equals(this.createdBy, rationalisationFilter.createdBy) &&
        Objects.equals(this.lockedBy, rationalisationFilter.lockedBy) &&
        Objects.equals(this.updatedBy, rationalisationFilter.updatedBy) &&
        Objects.equals(this.statesList, rationalisationFilter.statesList) &&
        Objects.equals(this.communicationIdList, rationalisationFilter.communicationIdList) &&
        Objects.equals(this.migrationSetIdList, rationalisationFilter.migrationSetIdList);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, searchString, caseSensitive, createdBy, lockedBy, updatedBy, statesList, communicationIdList, migrationSetIdList);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RationalisationFilter {\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    searchString: ").append(toIndentedString(searchString)).append("\n");
    sb.append("    caseSensitive: ").append(toIndentedString(caseSensitive)).append("\n");
    sb.append("    createdBy: ").append(toIndentedString(createdBy)).append("\n");
    sb.append("    lockedBy: ").append(toIndentedString(lockedBy)).append("\n");
    sb.append("    updatedBy: ").append(toIndentedString(updatedBy)).append("\n");
    sb.append("    statesList: ").append(toIndentedString(statesList)).append("\n");
    sb.append("    communicationIdList: ").append(toIndentedString(communicationIdList)).append("\n");
    sb.append("    migrationSetIdList: ").append(toIndentedString(migrationSetIdList)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("type");
    openapiFields.add("searchString");
    openapiFields.add("caseSensitive");
    openapiFields.add("createdBy");
    openapiFields.add("lockedBy");
    openapiFields.add("updatedBy");
    openapiFields.add("statesList");
    openapiFields.add("communicationIdList");
    openapiFields.add("migrationSetIdList");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to RationalisationFilter
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RationalisationFilter.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RationalisationFilter is not found in the empty JSON string", RationalisationFilter.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RationalisationFilter.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RationalisationFilter` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull() && !jsonObj.get("type").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be an array in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if ((jsonObj.get("searchString") != null && !jsonObj.get("searchString").isJsonNull()) && !jsonObj.get("searchString").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `searchString` to be a primitive type in the JSON string but got `%s`", jsonObj.get("searchString").toString()));
      }
      if ((jsonObj.get("createdBy") != null && !jsonObj.get("createdBy").isJsonNull()) && !jsonObj.get("createdBy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createdBy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createdBy").toString()));
      }
      if ((jsonObj.get("lockedBy") != null && !jsonObj.get("lockedBy").isJsonNull()) && !jsonObj.get("lockedBy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lockedBy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lockedBy").toString()));
      }
      if ((jsonObj.get("updatedBy") != null && !jsonObj.get("updatedBy").isJsonNull()) && !jsonObj.get("updatedBy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updatedBy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updatedBy").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("statesList") != null && !jsonObj.get("statesList").isJsonNull() && !jsonObj.get("statesList").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `statesList` to be an array in the JSON string but got `%s`", jsonObj.get("statesList").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("communicationIdList") != null && !jsonObj.get("communicationIdList").isJsonNull() && !jsonObj.get("communicationIdList").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `communicationIdList` to be an array in the JSON string but got `%s`", jsonObj.get("communicationIdList").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("migrationSetIdList") != null && !jsonObj.get("migrationSetIdList").isJsonNull() && !jsonObj.get("migrationSetIdList").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `migrationSetIdList` to be an array in the JSON string but got `%s`", jsonObj.get("migrationSetIdList").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RationalisationFilter.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RationalisationFilter' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RationalisationFilter> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RationalisationFilter.class));

       return (TypeAdapter<T>) new TypeAdapter<RationalisationFilter>() {
           @Override
           public void write(JsonWriter out, RationalisationFilter value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RationalisationFilter read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of RationalisationFilter given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of RationalisationFilter
  * @throws IOException if the JSON string is invalid with respect to RationalisationFilter
  */
  public static RationalisationFilter fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RationalisationFilter.class);
  }

 /**
  * Convert an instance of RationalisationFilter to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

