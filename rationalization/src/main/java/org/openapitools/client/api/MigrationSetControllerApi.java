/*
 * Exstream Rationalization
 * **For internal use of the product only**
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.MigrationSetLinkRequest;
import org.openapitools.client.model.MigrationSetPatchRequest;
import org.openapitools.client.model.MigrationSetRequest;
import org.openapitools.client.model.RationalisationFilter;
import org.openapitools.client.model.RationalizationResponseObject;
import java.util.UUID;
import org.openapitools.client.model.UpdateRationalizationActivityRequest;
import org.openapitools.client.model.WorkflowRequestBody;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class MigrationSetControllerApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public MigrationSetControllerApi() {
        this(Configuration.getDefaultApiClient());
    }

    public MigrationSetControllerApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for applyPatchForMigrationSet
     * @param domainId  (required)
     * @param msId  (required)
     * @param migrationSetPatchRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call applyPatchForMigrationSetCall(String domainId, UUID msId, MigrationSetPatchRequest migrationSetPatchRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = migrationSetPatchRequest;

        // create path and map variables
        String localVarPath = "/api/v1/migrationset/{domainId}/{msId}"
            .replace("{" + "domainId" + "}", localVarApiClient.escapeString(domainId.toString()))
            .replace("{" + "msId" + "}", localVarApiClient.escapeString(msId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call applyPatchForMigrationSetValidateBeforeCall(String domainId, UUID msId, MigrationSetPatchRequest migrationSetPatchRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'domainId' is set
        if (domainId == null) {
            throw new ApiException("Missing the required parameter 'domainId' when calling applyPatchForMigrationSet(Async)");
        }

        // verify the required parameter 'msId' is set
        if (msId == null) {
            throw new ApiException("Missing the required parameter 'msId' when calling applyPatchForMigrationSet(Async)");
        }

        // verify the required parameter 'migrationSetPatchRequest' is set
        if (migrationSetPatchRequest == null) {
            throw new ApiException("Missing the required parameter 'migrationSetPatchRequest' when calling applyPatchForMigrationSet(Async)");
        }

        return applyPatchForMigrationSetCall(domainId, msId, migrationSetPatchRequest, _callback);

    }

    /**
     * 
     * 
     * @param domainId  (required)
     * @param msId  (required)
     * @param migrationSetPatchRequest  (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public String applyPatchForMigrationSet(String domainId, UUID msId, MigrationSetPatchRequest migrationSetPatchRequest) throws ApiException {
        ApiResponse<String> localVarResp = applyPatchForMigrationSetWithHttpInfo(domainId, msId, migrationSetPatchRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param domainId  (required)
     * @param msId  (required)
     * @param migrationSetPatchRequest  (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> applyPatchForMigrationSetWithHttpInfo(String domainId, UUID msId, MigrationSetPatchRequest migrationSetPatchRequest) throws ApiException {
        okhttp3.Call localVarCall = applyPatchForMigrationSetValidateBeforeCall(domainId, msId, migrationSetPatchRequest, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param domainId  (required)
     * @param msId  (required)
     * @param migrationSetPatchRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call applyPatchForMigrationSetAsync(String domainId, UUID msId, MigrationSetPatchRequest migrationSetPatchRequest, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = applyPatchForMigrationSetValidateBeforeCall(domainId, msId, migrationSetPatchRequest, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createLinkBtwRatAndDasMigrationSet
     * @param domain  (required)
     * @param migrationSetLinkRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createLinkBtwRatAndDasMigrationSetCall(String domain, MigrationSetLinkRequest migrationSetLinkRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = migrationSetLinkRequest;

        // create path and map variables
        String localVarPath = "/api/v1/migrationset/{domain}/links"
            .replace("{" + "domain" + "}", localVarApiClient.escapeString(domain.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createLinkBtwRatAndDasMigrationSetValidateBeforeCall(String domain, MigrationSetLinkRequest migrationSetLinkRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling createLinkBtwRatAndDasMigrationSet(Async)");
        }

        // verify the required parameter 'migrationSetLinkRequest' is set
        if (migrationSetLinkRequest == null) {
            throw new ApiException("Missing the required parameter 'migrationSetLinkRequest' when calling createLinkBtwRatAndDasMigrationSet(Async)");
        }

        return createLinkBtwRatAndDasMigrationSetCall(domain, migrationSetLinkRequest, _callback);

    }

    /**
     * 
     * 
     * @param domain  (required)
     * @param migrationSetLinkRequest  (required)
     * @return RationalizationResponseObject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public RationalizationResponseObject createLinkBtwRatAndDasMigrationSet(String domain, MigrationSetLinkRequest migrationSetLinkRequest) throws ApiException {
        ApiResponse<RationalizationResponseObject> localVarResp = createLinkBtwRatAndDasMigrationSetWithHttpInfo(domain, migrationSetLinkRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param domain  (required)
     * @param migrationSetLinkRequest  (required)
     * @return ApiResponse&lt;RationalizationResponseObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RationalizationResponseObject> createLinkBtwRatAndDasMigrationSetWithHttpInfo(String domain, MigrationSetLinkRequest migrationSetLinkRequest) throws ApiException {
        okhttp3.Call localVarCall = createLinkBtwRatAndDasMigrationSetValidateBeforeCall(domain, migrationSetLinkRequest, null);
        Type localVarReturnType = new TypeToken<RationalizationResponseObject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param domain  (required)
     * @param migrationSetLinkRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createLinkBtwRatAndDasMigrationSetAsync(String domain, MigrationSetLinkRequest migrationSetLinkRequest, final ApiCallback<RationalizationResponseObject> _callback) throws ApiException {

        okhttp3.Call localVarCall = createLinkBtwRatAndDasMigrationSetValidateBeforeCall(domain, migrationSetLinkRequest, _callback);
        Type localVarReturnType = new TypeToken<RationalizationResponseObject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createMigrationSet
     * @param domain  (required)
     * @param migrationSetRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createMigrationSetCall(String domain, MigrationSetRequest migrationSetRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = migrationSetRequest;

        // create path and map variables
        String localVarPath = "/api/v1/migrationset/{domain}"
            .replace("{" + "domain" + "}", localVarApiClient.escapeString(domain.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createMigrationSetValidateBeforeCall(String domain, MigrationSetRequest migrationSetRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling createMigrationSet(Async)");
        }

        // verify the required parameter 'migrationSetRequest' is set
        if (migrationSetRequest == null) {
            throw new ApiException("Missing the required parameter 'migrationSetRequest' when calling createMigrationSet(Async)");
        }

        return createMigrationSetCall(domain, migrationSetRequest, _callback);

    }

    /**
     * 
     * 
     * @param domain  (required)
     * @param migrationSetRequest  (required)
     * @return RationalizationResponseObject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public RationalizationResponseObject createMigrationSet(String domain, MigrationSetRequest migrationSetRequest) throws ApiException {
        ApiResponse<RationalizationResponseObject> localVarResp = createMigrationSetWithHttpInfo(domain, migrationSetRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param domain  (required)
     * @param migrationSetRequest  (required)
     * @return ApiResponse&lt;RationalizationResponseObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RationalizationResponseObject> createMigrationSetWithHttpInfo(String domain, MigrationSetRequest migrationSetRequest) throws ApiException {
        okhttp3.Call localVarCall = createMigrationSetValidateBeforeCall(domain, migrationSetRequest, null);
        Type localVarReturnType = new TypeToken<RationalizationResponseObject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param domain  (required)
     * @param migrationSetRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createMigrationSetAsync(String domain, MigrationSetRequest migrationSetRequest, final ApiCallback<RationalizationResponseObject> _callback) throws ApiException {

        okhttp3.Call localVarCall = createMigrationSetValidateBeforeCall(domain, migrationSetRequest, _callback);
        Type localVarReturnType = new TypeToken<RationalizationResponseObject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createRationalizationActivity
     * @param domain  (required)
     * @param migrationType  (optional, default to CONTENT)
     * @param updateRationalizationActivityRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createRationalizationActivityCall(String domain, String migrationType, UpdateRationalizationActivityRequest updateRationalizationActivityRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateRationalizationActivityRequest;

        // create path and map variables
        String localVarPath = "/api/v1/migrationset/{domain}/tmpfile"
            .replace("{" + "domain" + "}", localVarApiClient.escapeString(domain.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (migrationType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("migrationType", migrationType));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createRationalizationActivityValidateBeforeCall(String domain, String migrationType, UpdateRationalizationActivityRequest updateRationalizationActivityRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling createRationalizationActivity(Async)");
        }

        return createRationalizationActivityCall(domain, migrationType, updateRationalizationActivityRequest, _callback);

    }

    /**
     * 
     * 
     * @param domain  (required)
     * @param migrationType  (optional, default to CONTENT)
     * @param updateRationalizationActivityRequest  (optional)
     * @return RationalizationResponseObject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public RationalizationResponseObject createRationalizationActivity(String domain, String migrationType, UpdateRationalizationActivityRequest updateRationalizationActivityRequest) throws ApiException {
        ApiResponse<RationalizationResponseObject> localVarResp = createRationalizationActivityWithHttpInfo(domain, migrationType, updateRationalizationActivityRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param domain  (required)
     * @param migrationType  (optional, default to CONTENT)
     * @param updateRationalizationActivityRequest  (optional)
     * @return ApiResponse&lt;RationalizationResponseObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RationalizationResponseObject> createRationalizationActivityWithHttpInfo(String domain, String migrationType, UpdateRationalizationActivityRequest updateRationalizationActivityRequest) throws ApiException {
        okhttp3.Call localVarCall = createRationalizationActivityValidateBeforeCall(domain, migrationType, updateRationalizationActivityRequest, null);
        Type localVarReturnType = new TypeToken<RationalizationResponseObject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param domain  (required)
     * @param migrationType  (optional, default to CONTENT)
     * @param updateRationalizationActivityRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createRationalizationActivityAsync(String domain, String migrationType, UpdateRationalizationActivityRequest updateRationalizationActivityRequest, final ApiCallback<RationalizationResponseObject> _callback) throws ApiException {

        okhttp3.Call localVarCall = createRationalizationActivityValidateBeforeCall(domain, migrationType, updateRationalizationActivityRequest, _callback);
        Type localVarReturnType = new TypeToken<RationalizationResponseObject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteMigrationSet
     * @param domainId  (required)
     * @param msId  (required)
     * @param updateOnly  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteMigrationSetCall(String domainId, UUID msId, Boolean updateOnly, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/migrationset/{domainId}/{msId}/{updateOnly}"
            .replace("{" + "domainId" + "}", localVarApiClient.escapeString(domainId.toString()))
            .replace("{" + "msId" + "}", localVarApiClient.escapeString(msId.toString()))
            .replace("{" + "updateOnly" + "}", localVarApiClient.escapeString(updateOnly.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteMigrationSetValidateBeforeCall(String domainId, UUID msId, Boolean updateOnly, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'domainId' is set
        if (domainId == null) {
            throw new ApiException("Missing the required parameter 'domainId' when calling deleteMigrationSet(Async)");
        }

        // verify the required parameter 'msId' is set
        if (msId == null) {
            throw new ApiException("Missing the required parameter 'msId' when calling deleteMigrationSet(Async)");
        }

        // verify the required parameter 'updateOnly' is set
        if (updateOnly == null) {
            throw new ApiException("Missing the required parameter 'updateOnly' when calling deleteMigrationSet(Async)");
        }

        return deleteMigrationSetCall(domainId, msId, updateOnly, _callback);

    }

    /**
     * 
     * 
     * @param domainId  (required)
     * @param msId  (required)
     * @param updateOnly  (required)
     * @return RationalizationResponseObject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public RationalizationResponseObject deleteMigrationSet(String domainId, UUID msId, Boolean updateOnly) throws ApiException {
        ApiResponse<RationalizationResponseObject> localVarResp = deleteMigrationSetWithHttpInfo(domainId, msId, updateOnly);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param domainId  (required)
     * @param msId  (required)
     * @param updateOnly  (required)
     * @return ApiResponse&lt;RationalizationResponseObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RationalizationResponseObject> deleteMigrationSetWithHttpInfo(String domainId, UUID msId, Boolean updateOnly) throws ApiException {
        okhttp3.Call localVarCall = deleteMigrationSetValidateBeforeCall(domainId, msId, updateOnly, null);
        Type localVarReturnType = new TypeToken<RationalizationResponseObject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param domainId  (required)
     * @param msId  (required)
     * @param updateOnly  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteMigrationSetAsync(String domainId, UUID msId, Boolean updateOnly, final ApiCallback<RationalizationResponseObject> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteMigrationSetValidateBeforeCall(domainId, msId, updateOnly, _callback);
        Type localVarReturnType = new TypeToken<RationalizationResponseObject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCanDeleteMigrationSet
     * @param domain  (required)
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCanDeleteMigrationSetCall(String domain, UUID id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/migrationset/{domain}/{id}/deletion-eligibility"
            .replace("{" + "domain" + "}", localVarApiClient.escapeString(domain.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCanDeleteMigrationSetValidateBeforeCall(String domain, UUID id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling getCanDeleteMigrationSet(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getCanDeleteMigrationSet(Async)");
        }

        return getCanDeleteMigrationSetCall(domain, id, _callback);

    }

    /**
     * 
     * 
     * @param domain  (required)
     * @param id  (required)
     * @return RationalizationResponseObject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public RationalizationResponseObject getCanDeleteMigrationSet(String domain, UUID id) throws ApiException {
        ApiResponse<RationalizationResponseObject> localVarResp = getCanDeleteMigrationSetWithHttpInfo(domain, id);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param domain  (required)
     * @param id  (required)
     * @return ApiResponse&lt;RationalizationResponseObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RationalizationResponseObject> getCanDeleteMigrationSetWithHttpInfo(String domain, UUID id) throws ApiException {
        okhttp3.Call localVarCall = getCanDeleteMigrationSetValidateBeforeCall(domain, id, null);
        Type localVarReturnType = new TypeToken<RationalizationResponseObject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param domain  (required)
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCanDeleteMigrationSetAsync(String domain, UUID id, final ApiCallback<RationalizationResponseObject> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCanDeleteMigrationSetValidateBeforeCall(domain, id, _callback);
        Type localVarReturnType = new TypeToken<RationalizationResponseObject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getFragmentReference
     * @param domain  (required)
     * @param msId  (required)
     * @param varId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFragmentReferenceCall(String domain, UUID msId, UUID varId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/migrationset/{domain}/fragments/refernce/{msId}/{varId}"
            .replace("{" + "domain" + "}", localVarApiClient.escapeString(domain.toString()))
            .replace("{" + "msId" + "}", localVarApiClient.escapeString(msId.toString()))
            .replace("{" + "varId" + "}", localVarApiClient.escapeString(varId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFragmentReferenceValidateBeforeCall(String domain, UUID msId, UUID varId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling getFragmentReference(Async)");
        }

        // verify the required parameter 'msId' is set
        if (msId == null) {
            throw new ApiException("Missing the required parameter 'msId' when calling getFragmentReference(Async)");
        }

        // verify the required parameter 'varId' is set
        if (varId == null) {
            throw new ApiException("Missing the required parameter 'varId' when calling getFragmentReference(Async)");
        }

        return getFragmentReferenceCall(domain, msId, varId, _callback);

    }

    /**
     * 
     * 
     * @param domain  (required)
     * @param msId  (required)
     * @param varId  (required)
     * @return RationalizationResponseObject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public RationalizationResponseObject getFragmentReference(String domain, UUID msId, UUID varId) throws ApiException {
        ApiResponse<RationalizationResponseObject> localVarResp = getFragmentReferenceWithHttpInfo(domain, msId, varId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param domain  (required)
     * @param msId  (required)
     * @param varId  (required)
     * @return ApiResponse&lt;RationalizationResponseObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RationalizationResponseObject> getFragmentReferenceWithHttpInfo(String domain, UUID msId, UUID varId) throws ApiException {
        okhttp3.Call localVarCall = getFragmentReferenceValidateBeforeCall(domain, msId, varId, null);
        Type localVarReturnType = new TypeToken<RationalizationResponseObject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param domain  (required)
     * @param msId  (required)
     * @param varId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFragmentReferenceAsync(String domain, UUID msId, UUID varId, final ApiCallback<RationalizationResponseObject> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFragmentReferenceValidateBeforeCall(domain, msId, varId, _callback);
        Type localVarReturnType = new TypeToken<RationalizationResponseObject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getFragmentsOfMigrationSet
     * @param domain  (required)
     * @param msId  (required)
     * @param offset  (optional, default to 0)
     * @param limit  (optional, default to 10)
     * @param orderby  (optional)
     * @param filter  (optional)
     * @param hidden  (optional, default to false)
     * @param references  (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFragmentsOfMigrationSetCall(String domain, UUID msId, Integer offset, Integer limit, Object orderby, RationalisationFilter filter, Boolean hidden, Boolean references, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/migrationset/fragments/{domain}/{msId}"
            .replace("{" + "domain" + "}", localVarApiClient.escapeString(domain.toString()))
            .replace("{" + "msId" + "}", localVarApiClient.escapeString(msId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (orderby != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("orderby", orderby));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (hidden != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("hidden", hidden));
        }

        if (references != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("references", references));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFragmentsOfMigrationSetValidateBeforeCall(String domain, UUID msId, Integer offset, Integer limit, Object orderby, RationalisationFilter filter, Boolean hidden, Boolean references, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling getFragmentsOfMigrationSet(Async)");
        }

        // verify the required parameter 'msId' is set
        if (msId == null) {
            throw new ApiException("Missing the required parameter 'msId' when calling getFragmentsOfMigrationSet(Async)");
        }

        return getFragmentsOfMigrationSetCall(domain, msId, offset, limit, orderby, filter, hidden, references, _callback);

    }

    /**
     * 
     * 
     * @param domain  (required)
     * @param msId  (required)
     * @param offset  (optional, default to 0)
     * @param limit  (optional, default to 10)
     * @param orderby  (optional)
     * @param filter  (optional)
     * @param hidden  (optional, default to false)
     * @param references  (optional, default to false)
     * @return RationalizationResponseObject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public RationalizationResponseObject getFragmentsOfMigrationSet(String domain, UUID msId, Integer offset, Integer limit, Object orderby, RationalisationFilter filter, Boolean hidden, Boolean references) throws ApiException {
        ApiResponse<RationalizationResponseObject> localVarResp = getFragmentsOfMigrationSetWithHttpInfo(domain, msId, offset, limit, orderby, filter, hidden, references);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param domain  (required)
     * @param msId  (required)
     * @param offset  (optional, default to 0)
     * @param limit  (optional, default to 10)
     * @param orderby  (optional)
     * @param filter  (optional)
     * @param hidden  (optional, default to false)
     * @param references  (optional, default to false)
     * @return ApiResponse&lt;RationalizationResponseObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RationalizationResponseObject> getFragmentsOfMigrationSetWithHttpInfo(String domain, UUID msId, Integer offset, Integer limit, Object orderby, RationalisationFilter filter, Boolean hidden, Boolean references) throws ApiException {
        okhttp3.Call localVarCall = getFragmentsOfMigrationSetValidateBeforeCall(domain, msId, offset, limit, orderby, filter, hidden, references, null);
        Type localVarReturnType = new TypeToken<RationalizationResponseObject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param domain  (required)
     * @param msId  (required)
     * @param offset  (optional, default to 0)
     * @param limit  (optional, default to 10)
     * @param orderby  (optional)
     * @param filter  (optional)
     * @param hidden  (optional, default to false)
     * @param references  (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFragmentsOfMigrationSetAsync(String domain, UUID msId, Integer offset, Integer limit, Object orderby, RationalisationFilter filter, Boolean hidden, Boolean references, final ApiCallback<RationalizationResponseObject> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFragmentsOfMigrationSetValidateBeforeCall(domain, msId, offset, limit, orderby, filter, hidden, references, _callback);
        Type localVarReturnType = new TypeToken<RationalizationResponseObject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getFragmentsOfTemplateMigrationSet
     * @param domain  (required)
     * @param msId  (required)
     * @param offset  (optional, default to 0)
     * @param limit  (optional, default to 10)
     * @param orderby  (optional)
     * @param filter  (optional)
     * @param hidden  (optional, default to false)
     * @param references  (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFragmentsOfTemplateMigrationSetCall(String domain, UUID msId, Integer offset, Integer limit, Object orderby, RationalisationFilter filter, Boolean hidden, Boolean references, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/migrationset/template/fragments/{domain}/{msId}"
            .replace("{" + "domain" + "}", localVarApiClient.escapeString(domain.toString()))
            .replace("{" + "msId" + "}", localVarApiClient.escapeString(msId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (orderby != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("orderby", orderby));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (hidden != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("hidden", hidden));
        }

        if (references != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("references", references));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFragmentsOfTemplateMigrationSetValidateBeforeCall(String domain, UUID msId, Integer offset, Integer limit, Object orderby, RationalisationFilter filter, Boolean hidden, Boolean references, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling getFragmentsOfTemplateMigrationSet(Async)");
        }

        // verify the required parameter 'msId' is set
        if (msId == null) {
            throw new ApiException("Missing the required parameter 'msId' when calling getFragmentsOfTemplateMigrationSet(Async)");
        }

        return getFragmentsOfTemplateMigrationSetCall(domain, msId, offset, limit, orderby, filter, hidden, references, _callback);

    }

    /**
     * 
     * 
     * @param domain  (required)
     * @param msId  (required)
     * @param offset  (optional, default to 0)
     * @param limit  (optional, default to 10)
     * @param orderby  (optional)
     * @param filter  (optional)
     * @param hidden  (optional, default to false)
     * @param references  (optional, default to false)
     * @return RationalizationResponseObject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public RationalizationResponseObject getFragmentsOfTemplateMigrationSet(String domain, UUID msId, Integer offset, Integer limit, Object orderby, RationalisationFilter filter, Boolean hidden, Boolean references) throws ApiException {
        ApiResponse<RationalizationResponseObject> localVarResp = getFragmentsOfTemplateMigrationSetWithHttpInfo(domain, msId, offset, limit, orderby, filter, hidden, references);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param domain  (required)
     * @param msId  (required)
     * @param offset  (optional, default to 0)
     * @param limit  (optional, default to 10)
     * @param orderby  (optional)
     * @param filter  (optional)
     * @param hidden  (optional, default to false)
     * @param references  (optional, default to false)
     * @return ApiResponse&lt;RationalizationResponseObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RationalizationResponseObject> getFragmentsOfTemplateMigrationSetWithHttpInfo(String domain, UUID msId, Integer offset, Integer limit, Object orderby, RationalisationFilter filter, Boolean hidden, Boolean references) throws ApiException {
        okhttp3.Call localVarCall = getFragmentsOfTemplateMigrationSetValidateBeforeCall(domain, msId, offset, limit, orderby, filter, hidden, references, null);
        Type localVarReturnType = new TypeToken<RationalizationResponseObject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param domain  (required)
     * @param msId  (required)
     * @param offset  (optional, default to 0)
     * @param limit  (optional, default to 10)
     * @param orderby  (optional)
     * @param filter  (optional)
     * @param hidden  (optional, default to false)
     * @param references  (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFragmentsOfTemplateMigrationSetAsync(String domain, UUID msId, Integer offset, Integer limit, Object orderby, RationalisationFilter filter, Boolean hidden, Boolean references, final ApiCallback<RationalizationResponseObject> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFragmentsOfTemplateMigrationSetValidateBeforeCall(domain, msId, offset, limit, orderby, filter, hidden, references, _callback);
        Type localVarReturnType = new TypeToken<RationalizationResponseObject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getFragmentsReferences
     * @param domain  (required)
     * @param fragmentId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFragmentsReferencesCall(String domain, UUID fragmentId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/migrationset/{domain}/fragment/references/{fragmentId}"
            .replace("{" + "domain" + "}", localVarApiClient.escapeString(domain.toString()))
            .replace("{" + "fragmentId" + "}", localVarApiClient.escapeString(fragmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFragmentsReferencesValidateBeforeCall(String domain, UUID fragmentId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling getFragmentsReferences(Async)");
        }

        // verify the required parameter 'fragmentId' is set
        if (fragmentId == null) {
            throw new ApiException("Missing the required parameter 'fragmentId' when calling getFragmentsReferences(Async)");
        }

        return getFragmentsReferencesCall(domain, fragmentId, _callback);

    }

    /**
     * 
     * 
     * @param domain  (required)
     * @param fragmentId  (required)
     * @return RationalizationResponseObject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public RationalizationResponseObject getFragmentsReferences(String domain, UUID fragmentId) throws ApiException {
        ApiResponse<RationalizationResponseObject> localVarResp = getFragmentsReferencesWithHttpInfo(domain, fragmentId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param domain  (required)
     * @param fragmentId  (required)
     * @return ApiResponse&lt;RationalizationResponseObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RationalizationResponseObject> getFragmentsReferencesWithHttpInfo(String domain, UUID fragmentId) throws ApiException {
        okhttp3.Call localVarCall = getFragmentsReferencesValidateBeforeCall(domain, fragmentId, null);
        Type localVarReturnType = new TypeToken<RationalizationResponseObject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param domain  (required)
     * @param fragmentId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFragmentsReferencesAsync(String domain, UUID fragmentId, final ApiCallback<RationalizationResponseObject> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFragmentsReferencesValidateBeforeCall(domain, fragmentId, _callback);
        Type localVarReturnType = new TypeToken<RationalizationResponseObject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMigrationSet2
     * @param domainId  (required)
     * @param msId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMigrationSet2Call(String domainId, UUID msId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/migrationset/{domainId}/{msId}"
            .replace("{" + "domainId" + "}", localVarApiClient.escapeString(domainId.toString()))
            .replace("{" + "msId" + "}", localVarApiClient.escapeString(msId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMigrationSet2ValidateBeforeCall(String domainId, UUID msId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'domainId' is set
        if (domainId == null) {
            throw new ApiException("Missing the required parameter 'domainId' when calling getMigrationSet2(Async)");
        }

        // verify the required parameter 'msId' is set
        if (msId == null) {
            throw new ApiException("Missing the required parameter 'msId' when calling getMigrationSet2(Async)");
        }

        return getMigrationSet2Call(domainId, msId, _callback);

    }

    /**
     * 
     * 
     * @param domainId  (required)
     * @param msId  (required)
     * @return RationalizationResponseObject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public RationalizationResponseObject getMigrationSet2(String domainId, UUID msId) throws ApiException {
        ApiResponse<RationalizationResponseObject> localVarResp = getMigrationSet2WithHttpInfo(domainId, msId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param domainId  (required)
     * @param msId  (required)
     * @return ApiResponse&lt;RationalizationResponseObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RationalizationResponseObject> getMigrationSet2WithHttpInfo(String domainId, UUID msId) throws ApiException {
        okhttp3.Call localVarCall = getMigrationSet2ValidateBeforeCall(domainId, msId, null);
        Type localVarReturnType = new TypeToken<RationalizationResponseObject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param domainId  (required)
     * @param msId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMigrationSet2Async(String domainId, UUID msId, final ApiCallback<RationalizationResponseObject> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMigrationSet2ValidateBeforeCall(domainId, msId, _callback);
        Type localVarReturnType = new TypeToken<RationalizationResponseObject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMigrationSetLinks
     * @param domain  (required)
     * @param msId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMigrationSetLinksCall(String domain, UUID msId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/migrationset/{domain}/links/{msId}"
            .replace("{" + "domain" + "}", localVarApiClient.escapeString(domain.toString()))
            .replace("{" + "msId" + "}", localVarApiClient.escapeString(msId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMigrationSetLinksValidateBeforeCall(String domain, UUID msId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling getMigrationSetLinks(Async)");
        }

        // verify the required parameter 'msId' is set
        if (msId == null) {
            throw new ApiException("Missing the required parameter 'msId' when calling getMigrationSetLinks(Async)");
        }

        return getMigrationSetLinksCall(domain, msId, _callback);

    }

    /**
     * 
     * 
     * @param domain  (required)
     * @param msId  (required)
     * @return RationalizationResponseObject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public RationalizationResponseObject getMigrationSetLinks(String domain, UUID msId) throws ApiException {
        ApiResponse<RationalizationResponseObject> localVarResp = getMigrationSetLinksWithHttpInfo(domain, msId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param domain  (required)
     * @param msId  (required)
     * @return ApiResponse&lt;RationalizationResponseObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RationalizationResponseObject> getMigrationSetLinksWithHttpInfo(String domain, UUID msId) throws ApiException {
        okhttp3.Call localVarCall = getMigrationSetLinksValidateBeforeCall(domain, msId, null);
        Type localVarReturnType = new TypeToken<RationalizationResponseObject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param domain  (required)
     * @param msId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMigrationSetLinksAsync(String domain, UUID msId, final ApiCallback<RationalizationResponseObject> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMigrationSetLinksValidateBeforeCall(domain, msId, _callback);
        Type localVarReturnType = new TypeToken<RationalizationResponseObject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMigrationSets
     * @param domain  (required)
     * @param offset  (optional, default to 0)
     * @param limit  (optional, default to 2147483647)
     * @param orderby  (optional)
     * @param filter  (optional)
     * @param hidden  (optional, default to false)
     * @param latestversion  (optional, default to false)
     * @param checkIfApproved  (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMigrationSetsCall(String domain, Integer offset, Integer limit, Object orderby, RationalisationFilter filter, Boolean hidden, Boolean latestversion, Boolean checkIfApproved, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/migrationset/{domain}"
            .replace("{" + "domain" + "}", localVarApiClient.escapeString(domain.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (orderby != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("orderby", orderby));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (hidden != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("hidden", hidden));
        }

        if (latestversion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("latestversion", latestversion));
        }

        if (checkIfApproved != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("checkIfApproved", checkIfApproved));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMigrationSetsValidateBeforeCall(String domain, Integer offset, Integer limit, Object orderby, RationalisationFilter filter, Boolean hidden, Boolean latestversion, Boolean checkIfApproved, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling getMigrationSets(Async)");
        }

        return getMigrationSetsCall(domain, offset, limit, orderby, filter, hidden, latestversion, checkIfApproved, _callback);

    }

    /**
     * 
     * 
     * @param domain  (required)
     * @param offset  (optional, default to 0)
     * @param limit  (optional, default to 2147483647)
     * @param orderby  (optional)
     * @param filter  (optional)
     * @param hidden  (optional, default to false)
     * @param latestversion  (optional, default to false)
     * @param checkIfApproved  (optional, default to false)
     * @return RationalizationResponseObject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public RationalizationResponseObject getMigrationSets(String domain, Integer offset, Integer limit, Object orderby, RationalisationFilter filter, Boolean hidden, Boolean latestversion, Boolean checkIfApproved) throws ApiException {
        ApiResponse<RationalizationResponseObject> localVarResp = getMigrationSetsWithHttpInfo(domain, offset, limit, orderby, filter, hidden, latestversion, checkIfApproved);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param domain  (required)
     * @param offset  (optional, default to 0)
     * @param limit  (optional, default to 2147483647)
     * @param orderby  (optional)
     * @param filter  (optional)
     * @param hidden  (optional, default to false)
     * @param latestversion  (optional, default to false)
     * @param checkIfApproved  (optional, default to false)
     * @return ApiResponse&lt;RationalizationResponseObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RationalizationResponseObject> getMigrationSetsWithHttpInfo(String domain, Integer offset, Integer limit, Object orderby, RationalisationFilter filter, Boolean hidden, Boolean latestversion, Boolean checkIfApproved) throws ApiException {
        okhttp3.Call localVarCall = getMigrationSetsValidateBeforeCall(domain, offset, limit, orderby, filter, hidden, latestversion, checkIfApproved, null);
        Type localVarReturnType = new TypeToken<RationalizationResponseObject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param domain  (required)
     * @param offset  (optional, default to 0)
     * @param limit  (optional, default to 2147483647)
     * @param orderby  (optional)
     * @param filter  (optional)
     * @param hidden  (optional, default to false)
     * @param latestversion  (optional, default to false)
     * @param checkIfApproved  (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMigrationSetsAsync(String domain, Integer offset, Integer limit, Object orderby, RationalisationFilter filter, Boolean hidden, Boolean latestversion, Boolean checkIfApproved, final ApiCallback<RationalizationResponseObject> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMigrationSetsValidateBeforeCall(domain, offset, limit, orderby, filter, hidden, latestversion, checkIfApproved, _callback);
        Type localVarReturnType = new TypeToken<RationalizationResponseObject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPdfFragments
     * @param domain  (required)
     * @param msId  (required)
     * @param pdfid  (required)
     * @param pageno  (optional, default to 0)
     * @param pagecount  (optional, default to 0)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPdfFragmentsCall(String domain, UUID msId, UUID pdfid, Integer pageno, Integer pagecount, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/migrationset/{domain}/fragments/pdf/{msId}"
            .replace("{" + "domain" + "}", localVarApiClient.escapeString(domain.toString()))
            .replace("{" + "msId" + "}", localVarApiClient.escapeString(msId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pdfid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pdfid", pdfid));
        }

        if (pageno != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageno", pageno));
        }

        if (pagecount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagecount", pagecount));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPdfFragmentsValidateBeforeCall(String domain, UUID msId, UUID pdfid, Integer pageno, Integer pagecount, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling getPdfFragments(Async)");
        }

        // verify the required parameter 'msId' is set
        if (msId == null) {
            throw new ApiException("Missing the required parameter 'msId' when calling getPdfFragments(Async)");
        }

        // verify the required parameter 'pdfid' is set
        if (pdfid == null) {
            throw new ApiException("Missing the required parameter 'pdfid' when calling getPdfFragments(Async)");
        }

        return getPdfFragmentsCall(domain, msId, pdfid, pageno, pagecount, _callback);

    }

    /**
     * 
     * 
     * @param domain  (required)
     * @param msId  (required)
     * @param pdfid  (required)
     * @param pageno  (optional, default to 0)
     * @param pagecount  (optional, default to 0)
     * @return RationalizationResponseObject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public RationalizationResponseObject getPdfFragments(String domain, UUID msId, UUID pdfid, Integer pageno, Integer pagecount) throws ApiException {
        ApiResponse<RationalizationResponseObject> localVarResp = getPdfFragmentsWithHttpInfo(domain, msId, pdfid, pageno, pagecount);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param domain  (required)
     * @param msId  (required)
     * @param pdfid  (required)
     * @param pageno  (optional, default to 0)
     * @param pagecount  (optional, default to 0)
     * @return ApiResponse&lt;RationalizationResponseObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RationalizationResponseObject> getPdfFragmentsWithHttpInfo(String domain, UUID msId, UUID pdfid, Integer pageno, Integer pagecount) throws ApiException {
        okhttp3.Call localVarCall = getPdfFragmentsValidateBeforeCall(domain, msId, pdfid, pageno, pagecount, null);
        Type localVarReturnType = new TypeToken<RationalizationResponseObject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param domain  (required)
     * @param msId  (required)
     * @param pdfid  (required)
     * @param pageno  (optional, default to 0)
     * @param pagecount  (optional, default to 0)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPdfFragmentsAsync(String domain, UUID msId, UUID pdfid, Integer pageno, Integer pagecount, final ApiCallback<RationalizationResponseObject> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPdfFragmentsValidateBeforeCall(domain, msId, pdfid, pageno, pagecount, _callback);
        Type localVarReturnType = new TypeToken<RationalizationResponseObject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getResourceHistory
     * @param domain  (required)
     * @param msid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getResourceHistoryCall(String domain, UUID msid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/migrationset/{domain}/{msid}/history"
            .replace("{" + "domain" + "}", localVarApiClient.escapeString(domain.toString()))
            .replace("{" + "msid" + "}", localVarApiClient.escapeString(msid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getResourceHistoryValidateBeforeCall(String domain, UUID msid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling getResourceHistory(Async)");
        }

        // verify the required parameter 'msid' is set
        if (msid == null) {
            throw new ApiException("Missing the required parameter 'msid' when calling getResourceHistory(Async)");
        }

        return getResourceHistoryCall(domain, msid, _callback);

    }

    /**
     * 
     * 
     * @param domain  (required)
     * @param msid  (required)
     * @return RationalizationResponseObject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public RationalizationResponseObject getResourceHistory(String domain, UUID msid) throws ApiException {
        ApiResponse<RationalizationResponseObject> localVarResp = getResourceHistoryWithHttpInfo(domain, msid);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param domain  (required)
     * @param msid  (required)
     * @return ApiResponse&lt;RationalizationResponseObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RationalizationResponseObject> getResourceHistoryWithHttpInfo(String domain, UUID msid) throws ApiException {
        okhttp3.Call localVarCall = getResourceHistoryValidateBeforeCall(domain, msid, null);
        Type localVarReturnType = new TypeToken<RationalizationResponseObject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param domain  (required)
     * @param msid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getResourceHistoryAsync(String domain, UUID msid, final ApiCallback<RationalizationResponseObject> _callback) throws ApiException {

        okhttp3.Call localVarCall = getResourceHistoryValidateBeforeCall(domain, msid, _callback);
        Type localVarReturnType = new TypeToken<RationalizationResponseObject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTemplateDetailsOfMigrationSet
     * @param domain  (required)
     * @param msId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTemplateDetailsOfMigrationSetCall(String domain, UUID msId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/migrationset/template/{domain}/{msId}"
            .replace("{" + "domain" + "}", localVarApiClient.escapeString(domain.toString()))
            .replace("{" + "msId" + "}", localVarApiClient.escapeString(msId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTemplateDetailsOfMigrationSetValidateBeforeCall(String domain, UUID msId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling getTemplateDetailsOfMigrationSet(Async)");
        }

        // verify the required parameter 'msId' is set
        if (msId == null) {
            throw new ApiException("Missing the required parameter 'msId' when calling getTemplateDetailsOfMigrationSet(Async)");
        }

        return getTemplateDetailsOfMigrationSetCall(domain, msId, _callback);

    }

    /**
     * 
     * 
     * @param domain  (required)
     * @param msId  (required)
     * @return RationalizationResponseObject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public RationalizationResponseObject getTemplateDetailsOfMigrationSet(String domain, UUID msId) throws ApiException {
        ApiResponse<RationalizationResponseObject> localVarResp = getTemplateDetailsOfMigrationSetWithHttpInfo(domain, msId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param domain  (required)
     * @param msId  (required)
     * @return ApiResponse&lt;RationalizationResponseObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RationalizationResponseObject> getTemplateDetailsOfMigrationSetWithHttpInfo(String domain, UUID msId) throws ApiException {
        okhttp3.Call localVarCall = getTemplateDetailsOfMigrationSetValidateBeforeCall(domain, msId, null);
        Type localVarReturnType = new TypeToken<RationalizationResponseObject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param domain  (required)
     * @param msId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTemplateDetailsOfMigrationSetAsync(String domain, UUID msId, final ApiCallback<RationalizationResponseObject> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTemplateDetailsOfMigrationSetValidateBeforeCall(domain, msId, _callback);
        Type localVarReturnType = new TypeToken<RationalizationResponseObject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTemplateFragmentsReferences
     * @param domain  (required)
     * @param fragmentId  (required)
     * @param templateId  (required)
     * @param communications  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTemplateFragmentsReferencesCall(String domain, UUID fragmentId, UUID templateId, List<String> communications, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/migrationset/{domain}/template/fragment/references/{fragmentId}/{templateId}"
            .replace("{" + "domain" + "}", localVarApiClient.escapeString(domain.toString()))
            .replace("{" + "fragmentId" + "}", localVarApiClient.escapeString(fragmentId.toString()))
            .replace("{" + "templateId" + "}", localVarApiClient.escapeString(templateId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (communications != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "communications", communications));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTemplateFragmentsReferencesValidateBeforeCall(String domain, UUID fragmentId, UUID templateId, List<String> communications, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling getTemplateFragmentsReferences(Async)");
        }

        // verify the required parameter 'fragmentId' is set
        if (fragmentId == null) {
            throw new ApiException("Missing the required parameter 'fragmentId' when calling getTemplateFragmentsReferences(Async)");
        }

        // verify the required parameter 'templateId' is set
        if (templateId == null) {
            throw new ApiException("Missing the required parameter 'templateId' when calling getTemplateFragmentsReferences(Async)");
        }

        return getTemplateFragmentsReferencesCall(domain, fragmentId, templateId, communications, _callback);

    }

    /**
     * 
     * 
     * @param domain  (required)
     * @param fragmentId  (required)
     * @param templateId  (required)
     * @param communications  (optional)
     * @return RationalizationResponseObject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public RationalizationResponseObject getTemplateFragmentsReferences(String domain, UUID fragmentId, UUID templateId, List<String> communications) throws ApiException {
        ApiResponse<RationalizationResponseObject> localVarResp = getTemplateFragmentsReferencesWithHttpInfo(domain, fragmentId, templateId, communications);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param domain  (required)
     * @param fragmentId  (required)
     * @param templateId  (required)
     * @param communications  (optional)
     * @return ApiResponse&lt;RationalizationResponseObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RationalizationResponseObject> getTemplateFragmentsReferencesWithHttpInfo(String domain, UUID fragmentId, UUID templateId, List<String> communications) throws ApiException {
        okhttp3.Call localVarCall = getTemplateFragmentsReferencesValidateBeforeCall(domain, fragmentId, templateId, communications, null);
        Type localVarReturnType = new TypeToken<RationalizationResponseObject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param domain  (required)
     * @param fragmentId  (required)
     * @param templateId  (required)
     * @param communications  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTemplateFragmentsReferencesAsync(String domain, UUID fragmentId, UUID templateId, List<String> communications, final ApiCallback<RationalizationResponseObject> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTemplateFragmentsReferencesValidateBeforeCall(domain, fragmentId, templateId, communications, _callback);
        Type localVarReturnType = new TypeToken<RationalizationResponseObject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTemplateRuleFragmentsReferences
     * @param domain  (required)
     * @param ruleId  (required)
     * @param templateId  (required)
     * @param communications  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTemplateRuleFragmentsReferencesCall(String domain, UUID ruleId, UUID templateId, List<String> communications, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/migrationset/{domain}/template/rule/references/{ruleId}/{templateId}"
            .replace("{" + "domain" + "}", localVarApiClient.escapeString(domain.toString()))
            .replace("{" + "ruleId" + "}", localVarApiClient.escapeString(ruleId.toString()))
            .replace("{" + "templateId" + "}", localVarApiClient.escapeString(templateId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (communications != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "communications", communications));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTemplateRuleFragmentsReferencesValidateBeforeCall(String domain, UUID ruleId, UUID templateId, List<String> communications, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling getTemplateRuleFragmentsReferences(Async)");
        }

        // verify the required parameter 'ruleId' is set
        if (ruleId == null) {
            throw new ApiException("Missing the required parameter 'ruleId' when calling getTemplateRuleFragmentsReferences(Async)");
        }

        // verify the required parameter 'templateId' is set
        if (templateId == null) {
            throw new ApiException("Missing the required parameter 'templateId' when calling getTemplateRuleFragmentsReferences(Async)");
        }

        return getTemplateRuleFragmentsReferencesCall(domain, ruleId, templateId, communications, _callback);

    }

    /**
     * 
     * 
     * @param domain  (required)
     * @param ruleId  (required)
     * @param templateId  (required)
     * @param communications  (optional)
     * @return RationalizationResponseObject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public RationalizationResponseObject getTemplateRuleFragmentsReferences(String domain, UUID ruleId, UUID templateId, List<String> communications) throws ApiException {
        ApiResponse<RationalizationResponseObject> localVarResp = getTemplateRuleFragmentsReferencesWithHttpInfo(domain, ruleId, templateId, communications);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param domain  (required)
     * @param ruleId  (required)
     * @param templateId  (required)
     * @param communications  (optional)
     * @return ApiResponse&lt;RationalizationResponseObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RationalizationResponseObject> getTemplateRuleFragmentsReferencesWithHttpInfo(String domain, UUID ruleId, UUID templateId, List<String> communications) throws ApiException {
        okhttp3.Call localVarCall = getTemplateRuleFragmentsReferencesValidateBeforeCall(domain, ruleId, templateId, communications, null);
        Type localVarReturnType = new TypeToken<RationalizationResponseObject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param domain  (required)
     * @param ruleId  (required)
     * @param templateId  (required)
     * @param communications  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTemplateRuleFragmentsReferencesAsync(String domain, UUID ruleId, UUID templateId, List<String> communications, final ApiCallback<RationalizationResponseObject> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTemplateRuleFragmentsReferencesValidateBeforeCall(domain, ruleId, templateId, communications, _callback);
        Type localVarReturnType = new TypeToken<RationalizationResponseObject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTemplateVariableFragmentsReferences
     * @param domain  (required)
     * @param variableId  (required)
     * @param templateId  (required)
     * @param communications  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTemplateVariableFragmentsReferencesCall(String domain, UUID variableId, UUID templateId, List<String> communications, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/migrationset/{domain}/template/variable/references/{variableId}/{templateId}"
            .replace("{" + "domain" + "}", localVarApiClient.escapeString(domain.toString()))
            .replace("{" + "variableId" + "}", localVarApiClient.escapeString(variableId.toString()))
            .replace("{" + "templateId" + "}", localVarApiClient.escapeString(templateId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (communications != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "communications", communications));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTemplateVariableFragmentsReferencesValidateBeforeCall(String domain, UUID variableId, UUID templateId, List<String> communications, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling getTemplateVariableFragmentsReferences(Async)");
        }

        // verify the required parameter 'variableId' is set
        if (variableId == null) {
            throw new ApiException("Missing the required parameter 'variableId' when calling getTemplateVariableFragmentsReferences(Async)");
        }

        // verify the required parameter 'templateId' is set
        if (templateId == null) {
            throw new ApiException("Missing the required parameter 'templateId' when calling getTemplateVariableFragmentsReferences(Async)");
        }

        return getTemplateVariableFragmentsReferencesCall(domain, variableId, templateId, communications, _callback);

    }

    /**
     * 
     * 
     * @param domain  (required)
     * @param variableId  (required)
     * @param templateId  (required)
     * @param communications  (optional)
     * @return RationalizationResponseObject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public RationalizationResponseObject getTemplateVariableFragmentsReferences(String domain, UUID variableId, UUID templateId, List<String> communications) throws ApiException {
        ApiResponse<RationalizationResponseObject> localVarResp = getTemplateVariableFragmentsReferencesWithHttpInfo(domain, variableId, templateId, communications);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param domain  (required)
     * @param variableId  (required)
     * @param templateId  (required)
     * @param communications  (optional)
     * @return ApiResponse&lt;RationalizationResponseObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RationalizationResponseObject> getTemplateVariableFragmentsReferencesWithHttpInfo(String domain, UUID variableId, UUID templateId, List<String> communications) throws ApiException {
        okhttp3.Call localVarCall = getTemplateVariableFragmentsReferencesValidateBeforeCall(domain, variableId, templateId, communications, null);
        Type localVarReturnType = new TypeToken<RationalizationResponseObject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param domain  (required)
     * @param variableId  (required)
     * @param templateId  (required)
     * @param communications  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTemplateVariableFragmentsReferencesAsync(String domain, UUID variableId, UUID templateId, List<String> communications, final ApiCallback<RationalizationResponseObject> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTemplateVariableFragmentsReferencesValidateBeforeCall(domain, variableId, templateId, communications, _callback);
        Type localVarReturnType = new TypeToken<RationalizationResponseObject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for promote
     * @param domain  (required)
     * @param id  (required)
     * @param workflowRequestBody  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call promoteCall(String domain, UUID id, WorkflowRequestBody workflowRequestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = workflowRequestBody;

        // create path and map variables
        String localVarPath = "/api/v1/migrationset/{domain}/{id}/promote"
            .replace("{" + "domain" + "}", localVarApiClient.escapeString(domain.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call promoteValidateBeforeCall(String domain, UUID id, WorkflowRequestBody workflowRequestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling promote(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling promote(Async)");
        }

        // verify the required parameter 'workflowRequestBody' is set
        if (workflowRequestBody == null) {
            throw new ApiException("Missing the required parameter 'workflowRequestBody' when calling promote(Async)");
        }

        return promoteCall(domain, id, workflowRequestBody, _callback);

    }

    /**
     * 
     * 
     * @param domain  (required)
     * @param id  (required)
     * @param workflowRequestBody  (required)
     * @return RationalizationResponseObject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public RationalizationResponseObject promote(String domain, UUID id, WorkflowRequestBody workflowRequestBody) throws ApiException {
        ApiResponse<RationalizationResponseObject> localVarResp = promoteWithHttpInfo(domain, id, workflowRequestBody);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param domain  (required)
     * @param id  (required)
     * @param workflowRequestBody  (required)
     * @return ApiResponse&lt;RationalizationResponseObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RationalizationResponseObject> promoteWithHttpInfo(String domain, UUID id, WorkflowRequestBody workflowRequestBody) throws ApiException {
        okhttp3.Call localVarCall = promoteValidateBeforeCall(domain, id, workflowRequestBody, null);
        Type localVarReturnType = new TypeToken<RationalizationResponseObject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param domain  (required)
     * @param id  (required)
     * @param workflowRequestBody  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call promoteAsync(String domain, UUID id, WorkflowRequestBody workflowRequestBody, final ApiCallback<RationalizationResponseObject> _callback) throws ApiException {

        okhttp3.Call localVarCall = promoteValidateBeforeCall(domain, id, workflowRequestBody, _callback);
        Type localVarReturnType = new TypeToken<RationalizationResponseObject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateMigrationSet
     * @param domainId  (required)
     * @param msId  (required)
     * @param migrationSetRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateMigrationSetCall(String domainId, UUID msId, MigrationSetRequest migrationSetRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = migrationSetRequest;

        // create path and map variables
        String localVarPath = "/api/v1/migrationset/{domainId}/{msId}"
            .replace("{" + "domainId" + "}", localVarApiClient.escapeString(domainId.toString()))
            .replace("{" + "msId" + "}", localVarApiClient.escapeString(msId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateMigrationSetValidateBeforeCall(String domainId, UUID msId, MigrationSetRequest migrationSetRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'domainId' is set
        if (domainId == null) {
            throw new ApiException("Missing the required parameter 'domainId' when calling updateMigrationSet(Async)");
        }

        // verify the required parameter 'msId' is set
        if (msId == null) {
            throw new ApiException("Missing the required parameter 'msId' when calling updateMigrationSet(Async)");
        }

        // verify the required parameter 'migrationSetRequest' is set
        if (migrationSetRequest == null) {
            throw new ApiException("Missing the required parameter 'migrationSetRequest' when calling updateMigrationSet(Async)");
        }

        return updateMigrationSetCall(domainId, msId, migrationSetRequest, _callback);

    }

    /**
     * 
     * 
     * @param domainId  (required)
     * @param msId  (required)
     * @param migrationSetRequest  (required)
     * @return RationalizationResponseObject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public RationalizationResponseObject updateMigrationSet(String domainId, UUID msId, MigrationSetRequest migrationSetRequest) throws ApiException {
        ApiResponse<RationalizationResponseObject> localVarResp = updateMigrationSetWithHttpInfo(domainId, msId, migrationSetRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param domainId  (required)
     * @param msId  (required)
     * @param migrationSetRequest  (required)
     * @return ApiResponse&lt;RationalizationResponseObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RationalizationResponseObject> updateMigrationSetWithHttpInfo(String domainId, UUID msId, MigrationSetRequest migrationSetRequest) throws ApiException {
        okhttp3.Call localVarCall = updateMigrationSetValidateBeforeCall(domainId, msId, migrationSetRequest, null);
        Type localVarReturnType = new TypeToken<RationalizationResponseObject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param domainId  (required)
     * @param msId  (required)
     * @param migrationSetRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateMigrationSetAsync(String domainId, UUID msId, MigrationSetRequest migrationSetRequest, final ApiCallback<RationalizationResponseObject> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateMigrationSetValidateBeforeCall(domainId, msId, migrationSetRequest, _callback);
        Type localVarReturnType = new TypeToken<RationalizationResponseObject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateRationalizationActivity
     * @param domain  (required)
     * @param msId  (required)
     * @param migrationType  (optional, default to CONTENT)
     * @param updateRationalizationActivityRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateRationalizationActivityCall(String domain, UUID msId, String migrationType, UpdateRationalizationActivityRequest updateRationalizationActivityRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateRationalizationActivityRequest;

        // create path and map variables
        String localVarPath = "/api/v1/migrationset/{domain}/{msId}/tmpfile"
            .replace("{" + "domain" + "}", localVarApiClient.escapeString(domain.toString()))
            .replace("{" + "msId" + "}", localVarApiClient.escapeString(msId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (migrationType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("migrationType", migrationType));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateRationalizationActivityValidateBeforeCall(String domain, UUID msId, String migrationType, UpdateRationalizationActivityRequest updateRationalizationActivityRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling updateRationalizationActivity(Async)");
        }

        // verify the required parameter 'msId' is set
        if (msId == null) {
            throw new ApiException("Missing the required parameter 'msId' when calling updateRationalizationActivity(Async)");
        }

        return updateRationalizationActivityCall(domain, msId, migrationType, updateRationalizationActivityRequest, _callback);

    }

    /**
     * 
     * 
     * @param domain  (required)
     * @param msId  (required)
     * @param migrationType  (optional, default to CONTENT)
     * @param updateRationalizationActivityRequest  (optional)
     * @return RationalizationResponseObject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public RationalizationResponseObject updateRationalizationActivity(String domain, UUID msId, String migrationType, UpdateRationalizationActivityRequest updateRationalizationActivityRequest) throws ApiException {
        ApiResponse<RationalizationResponseObject> localVarResp = updateRationalizationActivityWithHttpInfo(domain, msId, migrationType, updateRationalizationActivityRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param domain  (required)
     * @param msId  (required)
     * @param migrationType  (optional, default to CONTENT)
     * @param updateRationalizationActivityRequest  (optional)
     * @return ApiResponse&lt;RationalizationResponseObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RationalizationResponseObject> updateRationalizationActivityWithHttpInfo(String domain, UUID msId, String migrationType, UpdateRationalizationActivityRequest updateRationalizationActivityRequest) throws ApiException {
        okhttp3.Call localVarCall = updateRationalizationActivityValidateBeforeCall(domain, msId, migrationType, updateRationalizationActivityRequest, null);
        Type localVarReturnType = new TypeToken<RationalizationResponseObject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param domain  (required)
     * @param msId  (required)
     * @param migrationType  (optional, default to CONTENT)
     * @param updateRationalizationActivityRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateRationalizationActivityAsync(String domain, UUID msId, String migrationType, UpdateRationalizationActivityRequest updateRationalizationActivityRequest, final ApiCallback<RationalizationResponseObject> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateRationalizationActivityValidateBeforeCall(domain, msId, migrationType, updateRationalizationActivityRequest, _callback);
        Type localVarReturnType = new TypeToken<RationalizationResponseObject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateRationalizationState
     * @param domain  (required)
     * @param msId  (required)
     * @param workflowRequestBody  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateRationalizationStateCall(String domain, UUID msId, WorkflowRequestBody workflowRequestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = workflowRequestBody;

        // create path and map variables
        String localVarPath = "/api/v1/migrationset/{domain}/{msId}/state"
            .replace("{" + "domain" + "}", localVarApiClient.escapeString(domain.toString()))
            .replace("{" + "msId" + "}", localVarApiClient.escapeString(msId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateRationalizationStateValidateBeforeCall(String domain, UUID msId, WorkflowRequestBody workflowRequestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling updateRationalizationState(Async)");
        }

        // verify the required parameter 'msId' is set
        if (msId == null) {
            throw new ApiException("Missing the required parameter 'msId' when calling updateRationalizationState(Async)");
        }

        // verify the required parameter 'workflowRequestBody' is set
        if (workflowRequestBody == null) {
            throw new ApiException("Missing the required parameter 'workflowRequestBody' when calling updateRationalizationState(Async)");
        }

        return updateRationalizationStateCall(domain, msId, workflowRequestBody, _callback);

    }

    /**
     * 
     * 
     * @param domain  (required)
     * @param msId  (required)
     * @param workflowRequestBody  (required)
     * @return RationalizationResponseObject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public RationalizationResponseObject updateRationalizationState(String domain, UUID msId, WorkflowRequestBody workflowRequestBody) throws ApiException {
        ApiResponse<RationalizationResponseObject> localVarResp = updateRationalizationStateWithHttpInfo(domain, msId, workflowRequestBody);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param domain  (required)
     * @param msId  (required)
     * @param workflowRequestBody  (required)
     * @return ApiResponse&lt;RationalizationResponseObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RationalizationResponseObject> updateRationalizationStateWithHttpInfo(String domain, UUID msId, WorkflowRequestBody workflowRequestBody) throws ApiException {
        okhttp3.Call localVarCall = updateRationalizationStateValidateBeforeCall(domain, msId, workflowRequestBody, null);
        Type localVarReturnType = new TypeToken<RationalizationResponseObject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param domain  (required)
     * @param msId  (required)
     * @param workflowRequestBody  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateRationalizationStateAsync(String domain, UUID msId, WorkflowRequestBody workflowRequestBody, final ApiCallback<RationalizationResponseObject> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateRationalizationStateValidateBeforeCall(domain, msId, workflowRequestBody, _callback);
        Type localVarReturnType = new TypeToken<RationalizationResponseObject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
