/*
 * Exstream Rationalization
 * **For internal use of the product only**
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CustomFragmentRequest;
import org.openapitools.client.model.CustomSuperSetRequest;
import org.openapitools.client.model.FragmentRequest;
import org.openapitools.client.model.RationalisationFilter;
import org.openapitools.client.model.RationalizationResponseObject;
import org.openapitools.client.model.SseEmitter;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class RationalizationReportControllerApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public RationalizationReportControllerApi() {
        this(Configuration.getDefaultApiClient());
    }

    public RationalizationReportControllerApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for cancelOfflineJob
     * @param domainId  (required)
     * @param msId  (required)
     * @param implicit  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cancelOfflineJobCall(String domainId, UUID msId, Boolean implicit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/rationalization/{domainId}/{msId}"
            .replace("{" + "domainId" + "}", localVarApiClient.escapeString(domainId.toString()))
            .replace("{" + "msId" + "}", localVarApiClient.escapeString(msId.toString()))
            .replace("{" + "implicit" + "}", localVarApiClient.escapeString(implicit.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cancelOfflineJobValidateBeforeCall(String domainId, UUID msId, Boolean implicit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'domainId' is set
        if (domainId == null) {
            throw new ApiException("Missing the required parameter 'domainId' when calling cancelOfflineJob(Async)");
        }

        // verify the required parameter 'msId' is set
        if (msId == null) {
            throw new ApiException("Missing the required parameter 'msId' when calling cancelOfflineJob(Async)");
        }

        // verify the required parameter 'implicit' is set
        if (implicit == null) {
            throw new ApiException("Missing the required parameter 'implicit' when calling cancelOfflineJob(Async)");
        }

        return cancelOfflineJobCall(domainId, msId, implicit, _callback);

    }

    /**
     * 
     * 
     * @param domainId  (required)
     * @param msId  (required)
     * @param implicit  (required)
     * @return RationalizationResponseObject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public RationalizationResponseObject cancelOfflineJob(String domainId, UUID msId, Boolean implicit) throws ApiException {
        ApiResponse<RationalizationResponseObject> localVarResp = cancelOfflineJobWithHttpInfo(domainId, msId, implicit);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param domainId  (required)
     * @param msId  (required)
     * @param implicit  (required)
     * @return ApiResponse&lt;RationalizationResponseObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RationalizationResponseObject> cancelOfflineJobWithHttpInfo(String domainId, UUID msId, Boolean implicit) throws ApiException {
        okhttp3.Call localVarCall = cancelOfflineJobValidateBeforeCall(domainId, msId, implicit, null);
        Type localVarReturnType = new TypeToken<RationalizationResponseObject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param domainId  (required)
     * @param msId  (required)
     * @param implicit  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cancelOfflineJobAsync(String domainId, UUID msId, Boolean implicit, final ApiCallback<RationalizationResponseObject> _callback) throws ApiException {

        okhttp3.Call localVarCall = cancelOfflineJobValidateBeforeCall(domainId, msId, implicit, _callback);
        Type localVarReturnType = new TypeToken<RationalizationResponseObject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for cancelOfflineJob1
     * @param domainId  (required)
     * @param msId  (required)
     * @param implicit  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cancelOfflineJob1Call(String domainId, UUID msId, Boolean implicit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/rationalization/{domainId}/{msId}/{implicit}"
            .replace("{" + "domainId" + "}", localVarApiClient.escapeString(domainId.toString()))
            .replace("{" + "msId" + "}", localVarApiClient.escapeString(msId.toString()))
            .replace("{" + "implicit" + "}", localVarApiClient.escapeString(implicit.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cancelOfflineJob1ValidateBeforeCall(String domainId, UUID msId, Boolean implicit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'domainId' is set
        if (domainId == null) {
            throw new ApiException("Missing the required parameter 'domainId' when calling cancelOfflineJob1(Async)");
        }

        // verify the required parameter 'msId' is set
        if (msId == null) {
            throw new ApiException("Missing the required parameter 'msId' when calling cancelOfflineJob1(Async)");
        }

        // verify the required parameter 'implicit' is set
        if (implicit == null) {
            throw new ApiException("Missing the required parameter 'implicit' when calling cancelOfflineJob1(Async)");
        }

        return cancelOfflineJob1Call(domainId, msId, implicit, _callback);

    }

    /**
     * 
     * 
     * @param domainId  (required)
     * @param msId  (required)
     * @param implicit  (required)
     * @return RationalizationResponseObject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public RationalizationResponseObject cancelOfflineJob1(String domainId, UUID msId, Boolean implicit) throws ApiException {
        ApiResponse<RationalizationResponseObject> localVarResp = cancelOfflineJob1WithHttpInfo(domainId, msId, implicit);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param domainId  (required)
     * @param msId  (required)
     * @param implicit  (required)
     * @return ApiResponse&lt;RationalizationResponseObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RationalizationResponseObject> cancelOfflineJob1WithHttpInfo(String domainId, UUID msId, Boolean implicit) throws ApiException {
        okhttp3.Call localVarCall = cancelOfflineJob1ValidateBeforeCall(domainId, msId, implicit, null);
        Type localVarReturnType = new TypeToken<RationalizationResponseObject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param domainId  (required)
     * @param msId  (required)
     * @param implicit  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cancelOfflineJob1Async(String domainId, UUID msId, Boolean implicit, final ApiCallback<RationalizationResponseObject> _callback) throws ApiException {

        okhttp3.Call localVarCall = cancelOfflineJob1ValidateBeforeCall(domainId, msId, implicit, _callback);
        Type localVarReturnType = new TypeToken<RationalizationResponseObject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createCustomFragment
     * @param domainId  (required)
     * @param msId  (required)
     * @param customFragmentRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createCustomFragmentCall(String domainId, UUID msId, CustomFragmentRequest customFragmentRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = customFragmentRequest;

        // create path and map variables
        String localVarPath = "/api/v1/rationalization/{domainId}/preview/{msId}"
            .replace("{" + "domainId" + "}", localVarApiClient.escapeString(domainId.toString()))
            .replace("{" + "msId" + "}", localVarApiClient.escapeString(msId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createCustomFragmentValidateBeforeCall(String domainId, UUID msId, CustomFragmentRequest customFragmentRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'domainId' is set
        if (domainId == null) {
            throw new ApiException("Missing the required parameter 'domainId' when calling createCustomFragment(Async)");
        }

        // verify the required parameter 'msId' is set
        if (msId == null) {
            throw new ApiException("Missing the required parameter 'msId' when calling createCustomFragment(Async)");
        }

        // verify the required parameter 'customFragmentRequest' is set
        if (customFragmentRequest == null) {
            throw new ApiException("Missing the required parameter 'customFragmentRequest' when calling createCustomFragment(Async)");
        }

        return createCustomFragmentCall(domainId, msId, customFragmentRequest, _callback);

    }

    /**
     * 
     * 
     * @param domainId  (required)
     * @param msId  (required)
     * @param customFragmentRequest  (required)
     * @return RationalizationResponseObject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public RationalizationResponseObject createCustomFragment(String domainId, UUID msId, CustomFragmentRequest customFragmentRequest) throws ApiException {
        ApiResponse<RationalizationResponseObject> localVarResp = createCustomFragmentWithHttpInfo(domainId, msId, customFragmentRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param domainId  (required)
     * @param msId  (required)
     * @param customFragmentRequest  (required)
     * @return ApiResponse&lt;RationalizationResponseObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RationalizationResponseObject> createCustomFragmentWithHttpInfo(String domainId, UUID msId, CustomFragmentRequest customFragmentRequest) throws ApiException {
        okhttp3.Call localVarCall = createCustomFragmentValidateBeforeCall(domainId, msId, customFragmentRequest, null);
        Type localVarReturnType = new TypeToken<RationalizationResponseObject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param domainId  (required)
     * @param msId  (required)
     * @param customFragmentRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createCustomFragmentAsync(String domainId, UUID msId, CustomFragmentRequest customFragmentRequest, final ApiCallback<RationalizationResponseObject> _callback) throws ApiException {

        okhttp3.Call localVarCall = createCustomFragmentValidateBeforeCall(domainId, msId, customFragmentRequest, _callback);
        Type localVarReturnType = new TypeToken<RationalizationResponseObject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for generateReportOffline
     * @param domainId  (required)
     * @param msId  (required)
     * @param implicit  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call generateReportOfflineCall(String domainId, UUID msId, Boolean implicit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/rationalization/{domainId}/{msId}"
            .replace("{" + "domainId" + "}", localVarApiClient.escapeString(domainId.toString()))
            .replace("{" + "msId" + "}", localVarApiClient.escapeString(msId.toString()))
            .replace("{" + "implicit" + "}", localVarApiClient.escapeString(implicit.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call generateReportOfflineValidateBeforeCall(String domainId, UUID msId, Boolean implicit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'domainId' is set
        if (domainId == null) {
            throw new ApiException("Missing the required parameter 'domainId' when calling generateReportOffline(Async)");
        }

        // verify the required parameter 'msId' is set
        if (msId == null) {
            throw new ApiException("Missing the required parameter 'msId' when calling generateReportOffline(Async)");
        }

        // verify the required parameter 'implicit' is set
        if (implicit == null) {
            throw new ApiException("Missing the required parameter 'implicit' when calling generateReportOffline(Async)");
        }

        return generateReportOfflineCall(domainId, msId, implicit, _callback);

    }

    /**
     * 
     * 
     * @param domainId  (required)
     * @param msId  (required)
     * @param implicit  (required)
     * @return RationalizationResponseObject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public RationalizationResponseObject generateReportOffline(String domainId, UUID msId, Boolean implicit) throws ApiException {
        ApiResponse<RationalizationResponseObject> localVarResp = generateReportOfflineWithHttpInfo(domainId, msId, implicit);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param domainId  (required)
     * @param msId  (required)
     * @param implicit  (required)
     * @return ApiResponse&lt;RationalizationResponseObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RationalizationResponseObject> generateReportOfflineWithHttpInfo(String domainId, UUID msId, Boolean implicit) throws ApiException {
        okhttp3.Call localVarCall = generateReportOfflineValidateBeforeCall(domainId, msId, implicit, null);
        Type localVarReturnType = new TypeToken<RationalizationResponseObject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param domainId  (required)
     * @param msId  (required)
     * @param implicit  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call generateReportOfflineAsync(String domainId, UUID msId, Boolean implicit, final ApiCallback<RationalizationResponseObject> _callback) throws ApiException {

        okhttp3.Call localVarCall = generateReportOfflineValidateBeforeCall(domainId, msId, implicit, _callback);
        Type localVarReturnType = new TypeToken<RationalizationResponseObject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for generateReportOffline1
     * @param domainId  (required)
     * @param msId  (required)
     * @param implicit  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call generateReportOffline1Call(String domainId, UUID msId, Boolean implicit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/rationalization/{domainId}/{msId}/{implicit}"
            .replace("{" + "domainId" + "}", localVarApiClient.escapeString(domainId.toString()))
            .replace("{" + "msId" + "}", localVarApiClient.escapeString(msId.toString()))
            .replace("{" + "implicit" + "}", localVarApiClient.escapeString(implicit.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call generateReportOffline1ValidateBeforeCall(String domainId, UUID msId, Boolean implicit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'domainId' is set
        if (domainId == null) {
            throw new ApiException("Missing the required parameter 'domainId' when calling generateReportOffline1(Async)");
        }

        // verify the required parameter 'msId' is set
        if (msId == null) {
            throw new ApiException("Missing the required parameter 'msId' when calling generateReportOffline1(Async)");
        }

        // verify the required parameter 'implicit' is set
        if (implicit == null) {
            throw new ApiException("Missing the required parameter 'implicit' when calling generateReportOffline1(Async)");
        }

        return generateReportOffline1Call(domainId, msId, implicit, _callback);

    }

    /**
     * 
     * 
     * @param domainId  (required)
     * @param msId  (required)
     * @param implicit  (required)
     * @return RationalizationResponseObject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public RationalizationResponseObject generateReportOffline1(String domainId, UUID msId, Boolean implicit) throws ApiException {
        ApiResponse<RationalizationResponseObject> localVarResp = generateReportOffline1WithHttpInfo(domainId, msId, implicit);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param domainId  (required)
     * @param msId  (required)
     * @param implicit  (required)
     * @return ApiResponse&lt;RationalizationResponseObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RationalizationResponseObject> generateReportOffline1WithHttpInfo(String domainId, UUID msId, Boolean implicit) throws ApiException {
        okhttp3.Call localVarCall = generateReportOffline1ValidateBeforeCall(domainId, msId, implicit, null);
        Type localVarReturnType = new TypeToken<RationalizationResponseObject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param domainId  (required)
     * @param msId  (required)
     * @param implicit  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call generateReportOffline1Async(String domainId, UUID msId, Boolean implicit, final ApiCallback<RationalizationResponseObject> _callback) throws ApiException {

        okhttp3.Call localVarCall = generateReportOffline1ValidateBeforeCall(domainId, msId, implicit, _callback);
        Type localVarReturnType = new TypeToken<RationalizationResponseObject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCustomSuperSet
     * @param domainId  (required)
     * @param fragmentId  (required)
     * @param request  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCustomSuperSetCall(String domainId, UUID fragmentId, CustomSuperSetRequest request, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/rationalization/{domainId}/fragments/superset/{fragmentId}"
            .replace("{" + "domainId" + "}", localVarApiClient.escapeString(domainId.toString()))
            .replace("{" + "fragmentId" + "}", localVarApiClient.escapeString(fragmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (request != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("request", request));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCustomSuperSetValidateBeforeCall(String domainId, UUID fragmentId, CustomSuperSetRequest request, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'domainId' is set
        if (domainId == null) {
            throw new ApiException("Missing the required parameter 'domainId' when calling getCustomSuperSet(Async)");
        }

        // verify the required parameter 'fragmentId' is set
        if (fragmentId == null) {
            throw new ApiException("Missing the required parameter 'fragmentId' when calling getCustomSuperSet(Async)");
        }

        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling getCustomSuperSet(Async)");
        }

        return getCustomSuperSetCall(domainId, fragmentId, request, _callback);

    }

    /**
     * 
     * 
     * @param domainId  (required)
     * @param fragmentId  (required)
     * @param request  (required)
     * @return RationalizationResponseObject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public RationalizationResponseObject getCustomSuperSet(String domainId, UUID fragmentId, CustomSuperSetRequest request) throws ApiException {
        ApiResponse<RationalizationResponseObject> localVarResp = getCustomSuperSetWithHttpInfo(domainId, fragmentId, request);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param domainId  (required)
     * @param fragmentId  (required)
     * @param request  (required)
     * @return ApiResponse&lt;RationalizationResponseObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RationalizationResponseObject> getCustomSuperSetWithHttpInfo(String domainId, UUID fragmentId, CustomSuperSetRequest request) throws ApiException {
        okhttp3.Call localVarCall = getCustomSuperSetValidateBeforeCall(domainId, fragmentId, request, null);
        Type localVarReturnType = new TypeToken<RationalizationResponseObject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param domainId  (required)
     * @param fragmentId  (required)
     * @param request  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCustomSuperSetAsync(String domainId, UUID fragmentId, CustomSuperSetRequest request, final ApiCallback<RationalizationResponseObject> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCustomSuperSetValidateBeforeCall(domainId, fragmentId, request, _callback);
        Type localVarReturnType = new TypeToken<RationalizationResponseObject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getFragmentDetails
     * @param domainId  (required)
     * @param fragmentId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFragmentDetailsCall(String domainId, UUID fragmentId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/rationalization/{domainId}/fragments/details/{fragmentId}"
            .replace("{" + "domainId" + "}", localVarApiClient.escapeString(domainId.toString()))
            .replace("{" + "fragmentId" + "}", localVarApiClient.escapeString(fragmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFragmentDetailsValidateBeforeCall(String domainId, UUID fragmentId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'domainId' is set
        if (domainId == null) {
            throw new ApiException("Missing the required parameter 'domainId' when calling getFragmentDetails(Async)");
        }

        // verify the required parameter 'fragmentId' is set
        if (fragmentId == null) {
            throw new ApiException("Missing the required parameter 'fragmentId' when calling getFragmentDetails(Async)");
        }

        return getFragmentDetailsCall(domainId, fragmentId, _callback);

    }

    /**
     * 
     * 
     * @param domainId  (required)
     * @param fragmentId  (required)
     * @return RationalizationResponseObject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public RationalizationResponseObject getFragmentDetails(String domainId, UUID fragmentId) throws ApiException {
        ApiResponse<RationalizationResponseObject> localVarResp = getFragmentDetailsWithHttpInfo(domainId, fragmentId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param domainId  (required)
     * @param fragmentId  (required)
     * @return ApiResponse&lt;RationalizationResponseObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RationalizationResponseObject> getFragmentDetailsWithHttpInfo(String domainId, UUID fragmentId) throws ApiException {
        okhttp3.Call localVarCall = getFragmentDetailsValidateBeforeCall(domainId, fragmentId, null);
        Type localVarReturnType = new TypeToken<RationalizationResponseObject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param domainId  (required)
     * @param fragmentId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFragmentDetailsAsync(String domainId, UUID fragmentId, final ApiCallback<RationalizationResponseObject> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFragmentDetailsValidateBeforeCall(domainId, fragmentId, _callback);
        Type localVarReturnType = new TypeToken<RationalizationResponseObject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getFragmentOrder
     * @param domainId  (required)
     * @param fragmentId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFragmentOrderCall(String domainId, UUID fragmentId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/rationalization/{domainId}/fragments/order/{fragmentId}"
            .replace("{" + "domainId" + "}", localVarApiClient.escapeString(domainId.toString()))
            .replace("{" + "fragmentId" + "}", localVarApiClient.escapeString(fragmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFragmentOrderValidateBeforeCall(String domainId, UUID fragmentId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'domainId' is set
        if (domainId == null) {
            throw new ApiException("Missing the required parameter 'domainId' when calling getFragmentOrder(Async)");
        }

        // verify the required parameter 'fragmentId' is set
        if (fragmentId == null) {
            throw new ApiException("Missing the required parameter 'fragmentId' when calling getFragmentOrder(Async)");
        }

        return getFragmentOrderCall(domainId, fragmentId, _callback);

    }

    /**
     * 
     * 
     * @param domainId  (required)
     * @param fragmentId  (required)
     * @return RationalizationResponseObject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public RationalizationResponseObject getFragmentOrder(String domainId, UUID fragmentId) throws ApiException {
        ApiResponse<RationalizationResponseObject> localVarResp = getFragmentOrderWithHttpInfo(domainId, fragmentId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param domainId  (required)
     * @param fragmentId  (required)
     * @return ApiResponse&lt;RationalizationResponseObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RationalizationResponseObject> getFragmentOrderWithHttpInfo(String domainId, UUID fragmentId) throws ApiException {
        okhttp3.Call localVarCall = getFragmentOrderValidateBeforeCall(domainId, fragmentId, null);
        Type localVarReturnType = new TypeToken<RationalizationResponseObject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param domainId  (required)
     * @param fragmentId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFragmentOrderAsync(String domainId, UUID fragmentId, final ApiCallback<RationalizationResponseObject> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFragmentOrderValidateBeforeCall(domainId, fragmentId, _callback);
        Type localVarReturnType = new TypeToken<RationalizationResponseObject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getGroupFragment
     * @param domainId  (required)
     * @param fragmentId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGroupFragmentCall(String domainId, UUID fragmentId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/rationalization/{domainId}/fragments/groups/{fragmentId}"
            .replace("{" + "domainId" + "}", localVarApiClient.escapeString(domainId.toString()))
            .replace("{" + "fragmentId" + "}", localVarApiClient.escapeString(fragmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getGroupFragmentValidateBeforeCall(String domainId, UUID fragmentId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'domainId' is set
        if (domainId == null) {
            throw new ApiException("Missing the required parameter 'domainId' when calling getGroupFragment(Async)");
        }

        // verify the required parameter 'fragmentId' is set
        if (fragmentId == null) {
            throw new ApiException("Missing the required parameter 'fragmentId' when calling getGroupFragment(Async)");
        }

        return getGroupFragmentCall(domainId, fragmentId, _callback);

    }

    /**
     * 
     * 
     * @param domainId  (required)
     * @param fragmentId  (required)
     * @return RationalizationResponseObject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public RationalizationResponseObject getGroupFragment(String domainId, UUID fragmentId) throws ApiException {
        ApiResponse<RationalizationResponseObject> localVarResp = getGroupFragmentWithHttpInfo(domainId, fragmentId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param domainId  (required)
     * @param fragmentId  (required)
     * @return ApiResponse&lt;RationalizationResponseObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RationalizationResponseObject> getGroupFragmentWithHttpInfo(String domainId, UUID fragmentId) throws ApiException {
        okhttp3.Call localVarCall = getGroupFragmentValidateBeforeCall(domainId, fragmentId, null);
        Type localVarReturnType = new TypeToken<RationalizationResponseObject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param domainId  (required)
     * @param fragmentId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGroupFragmentAsync(String domainId, UUID fragmentId, final ApiCallback<RationalizationResponseObject> _callback) throws ApiException {

        okhttp3.Call localVarCall = getGroupFragmentValidateBeforeCall(domainId, fragmentId, _callback);
        Type localVarReturnType = new TypeToken<RationalizationResponseObject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMigrationSet
     * @param domainId  (required)
     * @param msId  (required)
     * @param implicit  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMigrationSetCall(String domainId, UUID msId, Boolean implicit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/rationalization/{domainId}/{msId}"
            .replace("{" + "domainId" + "}", localVarApiClient.escapeString(domainId.toString()))
            .replace("{" + "msId" + "}", localVarApiClient.escapeString(msId.toString()))
            .replace("{" + "implicit" + "}", localVarApiClient.escapeString(implicit.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMigrationSetValidateBeforeCall(String domainId, UUID msId, Boolean implicit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'domainId' is set
        if (domainId == null) {
            throw new ApiException("Missing the required parameter 'domainId' when calling getMigrationSet(Async)");
        }

        // verify the required parameter 'msId' is set
        if (msId == null) {
            throw new ApiException("Missing the required parameter 'msId' when calling getMigrationSet(Async)");
        }

        // verify the required parameter 'implicit' is set
        if (implicit == null) {
            throw new ApiException("Missing the required parameter 'implicit' when calling getMigrationSet(Async)");
        }

        return getMigrationSetCall(domainId, msId, implicit, _callback);

    }

    /**
     * 
     * 
     * @param domainId  (required)
     * @param msId  (required)
     * @param implicit  (required)
     * @return SseEmitter
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public SseEmitter getMigrationSet(String domainId, UUID msId, Boolean implicit) throws ApiException {
        ApiResponse<SseEmitter> localVarResp = getMigrationSetWithHttpInfo(domainId, msId, implicit);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param domainId  (required)
     * @param msId  (required)
     * @param implicit  (required)
     * @return ApiResponse&lt;SseEmitter&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SseEmitter> getMigrationSetWithHttpInfo(String domainId, UUID msId, Boolean implicit) throws ApiException {
        okhttp3.Call localVarCall = getMigrationSetValidateBeforeCall(domainId, msId, implicit, null);
        Type localVarReturnType = new TypeToken<SseEmitter>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param domainId  (required)
     * @param msId  (required)
     * @param implicit  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMigrationSetAsync(String domainId, UUID msId, Boolean implicit, final ApiCallback<SseEmitter> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMigrationSetValidateBeforeCall(domainId, msId, implicit, _callback);
        Type localVarReturnType = new TypeToken<SseEmitter>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMigrationSet1
     * @param domainId  (required)
     * @param msId  (required)
     * @param implicit  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMigrationSet1Call(String domainId, UUID msId, Boolean implicit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/rationalization/{domainId}/{msId}/{implicit}"
            .replace("{" + "domainId" + "}", localVarApiClient.escapeString(domainId.toString()))
            .replace("{" + "msId" + "}", localVarApiClient.escapeString(msId.toString()))
            .replace("{" + "implicit" + "}", localVarApiClient.escapeString(implicit.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMigrationSet1ValidateBeforeCall(String domainId, UUID msId, Boolean implicit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'domainId' is set
        if (domainId == null) {
            throw new ApiException("Missing the required parameter 'domainId' when calling getMigrationSet1(Async)");
        }

        // verify the required parameter 'msId' is set
        if (msId == null) {
            throw new ApiException("Missing the required parameter 'msId' when calling getMigrationSet1(Async)");
        }

        // verify the required parameter 'implicit' is set
        if (implicit == null) {
            throw new ApiException("Missing the required parameter 'implicit' when calling getMigrationSet1(Async)");
        }

        return getMigrationSet1Call(domainId, msId, implicit, _callback);

    }

    /**
     * 
     * 
     * @param domainId  (required)
     * @param msId  (required)
     * @param implicit  (required)
     * @return SseEmitter
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public SseEmitter getMigrationSet1(String domainId, UUID msId, Boolean implicit) throws ApiException {
        ApiResponse<SseEmitter> localVarResp = getMigrationSet1WithHttpInfo(domainId, msId, implicit);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param domainId  (required)
     * @param msId  (required)
     * @param implicit  (required)
     * @return ApiResponse&lt;SseEmitter&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SseEmitter> getMigrationSet1WithHttpInfo(String domainId, UUID msId, Boolean implicit) throws ApiException {
        okhttp3.Call localVarCall = getMigrationSet1ValidateBeforeCall(domainId, msId, implicit, null);
        Type localVarReturnType = new TypeToken<SseEmitter>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param domainId  (required)
     * @param msId  (required)
     * @param implicit  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMigrationSet1Async(String domainId, UUID msId, Boolean implicit, final ApiCallback<SseEmitter> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMigrationSet1ValidateBeforeCall(domainId, msId, implicit, _callback);
        Type localVarReturnType = new TypeToken<SseEmitter>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrginatedFragments
     * @param domainId  (required)
     * @param customFragmentId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrginatedFragmentsCall(String domainId, UUID customFragmentId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/rationalization/{domainId}/custom/fragments/{customFragmentId}"
            .replace("{" + "domainId" + "}", localVarApiClient.escapeString(domainId.toString()))
            .replace("{" + "customFragmentId" + "}", localVarApiClient.escapeString(customFragmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrginatedFragmentsValidateBeforeCall(String domainId, UUID customFragmentId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'domainId' is set
        if (domainId == null) {
            throw new ApiException("Missing the required parameter 'domainId' when calling getOrginatedFragments(Async)");
        }

        // verify the required parameter 'customFragmentId' is set
        if (customFragmentId == null) {
            throw new ApiException("Missing the required parameter 'customFragmentId' when calling getOrginatedFragments(Async)");
        }

        return getOrginatedFragmentsCall(domainId, customFragmentId, _callback);

    }

    /**
     * 
     * 
     * @param domainId  (required)
     * @param customFragmentId  (required)
     * @return RationalizationResponseObject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public RationalizationResponseObject getOrginatedFragments(String domainId, UUID customFragmentId) throws ApiException {
        ApiResponse<RationalizationResponseObject> localVarResp = getOrginatedFragmentsWithHttpInfo(domainId, customFragmentId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param domainId  (required)
     * @param customFragmentId  (required)
     * @return ApiResponse&lt;RationalizationResponseObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RationalizationResponseObject> getOrginatedFragmentsWithHttpInfo(String domainId, UUID customFragmentId) throws ApiException {
        okhttp3.Call localVarCall = getOrginatedFragmentsValidateBeforeCall(domainId, customFragmentId, null);
        Type localVarReturnType = new TypeToken<RationalizationResponseObject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param domainId  (required)
     * @param customFragmentId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrginatedFragmentsAsync(String domainId, UUID customFragmentId, final ApiCallback<RationalizationResponseObject> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrginatedFragmentsValidateBeforeCall(domainId, customFragmentId, _callback);
        Type localVarReturnType = new TypeToken<RationalizationResponseObject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getRatMigrationSetDetails
     * @param domainId  (required)
     * @param dasId  (required)
     * @param latestApproved  (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRatMigrationSetDetailsCall(String domainId, UUID dasId, Boolean latestApproved, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/rationalization/{domainId}/migrationset/{dasId}"
            .replace("{" + "domainId" + "}", localVarApiClient.escapeString(domainId.toString()))
            .replace("{" + "dasId" + "}", localVarApiClient.escapeString(dasId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (latestApproved != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("latestApproved", latestApproved));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRatMigrationSetDetailsValidateBeforeCall(String domainId, UUID dasId, Boolean latestApproved, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'domainId' is set
        if (domainId == null) {
            throw new ApiException("Missing the required parameter 'domainId' when calling getRatMigrationSetDetails(Async)");
        }

        // verify the required parameter 'dasId' is set
        if (dasId == null) {
            throw new ApiException("Missing the required parameter 'dasId' when calling getRatMigrationSetDetails(Async)");
        }

        return getRatMigrationSetDetailsCall(domainId, dasId, latestApproved, _callback);

    }

    /**
     * 
     * 
     * @param domainId  (required)
     * @param dasId  (required)
     * @param latestApproved  (optional, default to false)
     * @return RationalizationResponseObject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public RationalizationResponseObject getRatMigrationSetDetails(String domainId, UUID dasId, Boolean latestApproved) throws ApiException {
        ApiResponse<RationalizationResponseObject> localVarResp = getRatMigrationSetDetailsWithHttpInfo(domainId, dasId, latestApproved);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param domainId  (required)
     * @param dasId  (required)
     * @param latestApproved  (optional, default to false)
     * @return ApiResponse&lt;RationalizationResponseObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RationalizationResponseObject> getRatMigrationSetDetailsWithHttpInfo(String domainId, UUID dasId, Boolean latestApproved) throws ApiException {
        okhttp3.Call localVarCall = getRatMigrationSetDetailsValidateBeforeCall(domainId, dasId, latestApproved, null);
        Type localVarReturnType = new TypeToken<RationalizationResponseObject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param domainId  (required)
     * @param dasId  (required)
     * @param latestApproved  (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRatMigrationSetDetailsAsync(String domainId, UUID dasId, Boolean latestApproved, final ApiCallback<RationalizationResponseObject> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRatMigrationSetDetailsValidateBeforeCall(domainId, dasId, latestApproved, _callback);
        Type localVarReturnType = new TypeToken<RationalizationResponseObject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getRationalisationRunResults
     * @param domainId  (required)
     * @param msId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRationalisationRunResultsCall(String domainId, UUID msId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/rationalization/{domainId}/report/{msId}"
            .replace("{" + "domainId" + "}", localVarApiClient.escapeString(domainId.toString()))
            .replace("{" + "msId" + "}", localVarApiClient.escapeString(msId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRationalisationRunResultsValidateBeforeCall(String domainId, UUID msId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'domainId' is set
        if (domainId == null) {
            throw new ApiException("Missing the required parameter 'domainId' when calling getRationalisationRunResults(Async)");
        }

        // verify the required parameter 'msId' is set
        if (msId == null) {
            throw new ApiException("Missing the required parameter 'msId' when calling getRationalisationRunResults(Async)");
        }

        return getRationalisationRunResultsCall(domainId, msId, _callback);

    }

    /**
     * 
     * 
     * @param domainId  (required)
     * @param msId  (required)
     * @return RationalizationResponseObject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public RationalizationResponseObject getRationalisationRunResults(String domainId, UUID msId) throws ApiException {
        ApiResponse<RationalizationResponseObject> localVarResp = getRationalisationRunResultsWithHttpInfo(domainId, msId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param domainId  (required)
     * @param msId  (required)
     * @return ApiResponse&lt;RationalizationResponseObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RationalizationResponseObject> getRationalisationRunResultsWithHttpInfo(String domainId, UUID msId) throws ApiException {
        okhttp3.Call localVarCall = getRationalisationRunResultsValidateBeforeCall(domainId, msId, null);
        Type localVarReturnType = new TypeToken<RationalizationResponseObject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param domainId  (required)
     * @param msId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRationalisationRunResultsAsync(String domainId, UUID msId, final ApiCallback<RationalizationResponseObject> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRationalisationRunResultsValidateBeforeCall(domainId, msId, _callback);
        Type localVarReturnType = new TypeToken<RationalizationResponseObject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getRationalizationFragments
     * @param domainId  (required)
     * @param msId  (required)
     * @param commType  (optional)
     * @param resourcePackId  (optional)
     * @param dasObjectType  (optional)
     * @param offset  (optional, default to 0)
     * @param limit  (optional, default to 10)
     * @param orderby  (optional)
     * @param filter  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRationalizationFragmentsCall(String domainId, UUID msId, String commType, String resourcePackId, List<String> dasObjectType, Integer offset, Integer limit, Object orderby, RationalisationFilter filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/rationalization/{domainId}/fragments/{msId}"
            .replace("{" + "domainId" + "}", localVarApiClient.escapeString(domainId.toString()))
            .replace("{" + "msId" + "}", localVarApiClient.escapeString(msId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (commType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("commType", commType));
        }

        if (resourcePackId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("resourcePackId", resourcePackId));
        }

        if (dasObjectType != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dasObjectType", dasObjectType));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (orderby != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("orderby", orderby));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRationalizationFragmentsValidateBeforeCall(String domainId, UUID msId, String commType, String resourcePackId, List<String> dasObjectType, Integer offset, Integer limit, Object orderby, RationalisationFilter filter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'domainId' is set
        if (domainId == null) {
            throw new ApiException("Missing the required parameter 'domainId' when calling getRationalizationFragments(Async)");
        }

        // verify the required parameter 'msId' is set
        if (msId == null) {
            throw new ApiException("Missing the required parameter 'msId' when calling getRationalizationFragments(Async)");
        }

        return getRationalizationFragmentsCall(domainId, msId, commType, resourcePackId, dasObjectType, offset, limit, orderby, filter, _callback);

    }

    /**
     * 
     * 
     * @param domainId  (required)
     * @param msId  (required)
     * @param commType  (optional)
     * @param resourcePackId  (optional)
     * @param dasObjectType  (optional)
     * @param offset  (optional, default to 0)
     * @param limit  (optional, default to 10)
     * @param orderby  (optional)
     * @param filter  (optional)
     * @return RationalizationResponseObject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public RationalizationResponseObject getRationalizationFragments(String domainId, UUID msId, String commType, String resourcePackId, List<String> dasObjectType, Integer offset, Integer limit, Object orderby, RationalisationFilter filter) throws ApiException {
        ApiResponse<RationalizationResponseObject> localVarResp = getRationalizationFragmentsWithHttpInfo(domainId, msId, commType, resourcePackId, dasObjectType, offset, limit, orderby, filter);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param domainId  (required)
     * @param msId  (required)
     * @param commType  (optional)
     * @param resourcePackId  (optional)
     * @param dasObjectType  (optional)
     * @param offset  (optional, default to 0)
     * @param limit  (optional, default to 10)
     * @param orderby  (optional)
     * @param filter  (optional)
     * @return ApiResponse&lt;RationalizationResponseObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RationalizationResponseObject> getRationalizationFragmentsWithHttpInfo(String domainId, UUID msId, String commType, String resourcePackId, List<String> dasObjectType, Integer offset, Integer limit, Object orderby, RationalisationFilter filter) throws ApiException {
        okhttp3.Call localVarCall = getRationalizationFragmentsValidateBeforeCall(domainId, msId, commType, resourcePackId, dasObjectType, offset, limit, orderby, filter, null);
        Type localVarReturnType = new TypeToken<RationalizationResponseObject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param domainId  (required)
     * @param msId  (required)
     * @param commType  (optional)
     * @param resourcePackId  (optional)
     * @param dasObjectType  (optional)
     * @param offset  (optional, default to 0)
     * @param limit  (optional, default to 10)
     * @param orderby  (optional)
     * @param filter  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRationalizationFragmentsAsync(String domainId, UUID msId, String commType, String resourcePackId, List<String> dasObjectType, Integer offset, Integer limit, Object orderby, RationalisationFilter filter, final ApiCallback<RationalizationResponseObject> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRationalizationFragmentsValidateBeforeCall(domainId, msId, commType, resourcePackId, dasObjectType, offset, limit, orderby, filter, _callback);
        Type localVarReturnType = new TypeToken<RationalizationResponseObject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getRootCustomFragmentId
     * @param domainId  (required)
     * @param fragmentId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRootCustomFragmentIdCall(String domainId, UUID fragmentId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/rationalization/{domainId}/custom/fragments/parent/{fragmentId}"
            .replace("{" + "domainId" + "}", localVarApiClient.escapeString(domainId.toString()))
            .replace("{" + "fragmentId" + "}", localVarApiClient.escapeString(fragmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRootCustomFragmentIdValidateBeforeCall(String domainId, UUID fragmentId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'domainId' is set
        if (domainId == null) {
            throw new ApiException("Missing the required parameter 'domainId' when calling getRootCustomFragmentId(Async)");
        }

        // verify the required parameter 'fragmentId' is set
        if (fragmentId == null) {
            throw new ApiException("Missing the required parameter 'fragmentId' when calling getRootCustomFragmentId(Async)");
        }

        return getRootCustomFragmentIdCall(domainId, fragmentId, _callback);

    }

    /**
     * 
     * 
     * @param domainId  (required)
     * @param fragmentId  (required)
     * @return RationalizationResponseObject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public RationalizationResponseObject getRootCustomFragmentId(String domainId, UUID fragmentId) throws ApiException {
        ApiResponse<RationalizationResponseObject> localVarResp = getRootCustomFragmentIdWithHttpInfo(domainId, fragmentId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param domainId  (required)
     * @param fragmentId  (required)
     * @return ApiResponse&lt;RationalizationResponseObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RationalizationResponseObject> getRootCustomFragmentIdWithHttpInfo(String domainId, UUID fragmentId) throws ApiException {
        okhttp3.Call localVarCall = getRootCustomFragmentIdValidateBeforeCall(domainId, fragmentId, null);
        Type localVarReturnType = new TypeToken<RationalizationResponseObject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param domainId  (required)
     * @param fragmentId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRootCustomFragmentIdAsync(String domainId, UUID fragmentId, final ApiCallback<RationalizationResponseObject> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRootCustomFragmentIdValidateBeforeCall(domainId, fragmentId, _callback);
        Type localVarReturnType = new TypeToken<RationalizationResponseObject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTemplateFragments
     * @param domainId  (required)
     * @param msId  (required)
     * @param commType  (optional)
     * @param resourcePackId  (optional)
     * @param dasObjectType  (optional)
     * @param offset  (optional, default to 0)
     * @param limit  (optional, default to 10)
     * @param orderby  (optional)
     * @param filter  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTemplateFragmentsCall(String domainId, UUID msId, String commType, String resourcePackId, List<String> dasObjectType, Integer offset, Integer limit, Object orderby, RationalisationFilter filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/rationalization/{domainId}/template/fragments/{msId}"
            .replace("{" + "domainId" + "}", localVarApiClient.escapeString(domainId.toString()))
            .replace("{" + "msId" + "}", localVarApiClient.escapeString(msId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (commType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("commType", commType));
        }

        if (resourcePackId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("resourcePackId", resourcePackId));
        }

        if (dasObjectType != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dasObjectType", dasObjectType));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (orderby != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("orderby", orderby));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTemplateFragmentsValidateBeforeCall(String domainId, UUID msId, String commType, String resourcePackId, List<String> dasObjectType, Integer offset, Integer limit, Object orderby, RationalisationFilter filter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'domainId' is set
        if (domainId == null) {
            throw new ApiException("Missing the required parameter 'domainId' when calling getTemplateFragments(Async)");
        }

        // verify the required parameter 'msId' is set
        if (msId == null) {
            throw new ApiException("Missing the required parameter 'msId' when calling getTemplateFragments(Async)");
        }

        return getTemplateFragmentsCall(domainId, msId, commType, resourcePackId, dasObjectType, offset, limit, orderby, filter, _callback);

    }

    /**
     * 
     * 
     * @param domainId  (required)
     * @param msId  (required)
     * @param commType  (optional)
     * @param resourcePackId  (optional)
     * @param dasObjectType  (optional)
     * @param offset  (optional, default to 0)
     * @param limit  (optional, default to 10)
     * @param orderby  (optional)
     * @param filter  (optional)
     * @return RationalizationResponseObject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public RationalizationResponseObject getTemplateFragments(String domainId, UUID msId, String commType, String resourcePackId, List<String> dasObjectType, Integer offset, Integer limit, Object orderby, RationalisationFilter filter) throws ApiException {
        ApiResponse<RationalizationResponseObject> localVarResp = getTemplateFragmentsWithHttpInfo(domainId, msId, commType, resourcePackId, dasObjectType, offset, limit, orderby, filter);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param domainId  (required)
     * @param msId  (required)
     * @param commType  (optional)
     * @param resourcePackId  (optional)
     * @param dasObjectType  (optional)
     * @param offset  (optional, default to 0)
     * @param limit  (optional, default to 10)
     * @param orderby  (optional)
     * @param filter  (optional)
     * @return ApiResponse&lt;RationalizationResponseObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RationalizationResponseObject> getTemplateFragmentsWithHttpInfo(String domainId, UUID msId, String commType, String resourcePackId, List<String> dasObjectType, Integer offset, Integer limit, Object orderby, RationalisationFilter filter) throws ApiException {
        okhttp3.Call localVarCall = getTemplateFragmentsValidateBeforeCall(domainId, msId, commType, resourcePackId, dasObjectType, offset, limit, orderby, filter, null);
        Type localVarReturnType = new TypeToken<RationalizationResponseObject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param domainId  (required)
     * @param msId  (required)
     * @param commType  (optional)
     * @param resourcePackId  (optional)
     * @param dasObjectType  (optional)
     * @param offset  (optional, default to 0)
     * @param limit  (optional, default to 10)
     * @param orderby  (optional)
     * @param filter  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTemplateFragmentsAsync(String domainId, UUID msId, String commType, String resourcePackId, List<String> dasObjectType, Integer offset, Integer limit, Object orderby, RationalisationFilter filter, final ApiCallback<RationalizationResponseObject> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTemplateFragmentsValidateBeforeCall(domainId, msId, commType, resourcePackId, dasObjectType, offset, limit, orderby, filter, _callback);
        Type localVarReturnType = new TypeToken<RationalizationResponseObject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for preview
     * @param domainId  (required)
     * @param fragmentId  (required)
     * @param isFragmentPreview  (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call previewCall(String domainId, UUID fragmentId, Boolean isFragmentPreview, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/rationalization/{domainId}/preview/{fragmentId}"
            .replace("{" + "domainId" + "}", localVarApiClient.escapeString(domainId.toString()))
            .replace("{" + "fragmentId" + "}", localVarApiClient.escapeString(fragmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (isFragmentPreview != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isFragmentPreview", isFragmentPreview));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call previewValidateBeforeCall(String domainId, UUID fragmentId, Boolean isFragmentPreview, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'domainId' is set
        if (domainId == null) {
            throw new ApiException("Missing the required parameter 'domainId' when calling preview(Async)");
        }

        // verify the required parameter 'fragmentId' is set
        if (fragmentId == null) {
            throw new ApiException("Missing the required parameter 'fragmentId' when calling preview(Async)");
        }

        return previewCall(domainId, fragmentId, isFragmentPreview, _callback);

    }

    /**
     * 
     * 
     * @param domainId  (required)
     * @param fragmentId  (required)
     * @param isFragmentPreview  (optional, default to false)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Object preview(String domainId, UUID fragmentId, Boolean isFragmentPreview) throws ApiException {
        ApiResponse<Object> localVarResp = previewWithHttpInfo(domainId, fragmentId, isFragmentPreview);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param domainId  (required)
     * @param fragmentId  (required)
     * @param isFragmentPreview  (optional, default to false)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> previewWithHttpInfo(String domainId, UUID fragmentId, Boolean isFragmentPreview) throws ApiException {
        okhttp3.Call localVarCall = previewValidateBeforeCall(domainId, fragmentId, isFragmentPreview, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param domainId  (required)
     * @param fragmentId  (required)
     * @param isFragmentPreview  (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call previewAsync(String domainId, UUID fragmentId, Boolean isFragmentPreview, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = previewValidateBeforeCall(domainId, fragmentId, isFragmentPreview, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateCustomFragment
     * @param domainId  (required)
     * @param msId  (required)
     * @param customFragmentId  (required)
     * @param customFragmentRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateCustomFragmentCall(String domainId, UUID msId, UUID customFragmentId, CustomFragmentRequest customFragmentRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = customFragmentRequest;

        // create path and map variables
        String localVarPath = "/api/v1/rationalization/{domainId}/preview/{msId}/{customFragmentId}"
            .replace("{" + "domainId" + "}", localVarApiClient.escapeString(domainId.toString()))
            .replace("{" + "msId" + "}", localVarApiClient.escapeString(msId.toString()))
            .replace("{" + "customFragmentId" + "}", localVarApiClient.escapeString(customFragmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateCustomFragmentValidateBeforeCall(String domainId, UUID msId, UUID customFragmentId, CustomFragmentRequest customFragmentRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'domainId' is set
        if (domainId == null) {
            throw new ApiException("Missing the required parameter 'domainId' when calling updateCustomFragment(Async)");
        }

        // verify the required parameter 'msId' is set
        if (msId == null) {
            throw new ApiException("Missing the required parameter 'msId' when calling updateCustomFragment(Async)");
        }

        // verify the required parameter 'customFragmentId' is set
        if (customFragmentId == null) {
            throw new ApiException("Missing the required parameter 'customFragmentId' when calling updateCustomFragment(Async)");
        }

        // verify the required parameter 'customFragmentRequest' is set
        if (customFragmentRequest == null) {
            throw new ApiException("Missing the required parameter 'customFragmentRequest' when calling updateCustomFragment(Async)");
        }

        return updateCustomFragmentCall(domainId, msId, customFragmentId, customFragmentRequest, _callback);

    }

    /**
     * 
     * 
     * @param domainId  (required)
     * @param msId  (required)
     * @param customFragmentId  (required)
     * @param customFragmentRequest  (required)
     * @return RationalizationResponseObject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public RationalizationResponseObject updateCustomFragment(String domainId, UUID msId, UUID customFragmentId, CustomFragmentRequest customFragmentRequest) throws ApiException {
        ApiResponse<RationalizationResponseObject> localVarResp = updateCustomFragmentWithHttpInfo(domainId, msId, customFragmentId, customFragmentRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param domainId  (required)
     * @param msId  (required)
     * @param customFragmentId  (required)
     * @param customFragmentRequest  (required)
     * @return ApiResponse&lt;RationalizationResponseObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RationalizationResponseObject> updateCustomFragmentWithHttpInfo(String domainId, UUID msId, UUID customFragmentId, CustomFragmentRequest customFragmentRequest) throws ApiException {
        okhttp3.Call localVarCall = updateCustomFragmentValidateBeforeCall(domainId, msId, customFragmentId, customFragmentRequest, null);
        Type localVarReturnType = new TypeToken<RationalizationResponseObject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param domainId  (required)
     * @param msId  (required)
     * @param customFragmentId  (required)
     * @param customFragmentRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateCustomFragmentAsync(String domainId, UUID msId, UUID customFragmentId, CustomFragmentRequest customFragmentRequest, final ApiCallback<RationalizationResponseObject> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateCustomFragmentValidateBeforeCall(domainId, msId, customFragmentId, customFragmentRequest, _callback);
        Type localVarReturnType = new TypeToken<RationalizationResponseObject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateFragment
     * @param domainId  (required)
     * @param fragmentId  (required)
     * @param fragmentRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateFragmentCall(String domainId, UUID fragmentId, FragmentRequest fragmentRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = fragmentRequest;

        // create path and map variables
        String localVarPath = "/api/v1/rationalization/{domainId}/preview/{fragmentId}"
            .replace("{" + "domainId" + "}", localVarApiClient.escapeString(domainId.toString()))
            .replace("{" + "fragmentId" + "}", localVarApiClient.escapeString(fragmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateFragmentValidateBeforeCall(String domainId, UUID fragmentId, FragmentRequest fragmentRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'domainId' is set
        if (domainId == null) {
            throw new ApiException("Missing the required parameter 'domainId' when calling updateFragment(Async)");
        }

        // verify the required parameter 'fragmentId' is set
        if (fragmentId == null) {
            throw new ApiException("Missing the required parameter 'fragmentId' when calling updateFragment(Async)");
        }

        // verify the required parameter 'fragmentRequest' is set
        if (fragmentRequest == null) {
            throw new ApiException("Missing the required parameter 'fragmentRequest' when calling updateFragment(Async)");
        }

        return updateFragmentCall(domainId, fragmentId, fragmentRequest, _callback);

    }

    /**
     * 
     * 
     * @param domainId  (required)
     * @param fragmentId  (required)
     * @param fragmentRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Object updateFragment(String domainId, UUID fragmentId, FragmentRequest fragmentRequest) throws ApiException {
        ApiResponse<Object> localVarResp = updateFragmentWithHttpInfo(domainId, fragmentId, fragmentRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param domainId  (required)
     * @param fragmentId  (required)
     * @param fragmentRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> updateFragmentWithHttpInfo(String domainId, UUID fragmentId, FragmentRequest fragmentRequest) throws ApiException {
        okhttp3.Call localVarCall = updateFragmentValidateBeforeCall(domainId, fragmentId, fragmentRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param domainId  (required)
     * @param fragmentId  (required)
     * @param fragmentRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateFragmentAsync(String domainId, UUID fragmentId, FragmentRequest fragmentRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateFragmentValidateBeforeCall(domainId, fragmentId, fragmentRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
