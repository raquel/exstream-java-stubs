/*
 * Exstream CXI Integration
 * **For internal use of the product only**
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.DataResponseListEmailevent;
import org.openapitools.client.model.DataResponseListEvents;
import org.openapitools.client.model.DataResponseLong;
import java.time.OffsetDateTime;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ApiV1EventmetricsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ApiV1EventmetricsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ApiV1EventmetricsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getCustomMetadataEvents
     * @param tenantId  (required)
     * @param domainId  (required)
     * @param flowStepId  (required)
     * @param communicationId  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCustomMetadataEventsCall(String tenantId, String domainId, String flowStepId, String communicationId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/eventmetrics/docgen-event/{tenantId}/{domainId}/{flowStepId}/metadata"
            .replace("{" + "tenantId" + "}", localVarApiClient.escapeString(tenantId.toString()))
            .replace("{" + "domainId" + "}", localVarApiClient.escapeString(domainId.toString()))
            .replace("{" + "flowStepId" + "}", localVarApiClient.escapeString(flowStepId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (communicationId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("communicationId", communicationId));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCustomMetadataEventsValidateBeforeCall(String tenantId, String domainId, String flowStepId, String communicationId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tenantId' is set
        if (tenantId == null) {
            throw new ApiException("Missing the required parameter 'tenantId' when calling getCustomMetadataEvents(Async)");
        }

        // verify the required parameter 'domainId' is set
        if (domainId == null) {
            throw new ApiException("Missing the required parameter 'domainId' when calling getCustomMetadataEvents(Async)");
        }

        // verify the required parameter 'flowStepId' is set
        if (flowStepId == null) {
            throw new ApiException("Missing the required parameter 'flowStepId' when calling getCustomMetadataEvents(Async)");
        }

        return getCustomMetadataEventsCall(tenantId, domainId, flowStepId, communicationId, _callback);

    }

    /**
     * 
     * 
     * @param tenantId  (required)
     * @param domainId  (required)
     * @param flowStepId  (required)
     * @param communicationId  (optional)
     * @return DataResponseListEvents
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public DataResponseListEvents getCustomMetadataEvents(String tenantId, String domainId, String flowStepId, String communicationId) throws ApiException {
        ApiResponse<DataResponseListEvents> localVarResp = getCustomMetadataEventsWithHttpInfo(tenantId, domainId, flowStepId, communicationId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param tenantId  (required)
     * @param domainId  (required)
     * @param flowStepId  (required)
     * @param communicationId  (optional)
     * @return ApiResponse&lt;DataResponseListEvents&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DataResponseListEvents> getCustomMetadataEventsWithHttpInfo(String tenantId, String domainId, String flowStepId, String communicationId) throws ApiException {
        okhttp3.Call localVarCall = getCustomMetadataEventsValidateBeforeCall(tenantId, domainId, flowStepId, communicationId, null);
        Type localVarReturnType = new TypeToken<DataResponseListEvents>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param tenantId  (required)
     * @param domainId  (required)
     * @param flowStepId  (required)
     * @param communicationId  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCustomMetadataEventsAsync(String tenantId, String domainId, String flowStepId, String communicationId, final ApiCallback<DataResponseListEvents> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCustomMetadataEventsValidateBeforeCall(tenantId, domainId, flowStepId, communicationId, _callback);
        Type localVarReturnType = new TypeToken<DataResponseListEvents>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDocgenReport
     * @param tenantId  (required)
     * @param domainId  (required)
     * @param processingState  (optional)
     * @param lastUpdateTimeStart  (optional)
     * @param lastUpdateTimeEnd  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDocgenReportCall(String tenantId, String domainId, Integer processingState, OffsetDateTime lastUpdateTimeStart, OffsetDateTime lastUpdateTimeEnd, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/eventmetrics/docgen-event/{tenantId}/{domainId}"
            .replace("{" + "tenantId" + "}", localVarApiClient.escapeString(tenantId.toString()))
            .replace("{" + "domainId" + "}", localVarApiClient.escapeString(domainId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (processingState != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("processingState", processingState));
        }

        if (lastUpdateTimeStart != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lastUpdateTimeStart", lastUpdateTimeStart));
        }

        if (lastUpdateTimeEnd != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lastUpdateTimeEnd", lastUpdateTimeEnd));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDocgenReportValidateBeforeCall(String tenantId, String domainId, Integer processingState, OffsetDateTime lastUpdateTimeStart, OffsetDateTime lastUpdateTimeEnd, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tenantId' is set
        if (tenantId == null) {
            throw new ApiException("Missing the required parameter 'tenantId' when calling getDocgenReport(Async)");
        }

        // verify the required parameter 'domainId' is set
        if (domainId == null) {
            throw new ApiException("Missing the required parameter 'domainId' when calling getDocgenReport(Async)");
        }

        return getDocgenReportCall(tenantId, domainId, processingState, lastUpdateTimeStart, lastUpdateTimeEnd, _callback);

    }

    /**
     * 
     * 
     * @param tenantId  (required)
     * @param domainId  (required)
     * @param processingState  (optional)
     * @param lastUpdateTimeStart  (optional)
     * @param lastUpdateTimeEnd  (optional)
     * @return DataResponseLong
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public DataResponseLong getDocgenReport(String tenantId, String domainId, Integer processingState, OffsetDateTime lastUpdateTimeStart, OffsetDateTime lastUpdateTimeEnd) throws ApiException {
        ApiResponse<DataResponseLong> localVarResp = getDocgenReportWithHttpInfo(tenantId, domainId, processingState, lastUpdateTimeStart, lastUpdateTimeEnd);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param tenantId  (required)
     * @param domainId  (required)
     * @param processingState  (optional)
     * @param lastUpdateTimeStart  (optional)
     * @param lastUpdateTimeEnd  (optional)
     * @return ApiResponse&lt;DataResponseLong&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DataResponseLong> getDocgenReportWithHttpInfo(String tenantId, String domainId, Integer processingState, OffsetDateTime lastUpdateTimeStart, OffsetDateTime lastUpdateTimeEnd) throws ApiException {
        okhttp3.Call localVarCall = getDocgenReportValidateBeforeCall(tenantId, domainId, processingState, lastUpdateTimeStart, lastUpdateTimeEnd, null);
        Type localVarReturnType = new TypeToken<DataResponseLong>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param tenantId  (required)
     * @param domainId  (required)
     * @param processingState  (optional)
     * @param lastUpdateTimeStart  (optional)
     * @param lastUpdateTimeEnd  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDocgenReportAsync(String tenantId, String domainId, Integer processingState, OffsetDateTime lastUpdateTimeStart, OffsetDateTime lastUpdateTimeEnd, final ApiCallback<DataResponseLong> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDocgenReportValidateBeforeCall(tenantId, domainId, processingState, lastUpdateTimeStart, lastUpdateTimeEnd, _callback);
        Type localVarReturnType = new TypeToken<DataResponseLong>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getEmailEvents
     * @param tenantId  (required)
     * @param domainId  (required)
     * @param connectorType  (required)
     * @param lastUpdateTimeStart  (optional)
     * @param lastUpdateTimeEnd  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getEmailEventsCall(String tenantId, String domainId, String connectorType, OffsetDateTime lastUpdateTimeStart, OffsetDateTime lastUpdateTimeEnd, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/eventmetrics/email-event/{tenantId}/{domainId}/content"
            .replace("{" + "tenantId" + "}", localVarApiClient.escapeString(tenantId.toString()))
            .replace("{" + "domainId" + "}", localVarApiClient.escapeString(domainId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (connectorType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("connectorType", connectorType));
        }

        if (lastUpdateTimeStart != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lastUpdateTimeStart", lastUpdateTimeStart));
        }

        if (lastUpdateTimeEnd != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lastUpdateTimeEnd", lastUpdateTimeEnd));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getEmailEventsValidateBeforeCall(String tenantId, String domainId, String connectorType, OffsetDateTime lastUpdateTimeStart, OffsetDateTime lastUpdateTimeEnd, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tenantId' is set
        if (tenantId == null) {
            throw new ApiException("Missing the required parameter 'tenantId' when calling getEmailEvents(Async)");
        }

        // verify the required parameter 'domainId' is set
        if (domainId == null) {
            throw new ApiException("Missing the required parameter 'domainId' when calling getEmailEvents(Async)");
        }

        // verify the required parameter 'connectorType' is set
        if (connectorType == null) {
            throw new ApiException("Missing the required parameter 'connectorType' when calling getEmailEvents(Async)");
        }

        return getEmailEventsCall(tenantId, domainId, connectorType, lastUpdateTimeStart, lastUpdateTimeEnd, _callback);

    }

    /**
     * 
     * 
     * @param tenantId  (required)
     * @param domainId  (required)
     * @param connectorType  (required)
     * @param lastUpdateTimeStart  (optional)
     * @param lastUpdateTimeEnd  (optional)
     * @return DataResponseListEmailevent
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public DataResponseListEmailevent getEmailEvents(String tenantId, String domainId, String connectorType, OffsetDateTime lastUpdateTimeStart, OffsetDateTime lastUpdateTimeEnd) throws ApiException {
        ApiResponse<DataResponseListEmailevent> localVarResp = getEmailEventsWithHttpInfo(tenantId, domainId, connectorType, lastUpdateTimeStart, lastUpdateTimeEnd);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param tenantId  (required)
     * @param domainId  (required)
     * @param connectorType  (required)
     * @param lastUpdateTimeStart  (optional)
     * @param lastUpdateTimeEnd  (optional)
     * @return ApiResponse&lt;DataResponseListEmailevent&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DataResponseListEmailevent> getEmailEventsWithHttpInfo(String tenantId, String domainId, String connectorType, OffsetDateTime lastUpdateTimeStart, OffsetDateTime lastUpdateTimeEnd) throws ApiException {
        okhttp3.Call localVarCall = getEmailEventsValidateBeforeCall(tenantId, domainId, connectorType, lastUpdateTimeStart, lastUpdateTimeEnd, null);
        Type localVarReturnType = new TypeToken<DataResponseListEmailevent>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param tenantId  (required)
     * @param domainId  (required)
     * @param connectorType  (required)
     * @param lastUpdateTimeStart  (optional)
     * @param lastUpdateTimeEnd  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getEmailEventsAsync(String tenantId, String domainId, String connectorType, OffsetDateTime lastUpdateTimeStart, OffsetDateTime lastUpdateTimeEnd, final ApiCallback<DataResponseListEmailevent> _callback) throws ApiException {

        okhttp3.Call localVarCall = getEmailEventsValidateBeforeCall(tenantId, domainId, connectorType, lastUpdateTimeStart, lastUpdateTimeEnd, _callback);
        Type localVarReturnType = new TypeToken<DataResponseListEmailevent>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getEmaileventReport
     * @param tenantId  (required)
     * @param domainId  (required)
     * @param connectorType  (required)
     * @param processingState  (optional)
     * @param lastUpdateTimeStart  (optional)
     * @param lastUpdateTimeEnd  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getEmaileventReportCall(String tenantId, String domainId, String connectorType, Integer processingState, OffsetDateTime lastUpdateTimeStart, OffsetDateTime lastUpdateTimeEnd, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/eventmetrics/email-event/{tenantId}/{domainId}"
            .replace("{" + "tenantId" + "}", localVarApiClient.escapeString(tenantId.toString()))
            .replace("{" + "domainId" + "}", localVarApiClient.escapeString(domainId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (connectorType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("connectorType", connectorType));
        }

        if (processingState != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("processingState", processingState));
        }

        if (lastUpdateTimeStart != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lastUpdateTimeStart", lastUpdateTimeStart));
        }

        if (lastUpdateTimeEnd != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lastUpdateTimeEnd", lastUpdateTimeEnd));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getEmaileventReportValidateBeforeCall(String tenantId, String domainId, String connectorType, Integer processingState, OffsetDateTime lastUpdateTimeStart, OffsetDateTime lastUpdateTimeEnd, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tenantId' is set
        if (tenantId == null) {
            throw new ApiException("Missing the required parameter 'tenantId' when calling getEmaileventReport(Async)");
        }

        // verify the required parameter 'domainId' is set
        if (domainId == null) {
            throw new ApiException("Missing the required parameter 'domainId' when calling getEmaileventReport(Async)");
        }

        // verify the required parameter 'connectorType' is set
        if (connectorType == null) {
            throw new ApiException("Missing the required parameter 'connectorType' when calling getEmaileventReport(Async)");
        }

        return getEmaileventReportCall(tenantId, domainId, connectorType, processingState, lastUpdateTimeStart, lastUpdateTimeEnd, _callback);

    }

    /**
     * 
     * 
     * @param tenantId  (required)
     * @param domainId  (required)
     * @param connectorType  (required)
     * @param processingState  (optional)
     * @param lastUpdateTimeStart  (optional)
     * @param lastUpdateTimeEnd  (optional)
     * @return DataResponseLong
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public DataResponseLong getEmaileventReport(String tenantId, String domainId, String connectorType, Integer processingState, OffsetDateTime lastUpdateTimeStart, OffsetDateTime lastUpdateTimeEnd) throws ApiException {
        ApiResponse<DataResponseLong> localVarResp = getEmaileventReportWithHttpInfo(tenantId, domainId, connectorType, processingState, lastUpdateTimeStart, lastUpdateTimeEnd);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param tenantId  (required)
     * @param domainId  (required)
     * @param connectorType  (required)
     * @param processingState  (optional)
     * @param lastUpdateTimeStart  (optional)
     * @param lastUpdateTimeEnd  (optional)
     * @return ApiResponse&lt;DataResponseLong&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DataResponseLong> getEmaileventReportWithHttpInfo(String tenantId, String domainId, String connectorType, Integer processingState, OffsetDateTime lastUpdateTimeStart, OffsetDateTime lastUpdateTimeEnd) throws ApiException {
        okhttp3.Call localVarCall = getEmaileventReportValidateBeforeCall(tenantId, domainId, connectorType, processingState, lastUpdateTimeStart, lastUpdateTimeEnd, null);
        Type localVarReturnType = new TypeToken<DataResponseLong>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param tenantId  (required)
     * @param domainId  (required)
     * @param connectorType  (required)
     * @param processingState  (optional)
     * @param lastUpdateTimeStart  (optional)
     * @param lastUpdateTimeEnd  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getEmaileventReportAsync(String tenantId, String domainId, String connectorType, Integer processingState, OffsetDateTime lastUpdateTimeStart, OffsetDateTime lastUpdateTimeEnd, final ApiCallback<DataResponseLong> _callback) throws ApiException {

        okhttp3.Call localVarCall = getEmaileventReportValidateBeforeCall(tenantId, domainId, connectorType, processingState, lastUpdateTimeStart, lastUpdateTimeEnd, _callback);
        Type localVarReturnType = new TypeToken<DataResponseLong>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getEvents
     * @param tenantId  (required)
     * @param domainId  (required)
     * @param eventType  (optional)
     * @param lastUpdateTimeStart  (optional)
     * @param lastUpdateTimeEnd  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getEventsCall(String tenantId, String domainId, Integer eventType, OffsetDateTime lastUpdateTimeStart, OffsetDateTime lastUpdateTimeEnd, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/eventmetrics/events/{tenantId}/{domainId}/content"
            .replace("{" + "tenantId" + "}", localVarApiClient.escapeString(tenantId.toString()))
            .replace("{" + "domainId" + "}", localVarApiClient.escapeString(domainId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (eventType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("eventType", eventType));
        }

        if (lastUpdateTimeStart != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lastUpdateTimeStart", lastUpdateTimeStart));
        }

        if (lastUpdateTimeEnd != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lastUpdateTimeEnd", lastUpdateTimeEnd));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getEventsValidateBeforeCall(String tenantId, String domainId, Integer eventType, OffsetDateTime lastUpdateTimeStart, OffsetDateTime lastUpdateTimeEnd, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tenantId' is set
        if (tenantId == null) {
            throw new ApiException("Missing the required parameter 'tenantId' when calling getEvents(Async)");
        }

        // verify the required parameter 'domainId' is set
        if (domainId == null) {
            throw new ApiException("Missing the required parameter 'domainId' when calling getEvents(Async)");
        }

        return getEventsCall(tenantId, domainId, eventType, lastUpdateTimeStart, lastUpdateTimeEnd, _callback);

    }

    /**
     * 
     * 
     * @param tenantId  (required)
     * @param domainId  (required)
     * @param eventType  (optional)
     * @param lastUpdateTimeStart  (optional)
     * @param lastUpdateTimeEnd  (optional)
     * @return DataResponseListEvents
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public DataResponseListEvents getEvents(String tenantId, String domainId, Integer eventType, OffsetDateTime lastUpdateTimeStart, OffsetDateTime lastUpdateTimeEnd) throws ApiException {
        ApiResponse<DataResponseListEvents> localVarResp = getEventsWithHttpInfo(tenantId, domainId, eventType, lastUpdateTimeStart, lastUpdateTimeEnd);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param tenantId  (required)
     * @param domainId  (required)
     * @param eventType  (optional)
     * @param lastUpdateTimeStart  (optional)
     * @param lastUpdateTimeEnd  (optional)
     * @return ApiResponse&lt;DataResponseListEvents&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DataResponseListEvents> getEventsWithHttpInfo(String tenantId, String domainId, Integer eventType, OffsetDateTime lastUpdateTimeStart, OffsetDateTime lastUpdateTimeEnd) throws ApiException {
        okhttp3.Call localVarCall = getEventsValidateBeforeCall(tenantId, domainId, eventType, lastUpdateTimeStart, lastUpdateTimeEnd, null);
        Type localVarReturnType = new TypeToken<DataResponseListEvents>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param tenantId  (required)
     * @param domainId  (required)
     * @param eventType  (optional)
     * @param lastUpdateTimeStart  (optional)
     * @param lastUpdateTimeEnd  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getEventsAsync(String tenantId, String domainId, Integer eventType, OffsetDateTime lastUpdateTimeStart, OffsetDateTime lastUpdateTimeEnd, final ApiCallback<DataResponseListEvents> _callback) throws ApiException {

        okhttp3.Call localVarCall = getEventsValidateBeforeCall(tenantId, domainId, eventType, lastUpdateTimeStart, lastUpdateTimeEnd, _callback);
        Type localVarReturnType = new TypeToken<DataResponseListEvents>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getEventsReport
     * @param tenantId  (required)
     * @param domainId  (required)
     * @param lastUpdateTimeStart  (optional)
     * @param lastUpdateTimeEnd  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getEventsReportCall(String tenantId, String domainId, OffsetDateTime lastUpdateTimeStart, OffsetDateTime lastUpdateTimeEnd, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/eventmetrics/events/{tenantId}/{domainId}"
            .replace("{" + "tenantId" + "}", localVarApiClient.escapeString(tenantId.toString()))
            .replace("{" + "domainId" + "}", localVarApiClient.escapeString(domainId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (lastUpdateTimeStart != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lastUpdateTimeStart", lastUpdateTimeStart));
        }

        if (lastUpdateTimeEnd != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lastUpdateTimeEnd", lastUpdateTimeEnd));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getEventsReportValidateBeforeCall(String tenantId, String domainId, OffsetDateTime lastUpdateTimeStart, OffsetDateTime lastUpdateTimeEnd, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tenantId' is set
        if (tenantId == null) {
            throw new ApiException("Missing the required parameter 'tenantId' when calling getEventsReport(Async)");
        }

        // verify the required parameter 'domainId' is set
        if (domainId == null) {
            throw new ApiException("Missing the required parameter 'domainId' when calling getEventsReport(Async)");
        }

        return getEventsReportCall(tenantId, domainId, lastUpdateTimeStart, lastUpdateTimeEnd, _callback);

    }

    /**
     * 
     * 
     * @param tenantId  (required)
     * @param domainId  (required)
     * @param lastUpdateTimeStart  (optional)
     * @param lastUpdateTimeEnd  (optional)
     * @return DataResponseLong
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public DataResponseLong getEventsReport(String tenantId, String domainId, OffsetDateTime lastUpdateTimeStart, OffsetDateTime lastUpdateTimeEnd) throws ApiException {
        ApiResponse<DataResponseLong> localVarResp = getEventsReportWithHttpInfo(tenantId, domainId, lastUpdateTimeStart, lastUpdateTimeEnd);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param tenantId  (required)
     * @param domainId  (required)
     * @param lastUpdateTimeStart  (optional)
     * @param lastUpdateTimeEnd  (optional)
     * @return ApiResponse&lt;DataResponseLong&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DataResponseLong> getEventsReportWithHttpInfo(String tenantId, String domainId, OffsetDateTime lastUpdateTimeStart, OffsetDateTime lastUpdateTimeEnd) throws ApiException {
        okhttp3.Call localVarCall = getEventsReportValidateBeforeCall(tenantId, domainId, lastUpdateTimeStart, lastUpdateTimeEnd, null);
        Type localVarReturnType = new TypeToken<DataResponseLong>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param tenantId  (required)
     * @param domainId  (required)
     * @param lastUpdateTimeStart  (optional)
     * @param lastUpdateTimeEnd  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getEventsReportAsync(String tenantId, String domainId, OffsetDateTime lastUpdateTimeStart, OffsetDateTime lastUpdateTimeEnd, final ApiCallback<DataResponseLong> _callback) throws ApiException {

        okhttp3.Call localVarCall = getEventsReportValidateBeforeCall(tenantId, domainId, lastUpdateTimeStart, lastUpdateTimeEnd, _callback);
        Type localVarReturnType = new TypeToken<DataResponseLong>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getProcessingStateEmaileventReport
     * @param tenantId  (required)
     * @param domainId  (required)
     * @param connectorType  (required)
     * @param processingStates  (required)
     * @param lastUpdateTimeStart  (optional)
     * @param lastUpdateTimeEnd  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProcessingStateEmaileventReportCall(String tenantId, String domainId, String connectorType, List<Integer> processingStates, OffsetDateTime lastUpdateTimeStart, OffsetDateTime lastUpdateTimeEnd, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/eventmetrics/email-event/{tenantId}/{domainId}/states"
            .replace("{" + "tenantId" + "}", localVarApiClient.escapeString(tenantId.toString()))
            .replace("{" + "domainId" + "}", localVarApiClient.escapeString(domainId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (connectorType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("connectorType", connectorType));
        }

        if (processingStates != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "processingStates", processingStates));
        }

        if (lastUpdateTimeStart != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lastUpdateTimeStart", lastUpdateTimeStart));
        }

        if (lastUpdateTimeEnd != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lastUpdateTimeEnd", lastUpdateTimeEnd));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getProcessingStateEmaileventReportValidateBeforeCall(String tenantId, String domainId, String connectorType, List<Integer> processingStates, OffsetDateTime lastUpdateTimeStart, OffsetDateTime lastUpdateTimeEnd, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tenantId' is set
        if (tenantId == null) {
            throw new ApiException("Missing the required parameter 'tenantId' when calling getProcessingStateEmaileventReport(Async)");
        }

        // verify the required parameter 'domainId' is set
        if (domainId == null) {
            throw new ApiException("Missing the required parameter 'domainId' when calling getProcessingStateEmaileventReport(Async)");
        }

        // verify the required parameter 'connectorType' is set
        if (connectorType == null) {
            throw new ApiException("Missing the required parameter 'connectorType' when calling getProcessingStateEmaileventReport(Async)");
        }

        // verify the required parameter 'processingStates' is set
        if (processingStates == null) {
            throw new ApiException("Missing the required parameter 'processingStates' when calling getProcessingStateEmaileventReport(Async)");
        }

        return getProcessingStateEmaileventReportCall(tenantId, domainId, connectorType, processingStates, lastUpdateTimeStart, lastUpdateTimeEnd, _callback);

    }

    /**
     * 
     * 
     * @param tenantId  (required)
     * @param domainId  (required)
     * @param connectorType  (required)
     * @param processingStates  (required)
     * @param lastUpdateTimeStart  (optional)
     * @param lastUpdateTimeEnd  (optional)
     * @return DataResponseLong
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public DataResponseLong getProcessingStateEmaileventReport(String tenantId, String domainId, String connectorType, List<Integer> processingStates, OffsetDateTime lastUpdateTimeStart, OffsetDateTime lastUpdateTimeEnd) throws ApiException {
        ApiResponse<DataResponseLong> localVarResp = getProcessingStateEmaileventReportWithHttpInfo(tenantId, domainId, connectorType, processingStates, lastUpdateTimeStart, lastUpdateTimeEnd);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param tenantId  (required)
     * @param domainId  (required)
     * @param connectorType  (required)
     * @param processingStates  (required)
     * @param lastUpdateTimeStart  (optional)
     * @param lastUpdateTimeEnd  (optional)
     * @return ApiResponse&lt;DataResponseLong&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DataResponseLong> getProcessingStateEmaileventReportWithHttpInfo(String tenantId, String domainId, String connectorType, List<Integer> processingStates, OffsetDateTime lastUpdateTimeStart, OffsetDateTime lastUpdateTimeEnd) throws ApiException {
        okhttp3.Call localVarCall = getProcessingStateEmaileventReportValidateBeforeCall(tenantId, domainId, connectorType, processingStates, lastUpdateTimeStart, lastUpdateTimeEnd, null);
        Type localVarReturnType = new TypeToken<DataResponseLong>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param tenantId  (required)
     * @param domainId  (required)
     * @param connectorType  (required)
     * @param processingStates  (required)
     * @param lastUpdateTimeStart  (optional)
     * @param lastUpdateTimeEnd  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProcessingStateEmaileventReportAsync(String tenantId, String domainId, String connectorType, List<Integer> processingStates, OffsetDateTime lastUpdateTimeStart, OffsetDateTime lastUpdateTimeEnd, final ApiCallback<DataResponseLong> _callback) throws ApiException {

        okhttp3.Call localVarCall = getProcessingStateEmaileventReportValidateBeforeCall(tenantId, domainId, connectorType, processingStates, lastUpdateTimeStart, lastUpdateTimeEnd, _callback);
        Type localVarReturnType = new TypeToken<DataResponseLong>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getProcessingStatesEvents
     * @param tenantId  (required)
     * @param domainId  (required)
     * @param processingStates  (required)
     * @param lastUpdateTimeStart  (optional)
     * @param lastUpdateTimeEnd  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProcessingStatesEventsCall(String tenantId, String domainId, List<Integer> processingStates, OffsetDateTime lastUpdateTimeStart, OffsetDateTime lastUpdateTimeEnd, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/eventmetrics/docgen-event/{tenantId}/{domainId}/states"
            .replace("{" + "tenantId" + "}", localVarApiClient.escapeString(tenantId.toString()))
            .replace("{" + "domainId" + "}", localVarApiClient.escapeString(domainId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (processingStates != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "processingStates", processingStates));
        }

        if (lastUpdateTimeStart != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lastUpdateTimeStart", lastUpdateTimeStart));
        }

        if (lastUpdateTimeEnd != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lastUpdateTimeEnd", lastUpdateTimeEnd));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getProcessingStatesEventsValidateBeforeCall(String tenantId, String domainId, List<Integer> processingStates, OffsetDateTime lastUpdateTimeStart, OffsetDateTime lastUpdateTimeEnd, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tenantId' is set
        if (tenantId == null) {
            throw new ApiException("Missing the required parameter 'tenantId' when calling getProcessingStatesEvents(Async)");
        }

        // verify the required parameter 'domainId' is set
        if (domainId == null) {
            throw new ApiException("Missing the required parameter 'domainId' when calling getProcessingStatesEvents(Async)");
        }

        // verify the required parameter 'processingStates' is set
        if (processingStates == null) {
            throw new ApiException("Missing the required parameter 'processingStates' when calling getProcessingStatesEvents(Async)");
        }

        return getProcessingStatesEventsCall(tenantId, domainId, processingStates, lastUpdateTimeStart, lastUpdateTimeEnd, _callback);

    }

    /**
     * 
     * 
     * @param tenantId  (required)
     * @param domainId  (required)
     * @param processingStates  (required)
     * @param lastUpdateTimeStart  (optional)
     * @param lastUpdateTimeEnd  (optional)
     * @return DataResponseListEvents
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public DataResponseListEvents getProcessingStatesEvents(String tenantId, String domainId, List<Integer> processingStates, OffsetDateTime lastUpdateTimeStart, OffsetDateTime lastUpdateTimeEnd) throws ApiException {
        ApiResponse<DataResponseListEvents> localVarResp = getProcessingStatesEventsWithHttpInfo(tenantId, domainId, processingStates, lastUpdateTimeStart, lastUpdateTimeEnd);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param tenantId  (required)
     * @param domainId  (required)
     * @param processingStates  (required)
     * @param lastUpdateTimeStart  (optional)
     * @param lastUpdateTimeEnd  (optional)
     * @return ApiResponse&lt;DataResponseListEvents&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DataResponseListEvents> getProcessingStatesEventsWithHttpInfo(String tenantId, String domainId, List<Integer> processingStates, OffsetDateTime lastUpdateTimeStart, OffsetDateTime lastUpdateTimeEnd) throws ApiException {
        okhttp3.Call localVarCall = getProcessingStatesEventsValidateBeforeCall(tenantId, domainId, processingStates, lastUpdateTimeStart, lastUpdateTimeEnd, null);
        Type localVarReturnType = new TypeToken<DataResponseListEvents>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param tenantId  (required)
     * @param domainId  (required)
     * @param processingStates  (required)
     * @param lastUpdateTimeStart  (optional)
     * @param lastUpdateTimeEnd  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProcessingStatesEventsAsync(String tenantId, String domainId, List<Integer> processingStates, OffsetDateTime lastUpdateTimeStart, OffsetDateTime lastUpdateTimeEnd, final ApiCallback<DataResponseListEvents> _callback) throws ApiException {

        okhttp3.Call localVarCall = getProcessingStatesEventsValidateBeforeCall(tenantId, domainId, processingStates, lastUpdateTimeStart, lastUpdateTimeEnd, _callback);
        Type localVarReturnType = new TypeToken<DataResponseListEvents>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
