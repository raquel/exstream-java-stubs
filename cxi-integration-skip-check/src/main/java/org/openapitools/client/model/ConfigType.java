/*
 * Exstream CXI Integration
 * **For internal use of the product only**
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ConfigType
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-17T13:55:59.778122580Z[Europe/Lisbon]")
public class ConfigType {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_CONFIG_NAME = "configName";
  @SerializedName(SERIALIZED_NAME_CONFIG_NAME)
  private String configName;

  public static final String SERIALIZED_NAME_AUTO_CONFIG = "autoConfig";
  @SerializedName(SERIALIZED_NAME_AUTO_CONFIG)
  private Boolean autoConfig;

  public static final String SERIALIZED_NAME_CREATEDBY = "createdby";
  @SerializedName(SERIALIZED_NAME_CREATEDBY)
  private String createdby;

  public static final String SERIALIZED_NAME_CREATIONTIME = "creationtime";
  @SerializedName(SERIALIZED_NAME_CREATIONTIME)
  private OffsetDateTime creationtime;

  public static final String SERIALIZED_NAME_LASTUPDATEDBY = "lastupdatedby";
  @SerializedName(SERIALIZED_NAME_LASTUPDATEDBY)
  private String lastupdatedby;

  public static final String SERIALIZED_NAME_LASTUPDATEDTIME = "lastupdatedtime";
  @SerializedName(SERIALIZED_NAME_LASTUPDATEDTIME)
  private OffsetDateTime lastupdatedtime;

  public ConfigType() {
  }

  public ConfigType id(Integer id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nullable
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public ConfigType configName(String configName) {
    this.configName = configName;
    return this;
  }

   /**
   * Get configName
   * @return configName
  **/
  @javax.annotation.Nullable
  public String getConfigName() {
    return configName;
  }

  public void setConfigName(String configName) {
    this.configName = configName;
  }


  public ConfigType autoConfig(Boolean autoConfig) {
    this.autoConfig = autoConfig;
    return this;
  }

   /**
   * Get autoConfig
   * @return autoConfig
  **/
  @javax.annotation.Nullable
  public Boolean getAutoConfig() {
    return autoConfig;
  }

  public void setAutoConfig(Boolean autoConfig) {
    this.autoConfig = autoConfig;
  }


  public ConfigType createdby(String createdby) {
    this.createdby = createdby;
    return this;
  }

   /**
   * Get createdby
   * @return createdby
  **/
  @javax.annotation.Nullable
  public String getCreatedby() {
    return createdby;
  }

  public void setCreatedby(String createdby) {
    this.createdby = createdby;
  }


  public ConfigType creationtime(OffsetDateTime creationtime) {
    this.creationtime = creationtime;
    return this;
  }

   /**
   * Get creationtime
   * @return creationtime
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getCreationtime() {
    return creationtime;
  }

  public void setCreationtime(OffsetDateTime creationtime) {
    this.creationtime = creationtime;
  }


  public ConfigType lastupdatedby(String lastupdatedby) {
    this.lastupdatedby = lastupdatedby;
    return this;
  }

   /**
   * Get lastupdatedby
   * @return lastupdatedby
  **/
  @javax.annotation.Nullable
  public String getLastupdatedby() {
    return lastupdatedby;
  }

  public void setLastupdatedby(String lastupdatedby) {
    this.lastupdatedby = lastupdatedby;
  }


  public ConfigType lastupdatedtime(OffsetDateTime lastupdatedtime) {
    this.lastupdatedtime = lastupdatedtime;
    return this;
  }

   /**
   * Get lastupdatedtime
   * @return lastupdatedtime
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getLastupdatedtime() {
    return lastupdatedtime;
  }

  public void setLastupdatedtime(OffsetDateTime lastupdatedtime) {
    this.lastupdatedtime = lastupdatedtime;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConfigType configType = (ConfigType) o;
    return Objects.equals(this.id, configType.id) &&
        Objects.equals(this.configName, configType.configName) &&
        Objects.equals(this.autoConfig, configType.autoConfig) &&
        Objects.equals(this.createdby, configType.createdby) &&
        Objects.equals(this.creationtime, configType.creationtime) &&
        Objects.equals(this.lastupdatedby, configType.lastupdatedby) &&
        Objects.equals(this.lastupdatedtime, configType.lastupdatedtime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, configName, autoConfig, createdby, creationtime, lastupdatedby, lastupdatedtime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConfigType {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    configName: ").append(toIndentedString(configName)).append("\n");
    sb.append("    autoConfig: ").append(toIndentedString(autoConfig)).append("\n");
    sb.append("    createdby: ").append(toIndentedString(createdby)).append("\n");
    sb.append("    creationtime: ").append(toIndentedString(creationtime)).append("\n");
    sb.append("    lastupdatedby: ").append(toIndentedString(lastupdatedby)).append("\n");
    sb.append("    lastupdatedtime: ").append(toIndentedString(lastupdatedtime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("configName");
    openapiFields.add("autoConfig");
    openapiFields.add("createdby");
    openapiFields.add("creationtime");
    openapiFields.add("lastupdatedby");
    openapiFields.add("lastupdatedtime");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ConfigType
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ConfigType.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ConfigType is not found in the empty JSON string", ConfigType.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ConfigType.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ConfigType` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("configName") != null && !jsonObj.get("configName").isJsonNull()) && !jsonObj.get("configName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `configName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("configName").toString()));
      }
      if ((jsonObj.get("createdby") != null && !jsonObj.get("createdby").isJsonNull()) && !jsonObj.get("createdby").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createdby` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createdby").toString()));
      }
      if ((jsonObj.get("lastupdatedby") != null && !jsonObj.get("lastupdatedby").isJsonNull()) && !jsonObj.get("lastupdatedby").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastupdatedby` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastupdatedby").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ConfigType.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ConfigType' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ConfigType> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ConfigType.class));

       return (TypeAdapter<T>) new TypeAdapter<ConfigType>() {
           @Override
           public void write(JsonWriter out, ConfigType value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ConfigType read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ConfigType given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ConfigType
  * @throws IOException if the JSON string is invalid with respect to ConfigType
  */
  public static ConfigType fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ConfigType.class);
  }

 /**
  * Convert an instance of ConfigType to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

