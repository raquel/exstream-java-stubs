/*
 * Exstream CXI Integration
 * **For internal use of the product only**
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Events
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-17T13:55:59.778122580Z[Europe/Lisbon]")
public class Events {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Long id;

  public static final String SERIALIZED_NAME_EVENT_TYPE = "eventType";
  @SerializedName(SERIALIZED_NAME_EVENT_TYPE)
  private Integer eventType;

  public static final String SERIALIZED_NAME_DOMAIN_ID = "domainId";
  @SerializedName(SERIALIZED_NAME_DOMAIN_ID)
  private String domainId;

  public static final String SERIALIZED_NAME_CUSTOM_METADATA_ID = "customMetadataId";
  @SerializedName(SERIALIZED_NAME_CUSTOM_METADATA_ID)
  private String customMetadataId;

  public static final String SERIALIZED_NAME_EVENT_TIME = "eventTime";
  @SerializedName(SERIALIZED_NAME_EVENT_TIME)
  private OffsetDateTime eventTime;

  public static final String SERIALIZED_NAME_LAST_UPDATE_TIME = "lastUpdateTime";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATE_TIME)
  private OffsetDateTime lastUpdateTime;

  public static final String SERIALIZED_NAME_PROCESSING_STATE = "processingState";
  @SerializedName(SERIALIZED_NAME_PROCESSING_STATE)
  private Integer processingState;

  public static final String SERIALIZED_NAME_EVENT_METADATA = "eventMetadata";
  @SerializedName(SERIALIZED_NAME_EVENT_METADATA)
  private String eventMetadata;

  public static final String SERIALIZED_NAME_CUSTOM_METADATA = "customMetadata";
  @SerializedName(SERIALIZED_NAME_CUSTOM_METADATA)
  private String customMetadata;

  public Events() {
  }

  public Events id(Long id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nullable
  public Long getId() {
    return id;
  }

  public void setId(Long id) {
    this.id = id;
  }


  public Events eventType(Integer eventType) {
    this.eventType = eventType;
    return this;
  }

   /**
   * Get eventType
   * @return eventType
  **/
  @javax.annotation.Nullable
  public Integer getEventType() {
    return eventType;
  }

  public void setEventType(Integer eventType) {
    this.eventType = eventType;
  }


  public Events domainId(String domainId) {
    this.domainId = domainId;
    return this;
  }

   /**
   * Get domainId
   * @return domainId
  **/
  @javax.annotation.Nullable
  public String getDomainId() {
    return domainId;
  }

  public void setDomainId(String domainId) {
    this.domainId = domainId;
  }


  public Events customMetadataId(String customMetadataId) {
    this.customMetadataId = customMetadataId;
    return this;
  }

   /**
   * Get customMetadataId
   * @return customMetadataId
  **/
  @javax.annotation.Nullable
  public String getCustomMetadataId() {
    return customMetadataId;
  }

  public void setCustomMetadataId(String customMetadataId) {
    this.customMetadataId = customMetadataId;
  }


  public Events eventTime(OffsetDateTime eventTime) {
    this.eventTime = eventTime;
    return this;
  }

   /**
   * Get eventTime
   * @return eventTime
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getEventTime() {
    return eventTime;
  }

  public void setEventTime(OffsetDateTime eventTime) {
    this.eventTime = eventTime;
  }


  public Events lastUpdateTime(OffsetDateTime lastUpdateTime) {
    this.lastUpdateTime = lastUpdateTime;
    return this;
  }

   /**
   * Get lastUpdateTime
   * @return lastUpdateTime
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getLastUpdateTime() {
    return lastUpdateTime;
  }

  public void setLastUpdateTime(OffsetDateTime lastUpdateTime) {
    this.lastUpdateTime = lastUpdateTime;
  }


  public Events processingState(Integer processingState) {
    this.processingState = processingState;
    return this;
  }

   /**
   * Get processingState
   * @return processingState
  **/
  @javax.annotation.Nullable
  public Integer getProcessingState() {
    return processingState;
  }

  public void setProcessingState(Integer processingState) {
    this.processingState = processingState;
  }


  public Events eventMetadata(String eventMetadata) {
    this.eventMetadata = eventMetadata;
    return this;
  }

   /**
   * Get eventMetadata
   * @return eventMetadata
  **/
  @javax.annotation.Nullable
  public String getEventMetadata() {
    return eventMetadata;
  }

  public void setEventMetadata(String eventMetadata) {
    this.eventMetadata = eventMetadata;
  }


  public Events customMetadata(String customMetadata) {
    this.customMetadata = customMetadata;
    return this;
  }

   /**
   * Get customMetadata
   * @return customMetadata
  **/
  @javax.annotation.Nullable
  public String getCustomMetadata() {
    return customMetadata;
  }

  public void setCustomMetadata(String customMetadata) {
    this.customMetadata = customMetadata;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Events events = (Events) o;
    return Objects.equals(this.id, events.id) &&
        Objects.equals(this.eventType, events.eventType) &&
        Objects.equals(this.domainId, events.domainId) &&
        Objects.equals(this.customMetadataId, events.customMetadataId) &&
        Objects.equals(this.eventTime, events.eventTime) &&
        Objects.equals(this.lastUpdateTime, events.lastUpdateTime) &&
        Objects.equals(this.processingState, events.processingState) &&
        Objects.equals(this.eventMetadata, events.eventMetadata) &&
        Objects.equals(this.customMetadata, events.customMetadata);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, eventType, domainId, customMetadataId, eventTime, lastUpdateTime, processingState, eventMetadata, customMetadata);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Events {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    eventType: ").append(toIndentedString(eventType)).append("\n");
    sb.append("    domainId: ").append(toIndentedString(domainId)).append("\n");
    sb.append("    customMetadataId: ").append(toIndentedString(customMetadataId)).append("\n");
    sb.append("    eventTime: ").append(toIndentedString(eventTime)).append("\n");
    sb.append("    lastUpdateTime: ").append(toIndentedString(lastUpdateTime)).append("\n");
    sb.append("    processingState: ").append(toIndentedString(processingState)).append("\n");
    sb.append("    eventMetadata: ").append(toIndentedString(eventMetadata)).append("\n");
    sb.append("    customMetadata: ").append(toIndentedString(customMetadata)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("eventType");
    openapiFields.add("domainId");
    openapiFields.add("customMetadataId");
    openapiFields.add("eventTime");
    openapiFields.add("lastUpdateTime");
    openapiFields.add("processingState");
    openapiFields.add("eventMetadata");
    openapiFields.add("customMetadata");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to Events
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Events.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Events is not found in the empty JSON string", Events.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Events.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Events` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("domainId") != null && !jsonObj.get("domainId").isJsonNull()) && !jsonObj.get("domainId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `domainId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("domainId").toString()));
      }
      if ((jsonObj.get("customMetadataId") != null && !jsonObj.get("customMetadataId").isJsonNull()) && !jsonObj.get("customMetadataId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `customMetadataId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("customMetadataId").toString()));
      }
      if ((jsonObj.get("eventMetadata") != null && !jsonObj.get("eventMetadata").isJsonNull()) && !jsonObj.get("eventMetadata").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `eventMetadata` to be a primitive type in the JSON string but got `%s`", jsonObj.get("eventMetadata").toString()));
      }
      if ((jsonObj.get("customMetadata") != null && !jsonObj.get("customMetadata").isJsonNull()) && !jsonObj.get("customMetadata").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `customMetadata` to be a primitive type in the JSON string but got `%s`", jsonObj.get("customMetadata").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Events.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Events' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Events> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Events.class));

       return (TypeAdapter<T>) new TypeAdapter<Events>() {
           @Override
           public void write(JsonWriter out, Events value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Events read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Events given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Events
  * @throws IOException if the JSON string is invalid with respect to Events
  */
  public static Events fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Events.class);
  }

 /**
  * Convert an instance of Events to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

