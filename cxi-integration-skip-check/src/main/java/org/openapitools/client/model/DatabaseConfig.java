/*
 * Exstream CXI Integration
 * **For internal use of the product only**
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DatabaseConfig
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-17T13:55:59.778122580Z[Europe/Lisbon]")
public class DatabaseConfig {
  public static final String SERIALIZED_NAME_DB_VENDOR = "dbVendor";
  @SerializedName(SERIALIZED_NAME_DB_VENDOR)
  private String dbVendor;

  public static final String SERIALIZED_NAME_DB_NAME = "dbName";
  @SerializedName(SERIALIZED_NAME_DB_NAME)
  private String dbName;

  public static final String SERIALIZED_NAME_DB_SCHEMA = "dbSchema";
  @SerializedName(SERIALIZED_NAME_DB_SCHEMA)
  private String dbSchema;

  public static final String SERIALIZED_NAME_DB_USER_NAME = "dbUserName";
  @SerializedName(SERIALIZED_NAME_DB_USER_NAME)
  private String dbUserName;

  public static final String SERIALIZED_NAME_DB_PASSWORD = "dbPassword";
  @SerializedName(SERIALIZED_NAME_DB_PASSWORD)
  private String dbPassword;

  public static final String SERIALIZED_NAME_CONNECTION_URL = "connectionUrl";
  @SerializedName(SERIALIZED_NAME_CONNECTION_URL)
  private String connectionUrl;

  public DatabaseConfig() {
  }

  public DatabaseConfig dbVendor(String dbVendor) {
    this.dbVendor = dbVendor;
    return this;
  }

   /**
   * Get dbVendor
   * @return dbVendor
  **/
  @javax.annotation.Nullable
  public String getDbVendor() {
    return dbVendor;
  }

  public void setDbVendor(String dbVendor) {
    this.dbVendor = dbVendor;
  }


  public DatabaseConfig dbName(String dbName) {
    this.dbName = dbName;
    return this;
  }

   /**
   * Get dbName
   * @return dbName
  **/
  @javax.annotation.Nullable
  public String getDbName() {
    return dbName;
  }

  public void setDbName(String dbName) {
    this.dbName = dbName;
  }


  public DatabaseConfig dbSchema(String dbSchema) {
    this.dbSchema = dbSchema;
    return this;
  }

   /**
   * Get dbSchema
   * @return dbSchema
  **/
  @javax.annotation.Nullable
  public String getDbSchema() {
    return dbSchema;
  }

  public void setDbSchema(String dbSchema) {
    this.dbSchema = dbSchema;
  }


  public DatabaseConfig dbUserName(String dbUserName) {
    this.dbUserName = dbUserName;
    return this;
  }

   /**
   * Get dbUserName
   * @return dbUserName
  **/
  @javax.annotation.Nullable
  public String getDbUserName() {
    return dbUserName;
  }

  public void setDbUserName(String dbUserName) {
    this.dbUserName = dbUserName;
  }


  public DatabaseConfig dbPassword(String dbPassword) {
    this.dbPassword = dbPassword;
    return this;
  }

   /**
   * Get dbPassword
   * @return dbPassword
  **/
  @javax.annotation.Nullable
  public String getDbPassword() {
    return dbPassword;
  }

  public void setDbPassword(String dbPassword) {
    this.dbPassword = dbPassword;
  }


  public DatabaseConfig connectionUrl(String connectionUrl) {
    this.connectionUrl = connectionUrl;
    return this;
  }

   /**
   * Get connectionUrl
   * @return connectionUrl
  **/
  @javax.annotation.Nullable
  public String getConnectionUrl() {
    return connectionUrl;
  }

  public void setConnectionUrl(String connectionUrl) {
    this.connectionUrl = connectionUrl;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DatabaseConfig databaseConfig = (DatabaseConfig) o;
    return Objects.equals(this.dbVendor, databaseConfig.dbVendor) &&
        Objects.equals(this.dbName, databaseConfig.dbName) &&
        Objects.equals(this.dbSchema, databaseConfig.dbSchema) &&
        Objects.equals(this.dbUserName, databaseConfig.dbUserName) &&
        Objects.equals(this.dbPassword, databaseConfig.dbPassword) &&
        Objects.equals(this.connectionUrl, databaseConfig.connectionUrl);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dbVendor, dbName, dbSchema, dbUserName, dbPassword, connectionUrl);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DatabaseConfig {\n");
    sb.append("    dbVendor: ").append(toIndentedString(dbVendor)).append("\n");
    sb.append("    dbName: ").append(toIndentedString(dbName)).append("\n");
    sb.append("    dbSchema: ").append(toIndentedString(dbSchema)).append("\n");
    sb.append("    dbUserName: ").append(toIndentedString(dbUserName)).append("\n");
    sb.append("    dbPassword: ").append(toIndentedString(dbPassword)).append("\n");
    sb.append("    connectionUrl: ").append(toIndentedString(connectionUrl)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("dbVendor");
    openapiFields.add("dbName");
    openapiFields.add("dbSchema");
    openapiFields.add("dbUserName");
    openapiFields.add("dbPassword");
    openapiFields.add("connectionUrl");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to DatabaseConfig
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DatabaseConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DatabaseConfig is not found in the empty JSON string", DatabaseConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DatabaseConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DatabaseConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("dbVendor") != null && !jsonObj.get("dbVendor").isJsonNull()) && !jsonObj.get("dbVendor").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dbVendor` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dbVendor").toString()));
      }
      if ((jsonObj.get("dbName") != null && !jsonObj.get("dbName").isJsonNull()) && !jsonObj.get("dbName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dbName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dbName").toString()));
      }
      if ((jsonObj.get("dbSchema") != null && !jsonObj.get("dbSchema").isJsonNull()) && !jsonObj.get("dbSchema").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dbSchema` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dbSchema").toString()));
      }
      if ((jsonObj.get("dbUserName") != null && !jsonObj.get("dbUserName").isJsonNull()) && !jsonObj.get("dbUserName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dbUserName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dbUserName").toString()));
      }
      if ((jsonObj.get("dbPassword") != null && !jsonObj.get("dbPassword").isJsonNull()) && !jsonObj.get("dbPassword").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dbPassword` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dbPassword").toString()));
      }
      if ((jsonObj.get("connectionUrl") != null && !jsonObj.get("connectionUrl").isJsonNull()) && !jsonObj.get("connectionUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `connectionUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("connectionUrl").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DatabaseConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DatabaseConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DatabaseConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DatabaseConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<DatabaseConfig>() {
           @Override
           public void write(JsonWriter out, DatabaseConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DatabaseConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of DatabaseConfig given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of DatabaseConfig
  * @throws IOException if the JSON string is invalid with respect to DatabaseConfig
  */
  public static DatabaseConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DatabaseConfig.class);
  }

 /**
  * Convert an instance of DatabaseConfig to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

