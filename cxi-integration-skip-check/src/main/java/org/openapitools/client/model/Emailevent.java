/*
 * Exstream CXI Integration
 * **For internal use of the product only**
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Emailevent
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-17T13:55:59.778122580Z[Europe/Lisbon]")
public class Emailevent {
  public static final String SERIALIZED_NAME_EVENT_ID = "eventId";
  @SerializedName(SERIALIZED_NAME_EVENT_ID)
  private Long eventId;

  public static final String SERIALIZED_NAME_CONNECTOR_TYPE = "connectorType";
  @SerializedName(SERIALIZED_NAME_CONNECTOR_TYPE)
  private String connectorType;

  public static final String SERIALIZED_NAME_CUST_METADATA_ID = "custMetadataId";
  @SerializedName(SERIALIZED_NAME_CUST_METADATA_ID)
  private String custMetadataId;

  public static final String SERIALIZED_NAME_DOMAIN_ID = "domainId";
  @SerializedName(SERIALIZED_NAME_DOMAIN_ID)
  private String domainId;

  public static final String SERIALIZED_NAME_EVENT_DATE = "eventDate";
  @SerializedName(SERIALIZED_NAME_EVENT_DATE)
  private OffsetDateTime eventDate;

  public static final String SERIALIZED_NAME_EVENT_TYPE = "eventType";
  @SerializedName(SERIALIZED_NAME_EVENT_TYPE)
  private String eventType;

  public static final String SERIALIZED_NAME_JOB_ID = "jobId";
  @SerializedName(SERIALIZED_NAME_JOB_ID)
  private String jobId;

  public static final String SERIALIZED_NAME_LAST_UPDATE_TIME = "lastUpdateTime";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATE_TIME)
  private OffsetDateTime lastUpdateTime;

  public static final String SERIALIZED_NAME_PROCESSING_STATE = "processingState";
  @SerializedName(SERIALIZED_NAME_PROCESSING_STATE)
  private Integer processingState;

  public static final String SERIALIZED_NAME_TENANT_ID = "tenantId";
  @SerializedName(SERIALIZED_NAME_TENANT_ID)
  private String tenantId;

  public static final String SERIALIZED_NAME_TRACKER_ID = "trackerId";
  @SerializedName(SERIALIZED_NAME_TRACKER_ID)
  private String trackerId;

  public static final String SERIALIZED_NAME_EVENT_REF = "eventRef";
  @SerializedName(SERIALIZED_NAME_EVENT_REF)
  private String eventRef;

  public static final String SERIALIZED_NAME_EVENT_STATUS = "eventStatus";
  @SerializedName(SERIALIZED_NAME_EVENT_STATUS)
  private String eventStatus;

  public Emailevent() {
  }

  public Emailevent eventId(Long eventId) {
    this.eventId = eventId;
    return this;
  }

   /**
   * Get eventId
   * @return eventId
  **/
  @javax.annotation.Nullable
  public Long getEventId() {
    return eventId;
  }

  public void setEventId(Long eventId) {
    this.eventId = eventId;
  }


  public Emailevent connectorType(String connectorType) {
    this.connectorType = connectorType;
    return this;
  }

   /**
   * Get connectorType
   * @return connectorType
  **/
  @javax.annotation.Nullable
  public String getConnectorType() {
    return connectorType;
  }

  public void setConnectorType(String connectorType) {
    this.connectorType = connectorType;
  }


  public Emailevent custMetadataId(String custMetadataId) {
    this.custMetadataId = custMetadataId;
    return this;
  }

   /**
   * Get custMetadataId
   * @return custMetadataId
  **/
  @javax.annotation.Nullable
  public String getCustMetadataId() {
    return custMetadataId;
  }

  public void setCustMetadataId(String custMetadataId) {
    this.custMetadataId = custMetadataId;
  }


  public Emailevent domainId(String domainId) {
    this.domainId = domainId;
    return this;
  }

   /**
   * Get domainId
   * @return domainId
  **/
  @javax.annotation.Nullable
  public String getDomainId() {
    return domainId;
  }

  public void setDomainId(String domainId) {
    this.domainId = domainId;
  }


  public Emailevent eventDate(OffsetDateTime eventDate) {
    this.eventDate = eventDate;
    return this;
  }

   /**
   * Get eventDate
   * @return eventDate
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getEventDate() {
    return eventDate;
  }

  public void setEventDate(OffsetDateTime eventDate) {
    this.eventDate = eventDate;
  }


  public Emailevent eventType(String eventType) {
    this.eventType = eventType;
    return this;
  }

   /**
   * Get eventType
   * @return eventType
  **/
  @javax.annotation.Nullable
  public String getEventType() {
    return eventType;
  }

  public void setEventType(String eventType) {
    this.eventType = eventType;
  }


  public Emailevent jobId(String jobId) {
    this.jobId = jobId;
    return this;
  }

   /**
   * Get jobId
   * @return jobId
  **/
  @javax.annotation.Nullable
  public String getJobId() {
    return jobId;
  }

  public void setJobId(String jobId) {
    this.jobId = jobId;
  }


  public Emailevent lastUpdateTime(OffsetDateTime lastUpdateTime) {
    this.lastUpdateTime = lastUpdateTime;
    return this;
  }

   /**
   * Get lastUpdateTime
   * @return lastUpdateTime
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getLastUpdateTime() {
    return lastUpdateTime;
  }

  public void setLastUpdateTime(OffsetDateTime lastUpdateTime) {
    this.lastUpdateTime = lastUpdateTime;
  }


  public Emailevent processingState(Integer processingState) {
    this.processingState = processingState;
    return this;
  }

   /**
   * Get processingState
   * @return processingState
  **/
  @javax.annotation.Nullable
  public Integer getProcessingState() {
    return processingState;
  }

  public void setProcessingState(Integer processingState) {
    this.processingState = processingState;
  }


  public Emailevent tenantId(String tenantId) {
    this.tenantId = tenantId;
    return this;
  }

   /**
   * Get tenantId
   * @return tenantId
  **/
  @javax.annotation.Nullable
  public String getTenantId() {
    return tenantId;
  }

  public void setTenantId(String tenantId) {
    this.tenantId = tenantId;
  }


  public Emailevent trackerId(String trackerId) {
    this.trackerId = trackerId;
    return this;
  }

   /**
   * Get trackerId
   * @return trackerId
  **/
  @javax.annotation.Nullable
  public String getTrackerId() {
    return trackerId;
  }

  public void setTrackerId(String trackerId) {
    this.trackerId = trackerId;
  }


  public Emailevent eventRef(String eventRef) {
    this.eventRef = eventRef;
    return this;
  }

   /**
   * Get eventRef
   * @return eventRef
  **/
  @javax.annotation.Nullable
  public String getEventRef() {
    return eventRef;
  }

  public void setEventRef(String eventRef) {
    this.eventRef = eventRef;
  }


  public Emailevent eventStatus(String eventStatus) {
    this.eventStatus = eventStatus;
    return this;
  }

   /**
   * Get eventStatus
   * @return eventStatus
  **/
  @javax.annotation.Nullable
  public String getEventStatus() {
    return eventStatus;
  }

  public void setEventStatus(String eventStatus) {
    this.eventStatus = eventStatus;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Emailevent emailevent = (Emailevent) o;
    return Objects.equals(this.eventId, emailevent.eventId) &&
        Objects.equals(this.connectorType, emailevent.connectorType) &&
        Objects.equals(this.custMetadataId, emailevent.custMetadataId) &&
        Objects.equals(this.domainId, emailevent.domainId) &&
        Objects.equals(this.eventDate, emailevent.eventDate) &&
        Objects.equals(this.eventType, emailevent.eventType) &&
        Objects.equals(this.jobId, emailevent.jobId) &&
        Objects.equals(this.lastUpdateTime, emailevent.lastUpdateTime) &&
        Objects.equals(this.processingState, emailevent.processingState) &&
        Objects.equals(this.tenantId, emailevent.tenantId) &&
        Objects.equals(this.trackerId, emailevent.trackerId) &&
        Objects.equals(this.eventRef, emailevent.eventRef) &&
        Objects.equals(this.eventStatus, emailevent.eventStatus);
  }

  @Override
  public int hashCode() {
    return Objects.hash(eventId, connectorType, custMetadataId, domainId, eventDate, eventType, jobId, lastUpdateTime, processingState, tenantId, trackerId, eventRef, eventStatus);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Emailevent {\n");
    sb.append("    eventId: ").append(toIndentedString(eventId)).append("\n");
    sb.append("    connectorType: ").append(toIndentedString(connectorType)).append("\n");
    sb.append("    custMetadataId: ").append(toIndentedString(custMetadataId)).append("\n");
    sb.append("    domainId: ").append(toIndentedString(domainId)).append("\n");
    sb.append("    eventDate: ").append(toIndentedString(eventDate)).append("\n");
    sb.append("    eventType: ").append(toIndentedString(eventType)).append("\n");
    sb.append("    jobId: ").append(toIndentedString(jobId)).append("\n");
    sb.append("    lastUpdateTime: ").append(toIndentedString(lastUpdateTime)).append("\n");
    sb.append("    processingState: ").append(toIndentedString(processingState)).append("\n");
    sb.append("    tenantId: ").append(toIndentedString(tenantId)).append("\n");
    sb.append("    trackerId: ").append(toIndentedString(trackerId)).append("\n");
    sb.append("    eventRef: ").append(toIndentedString(eventRef)).append("\n");
    sb.append("    eventStatus: ").append(toIndentedString(eventStatus)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("eventId");
    openapiFields.add("connectorType");
    openapiFields.add("custMetadataId");
    openapiFields.add("domainId");
    openapiFields.add("eventDate");
    openapiFields.add("eventType");
    openapiFields.add("jobId");
    openapiFields.add("lastUpdateTime");
    openapiFields.add("processingState");
    openapiFields.add("tenantId");
    openapiFields.add("trackerId");
    openapiFields.add("eventRef");
    openapiFields.add("eventStatus");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to Emailevent
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Emailevent.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Emailevent is not found in the empty JSON string", Emailevent.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Emailevent.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Emailevent` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("connectorType") != null && !jsonObj.get("connectorType").isJsonNull()) && !jsonObj.get("connectorType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `connectorType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("connectorType").toString()));
      }
      if ((jsonObj.get("custMetadataId") != null && !jsonObj.get("custMetadataId").isJsonNull()) && !jsonObj.get("custMetadataId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `custMetadataId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("custMetadataId").toString()));
      }
      if ((jsonObj.get("domainId") != null && !jsonObj.get("domainId").isJsonNull()) && !jsonObj.get("domainId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `domainId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("domainId").toString()));
      }
      if ((jsonObj.get("eventType") != null && !jsonObj.get("eventType").isJsonNull()) && !jsonObj.get("eventType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `eventType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("eventType").toString()));
      }
      if ((jsonObj.get("jobId") != null && !jsonObj.get("jobId").isJsonNull()) && !jsonObj.get("jobId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `jobId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("jobId").toString()));
      }
      if ((jsonObj.get("tenantId") != null && !jsonObj.get("tenantId").isJsonNull()) && !jsonObj.get("tenantId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tenantId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tenantId").toString()));
      }
      if ((jsonObj.get("trackerId") != null && !jsonObj.get("trackerId").isJsonNull()) && !jsonObj.get("trackerId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `trackerId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("trackerId").toString()));
      }
      if ((jsonObj.get("eventRef") != null && !jsonObj.get("eventRef").isJsonNull()) && !jsonObj.get("eventRef").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `eventRef` to be a primitive type in the JSON string but got `%s`", jsonObj.get("eventRef").toString()));
      }
      if ((jsonObj.get("eventStatus") != null && !jsonObj.get("eventStatus").isJsonNull()) && !jsonObj.get("eventStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `eventStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("eventStatus").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Emailevent.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Emailevent' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Emailevent> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Emailevent.class));

       return (TypeAdapter<T>) new TypeAdapter<Emailevent>() {
           @Override
           public void write(JsonWriter out, Emailevent value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Emailevent read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Emailevent given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Emailevent
  * @throws IOException if the JSON string is invalid with respect to Emailevent
  */
  public static Emailevent fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Emailevent.class);
  }

 /**
  * Convert an instance of Emailevent to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

