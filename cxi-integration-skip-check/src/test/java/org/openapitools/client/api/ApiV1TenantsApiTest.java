/*
 * Exstream CXI Integration
 * **For internal use of the product only**
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.CreateTenantBody;
import org.openapitools.client.model.DataResponseTenant;
import org.openapitools.client.model.DataResponseTenantsConfiguration;
import org.openapitools.client.model.ListResponseTenant;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ApiV1TenantsApi
 */
@Disabled
public class ApiV1TenantsApiTest {

    private final ApiV1TenantsApi api = new ApiV1TenantsApi();

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createTenantSchemaTest() throws ApiException {
        String tenantId = null;
        DataResponseTenant response = api.createTenantSchema(tenantId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createTenantWithExistingSchemaTest() throws ApiException {
        CreateTenantBody createTenantBody = null;
        DataResponseTenant response = api.createTenantWithExistingSchema(createTenantBody);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTenantTest() throws ApiException {
        String tenantId = null;
        DataResponseTenant response = api.getTenant(tenantId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTenantConfigurationTest() throws ApiException {
        DataResponseTenantsConfiguration response = api.getTenantConfiguration();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTenantsTest() throws ApiException {
        ListResponseTenant response = api.getTenants();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateTenantTest() throws ApiException {
        CreateTenantBody createTenantBody = null;
        DataResponseTenant response = api.updateTenant(createTenantBody);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateTenantSchemaTest() throws ApiException {
        String tenantId = null;
        DataResponseTenant response = api.updateTenantSchema(tenantId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateTenantSchemasTest() throws ApiException {
        ListResponseTenant response = api.updateTenantSchemas();
        // TODO: test validations
    }

}
