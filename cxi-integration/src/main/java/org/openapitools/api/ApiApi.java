/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.2.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.ConfigFormat;
import org.openapitools.model.CreateTenantBody;
import org.openapitools.model.DataResponseBoolean;
import org.openapitools.model.DataResponseExternalConfiguration;
import org.openapitools.model.DataResponseListEmailevent;
import org.openapitools.model.DataResponseListEvents;
import org.openapitools.model.DataResponseLong;
import org.openapitools.model.DataResponseTenant;
import org.openapitools.model.DataResponseTenantsConfiguration;
import org.springframework.format.annotation.DateTimeFormat;
import org.openapitools.model.ExternalConfiguration;
import org.openapitools.model.GenericResponse;
import org.openapitools.model.ListResponseEditableConfig;
import org.openapitools.model.ListResponseTenant;
import java.util.Map;
import java.time.OffsetDateTime;
import org.openapitools.model.PageResponseMessage;
import org.openapitools.model.ProcessState;
import org.openapitools.model.SecretInfo;
import java.util.UUID;
import org.openapitools.model.VersionConfig;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-03-18T18:04:14.260450399Z[Europe/Lisbon]")
@Validated
@Tag(name = "/api/v1/tenants", description = "Tenant Admin Controller")
public interface ApiApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /api/v1/tenants/{tenantId}
     *
     * @param tenantId  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "createTenantSchema",
        tags = { "/api/v1/tenants" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = DataResponseTenant.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v1/tenants/{tenantId}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<DataResponseTenant> createTenantSchema(
        @Size(min = 1, max = 40) @Parameter(name = "tenantId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("tenantId") String tenantId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : { \"schema\" : { \"schemaMissingFromDatabase\" : true, \"schemaId\" : \"schemaId\", \"latestSchemaChangeLogEntry\" : { \"liquiBaseVersion\" : \"liquiBaseVersion\", \"orderExecuted\" : 0, \"id\" : \"id\", \"dateExecuted\" : \"2000-01-23T04:56:07.000+00:00\" } }, \"tenantId\" : \"tenantId\" }, \"status\" : \"status\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/v1/tenants/addTenant
     *
     * @param createTenantBody  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "createTenantWithExistingSchema",
        tags = { "/api/v1/tenants" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = DataResponseTenant.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v1/tenants/addTenant",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<DataResponseTenant> createTenantWithExistingSchema(
        @Parameter(name = "CreateTenantBody", description = "", required = true) @Valid @RequestBody CreateTenantBody createTenantBody
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : { \"schema\" : { \"schemaMissingFromDatabase\" : true, \"schemaId\" : \"schemaId\", \"latestSchemaChangeLogEntry\" : { \"liquiBaseVersion\" : \"liquiBaseVersion\", \"orderExecuted\" : 0, \"id\" : \"id\", \"dateExecuted\" : \"2000-01-23T04:56:07.000+00:00\" } }, \"tenantId\" : \"tenantId\" }, \"status\" : \"status\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /api/v1/config/{tenantId}/{domainId}/{configName}
     *
     * @param tenantId  (required)
     * @param domainId  (required)
     * @param configName  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "deleteConfig",
        tags = { "/api/v1/config" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = GenericResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/api/v1/config/{tenantId}/{domainId}/{configName}",
        produces = { "*/*" }
    )
    
    default ResponseEntity<GenericResponse> deleteConfig(
        @Parameter(name = "tenantId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("tenantId") String tenantId,
        @Parameter(name = "domainId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("domainId") String domainId,
        @Parameter(name = "configName", description = "", required = true, in = ParameterIn.PATH) @PathVariable("configName") String configName
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("*/*"))) {
                    String exampleString = "{ \"status\" : \"status\" }";
                    ApiUtil.setExampleResponse(request, "*/*", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v1/version/api
     *
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "getApiVersion",
        tags = { "version-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = String.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/version/api",
        produces = { "application/json" }
    )
    
    default ResponseEntity<String> getApiVersion(
        
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v1/config/{tenantId}/{domainId}/{configName}
     *
     * @param tenantId  (required)
     * @param domainId  (required)
     * @param configName  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "getConfig",
        tags = { "/api/v1/config" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = ExternalConfiguration.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/config/{tenantId}/{domainId}/{configName}",
        produces = { "*/*" }
    )
    
    default ResponseEntity<ExternalConfiguration> getConfig(
        @Parameter(name = "tenantId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("tenantId") String tenantId,
        @Parameter(name = "domainId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("domainId") String domainId,
        @Parameter(name = "configName", description = "", required = true, in = ParameterIn.PATH) @PathVariable("configName") String configName
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("*/*"))) {
                    String exampleString = "{ \"processingState\" : 0, \"auditEnable\" : true, \"configDetails\" : \"{}\", \"tenantId\" : \"tenantId\", \"id\" : \"id\", \"isActive\" : true, \"configType\" : \"configType\", \"domainId\" : \"domainId\", \"lastProcessDate\" : \"2000-01-23T04:56:07.000+00:00\" }";
                    ApiUtil.setExampleResponse(request, "*/*", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v1/internal/{eventType}
     *
     * @param eventType  (required)
     * @param offset For pagination, fetch entities after this many (optional)
     * @param count For pagination, the number of entities per page (optional)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "getConfigs",
        tags = { "/api/v1/internal" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = PageResponseMessage.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/internal/{eventType}",
        produces = { "*/*" }
    )
    
    default ResponseEntity<PageResponseMessage> getConfigs(
        @Parameter(name = "eventType", description = "", required = true, in = ParameterIn.PATH) @PathVariable("eventType") String eventType,
        @Parameter(name = "offset", description = "For pagination, fetch entities after this many", in = ParameterIn.QUERY) @Valid @RequestParam(value = "offset", required = false) Integer offset,
        @Parameter(name = "count", description = "For pagination, the number of entities per page", in = ParameterIn.QUERY) @Valid @RequestParam(value = "count", required = false) Integer count
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("*/*"))) {
                    String exampleString = "{ \"data\" : [ { \"environment\" : { \"tenantId\" : \"tenantId\", \"domainId\" : \"domainId\" }, \"database\" : { \"dbSchema\" : \"dbSchema\", \"dbName\" : \"dbName\", \"connectionUrl\" : \"connectionUrl\", \"dbUserName\" : \"dbUserName\", \"dbVendor\" : \"dbVendor\", \"dbPassword\" : \"dbPassword\" }, \"configuration\" : { \"details\" : \"{}\", \"configType\" : \"covisint\" }, \"auditLogId\" : 0 }, { \"environment\" : { \"tenantId\" : \"tenantId\", \"domainId\" : \"domainId\" }, \"database\" : { \"dbSchema\" : \"dbSchema\", \"dbName\" : \"dbName\", \"connectionUrl\" : \"connectionUrl\", \"dbUserName\" : \"dbUserName\", \"dbVendor\" : \"dbVendor\", \"dbPassword\" : \"dbPassword\" }, \"configuration\" : { \"details\" : \"{}\", \"configType\" : \"covisint\" }, \"auditLogId\" : 0 } ], \"page\" : { \"pageOffset\" : 1, \"totalPages\" : 5, \"currentPageNumber\" : 2, \"pageSize\" : 6, \"totalElements\" : 5 }, \"status\" : \"status\" }";
                    ApiUtil.setExampleResponse(request, "*/*", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v1/configTypes/{tenantId}/{domainId}
     *
     * @param tenantId  (required)
     * @param domainId  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "getConfigurationTypes",
        tags = { "/api/v1/configTypes" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = ListResponseEditableConfig.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/configTypes/{tenantId}/{domainId}",
        produces = { "*/*" }
    )
    
    default ResponseEntity<ListResponseEditableConfig> getConfigurationTypes(
        @Parameter(name = "tenantId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("tenantId") String tenantId,
        @Parameter(name = "domainId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("domainId") String domainId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("*/*"))) {
                    String exampleString = "{ \"data\" : [ { \"configType\" : { \"configName\" : \"configName\", \"createdby\" : \"createdby\", \"lastupdatedby\" : \"lastupdatedby\", \"autoConfig\" : true, \"id\" : 0, \"creationtime\" : \"2000-01-23T04:56:07.000+00:00\", \"lastupdatedtime\" : \"2000-01-23T04:56:07.000+00:00\" }, \"enabled\" : true }, { \"configType\" : { \"configName\" : \"configName\", \"createdby\" : \"createdby\", \"lastupdatedby\" : \"lastupdatedby\", \"autoConfig\" : true, \"id\" : 0, \"creationtime\" : \"2000-01-23T04:56:07.000+00:00\", \"lastupdatedtime\" : \"2000-01-23T04:56:07.000+00:00\" }, \"enabled\" : true } ], \"status\" : \"status\" }";
                    ApiUtil.setExampleResponse(request, "*/*", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v1/eventmetrics/docgen-event/{tenantId}/{domainId}/{flowStepId}/metadata
     *
     * @param tenantId  (required)
     * @param domainId  (required)
     * @param flowStepId  (required)
     * @param communicationId  (optional)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "getCustomMetadataEvents",
        tags = { "/api/v1/eventmetrics" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = DataResponseListEvents.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/eventmetrics/docgen-event/{tenantId}/{domainId}/{flowStepId}/metadata",
        produces = { "*/*" }
    )
    
    default ResponseEntity<DataResponseListEvents> getCustomMetadataEvents(
        @Parameter(name = "tenantId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("tenantId") String tenantId,
        @Parameter(name = "domainId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("domainId") String domainId,
        @Parameter(name = "flowStepId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("flowStepId") String flowStepId,
        @Parameter(name = "communicationId", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "communicationId", required = false) String communicationId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("*/*"))) {
                    String exampleString = "{ \"data\" : [ { \"processingState\" : 1, \"eventTime\" : \"2000-01-23T04:56:07.000+00:00\", \"customMetadata\" : \"customMetadata\", \"id\" : 0, \"eventType\" : 6, \"domainId\" : \"domainId\", \"customMetadataId\" : \"customMetadataId\", \"eventMetadata\" : \"eventMetadata\", \"lastUpdateTime\" : \"2000-01-23T04:56:07.000+00:00\" }, { \"processingState\" : 1, \"eventTime\" : \"2000-01-23T04:56:07.000+00:00\", \"customMetadata\" : \"customMetadata\", \"id\" : 0, \"eventType\" : 6, \"domainId\" : \"domainId\", \"customMetadataId\" : \"customMetadataId\", \"eventMetadata\" : \"eventMetadata\", \"lastUpdateTime\" : \"2000-01-23T04:56:07.000+00:00\" } ], \"status\" : \"status\" }";
                    ApiUtil.setExampleResponse(request, "*/*", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v1/eventmetrics/docgen-event/{tenantId}/{domainId}
     *
     * @param tenantId  (required)
     * @param domainId  (required)
     * @param processingState  (optional)
     * @param lastUpdateTimeStart  (optional)
     * @param lastUpdateTimeEnd  (optional)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "getDocgenReport",
        tags = { "/api/v1/eventmetrics" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = DataResponseLong.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/eventmetrics/docgen-event/{tenantId}/{domainId}",
        produces = { "*/*" }
    )
    
    default ResponseEntity<DataResponseLong> getDocgenReport(
        @Parameter(name = "tenantId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("tenantId") String tenantId,
        @Parameter(name = "domainId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("domainId") String domainId,
        @Parameter(name = "processingState", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "processingState", required = false) Integer processingState,
        @Parameter(name = "lastUpdateTimeStart", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "lastUpdateTimeStart", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime lastUpdateTimeStart,
        @Parameter(name = "lastUpdateTimeEnd", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "lastUpdateTimeEnd", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime lastUpdateTimeEnd
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("*/*"))) {
                    String exampleString = "{ \"data\" : 0, \"status\" : \"status\" }";
                    ApiUtil.setExampleResponse(request, "*/*", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v1/eventmetrics/email-event/{tenantId}/{domainId}/content
     *
     * @param tenantId  (required)
     * @param domainId  (required)
     * @param connectorType  (required)
     * @param lastUpdateTimeStart  (optional)
     * @param lastUpdateTimeEnd  (optional)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "getEmailEvents",
        tags = { "/api/v1/eventmetrics" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = DataResponseListEmailevent.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/eventmetrics/email-event/{tenantId}/{domainId}/content",
        produces = { "*/*" }
    )
    
    default ResponseEntity<DataResponseListEmailevent> getEmailEvents(
        @Parameter(name = "tenantId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("tenantId") String tenantId,
        @Parameter(name = "domainId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("domainId") String domainId,
        @NotNull @Parameter(name = "connectorType", description = "", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "connectorType", required = true) String connectorType,
        @Parameter(name = "lastUpdateTimeStart", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "lastUpdateTimeStart", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime lastUpdateTimeStart,
        @Parameter(name = "lastUpdateTimeEnd", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "lastUpdateTimeEnd", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime lastUpdateTimeEnd
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("*/*"))) {
                    String exampleString = "{ \"data\" : [ { \"eventId\" : 0, \"connectorType\" : \"connectorType\", \"eventRef\" : \"eventRef\", \"eventType\" : \"eventType\", \"domainId\" : \"domainId\", \"jobId\" : \"jobId\", \"processingState\" : 6, \"trackerId\" : \"trackerId\", \"eventStatus\" : \"eventStatus\", \"tenantId\" : \"tenantId\", \"custMetadataId\" : \"custMetadataId\", \"eventDate\" : \"2000-01-23T04:56:07.000+00:00\", \"lastUpdateTime\" : \"2000-01-23T04:56:07.000+00:00\" }, { \"eventId\" : 0, \"connectorType\" : \"connectorType\", \"eventRef\" : \"eventRef\", \"eventType\" : \"eventType\", \"domainId\" : \"domainId\", \"jobId\" : \"jobId\", \"processingState\" : 6, \"trackerId\" : \"trackerId\", \"eventStatus\" : \"eventStatus\", \"tenantId\" : \"tenantId\", \"custMetadataId\" : \"custMetadataId\", \"eventDate\" : \"2000-01-23T04:56:07.000+00:00\", \"lastUpdateTime\" : \"2000-01-23T04:56:07.000+00:00\" } ], \"status\" : \"status\" }";
                    ApiUtil.setExampleResponse(request, "*/*", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v1/eventmetrics/email-event/{tenantId}/{domainId}
     *
     * @param tenantId  (required)
     * @param domainId  (required)
     * @param connectorType  (required)
     * @param processingState  (optional)
     * @param lastUpdateTimeStart  (optional)
     * @param lastUpdateTimeEnd  (optional)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "getEmaileventReport",
        tags = { "/api/v1/eventmetrics" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = DataResponseLong.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/eventmetrics/email-event/{tenantId}/{domainId}",
        produces = { "*/*" }
    )
    
    default ResponseEntity<DataResponseLong> getEmaileventReport(
        @Parameter(name = "tenantId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("tenantId") String tenantId,
        @Parameter(name = "domainId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("domainId") String domainId,
        @NotNull @Parameter(name = "connectorType", description = "", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "connectorType", required = true) String connectorType,
        @Parameter(name = "processingState", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "processingState", required = false) Integer processingState,
        @Parameter(name = "lastUpdateTimeStart", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "lastUpdateTimeStart", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime lastUpdateTimeStart,
        @Parameter(name = "lastUpdateTimeEnd", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "lastUpdateTimeEnd", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime lastUpdateTimeEnd
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("*/*"))) {
                    String exampleString = "{ \"data\" : 0, \"status\" : \"status\" }";
                    ApiUtil.setExampleResponse(request, "*/*", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v1/eventmetrics/events/{tenantId}/{domainId}/content
     *
     * @param tenantId  (required)
     * @param domainId  (required)
     * @param eventType  (optional)
     * @param lastUpdateTimeStart  (optional)
     * @param lastUpdateTimeEnd  (optional)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "getEvents",
        tags = { "/api/v1/eventmetrics" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = DataResponseListEvents.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/eventmetrics/events/{tenantId}/{domainId}/content",
        produces = { "*/*" }
    )
    
    default ResponseEntity<DataResponseListEvents> getEvents(
        @Parameter(name = "tenantId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("tenantId") String tenantId,
        @Parameter(name = "domainId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("domainId") String domainId,
        @Parameter(name = "eventType", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "eventType", required = false) Integer eventType,
        @Parameter(name = "lastUpdateTimeStart", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "lastUpdateTimeStart", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime lastUpdateTimeStart,
        @Parameter(name = "lastUpdateTimeEnd", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "lastUpdateTimeEnd", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime lastUpdateTimeEnd
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("*/*"))) {
                    String exampleString = "{ \"data\" : [ { \"processingState\" : 1, \"eventTime\" : \"2000-01-23T04:56:07.000+00:00\", \"customMetadata\" : \"customMetadata\", \"id\" : 0, \"eventType\" : 6, \"domainId\" : \"domainId\", \"customMetadataId\" : \"customMetadataId\", \"eventMetadata\" : \"eventMetadata\", \"lastUpdateTime\" : \"2000-01-23T04:56:07.000+00:00\" }, { \"processingState\" : 1, \"eventTime\" : \"2000-01-23T04:56:07.000+00:00\", \"customMetadata\" : \"customMetadata\", \"id\" : 0, \"eventType\" : 6, \"domainId\" : \"domainId\", \"customMetadataId\" : \"customMetadataId\", \"eventMetadata\" : \"eventMetadata\", \"lastUpdateTime\" : \"2000-01-23T04:56:07.000+00:00\" } ], \"status\" : \"status\" }";
                    ApiUtil.setExampleResponse(request, "*/*", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v1/eventmetrics/events/{tenantId}/{domainId}
     *
     * @param tenantId  (required)
     * @param domainId  (required)
     * @param lastUpdateTimeStart  (optional)
     * @param lastUpdateTimeEnd  (optional)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "getEventsReport",
        tags = { "/api/v1/eventmetrics" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = DataResponseLong.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/eventmetrics/events/{tenantId}/{domainId}",
        produces = { "*/*" }
    )
    
    default ResponseEntity<DataResponseLong> getEventsReport(
        @Parameter(name = "tenantId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("tenantId") String tenantId,
        @Parameter(name = "domainId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("domainId") String domainId,
        @Parameter(name = "lastUpdateTimeStart", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "lastUpdateTimeStart", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime lastUpdateTimeStart,
        @Parameter(name = "lastUpdateTimeEnd", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "lastUpdateTimeEnd", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime lastUpdateTimeEnd
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("*/*"))) {
                    String exampleString = "{ \"data\" : 0, \"status\" : \"status\" }";
                    ApiUtil.setExampleResponse(request, "*/*", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v1/eventmetrics/email-event/{tenantId}/{domainId}/states
     *
     * @param tenantId  (required)
     * @param domainId  (required)
     * @param connectorType  (required)
     * @param processingStates  (required)
     * @param lastUpdateTimeStart  (optional)
     * @param lastUpdateTimeEnd  (optional)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "getProcessingStateEmaileventReport",
        tags = { "/api/v1/eventmetrics" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = DataResponseLong.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/eventmetrics/email-event/{tenantId}/{domainId}/states",
        produces = { "*/*" }
    )
    
    default ResponseEntity<DataResponseLong> getProcessingStateEmaileventReport(
        @Parameter(name = "tenantId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("tenantId") String tenantId,
        @Parameter(name = "domainId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("domainId") String domainId,
        @NotNull @Parameter(name = "connectorType", description = "", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "connectorType", required = true) String connectorType,
        @NotNull @Parameter(name = "processingStates", description = "", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "processingStates", required = true) List<Integer> processingStates,
        @Parameter(name = "lastUpdateTimeStart", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "lastUpdateTimeStart", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime lastUpdateTimeStart,
        @Parameter(name = "lastUpdateTimeEnd", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "lastUpdateTimeEnd", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime lastUpdateTimeEnd
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("*/*"))) {
                    String exampleString = "{ \"data\" : 0, \"status\" : \"status\" }";
                    ApiUtil.setExampleResponse(request, "*/*", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v1/eventmetrics/docgen-event/{tenantId}/{domainId}/states
     *
     * @param tenantId  (required)
     * @param domainId  (required)
     * @param processingStates  (required)
     * @param lastUpdateTimeStart  (optional)
     * @param lastUpdateTimeEnd  (optional)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "getProcessingStatesEvents",
        tags = { "/api/v1/eventmetrics" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = DataResponseListEvents.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/eventmetrics/docgen-event/{tenantId}/{domainId}/states",
        produces = { "*/*" }
    )
    
    default ResponseEntity<DataResponseListEvents> getProcessingStatesEvents(
        @Parameter(name = "tenantId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("tenantId") String tenantId,
        @Parameter(name = "domainId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("domainId") String domainId,
        @NotNull @Parameter(name = "processingStates", description = "", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "processingStates", required = true) List<Integer> processingStates,
        @Parameter(name = "lastUpdateTimeStart", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "lastUpdateTimeStart", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime lastUpdateTimeStart,
        @Parameter(name = "lastUpdateTimeEnd", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "lastUpdateTimeEnd", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime lastUpdateTimeEnd
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("*/*"))) {
                    String exampleString = "{ \"data\" : [ { \"processingState\" : 1, \"eventTime\" : \"2000-01-23T04:56:07.000+00:00\", \"customMetadata\" : \"customMetadata\", \"id\" : 0, \"eventType\" : 6, \"domainId\" : \"domainId\", \"customMetadataId\" : \"customMetadataId\", \"eventMetadata\" : \"eventMetadata\", \"lastUpdateTime\" : \"2000-01-23T04:56:07.000+00:00\" }, { \"processingState\" : 1, \"eventTime\" : \"2000-01-23T04:56:07.000+00:00\", \"customMetadata\" : \"customMetadata\", \"id\" : 0, \"eventType\" : 6, \"domainId\" : \"domainId\", \"customMetadataId\" : \"customMetadataId\", \"eventMetadata\" : \"eventMetadata\", \"lastUpdateTime\" : \"2000-01-23T04:56:07.000+00:00\" } ], \"status\" : \"status\" }";
                    ApiUtil.setExampleResponse(request, "*/*", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v1/tenants/{tenantId}
     *
     * @param tenantId  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "getTenant",
        tags = { "/api/v1/tenants" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = DataResponseTenant.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/tenants/{tenantId}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<DataResponseTenant> getTenant(
        @Parameter(name = "tenantId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("tenantId") String tenantId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : { \"schema\" : { \"schemaMissingFromDatabase\" : true, \"schemaId\" : \"schemaId\", \"latestSchemaChangeLogEntry\" : { \"liquiBaseVersion\" : \"liquiBaseVersion\", \"orderExecuted\" : 0, \"id\" : \"id\", \"dateExecuted\" : \"2000-01-23T04:56:07.000+00:00\" } }, \"tenantId\" : \"tenantId\" }, \"status\" : \"status\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v1/tenants/configuration
     *
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "getTenantConfiguration",
        tags = { "/api/v1/tenants" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = DataResponseTenantsConfiguration.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/tenants/configuration",
        produces = { "application/json" }
    )
    
    default ResponseEntity<DataResponseTenantsConfiguration> getTenantConfiguration(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : { \"autoSchemaManagement\" : true }, \"status\" : \"status\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v1/tenants
     *
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "getTenants",
        tags = { "/api/v1/tenants" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ListResponseTenant.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/tenants",
        produces = { "application/json" }
    )
    
    default ResponseEntity<ListResponseTenant> getTenants(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : [ { \"schema\" : { \"schemaMissingFromDatabase\" : true, \"schemaId\" : \"schemaId\", \"latestSchemaChangeLogEntry\" : { \"liquiBaseVersion\" : \"liquiBaseVersion\", \"orderExecuted\" : 0, \"id\" : \"id\", \"dateExecuted\" : \"2000-01-23T04:56:07.000+00:00\" } }, \"tenantId\" : \"tenantId\" }, { \"schema\" : { \"schemaMissingFromDatabase\" : true, \"schemaId\" : \"schemaId\", \"latestSchemaChangeLogEntry\" : { \"liquiBaseVersion\" : \"liquiBaseVersion\", \"orderExecuted\" : 0, \"id\" : \"id\", \"dateExecuted\" : \"2000-01-23T04:56:07.000+00:00\" } }, \"tenantId\" : \"tenantId\" } ], \"status\" : \"status\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v1/version
     *
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "getVersion",
        tags = { "version-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = VersionConfig.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/version",
        produces = { "application/json" }
    )
    
    default ResponseEntity<VersionConfig> getVersion(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"patch\" : \"patch\", \"major\" : \"major\", \"minor\" : \"minor\", \"versionString\" : \"versionString\", \"apiIdentifier\" : \"apiIdentifier\", \"details\" : { \"git\" : { \"commits\" : \"commits\", \"tag\" : \"tag\", \"branch\" : \"branch\", \"hash\" : \"hash\" }, \"appName\" : \"appName\", \"buildNumber\" : \"buildNumber\", \"timestamp\" : \"timestamp\" }, \"clientVersion\" : \"clientVersion\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/v1/secrets/migrateVault : Migrate secrets to vault.
     *
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "migrateVault",
        summary = "Migrate secrets to vault.",
        tags = { "secrets-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = Boolean.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v1/secrets/migrateVault",
        produces = { "*/*" }
    )
    
    default ResponseEntity<Boolean> migrateVault(
        
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/v1/secrets/{domain}/rollover
     *
     * @param oldKeyId  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "rolloverKeys",
        tags = { "secret-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = Integer.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v1/secrets/{domain}/rollover",
        produces = { "*/*" }
    )
    
    default ResponseEntity<Integer> rolloverKeys(
        @NotNull @Parameter(name = "oldKeyId", description = "", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "oldKeyId", required = true) String oldKeyId
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v1/secrets/{domain}/{secretId}/exists
     *
     * @param domain  (required)
     * @param secretId  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "secretExists",
        tags = { "secret-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = String.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/secrets/{domain}/{secretId}/exists",
        produces = { "*/*" }
    )
    
    default ResponseEntity<String> secretExists(
        @Parameter(name = "domain", description = "", required = true, in = ParameterIn.PATH) @PathVariable("domain") String domain,
        @Parameter(name = "secretId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("secretId") UUID secretId
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /api/v1/secrets/{domain}/{secretId}
     *
     * @param domain  (required)
     * @param secretId  (required)
     * @param secretInfo  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "setSecret",
        tags = { "secret-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = String.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/api/v1/secrets/{domain}/{secretId}",
        produces = { "*/*" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<String> setSecret(
        @Parameter(name = "domain", description = "", required = true, in = ParameterIn.PATH) @PathVariable("domain") String domain,
        @Parameter(name = "secretId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("secretId") UUID secretId,
        @Parameter(name = "SecretInfo", description = "", required = true) @Valid @RequestBody SecretInfo secretInfo
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /api/v1/config/{tenantId}/{domainId}
     *
     * @param tenantId  (required)
     * @param domainId  (required)
     * @param configFormat  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "updateConfig",
        tags = { "/api/v1/config" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = DataResponseExternalConfiguration.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/api/v1/config/{tenantId}/{domainId}",
        produces = { "*/*" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<DataResponseExternalConfiguration> updateConfig(
        @Parameter(name = "tenantId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("tenantId") String tenantId,
        @Parameter(name = "domainId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("domainId") String domainId,
        @Parameter(name = "ConfigFormat", description = "", required = true) @Valid @RequestBody ConfigFormat configFormat
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("*/*"))) {
                    String exampleString = "{ \"data\" : { \"processingState\" : 0, \"auditEnable\" : true, \"configDetails\" : \"{}\", \"tenantId\" : \"tenantId\", \"id\" : \"id\", \"isActive\" : true, \"configType\" : \"configType\", \"domainId\" : \"domainId\", \"lastProcessDate\" : \"2000-01-23T04:56:07.000+00:00\" }, \"status\" : \"status\" }";
                    ApiUtil.setExampleResponse(request, "*/*", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /api/v1/internal/{tenantId}/{domainId}/state
     *
     * @param tenantId  (required)
     * @param domainId  (required)
     * @param processState  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "updateProcessingState",
        tags = { "/api/v1/internal" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = DataResponseExternalConfiguration.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/api/v1/internal/{tenantId}/{domainId}/state",
        produces = { "*/*" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<DataResponseExternalConfiguration> updateProcessingState(
        @Parameter(name = "tenantId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("tenantId") String tenantId,
        @Parameter(name = "domainId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("domainId") String domainId,
        @Parameter(name = "ProcessState", description = "", required = true) @Valid @RequestBody ProcessState processState
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("*/*"))) {
                    String exampleString = "{ \"data\" : { \"processingState\" : 0, \"auditEnable\" : true, \"configDetails\" : \"{}\", \"tenantId\" : \"tenantId\", \"id\" : \"id\", \"isActive\" : true, \"configType\" : \"configType\", \"domainId\" : \"domainId\", \"lastProcessDate\" : \"2000-01-23T04:56:07.000+00:00\" }, \"status\" : \"status\" }";
                    ApiUtil.setExampleResponse(request, "*/*", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /api/v1/tenants/updateTenant
     *
     * @param createTenantBody  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "updateTenant",
        tags = { "/api/v1/tenants" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = DataResponseTenant.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/api/v1/tenants/updateTenant",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<DataResponseTenant> updateTenant(
        @Parameter(name = "CreateTenantBody", description = "", required = true) @Valid @RequestBody CreateTenantBody createTenantBody
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : { \"schema\" : { \"schemaMissingFromDatabase\" : true, \"schemaId\" : \"schemaId\", \"latestSchemaChangeLogEntry\" : { \"liquiBaseVersion\" : \"liquiBaseVersion\", \"orderExecuted\" : 0, \"id\" : \"id\", \"dateExecuted\" : \"2000-01-23T04:56:07.000+00:00\" } }, \"tenantId\" : \"tenantId\" }, \"status\" : \"status\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /api/v1/tenants/{tenantId}/schema
     *
     * @param tenantId  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "updateTenantSchema",
        tags = { "/api/v1/tenants" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = DataResponseTenant.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/api/v1/tenants/{tenantId}/schema",
        produces = { "application/json" }
    )
    
    default ResponseEntity<DataResponseTenant> updateTenantSchema(
        @Parameter(name = "tenantId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("tenantId") String tenantId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : { \"schema\" : { \"schemaMissingFromDatabase\" : true, \"schemaId\" : \"schemaId\", \"latestSchemaChangeLogEntry\" : { \"liquiBaseVersion\" : \"liquiBaseVersion\", \"orderExecuted\" : 0, \"id\" : \"id\", \"dateExecuted\" : \"2000-01-23T04:56:07.000+00:00\" } }, \"tenantId\" : \"tenantId\" }, \"status\" : \"status\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /api/v1/tenants/all/schema
     *
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "updateTenantSchemas",
        tags = { "/api/v1/tenants" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ListResponseTenant.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/api/v1/tenants/all/schema",
        produces = { "application/json" }
    )
    
    default ResponseEntity<ListResponseTenant> updateTenantSchemas(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : [ { \"schema\" : { \"schemaMissingFromDatabase\" : true, \"schemaId\" : \"schemaId\", \"latestSchemaChangeLogEntry\" : { \"liquiBaseVersion\" : \"liquiBaseVersion\", \"orderExecuted\" : 0, \"id\" : \"id\", \"dateExecuted\" : \"2000-01-23T04:56:07.000+00:00\" } }, \"tenantId\" : \"tenantId\" }, { \"schema\" : { \"schemaMissingFromDatabase\" : true, \"schemaId\" : \"schemaId\", \"latestSchemaChangeLogEntry\" : { \"liquiBaseVersion\" : \"liquiBaseVersion\", \"orderExecuted\" : 0, \"id\" : \"id\", \"dateExecuted\" : \"2000-01-23T04:56:07.000+00:00\" } }, \"tenantId\" : \"tenantId\" } ], \"status\" : \"status\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /api/v1/config/validate-covisint/{tenantId}/{domainId}
     *
     * @param tenantId  (required)
     * @param domainId  (required)
     * @param requestBody  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "validateCovisintConfig",
        tags = { "/api/v1/config" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = DataResponseBoolean.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/api/v1/config/validate-covisint/{tenantId}/{domainId}",
        produces = { "*/*" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<DataResponseBoolean> validateCovisintConfig(
        @Parameter(name = "tenantId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("tenantId") String tenantId,
        @Parameter(name = "domainId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("domainId") String domainId,
        @Parameter(name = "request_body", description = "", required = true) @Valid @RequestBody Map<String, String> requestBody
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("*/*"))) {
                    String exampleString = "{ \"data\" : true, \"status\" : \"status\" }";
                    ApiUtil.setExampleResponse(request, "*/*", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
